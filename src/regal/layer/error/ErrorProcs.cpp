/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_ERROR

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalBreak.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

void InitDispatchError( Dispatch::GL & tbl );

void Err::Init( RegalContext * ctx ) {
  next = ctx->dispatchGL;
  InitDispatchError( ctx->dispatchGL );
}

// GL_VERSION_1_0

static void REGAL_CALL error_glAccum(RegalContext *_context, GLenum op, GLfloat value)
{
  Internal("error_glAccum","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAccum(_context, op, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAccum : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glAlphaFunc(RegalContext *_context, GLenum func, GLclampf ref)
{
  Internal("error_glAlphaFunc","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAlphaFunc(_context, func, ref);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAlphaFunc : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBegin(RegalContext *_context, GLenum mode)
{
  Internal("error_glBegin","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.inBeginEnd = true;
_context->err.next.glBegin(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBegin : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBitmap(RegalContext *_context, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  Internal("error_glBitmap","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBitmap(_context, width, height, xorig, yorig, xmove, ymove, bitmap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBitmap : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFunc(RegalContext *_context, GLenum sfactor, GLenum dfactor)
{
  Internal("error_glBlendFunc","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFunc(_context, sfactor, dfactor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFunc : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCallList(RegalContext *_context, GLuint list)
{
  Internal("error_glCallList","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCallList(_context, list);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCallList : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCallLists(RegalContext *_context, GLsizei n, GLenum type, const GLvoid *lists)
{
  Internal("error_glCallLists","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCallLists(_context, n, type, lists);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCallLists : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClear(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glClear","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClear(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClear : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearAccum(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Internal("error_glClearAccum","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearAccum(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearAccum : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearColor(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("error_glClearColor","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearColor(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearColor : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearDepth(RegalContext *_context, GLclampd depth)
{
  Internal("error_glClearDepth","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearDepth(_context, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearDepth : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearIndex(RegalContext *_context, GLfloat c)
{
  Internal("error_glClearIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearIndex(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearStencil(RegalContext *_context, GLint s)
{
  Internal("error_glClearStencil","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearStencil(_context, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearStencil : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClipPlane(RegalContext *_context, GLenum plane, const GLdouble *equation)
{
  Internal("error_glClipPlane","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClipPlane(_context, plane, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClipPlane : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  Internal("error_glColor3b","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3b(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3b : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3bv(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glColor3bv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3bv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3bv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  Internal("error_glColor3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3d(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glColor3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  Internal("error_glColor3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3f(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glColor3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3i(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  Internal("error_glColor3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3i(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glColor3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  Internal("error_glColor3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3s(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glColor3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  Internal("error_glColor3ub","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3ub(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3ub : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3ubv(RegalContext *_context, const GLubyte *v)
{
  Internal("error_glColor3ubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3ubv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3ubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  Internal("error_glColor3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3ui(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3uiv(RegalContext *_context, const GLuint *v)
{
  Internal("error_glColor3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3uiv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  Internal("error_glColor3us","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3us(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3us : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3usv(RegalContext *_context, const GLushort *v)
{
  Internal("error_glColor3usv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3usv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3usv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  Internal("error_glColor4b","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4b(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4b : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4bv(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glColor4bv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4bv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4bv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  Internal("error_glColor4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4d(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glColor4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Internal("error_glColor4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4f(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glColor4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4i(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha)
{
  Internal("error_glColor4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4i(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glColor4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4s(RegalContext *_context, GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  Internal("error_glColor4s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4s(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glColor4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  Internal("error_glColor4ub","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ub(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ub : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ubv(RegalContext *_context, const GLubyte *v)
{
  Internal("error_glColor4ubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ubv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  Internal("error_glColor4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ui(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4uiv(RegalContext *_context, const GLuint *v)
{
  Internal("error_glColor4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4uiv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4us(RegalContext *_context, GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  Internal("error_glColor4us","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4us(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4us : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4usv(RegalContext *_context, const GLushort *v)
{
  Internal("error_glColor4usv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4usv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4usv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorMask(RegalContext *_context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Internal("error_glColorMask","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorMask(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorMask : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorMaterial(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("error_glColorMaterial","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorMaterial(_context, face, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorMaterial : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyPixels(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  Internal("error_glCopyPixels","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyPixels(_context, x, y, width, height, type);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyPixels : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCullFace(RegalContext *_context, GLenum mode)
{
  Internal("error_glCullFace","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCullFace(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCullFace : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteLists(RegalContext *_context, GLuint list, GLsizei range)
{
  Internal("error_glDeleteLists","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteLists(_context, list, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteLists : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthFunc(RegalContext *_context, GLenum func)
{
  Internal("error_glDepthFunc","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthFunc(_context, func);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthFunc : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthMask(RegalContext *_context, GLboolean flag)
{
  Internal("error_glDepthMask","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthMask(_context, flag);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthMask : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthRange(RegalContext *_context, GLclampd zNear, GLclampd zFar)
{
  Internal("error_glDepthRange","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRange(_context, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRange : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisable(RegalContext *_context, GLenum cap)
{
  Internal("error_glDisable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisable(_context, cap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawBuffer(RegalContext *_context, GLenum mode)
{
  Internal("error_glDrawBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBuffer(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawPixels(RegalContext *_context, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glDrawPixels","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawPixels(_context, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawPixels : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEdgeFlag(RegalContext *_context, GLboolean flag)
{
  Internal("error_glEdgeFlag","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEdgeFlag(_context, flag);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEdgeFlag : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEdgeFlagv(RegalContext *_context, const GLboolean *flag)
{
  Internal("error_glEdgeFlagv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEdgeFlagv(_context, flag);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEdgeFlagv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnable(RegalContext *_context, GLenum cap)
{
  Internal("error_glEnable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnable(_context, cap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnd(RegalContext *_context)
{
  Internal("error_glEnd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnd(_context);
_context->err.inBeginEnd = false;
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndList(RegalContext *_context)
{
  Internal("error_glEndList","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndList(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndList : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord1d(RegalContext *_context, GLdouble u)
{
  Internal("error_glEvalCoord1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord1d(_context, u);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord1dv(RegalContext *_context, const GLdouble *u)
{
  Internal("error_glEvalCoord1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord1dv(_context, u);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord1f(RegalContext *_context, GLfloat u)
{
  Internal("error_glEvalCoord1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord1f(_context, u);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord1fv(RegalContext *_context, const GLfloat *u)
{
  Internal("error_glEvalCoord1fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord1fv(_context, u);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord1fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord2d(RegalContext *_context, GLdouble u, GLdouble v)
{
  Internal("error_glEvalCoord2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord2d(_context, u, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord2dv(RegalContext *_context, const GLdouble *u)
{
  Internal("error_glEvalCoord2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord2dv(_context, u);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord2f(RegalContext *_context, GLfloat u, GLfloat v)
{
  Internal("error_glEvalCoord2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord2f(_context, u, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalCoord2fv(RegalContext *_context, const GLfloat *u)
{
  Internal("error_glEvalCoord2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalCoord2fv(_context, u);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalCoord2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalMesh1(RegalContext *_context, GLenum mode, GLint i1, GLint i2)
{
  Internal("error_glEvalMesh1","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalMesh1(_context, mode, i1, i2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalMesh1 : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalMesh2(RegalContext *_context, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  Internal("error_glEvalMesh2","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalMesh2(_context, mode, i1, i2, j1, j2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalMesh2 : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalPoint1(RegalContext *_context, GLint i)
{
  Internal("error_glEvalPoint1","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalPoint1(_context, i);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalPoint1 : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEvalPoint2(RegalContext *_context, GLint i, GLint j)
{
  Internal("error_glEvalPoint2","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalPoint2(_context, i, j);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalPoint2 : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFeedbackBuffer(RegalContext *_context, GLsizei size, GLenum type, GLfloat *buffer)
{
  Internal("error_glFeedbackBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFeedbackBuffer(_context, size, type, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFeedbackBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFinish(RegalContext *_context)
{
  Internal("error_glFinish","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinish(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinish : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFlush(RegalContext *_context)
{
  Internal("error_glFlush","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlush(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlush : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glFogf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogf(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glFogfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogfv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogi(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glFogi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogi(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogiv(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glFogiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogiv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFrontFace(RegalContext *_context, GLenum mode)
{
  Internal("error_glFrontFace","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrontFace(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrontFace : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFrustum(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("error_glFrustum","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrustum(_context, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrustum : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGenLists(RegalContext *_context, GLsizei range)
{
  Internal("error_glGenLists","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGenLists(_context, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenLists : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetBooleanv(RegalContext *_context, GLenum pname, GLboolean *params)
{
  Internal("error_glGetBooleanv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBooleanv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBooleanv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetClipPlane(RegalContext *_context, GLenum plane, GLdouble *equation)
{
  Internal("error_glGetClipPlane","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetClipPlane(_context, plane, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetClipPlane : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDoublev(RegalContext *_context, GLenum pname, GLdouble *params)
{
  Internal("error_glGetDoublev","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDoublev(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDoublev : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glGetError(RegalContext *_context)
{
  Internal("error_glGetError","()");
  RegalAssert(_context);
  GLenum error = _context->err.next.glGetError( _context );
  return error;
}

static void REGAL_CALL error_glGetFloatv(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("error_glGetFloatv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFloatv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFloatv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetIntegerv(RegalContext *_context, GLenum pname, GLint *params)
{
  Internal("error_glGetIntegerv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetIntegerv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetIntegerv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetLightfv(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params)
{
  Internal("error_glGetLightfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetLightfv(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetLightfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetLightiv(RegalContext *_context, GLenum light, GLenum pname, GLint *params)
{
  Internal("error_glGetLightiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetLightiv(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetLightiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapdv(RegalContext *_context, GLenum target, GLenum query, GLdouble *v)
{
  Internal("error_glGetMapdv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapdv(_context, target, query, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapdv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapfv(RegalContext *_context, GLenum target, GLenum query, GLfloat *v)
{
  Internal("error_glGetMapfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapfv(_context, target, query, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapiv(RegalContext *_context, GLenum target, GLenum query, GLint *v)
{
  Internal("error_glGetMapiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapiv(_context, target, query, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMaterialfv(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMaterialfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMaterialfv(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMaterialfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMaterialiv(RegalContext *_context, GLenum face, GLenum pname, GLint *params)
{
  Internal("error_glGetMaterialiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMaterialiv(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMaterialiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPixelMapfv(RegalContext *_context, GLenum map, GLfloat *values)
{
  Internal("error_glGetPixelMapfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelMapfv(_context, map, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelMapfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPixelMapuiv(RegalContext *_context, GLenum map, GLuint *values)
{
  Internal("error_glGetPixelMapuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelMapuiv(_context, map, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelMapuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPixelMapusv(RegalContext *_context, GLenum map, GLushort *values)
{
  Internal("error_glGetPixelMapusv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelMapusv(_context, map, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelMapusv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPolygonStipple(RegalContext *_context, GLubyte *mask)
{
  Internal("error_glGetPolygonStipple","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPolygonStipple(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPolygonStipple : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static const GLubyte *REGAL_CALL error_glGetString(RegalContext *_context, GLenum name)
{
  Internal("error_glGetString","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  const GLubyte * ret = _context->err.next.glGetString(_context, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetString : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTexEnvfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexEnvfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexEnvfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexEnviv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetTexEnviv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexEnviv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexEnviv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexGendv(RegalContext *_context, GLenum coord, GLenum pname, GLdouble *params)
{
  Internal("error_glGetTexGendv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexGendv(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexGendv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTexGenfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexGenfv(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexGenfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, GLint *params)
{
  Internal("error_glGetTexGeniv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexGeniv(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexGeniv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexImage(RegalContext *_context, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("error_glGetTexImage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexImage(_context, target, level, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexImage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexLevelParameterfv(RegalContext *_context, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTexLevelParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexLevelParameterfv(_context, target, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexLevelParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexLevelParameteriv(RegalContext *_context, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Internal("error_glGetTexLevelParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexLevelParameteriv(_context, target, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexLevelParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTexParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetTexParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glHint(RegalContext *_context, GLenum target, GLenum mode)
{
  Internal("error_glHint","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glHint(_context, target, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glHint : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexMask(RegalContext *_context, GLuint mask)
{
  Internal("error_glIndexMask","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexMask(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexMask : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexd(RegalContext *_context, GLdouble c)
{
  Internal("error_glIndexd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexd(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexdv(RegalContext *_context, const GLdouble *c)
{
  Internal("error_glIndexdv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexdv(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexdv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexf(RegalContext *_context, GLfloat c)
{
  Internal("error_glIndexf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexf(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexfv(RegalContext *_context, const GLfloat *c)
{
  Internal("error_glIndexfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexfv(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexi(RegalContext *_context, GLint c)
{
  Internal("error_glIndexi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexi(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexiv(RegalContext *_context, const GLint *c)
{
  Internal("error_glIndexiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexiv(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexs(RegalContext *_context, GLshort c)
{
  Internal("error_glIndexs","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexs(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexs : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexsv(RegalContext *_context, const GLshort *c)
{
  Internal("error_glIndexsv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexsv(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexsv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInitNames(RegalContext *_context)
{
  Internal("error_glInitNames","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInitNames(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInitNames : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsEnabled(RegalContext *_context, GLenum cap)
{
  Internal("error_glIsEnabled","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsEnabled(_context, cap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsEnabled : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsList(RegalContext *_context, GLuint list)
{
  Internal("error_glIsList","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsList(_context, list);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsList : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glLightModelf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glLightModelf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightModelf(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightModelf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightModelfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glLightModelfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightModelfv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightModelfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightModeli(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glLightModeli","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightModeli(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightModeli : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightModeliv(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glLightModeliv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightModeliv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightModeliv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightf(RegalContext *_context, GLenum light, GLenum pname, GLfloat param)
{
  Internal("error_glLightf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightf(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightfv(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params)
{
  Internal("error_glLightfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightfv(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLighti(RegalContext *_context, GLenum light, GLenum pname, GLint param)
{
  Internal("error_glLighti","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLighti(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLighti : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightiv(RegalContext *_context, GLenum light, GLenum pname, const GLint *params)
{
  Internal("error_glLightiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightiv(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLineStipple(RegalContext *_context, GLint factor, GLushort pattern)
{
  Internal("error_glLineStipple","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLineStipple(_context, factor, pattern);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLineStipple : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLineWidth(RegalContext *_context, GLfloat width)
{
  Internal("error_glLineWidth","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLineWidth(_context, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLineWidth : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glListBase(RegalContext *_context, GLuint base)
{
  Internal("error_glListBase","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glListBase(_context, base);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glListBase : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadIdentity(RegalContext *_context)
{
  Internal("error_glLoadIdentity","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadIdentity(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadIdentity : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("error_glLoadMatrixd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadMatrixd(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadMatrixd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("error_glLoadMatrixf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadMatrixf(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadMatrixf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadName(RegalContext *_context, GLuint name)
{
  Internal("error_glLoadName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadName(_context, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLogicOp(RegalContext *_context, GLenum opcode)
{
  Internal("error_glLogicOp","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLogicOp(_context, opcode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLogicOp : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMap1d(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  Internal("error_glMap1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMap1d(_context, target, u1, u2, stride, order, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMap1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMap1f(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  Internal("error_glMap1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMap1f(_context, target, u1, u2, stride, order, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMap1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMap2d(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  Internal("error_glMap2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMap2d(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMap2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMap2f(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  Internal("error_glMap2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMap2f(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMap2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapGrid1d(RegalContext *_context, GLint un, GLdouble u1, GLdouble u2)
{
  Internal("error_glMapGrid1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapGrid1d(_context, un, u1, u2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapGrid1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapGrid1f(RegalContext *_context, GLint un, GLfloat u1, GLfloat u2)
{
  Internal("error_glMapGrid1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapGrid1f(_context, un, u1, u2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapGrid1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapGrid2d(RegalContext *_context, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  Internal("error_glMapGrid2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapGrid2d(_context, un, u1, u2, vn, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapGrid2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapGrid2f(RegalContext *_context, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  Internal("error_glMapGrid2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapGrid2f(_context, un, u1, u2, vn, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapGrid2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMaterialf(RegalContext *_context, GLenum face, GLenum pname, GLfloat param)
{
  Internal("error_glMaterialf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMaterialf(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMaterialf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMaterialfv(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  Internal("error_glMaterialfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMaterialfv(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMaterialfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMateriali(RegalContext *_context, GLenum face, GLenum pname, GLint param)
{
  Internal("error_glMateriali","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMateriali(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMateriali : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMaterialiv(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  Internal("error_glMaterialiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMaterialiv(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMaterialiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixMode(RegalContext *_context, GLenum mode)
{
  Internal("error_glMatrixMode","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixMode(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixMode : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("error_glMultMatrixd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultMatrixd(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultMatrixd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("error_glMultMatrixf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultMatrixf(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultMatrixf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNewList(RegalContext *_context, GLuint list, GLenum mode)
{
  Internal("error_glNewList","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNewList(_context, list, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNewList : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3b(RegalContext *_context, GLbyte nx, GLbyte ny, GLbyte nz)
{
  Internal("error_glNormal3b","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3b(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3b : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3bv(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glNormal3bv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3bv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3bv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3d(RegalContext *_context, GLdouble nx, GLdouble ny, GLdouble nz)
{
  Internal("error_glNormal3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3d(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glNormal3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3f(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz)
{
  Internal("error_glNormal3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3f(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glNormal3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3i(RegalContext *_context, GLint nx, GLint ny, GLint nz)
{
  Internal("error_glNormal3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3i(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glNormal3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3s(RegalContext *_context, GLshort nx, GLshort ny, GLshort nz)
{
  Internal("error_glNormal3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3s(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glNormal3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glOrtho(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("error_glOrtho","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glOrtho(_context, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glOrtho : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPassThrough(RegalContext *_context, GLfloat token)
{
  Internal("error_glPassThrough","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPassThrough(_context, token);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPassThrough : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelMapfv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLfloat *values)
{
  Internal("error_glPixelMapfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelMapfv(_context, map, mapsize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelMapfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelMapuiv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLuint *values)
{
  Internal("error_glPixelMapuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelMapuiv(_context, map, mapsize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelMapuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelMapusv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLushort *values)
{
  Internal("error_glPixelMapusv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelMapusv(_context, map, mapsize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelMapusv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelStoref(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPixelStoref","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelStoref(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelStoref : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelStorei(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glPixelStorei","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelStorei(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelStorei : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTransferf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPixelTransferf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTransferf(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTransferf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTransferi(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glPixelTransferi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTransferi(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTransferi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelZoom(RegalContext *_context, GLfloat xfactor, GLfloat yfactor)
{
  Internal("error_glPixelZoom","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelZoom(_context, xfactor, yfactor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelZoom : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointSize(RegalContext *_context, GLfloat size)
{
  Internal("error_glPointSize","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointSize(_context, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointSize : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPolygonMode(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("error_glPolygonMode","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPolygonMode(_context, face, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPolygonMode : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPolygonStipple(RegalContext *_context, const GLubyte *mask)
{
  Internal("error_glPolygonStipple","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPolygonStipple(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPolygonStipple : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPopAttrib(RegalContext *_context)
{
  Internal("error_glPopAttrib","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPopAttrib(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPopAttrib : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPopMatrix(RegalContext *_context)
{
  Internal("error_glPopMatrix","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPopMatrix(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPopMatrix : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPopName(RegalContext *_context)
{
  Internal("error_glPopName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPopName(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPopName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushAttrib(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glPushAttrib","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushAttrib(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushAttrib : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushMatrix(RegalContext *_context)
{
  Internal("error_glPushMatrix","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushMatrix(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushMatrix : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushName(RegalContext *_context, GLuint name)
{
  Internal("error_glPushName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushName(_context, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("error_glRasterPos2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2d(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glRasterPos2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("error_glRasterPos2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2f(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glRasterPos2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2i(RegalContext *_context, GLint x, GLint y)
{
  Internal("error_glRasterPos2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2i(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glRasterPos2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2s(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("error_glRasterPos2s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2s(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos2sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glRasterPos2sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos2sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos2sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glRasterPos3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3d(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glRasterPos3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glRasterPos3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3f(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glRasterPos3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("error_glRasterPos3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3i(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glRasterPos3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glRasterPos3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3s(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos3sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glRasterPos3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos3sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glRasterPos4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4d(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glRasterPos4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glRasterPos4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4f(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glRasterPos4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glRasterPos4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4i(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glRasterPos4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glRasterPos4s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4s(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRasterPos4sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glRasterPos4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRasterPos4sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRasterPos4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReadBuffer(RegalContext *_context, GLenum mode)
{
  Internal("error_glReadBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadBuffer(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReadPixels(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("error_glReadPixels","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadPixels(_context, x, y, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadPixels : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRectd(RegalContext *_context, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  Internal("error_glRectd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRectd(_context, x1, y1, x2, y2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRectd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRectdv(RegalContext *_context, const GLdouble *v1, const GLdouble *v2)
{
  Internal("error_glRectdv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRectdv(_context, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRectdv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRectf(RegalContext *_context, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  Internal("error_glRectf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRectf(_context, x1, y1, x2, y2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRectf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRectfv(RegalContext *_context, const GLfloat *v1, const GLfloat *v2)
{
  Internal("error_glRectfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRectfv(_context, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRectfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRecti(RegalContext *_context, GLint x1, GLint y1, GLint x2, GLint y2)
{
  Internal("error_glRecti","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRecti(_context, x1, y1, x2, y2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRecti : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRectiv(RegalContext *_context, const GLint *v1, const GLint *v2)
{
  Internal("error_glRectiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRectiv(_context, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRectiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRects(RegalContext *_context, GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  Internal("error_glRects","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRects(_context, x1, y1, x2, y2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRects : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRectsv(RegalContext *_context, const GLshort *v1, const GLshort *v2)
{
  Internal("error_glRectsv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRectsv(_context, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRectsv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glRenderMode(RegalContext *_context, GLenum mode)
{
  Internal("error_glRenderMode","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glRenderMode(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderMode : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glRotated(RegalContext *_context, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glRotated","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRotated(_context, angle, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRotated : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRotatef(RegalContext *_context, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glRotatef","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRotatef(_context, angle, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRotatef : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScaled(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glScaled","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScaled(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScaled : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScalef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glScalef","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScalef(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScalef : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScissor(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glScissor","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScissor(_context, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScissor : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSelectBuffer(RegalContext *_context, GLsizei size, GLuint *buffer)
{
  Internal("error_glSelectBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSelectBuffer(_context, size, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSelectBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShadeModel(RegalContext *_context, GLenum mode)
{
  Internal("error_glShadeModel","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShadeModel(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShadeModel : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilFunc(RegalContext *_context, GLenum func, GLint ref, GLuint mask)
{
  Internal("error_glStencilFunc","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilFunc(_context, func, ref, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilFunc : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilMask(RegalContext *_context, GLuint mask)
{
  Internal("error_glStencilMask","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilMask(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilMask : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilOp(RegalContext *_context, GLenum fail, GLenum zfail, GLenum zpass)
{
  Internal("error_glStencilOp","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilOp(_context, fail, zfail, zpass);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilOp : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1d(RegalContext *_context, GLdouble s)
{
  Internal("error_glTexCoord1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1d(_context, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glTexCoord1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1f(RegalContext *_context, GLfloat s)
{
  Internal("error_glTexCoord1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1f(_context, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glTexCoord1fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1i(RegalContext *_context, GLint s)
{
  Internal("error_glTexCoord1i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1i(_context, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glTexCoord1iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1s(RegalContext *_context, GLshort s)
{
  Internal("error_glTexCoord1s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1s(_context, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glTexCoord1sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2d(RegalContext *_context, GLdouble s, GLdouble t)
{
  Internal("error_glTexCoord2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2d(_context, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glTexCoord2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2f(RegalContext *_context, GLfloat s, GLfloat t)
{
  Internal("error_glTexCoord2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2f(_context, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glTexCoord2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2i(RegalContext *_context, GLint s, GLint t)
{
  Internal("error_glTexCoord2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2i(_context, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glTexCoord2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2s(RegalContext *_context, GLshort s, GLshort t)
{
  Internal("error_glTexCoord2s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2s(_context, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glTexCoord2sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r)
{
  Internal("error_glTexCoord3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3d(_context, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glTexCoord3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r)
{
  Internal("error_glTexCoord3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3f(_context, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glTexCoord3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3i(RegalContext *_context, GLint s, GLint t, GLint r)
{
  Internal("error_glTexCoord3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3i(_context, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glTexCoord3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3s(RegalContext *_context, GLshort s, GLshort t, GLshort r)
{
  Internal("error_glTexCoord3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3s(_context, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glTexCoord3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Internal("error_glTexCoord4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4d(_context, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glTexCoord4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Internal("error_glTexCoord4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4f(_context, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glTexCoord4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4i(RegalContext *_context, GLint s, GLint t, GLint r, GLint q)
{
  Internal("error_glTexCoord4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4i(_context, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glTexCoord4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4s(RegalContext *_context, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Internal("error_glTexCoord4s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4s(_context, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glTexCoord4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexEnvf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glTexEnvf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexEnvf(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexEnvf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glTexEnvfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexEnvfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexEnvfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexEnvi(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glTexEnvi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexEnvi(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexEnvi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexEnviv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glTexEnviv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexEnviv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexEnviv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGend(RegalContext *_context, GLenum coord, GLenum pname, GLdouble param)
{
  Internal("error_glTexGend","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGend(_context, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGend : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGendv(RegalContext *_context, GLenum coord, GLenum pname, const GLdouble *params)
{
  Internal("error_glTexGendv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGendv(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGendv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenf(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param)
{
  Internal("error_glTexGenf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenf(_context, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params)
{
  Internal("error_glTexGenfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenfv(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGeni(RegalContext *_context, GLenum coord, GLenum pname, GLint param)
{
  Internal("error_glTexGeni","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGeni(_context, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGeni : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params)
{
  Internal("error_glTexGeniv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGeniv(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGeniv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage1D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexImage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage1D(_context, target, level, internalformat, width, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage2D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexImage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage2D(_context, target, level, internalformat, width, height, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glTexParameterf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterf(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glTexParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glTexParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameteri(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glTexParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTranslated(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glTranslated","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTranslated(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTranslated : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTranslatef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glTranslatef","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTranslatef(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTranslatef : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("error_glVertex2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2d(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glVertex2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("error_glVertex2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2f(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glVertex2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2i(RegalContext *_context, GLint x, GLint y)
{
  Internal("error_glVertex2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2i(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glVertex2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2s(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("error_glVertex2s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2s(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glVertex2sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertex3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3d(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glVertex3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glVertex3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3f(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glVertex3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("error_glVertex3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3i(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glVertex3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glVertex3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3s(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glVertex3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertex4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4d(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glVertex4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glVertex4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4f(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glVertex4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glVertex4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4i(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glVertex4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glVertex4s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4s(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glVertex4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glViewport(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glViewport","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glViewport(_context, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glViewport : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_1_1

static GLboolean REGAL_CALL error_glAreTexturesResident(RegalContext *_context, GLsizei n, const GLuint *textures, GLboolean *residences)
{
  Internal("error_glAreTexturesResident","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glAreTexturesResident(_context, n, textures, residences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAreTexturesResident : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glArrayElement(RegalContext *_context, GLint index)
{
  Internal("error_glArrayElement","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glArrayElement(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glArrayElement : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindTexture(RegalContext *_context, GLenum target, GLuint texture)
{
  Internal("error_glBindTexture","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindTexture(_context, target, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTexture : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glColorPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorPointer(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexImage1D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("error_glCopyTexImage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexImage1D(_context, target, level, internalformat, x, y, width, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexImage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("error_glCopyTexImage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexImage2D(_context, target, level, internalformat, x, y, width, height, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexImage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyTexSubImage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage1D(_context, target, level, xoffset, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTexSubImage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage2D(_context, target, level, xoffset, yoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteTextures(RegalContext *_context, GLsizei n, const GLuint *textures)
{
  Internal("error_glDeleteTextures","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteTextures(_context, n, textures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteTextures : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableClientState(RegalContext *_context, GLenum cap)
{
  Internal("error_glDisableClientState","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableClientState(_context, cap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableClientState : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawArrays(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  Internal("error_glDrawArrays","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArrays(_context, mode, first, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArrays : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElements(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("error_glDrawElements","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElements(_context, mode, count, type, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElements : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEdgeFlagPointer(RegalContext *_context, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glEdgeFlagPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEdgeFlagPointer(_context, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEdgeFlagPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableClientState(RegalContext *_context, GLenum cap)
{
  Internal("error_glEnableClientState","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableClientState(_context, cap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableClientState : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenTextures(RegalContext *_context, GLsizei n, GLuint *textures)
{
  Internal("error_glGenTextures","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenTextures(_context, n, textures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenTextures : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPointerv(RegalContext *_context, GLenum pname, GLvoid **params)
{
  Internal("error_glGetPointerv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPointerv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPointerv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glIndexPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexPointer(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexub(RegalContext *_context, GLubyte c)
{
  Internal("error_glIndexub","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexub(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexub : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexubv(RegalContext *_context, const GLubyte *c)
{
  Internal("error_glIndexubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexubv(_context, c);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInterleavedArrays(RegalContext *_context, GLenum format, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glInterleavedArrays","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInterleavedArrays(_context, format, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInterleavedArrays : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsTexture(RegalContext *_context, GLuint texture)
{
  Internal("error_glIsTexture","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsTexture(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsTexture : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glNormalPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glNormalPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalPointer(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPolygonOffset(RegalContext *_context, GLfloat factor, GLfloat units)
{
  Internal("error_glPolygonOffset","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPolygonOffset(_context, factor, units);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPolygonOffset : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPopClientAttrib(RegalContext *_context)
{
  Internal("error_glPopClientAttrib","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPopClientAttrib(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPopClientAttrib : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPrioritizeTextures(RegalContext *_context, GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  Internal("error_glPrioritizeTextures","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPrioritizeTextures(_context, n, textures, priorities);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPrioritizeTextures : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushClientAttrib(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glPushClientAttrib","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushClientAttrib(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushClientAttrib : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glTexCoordPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordPointer(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage1D(_context, target, level, xoffset, width, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage2D(_context, target, level, xoffset, yoffset, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexPointer(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_1_2

static void REGAL_CALL error_glBlendColor(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("error_glBlendColor","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendColor(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendColor : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendEquation(RegalContext *_context, GLenum mode)
{
  Internal("error_glBlendEquation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquation(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTexSubImage3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage3D(_context, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawRangeElements(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("error_glDrawRangeElements","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawRangeElements(_context, mode, start, end, count, type, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawRangeElements : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage3D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexImage3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage3D(_context, target, level, internalformat, width, height, depth, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage3D(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_1_3

static void REGAL_CALL error_glActiveTexture(RegalContext *_context, GLenum texture)
{
  Internal("error_glActiveTexture","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glActiveTexture(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glActiveTexture : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClientActiveTexture(RegalContext *_context, GLenum texture)
{
  Internal("error_glClientActiveTexture","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClientActiveTexture(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClientActiveTexture : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexImage1D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage1D(_context, target, level, internalformat, width, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage2D(_context, target, level, internalformat, width, height, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexImage3D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage3D(_context, target, level, internalformat, width, height, depth, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage1D(_context, target, level, xoffset, width, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage2D(_context, target, level, xoffset, yoffset, width, height, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage3D(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCompressedTexImage(RegalContext *_context, GLenum target, GLint lod, GLvoid *img)
{
  Internal("error_glGetCompressedTexImage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCompressedTexImage(_context, target, lod, img);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCompressedTexImage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadTransposeMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("error_glLoadTransposeMatrixd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadTransposeMatrixd(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadTransposeMatrixd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadTransposeMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("error_glLoadTransposeMatrixf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadTransposeMatrixf(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadTransposeMatrixf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultTransposeMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("error_glMultTransposeMatrixd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultTransposeMatrixd(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultTransposeMatrixd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultTransposeMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("error_glMultTransposeMatrixf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultTransposeMatrixf(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultTransposeMatrixf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1d(RegalContext *_context, GLenum target, GLdouble s)
{
  Internal("error_glMultiTexCoord1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1d(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1dv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1f(RegalContext *_context, GLenum target, GLfloat s)
{
  Internal("error_glMultiTexCoord1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1f(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord1fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1fv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1i(RegalContext *_context, GLenum target, GLint s)
{
  Internal("error_glMultiTexCoord1i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1i(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord1iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1iv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1s(RegalContext *_context, GLenum target, GLshort s)
{
  Internal("error_glMultiTexCoord1s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1s(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord1sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1sv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t)
{
  Internal("error_glMultiTexCoord2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2d(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2dv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t)
{
  Internal("error_glMultiTexCoord2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2f(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2fv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2i(RegalContext *_context, GLenum target, GLint s, GLint t)
{
  Internal("error_glMultiTexCoord2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2i(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2iv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2s(RegalContext *_context, GLenum target, GLshort s, GLshort t)
{
  Internal("error_glMultiTexCoord2s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2s(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord2sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2sv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  Internal("error_glMultiTexCoord3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3d(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3dv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  Internal("error_glMultiTexCoord3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3f(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3fv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r)
{
  Internal("error_glMultiTexCoord3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3i(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3iv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r)
{
  Internal("error_glMultiTexCoord3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3s(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3sv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Internal("error_glMultiTexCoord4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4d(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4dv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Internal("error_glMultiTexCoord4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4f(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4fv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  Internal("error_glMultiTexCoord4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4i(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4iv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Internal("error_glMultiTexCoord4s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4s(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4sv(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSampleCoverage(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("error_glSampleCoverage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleCoverage(_context, value, invert);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleCoverage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_1_4

static void REGAL_CALL error_glBlendFuncSeparate(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("error_glBlendFuncSeparate","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparate(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparate : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glFogCoordPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordPointer(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordd(RegalContext *_context, GLdouble coord)
{
  Internal("error_glFogCoordd","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordd(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordd : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoorddv(RegalContext *_context, const GLdouble *coord)
{
  Internal("error_glFogCoorddv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoorddv(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoorddv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordf(RegalContext *_context, GLfloat coord)
{
  Internal("error_glFogCoordf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordf(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordfv(RegalContext *_context, const GLfloat *coord)
{
  Internal("error_glFogCoordfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordfv(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawArrays(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("error_glMultiDrawArrays","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawArrays(_context, mode, first, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawArrays : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElements(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  Internal("error_glMultiDrawElements","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElements(_context, mode, count, type, indices, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElements : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPointParameterf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterf(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glPointParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameteri(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glPointParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameteri(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameteriv(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glPointParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameteriv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  Internal("error_glSecondaryColor3b","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3b(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3b : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3bv(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glSecondaryColor3bv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3bv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3bv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  Internal("error_glSecondaryColor3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3d(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glSecondaryColor3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3dv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  Internal("error_glSecondaryColor3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3f(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glSecondaryColor3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3fv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3i(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  Internal("error_glSecondaryColor3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3i(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3iv(RegalContext *_context, const GLint *v)
{
  Internal("error_glSecondaryColor3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3iv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  Internal("error_glSecondaryColor3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3s(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3sv(RegalContext *_context, const GLshort *v)
{
  Internal("error_glSecondaryColor3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3sv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  Internal("error_glSecondaryColor3ub","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3ub(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3ub : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3ubv(RegalContext *_context, const GLubyte *v)
{
  Internal("error_glSecondaryColor3ubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3ubv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3ubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  Internal("error_glSecondaryColor3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3ui(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3uiv(RegalContext *_context, const GLuint *v)
{
  Internal("error_glSecondaryColor3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3uiv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  Internal("error_glSecondaryColor3us","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3us(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3us : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3usv(RegalContext *_context, const GLushort *v)
{
  Internal("error_glSecondaryColor3usv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3usv(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3usv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glSecondaryColorPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColorPointer(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColorPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("error_glWindowPos2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2d(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2dv(RegalContext *_context, const GLdouble *p)
{
  Internal("error_glWindowPos2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2dv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("error_glWindowPos2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2f(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2fv(RegalContext *_context, const GLfloat *p)
{
  Internal("error_glWindowPos2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2fv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2i(RegalContext *_context, GLint x, GLint y)
{
  Internal("error_glWindowPos2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2i(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2iv(RegalContext *_context, const GLint *p)
{
  Internal("error_glWindowPos2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2iv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2s(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("error_glWindowPos2s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2s(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2sv(RegalContext *_context, const GLshort *p)
{
  Internal("error_glWindowPos2sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2sv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glWindowPos3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3d(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3dv(RegalContext *_context, const GLdouble *p)
{
  Internal("error_glWindowPos3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3dv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glWindowPos3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3f(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3fv(RegalContext *_context, const GLfloat *p)
{
  Internal("error_glWindowPos3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3fv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("error_glWindowPos3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3i(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3iv(RegalContext *_context, const GLint *p)
{
  Internal("error_glWindowPos3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3iv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glWindowPos3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3s(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3sv(RegalContext *_context, const GLshort *p)
{
  Internal("error_glWindowPos3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3sv(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_1_5

static void REGAL_CALL error_glBeginQuery(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBeginQuery","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginQuery(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginQuery : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBuffer(RegalContext *_context, GLenum target, GLuint buffer)
{
  Internal("error_glBindBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBuffer(_context, target, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBufferData(RegalContext *_context, GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Internal("error_glBufferData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferData(_context, target, size, data, usage);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBufferSubData(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Internal("error_glBufferSubData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferSubData(_context, target, offset, size, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferSubData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteBuffers(RegalContext *_context, GLsizei n, const GLuint *buffers)
{
  Internal("error_glDeleteBuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteBuffers(_context, n, buffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteBuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteQueries(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteQueries","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteQueries(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteQueries : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndQuery(RegalContext *_context, GLenum target)
{
  Internal("error_glEndQuery","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndQuery(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndQuery : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenBuffers(RegalContext *_context, GLsizei n, GLuint *buffers)
{
  Internal("error_glGenBuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenBuffers(_context, n, buffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenBuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenQueries(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenQueries","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenQueries(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenQueries : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetBufferParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferPointerv(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("error_glGetBufferPointerv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferPointerv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferPointerv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferSubData(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Internal("error_glGetBufferSubData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferSubData(_context, target, offset, size, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferSubData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectiv(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryObjectiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectiv(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectuiv(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("error_glGetQueryObjectuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectuiv(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryiv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryiv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsBuffer(RegalContext *_context, GLuint buffer)
{
  Internal("error_glIsBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsBuffer(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsQuery(RegalContext *_context, GLuint id)
{
  Internal("error_glIsQuery","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsQuery(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsQuery : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLvoid *REGAL_CALL error_glMapBuffer(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("error_glMapBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapBuffer(_context, target, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glUnmapBuffer(RegalContext *_context, GLenum target)
{
  Internal("error_glUnmapBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glUnmapBuffer(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnmapBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_VERSION_2_0

static void REGAL_CALL error_glAttachShader(RegalContext *_context, GLuint program, GLuint shader)
{
  Internal("error_glAttachShader","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAttachShader(_context, program, shader);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAttachShader : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindAttribLocation(RegalContext *_context, GLuint program, GLuint index, const GLchar *name)
{
  Internal("error_glBindAttribLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindAttribLocation(_context, program, index, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindAttribLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendEquationSeparate(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("error_glBlendEquationSeparate","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationSeparate(_context, modeRGB, modeAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationSeparate : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompileShader(RegalContext *_context, GLuint shader)
{
  Internal("error_glCompileShader","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompileShader(_context, shader);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompileShader : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glCreateProgram(RegalContext *_context)
{
  Internal("error_glCreateProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glCreateProgram(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glCreateShader(RegalContext *_context, GLenum type)
{
  Internal("error_glCreateShader","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glCreateShader(_context, type);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateShader : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteProgram(RegalContext *_context, GLuint program)
{
  Internal("error_glDeleteProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteProgram(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteShader(RegalContext *_context, GLuint shader)
{
  Internal("error_glDeleteShader","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteShader(_context, shader);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteShader : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDetachShader(RegalContext *_context, GLuint program, GLuint shader)
{
  Internal("error_glDetachShader","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDetachShader(_context, program, shader);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDetachShader : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableVertexAttribArray(RegalContext *_context, GLuint index)
{
  Internal("error_glDisableVertexAttribArray","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableVertexAttribArray(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableVertexAttribArray : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawBuffers(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("error_glDrawBuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBuffers(_context, n, bufs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableVertexAttribArray(RegalContext *_context, GLuint index)
{
  Internal("error_glEnableVertexAttribArray","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableVertexAttribArray(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableVertexAttribArray : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveAttrib(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Internal("error_glGetActiveAttrib","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveAttrib(_context, program, index, bufSize, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveAttrib : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveUniform(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Internal("error_glGetActiveUniform","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveUniform(_context, program, index, bufSize, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveUniform : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetAttachedShaders(RegalContext *_context, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  Internal("error_glGetAttachedShaders","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetAttachedShaders(_context, program, maxCount, count, shaders);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetAttachedShaders : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetAttribLocation(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glGetAttribLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetAttribLocation(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetAttribLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetProgramInfoLog(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("error_glGetProgramInfoLog","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramInfoLog(_context, program, bufSize, length, infoLog);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramInfoLog : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramiv(RegalContext *_context, GLuint program, GLenum pname, GLint *params)
{
  Internal("error_glGetProgramiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramiv(_context, program, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetShaderInfoLog(RegalContext *_context, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("error_glGetShaderInfoLog","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetShaderInfoLog(_context, shader, bufSize, length, infoLog);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetShaderInfoLog : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetShaderSource(RegalContext *_context, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  Internal("error_glGetShaderSource","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetShaderSource(_context, shader, bufSize, length, source);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetShaderSource : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetShaderiv(RegalContext *_context, GLuint shader, GLenum pname, GLint *params)
{
  Internal("error_glGetShaderiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetShaderiv(_context, shader, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetShaderiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetUniformLocation(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glGetUniformLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetUniformLocation(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetUniformfv(RegalContext *_context, GLuint program, GLint location, GLfloat *params)
{
  Internal("error_glGetUniformfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformfv(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetUniformiv(RegalContext *_context, GLuint program, GLint location, GLint *params)
{
  Internal("error_glGetUniformiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformiv(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribPointerv(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("error_glGetVertexAttribPointerv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribPointerv(_context, index, pname, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribPointerv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("error_glGetVertexAttribdv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribdv(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribdv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribfv(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("error_glGetVertexAttribfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribfv(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetVertexAttribiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribiv(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsProgram(RegalContext *_context, GLuint program)
{
  Internal("error_glIsProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsProgram(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsShader(RegalContext *_context, GLuint shader)
{
  Internal("error_glIsShader","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsShader(_context, shader);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsShader : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glLinkProgram(RegalContext *_context, GLuint program)
{
  Internal("error_glLinkProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLinkProgram(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLinkProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShaderSource(RegalContext *_context, GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
  Internal("error_glShaderSource","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderSource(_context, shader, count, string, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderSource : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilFuncSeparate(RegalContext *_context, GLenum face, GLenum func, GLint ref, GLuint mask)
{
  Internal("error_glStencilFuncSeparate","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilFuncSeparate(_context, face, func, ref, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilFuncSeparate : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilMaskSeparate(RegalContext *_context, GLenum face, GLuint mask)
{
  Internal("error_glStencilMaskSeparate","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilMaskSeparate(_context, face, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilMaskSeparate : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilOpSeparate(RegalContext *_context, GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  Internal("error_glStencilOpSeparate","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilOpSeparate(_context, face, fail, zfail, zpass);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilOpSeparate : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1f(RegalContext *_context, GLint location, GLfloat v0)
{
  Internal("error_glUniform1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1f(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform1fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1fv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1i(RegalContext *_context, GLint location, GLint v0)
{
  Internal("error_glUniform1i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1i(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform1iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1iv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1)
{
  Internal("error_glUniform2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2f(_context, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2fv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2i(RegalContext *_context, GLint location, GLint v0, GLint v1)
{
  Internal("error_glUniform2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2i(_context, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2iv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("error_glUniform3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3f(_context, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3fv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("error_glUniform3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3i(_context, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3iv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("error_glUniform4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4f(_context, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4fv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("error_glUniform4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4i(_context, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4iv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUseProgram(RegalContext *_context, GLuint program)
{
  Internal("error_glUseProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUseProgram(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUseProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glValidateProgram(RegalContext *_context, GLuint program)
{
  Internal("error_glValidateProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glValidateProgram(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glValidateProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1d(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("error_glVertexAttrib1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1d(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1f(RegalContext *_context, GLuint index, GLfloat x)
{
  Internal("error_glVertexAttrib1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1f(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib1fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1fv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1s(RegalContext *_context, GLuint index, GLshort x)
{
  Internal("error_glVertexAttrib1s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1s(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib1sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1sv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("error_glVertexAttrib2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2d(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  Internal("error_glVertexAttrib2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2f(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2fv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2s(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  Internal("error_glVertexAttrib2s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2s(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib2sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2sv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertexAttrib3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3d(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glVertexAttrib3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3f(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3fv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glVertexAttrib3s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3s(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib3sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3sv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Nbv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("error_glVertexAttrib4Nbv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Nbv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Nbv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Niv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttrib4Niv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Niv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Niv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Nsv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib4Nsv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Nsv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Nsv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Nub(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Internal("error_glVertexAttrib4Nub","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Nub(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Nub : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Nubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttrib4Nubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Nubv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Nubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Nuiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttrib4Nuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Nuiv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Nuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4Nusv(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("error_glVertexAttrib4Nusv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4Nusv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4Nusv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4bv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("error_glVertexAttrib4bv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4bv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4bv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertexAttrib4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4d(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glVertexAttrib4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4f(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4fv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttrib4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4iv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glVertexAttrib4s","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4s(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4s : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4sv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4ubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttrib4ubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4ubv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4ubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttrib4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4uiv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4usv(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("error_glVertexAttrib4usv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4usv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4usv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribPointer(_context, index, size, type, normalized, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_2_1

static void REGAL_CALL error_glUniformMatrix2x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix2x3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2x3fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2x3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix2x4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2x4fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2x4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix3x2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3x2fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3x2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix3x4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3x4fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3x4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix4x2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4x2fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4x2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix4x3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4x3fv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4x3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_3_0

static void REGAL_CALL error_glBeginConditionalRender(RegalContext *_context, GLuint id, GLenum mode)
{
  Internal("error_glBeginConditionalRender","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginConditionalRender(_context, id, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginConditionalRender : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBeginTransformFeedback(RegalContext *_context, GLenum primitiveMode)
{
  Internal("error_glBeginTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginTransformFeedback(_context, primitiveMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindFragDataLocation(RegalContext *_context, GLuint program, GLuint color, const GLchar *name)
{
  Internal("error_glBindFragDataLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFragDataLocation(_context, program, color, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFragDataLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClampColor(RegalContext *_context, GLenum target, GLenum clamp)
{
  Internal("error_glClampColor","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClampColor(_context, target, clamp);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClampColor : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearBufferfi(RegalContext *_context, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  Internal("error_glClearBufferfi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearBufferfi(_context, buffer, drawbuffer, depth, stencil);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearBufferfi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearBufferfv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
  Internal("error_glClearBufferfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearBufferfv(_context, buffer, drawbuffer, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearBufferfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearBufferiv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLint *value)
{
  Internal("error_glClearBufferiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearBufferiv(_context, buffer, drawbuffer, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearBufferiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearBufferuiv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLuint *value)
{
  Internal("error_glClearBufferuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearBufferuiv(_context, buffer, drawbuffer, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearBufferuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorMaski(RegalContext *_context, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Internal("error_glColorMaski","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorMaski(_context, index, r, g, b, a);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorMaski : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisablei(RegalContext *_context, GLenum cap, GLuint index)
{
  Internal("error_glDisablei","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisablei(_context, cap, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisablei : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnablei(RegalContext *_context, GLenum cap, GLuint index)
{
  Internal("error_glEnablei","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnablei(_context, cap, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnablei : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndConditionalRender(RegalContext *_context)
{
  Internal("error_glEndConditionalRender","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndConditionalRender(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndConditionalRender : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndTransformFeedback(RegalContext *_context)
{
  Internal("error_glEndTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndTransformFeedback(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBooleani_v(RegalContext *_context, GLenum target, GLuint index, GLboolean *data)
{
  Internal("error_glGetBooleani_v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBooleani_v(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBooleani_v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetFragDataLocation(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glGetFragDataLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetFragDataLocation(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragDataLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static const GLubyte *REGAL_CALL error_glGetStringi(RegalContext *_context, GLenum name, GLuint index)
{
  Internal("error_glGetStringi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  const GLubyte * ret = _context->err.next.glGetStringi(_context, name, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetStringi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetTexParameterIiv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetTexParameterIiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterIiv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterIiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexParameterIuiv(RegalContext *_context, GLenum target, GLenum pname, GLuint *params)
{
  Internal("error_glGetTexParameterIuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterIuiv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterIuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTransformFeedbackVarying(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Internal("error_glGetTransformFeedbackVarying","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTransformFeedbackVarying(_context, program, index, bufSize, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTransformFeedbackVarying : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetUniformuiv(RegalContext *_context, GLuint program, GLint location, GLuint *params)
{
  Internal("error_glGetUniformuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformuiv(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribIiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetVertexAttribIiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribIiv(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribIiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribIuiv(RegalContext *_context, GLuint index, GLenum pname, GLuint *params)
{
  Internal("error_glGetVertexAttribIuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribIuiv(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribIuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsEnabledi(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("error_glIsEnabledi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsEnabledi(_context, target, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsEnabledi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glTexParameterIiv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glTexParameterIiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterIiv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterIiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterIuiv(RegalContext *_context, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("error_glTexParameterIuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterIuiv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterIuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTransformFeedbackVaryings(RegalContext *_context, GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
  Internal("error_glTransformFeedbackVaryings","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTransformFeedbackVaryings(_context, program, count, varyings, bufferMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTransformFeedbackVaryings : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1ui(RegalContext *_context, GLint location, GLuint v0)
{
  Internal("error_glUniform1ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1ui(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform1uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1uiv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1)
{
  Internal("error_glUniform2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2ui(_context, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2uiv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Internal("error_glUniform3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3ui(_context, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3uiv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Internal("error_glUniform4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4ui(_context, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4uiv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1i(RegalContext *_context, GLuint index, GLint x)
{
  Internal("error_glVertexAttribI1i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1i(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI1iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1iv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1ui(RegalContext *_context, GLuint index, GLuint x)
{
  Internal("error_glVertexAttribI1ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1ui(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI1uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1uiv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2i(RegalContext *_context, GLuint index, GLint x, GLint y)
{
  Internal("error_glVertexAttribI2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2i(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2iv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2ui(RegalContext *_context, GLuint index, GLuint x, GLuint y)
{
  Internal("error_glVertexAttribI2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2ui(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2uiv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3i(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z)
{
  Internal("error_glVertexAttribI3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3i(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3iv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3ui(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z)
{
  Internal("error_glVertexAttribI3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3ui(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3uiv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4bv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("error_glVertexAttribI4bv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4bv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4bv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4i(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glVertexAttribI4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4i(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4iv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttribI4sv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4sv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4sv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4ubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttribI4ubv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4ubv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4ubv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4ui(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("error_glVertexAttribI4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4ui(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4uiv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4usv(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("error_glVertexAttribI4usv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4usv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4usv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribIPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribIPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribIPointer(_context, index, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribIPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_3_1

static void REGAL_CALL error_glDrawArraysInstanced(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Internal("error_glDrawArraysInstanced","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysInstanced(_context, mode, start, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysInstanced : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstanced(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("error_glDrawElementsInstanced","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstanced(_context, mode, count, type, indices, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstanced : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPrimitiveRestartIndex(RegalContext *_context, GLuint index)
{
  Internal("error_glPrimitiveRestartIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPrimitiveRestartIndex(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPrimitiveRestartIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexBuffer(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("error_glTexBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexBuffer(_context, target, internalformat, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_3_2

static void REGAL_CALL error_glFramebufferTexture(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTexture","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture(_context, target, attachment, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTextureFace(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("error_glFramebufferTextureFace","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureFace(_context, target, attachment, texture, level, face);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureFace : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferParameteri64v(RegalContext *_context, GLenum target, GLenum pname, GLint64 *params)
{
  Internal("error_glGetBufferParameteri64v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferParameteri64v(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferParameteri64v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetInteger64i_v(RegalContext *_context, GLenum target, GLuint index, GLint64 *data)
{
  Internal("error_glGetInteger64i_v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInteger64i_v(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInteger64i_v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_3_3

static void REGAL_CALL error_glVertexAttribDivisor(RegalContext *_context, GLuint index, GLuint divisor)
{
  Internal("error_glVertexAttribDivisor","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribDivisor(_context, index, divisor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribDivisor : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_VERSION_4_0

static void REGAL_CALL error_glBlendEquationSeparatei(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("error_glBlendEquationSeparatei","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationSeparatei(_context, buf, modeRGB, modeAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationSeparatei : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendEquationi(RegalContext *_context, GLuint buf, GLenum mode)
{
  Internal("error_glBlendEquationi","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationi(_context, buf, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationi : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFuncSeparatei(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Internal("error_glBlendFuncSeparatei","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparatei(_context, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparatei : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFunci(RegalContext *_context, GLuint buf, GLenum src, GLenum dst)
{
  Internal("error_glBlendFunci","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFunci(_context, buf, src, dst);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFunci : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_3DFX_tbuffer

static void REGAL_CALL error_glTbufferMask3DFX(RegalContext *_context, GLuint mask)
{
  Internal("error_glTbufferMask3DFX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTbufferMask3DFX(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTbufferMask3DFX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_debug_output

static void REGAL_CALL error_glDebugMessageCallbackAMD(RegalContext *_context, GLDEBUGPROCAMD callback, GLvoid *userParam)
{
  Internal("error_glDebugMessageCallbackAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageCallbackAMD(_context, callback, userParam);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageCallbackAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDebugMessageEnableAMD(RegalContext *_context, GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Internal("error_glDebugMessageEnableAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageEnableAMD(_context, category, severity, count, ids, enabled);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageEnableAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDebugMessageInsertAMD(RegalContext *_context, GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
  Internal("error_glDebugMessageInsertAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageInsertAMD(_context, category, severity, id, length, buf);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageInsertAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGetDebugMessageLogAMD(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
  Internal("error_glGetDebugMessageLogAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGetDebugMessageLogAMD(_context, count, bufsize, categories, severities, ids, lengths, message);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDebugMessageLogAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_AMD_draw_buffers_blend

static void REGAL_CALL error_glBlendEquationIndexedAMD(RegalContext *_context, GLuint buf, GLenum mode)
{
  Internal("error_glBlendEquationIndexedAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationIndexedAMD(_context, buf, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationIndexedAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendEquationSeparateIndexedAMD(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("error_glBlendEquationSeparateIndexedAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationSeparateIndexedAMD(_context, buf, modeRGB, modeAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationSeparateIndexedAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFuncIndexedAMD(RegalContext *_context, GLuint buf, GLenum src, GLenum dst)
{
  Internal("error_glBlendFuncIndexedAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncIndexedAMD(_context, buf, src, dst);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncIndexedAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFuncSeparateIndexedAMD(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Internal("error_glBlendFuncSeparateIndexedAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparateIndexedAMD(_context, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparateIndexedAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_interleaved_elements

static void REGAL_CALL error_glVertexAttribParameteriAMD(RegalContext *_context, GLuint index, GLenum pname, GLint param)
{
  Internal("error_glVertexAttribParameteriAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribParameteriAMD(_context, index, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribParameteriAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_multi_draw_indirect

static void REGAL_CALL error_glMultiDrawArraysIndirectAMD(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("error_glMultiDrawArraysIndirectAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawArraysIndirectAMD(_context, mode, indirect, primcount, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawArraysIndirectAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElementsIndirectAMD(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("error_glMultiDrawElementsIndirectAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElementsIndirectAMD(_context, mode, type, indirect, primcount, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElementsIndirectAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_name_gen_delete

static void REGAL_CALL error_glDeleteNamesAMD(RegalContext *_context, GLenum identifier, GLuint num, const GLuint *names)
{
  Internal("error_glDeleteNamesAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteNamesAMD(_context, identifier, num, names);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteNamesAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenNamesAMD(RegalContext *_context, GLenum identifier, GLuint num, GLuint *names)
{
  Internal("error_glGenNamesAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenNamesAMD(_context, identifier, num, names);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenNamesAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsNameAMD(RegalContext *_context, GLenum identifier, GLuint name)
{
  Internal("error_glIsNameAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsNameAMD(_context, identifier, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsNameAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_AMD_performance_monitor

static void REGAL_CALL error_glBeginPerfMonitorAMD(RegalContext *_context, GLuint monitor)
{
  Internal("error_glBeginPerfMonitorAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginPerfMonitorAMD(_context, monitor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginPerfMonitorAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeletePerfMonitorsAMD(RegalContext *_context, GLsizei n, GLuint *monitors)
{
  Internal("error_glDeletePerfMonitorsAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeletePerfMonitorsAMD(_context, n, monitors);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeletePerfMonitorsAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndPerfMonitorAMD(RegalContext *_context, GLuint monitor)
{
  Internal("error_glEndPerfMonitorAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndPerfMonitorAMD(_context, monitor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndPerfMonitorAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenPerfMonitorsAMD(RegalContext *_context, GLsizei n, GLuint *monitors)
{
  Internal("error_glGenPerfMonitorsAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenPerfMonitorsAMD(_context, n, monitors);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenPerfMonitorsAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPerfMonitorCounterDataAMD(RegalContext *_context, GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
  Internal("error_glGetPerfMonitorCounterDataAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPerfMonitorCounterDataAMD(_context, monitor, pname, dataSize, data, bytesWritten);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPerfMonitorCounterDataAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPerfMonitorCounterInfoAMD(RegalContext *_context, GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
  Internal("error_glGetPerfMonitorCounterInfoAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPerfMonitorCounterInfoAMD(_context, group, counter, pname, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPerfMonitorCounterInfoAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPerfMonitorCounterStringAMD(RegalContext *_context, GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
  Internal("error_glGetPerfMonitorCounterStringAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPerfMonitorCounterStringAMD(_context, group, counter, bufSize, length, counterString);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPerfMonitorCounterStringAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPerfMonitorCountersAMD(RegalContext *_context, GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
  Internal("error_glGetPerfMonitorCountersAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPerfMonitorCountersAMD(_context, group, numCounters, maxActiveCounters, countersSize, counters);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPerfMonitorCountersAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPerfMonitorGroupStringAMD(RegalContext *_context, GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
  Internal("error_glGetPerfMonitorGroupStringAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPerfMonitorGroupStringAMD(_context, group, bufSize, length, groupString);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPerfMonitorGroupStringAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPerfMonitorGroupsAMD(RegalContext *_context, GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
  Internal("error_glGetPerfMonitorGroupsAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPerfMonitorGroupsAMD(_context, numGroups, groupsSize, groups);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPerfMonitorGroupsAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSelectPerfMonitorCountersAMD(RegalContext *_context, GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
  Internal("error_glSelectPerfMonitorCountersAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSelectPerfMonitorCountersAMD(_context, monitor, enable, group, numCounters, counterList);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSelectPerfMonitorCountersAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_sample_positions

static void REGAL_CALL error_glSetMultisamplefvAMD(RegalContext *_context, GLenum pname, GLuint index, const GLfloat *val)
{
  Internal("error_glSetMultisamplefvAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSetMultisamplefvAMD(_context, pname, index, val);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSetMultisamplefvAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_sparse_texture

static void REGAL_CALL error_glTexStorageSparseAMD(RegalContext *_context, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  Internal("error_glTexStorageSparseAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorageSparseAMD(_context, target, internalFormat, width, height, depth, layers, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorageSparseAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureStorageSparseAMD(RegalContext *_context, GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  Internal("error_glTextureStorageSparseAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureStorageSparseAMD(_context, texture, target, internalFormat, width, height, depth, layers, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureStorageSparseAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_stencil_operation_extended

static void REGAL_CALL error_glStencilOpValueAMD(RegalContext *_context, GLenum face, GLuint value)
{
  Internal("error_glStencilOpValueAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilOpValueAMD(_context, face, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilOpValueAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_AMD_vertex_shader_tessellator

static void REGAL_CALL error_glTessellationFactorAMD(RegalContext *_context, GLfloat factor)
{
  Internal("error_glTessellationFactorAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTessellationFactorAMD(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTessellationFactorAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTessellationModeAMD(RegalContext *_context, GLenum mode)
{
  Internal("error_glTessellationModeAMD","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTessellationModeAMD(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTessellationModeAMD : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ANGLE_framebuffer_blit

static void REGAL_CALL error_glBlitFramebufferANGLE(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("error_glBlitFramebufferANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlitFramebufferANGLE(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlitFramebufferANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ANGLE_framebuffer_multisample

static void REGAL_CALL error_glRenderbufferStorageMultisampleANGLE(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageMultisampleANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageMultisampleANGLE(_context, target, samples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageMultisampleANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ANGLE_instanced_arrays

static void REGAL_CALL error_glDrawArraysInstancedANGLE(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  Internal("error_glDrawArraysInstancedANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysInstancedANGLE(_context, mode, first, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysInstancedANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstancedANGLE(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("error_glDrawElementsInstancedANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstancedANGLE(_context, mode, count, type, indices, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstancedANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribDivisorANGLE(RegalContext *_context, GLuint index, GLuint divisor)
{
  Internal("error_glVertexAttribDivisorANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribDivisorANGLE(_context, index, divisor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribDivisorANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ANGLE_timer_query

static void REGAL_CALL error_glBeginQueryANGLE(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBeginQueryANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginQueryANGLE(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginQueryANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteQueriesANGLE(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteQueriesANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteQueriesANGLE(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteQueriesANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndQueryANGLE(RegalContext *_context, GLenum target)
{
  Internal("error_glEndQueryANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndQueryANGLE(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndQueryANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenQueriesANGLE(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenQueriesANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenQueriesANGLE(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenQueriesANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjecti64vANGLE(RegalContext *_context, GLuint id, GLenum pname, GLint64 *params)
{
  Internal("error_glGetQueryObjecti64vANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjecti64vANGLE(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjecti64vANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectivANGLE(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryObjectivANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectivANGLE(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectivANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectui64vANGLE(RegalContext *_context, GLuint id, GLenum pname, GLuint64 *params)
{
  Internal("error_glGetQueryObjectui64vANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectui64vANGLE(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectui64vANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectuivANGLE(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("error_glGetQueryObjectuivANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectuivANGLE(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectuivANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryivANGLE(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryivANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryivANGLE(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryivANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsQueryANGLE(RegalContext *_context, GLuint id)
{
  Internal("error_glIsQueryANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsQueryANGLE(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsQueryANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glQueryCounterANGLE(RegalContext *_context, GLuint id, GLenum target)
{
  Internal("error_glQueryCounterANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glQueryCounterANGLE(_context, id, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glQueryCounterANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ANGLE_translated_shader_source

static void REGAL_CALL error_glGetTranslatedShaderSourceANGLE(RegalContext *_context, GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
  Internal("error_glGetTranslatedShaderSourceANGLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTranslatedShaderSourceANGLE(_context, shader, bufsize, length, source);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTranslatedShaderSourceANGLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_copy_texture_levels

static void REGAL_CALL error_glCopyTextureLevelsAPPLE(RegalContext *_context, GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  Internal("error_glCopyTextureLevelsAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTextureLevelsAPPLE(_context, destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTextureLevelsAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_element_array

static void REGAL_CALL error_glDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  Internal("error_glDrawElementArrayAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementArrayAPPLE(_context, mode, first, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementArrayAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  Internal("error_glDrawRangeElementArrayAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawRangeElementArrayAPPLE(_context, mode, start, end, first, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawRangeElementArrayAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glElementPointerAPPLE(RegalContext *_context, GLenum type, const GLvoid *pointer)
{
  Internal("error_glElementPointerAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glElementPointerAPPLE(_context, type, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glElementPointerAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("error_glMultiDrawElementArrayAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElementArrayAPPLE(_context, mode, first, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElementArrayAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("error_glMultiDrawRangeElementArrayAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawRangeElementArrayAPPLE(_context, mode, start, end, first, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawRangeElementArrayAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_fence

static void REGAL_CALL error_glDeleteFencesAPPLE(RegalContext *_context, GLsizei n, const GLuint *fences)
{
  Internal("error_glDeleteFencesAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteFencesAPPLE(_context, n, fences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteFencesAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFinishFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("error_glFinishFenceAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinishFenceAPPLE(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinishFenceAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFinishObjectAPPLE(RegalContext *_context, GLenum object, GLint name)
{
  Internal("error_glFinishObjectAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinishObjectAPPLE(_context, object, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinishObjectAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenFencesAPPLE(RegalContext *_context, GLsizei n, GLuint *fences)
{
  Internal("error_glGenFencesAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenFencesAPPLE(_context, n, fences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenFencesAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("error_glIsFenceAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsFenceAPPLE(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsFenceAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glSetFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("error_glSetFenceAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSetFenceAPPLE(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSetFenceAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glTestFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("error_glTestFenceAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glTestFenceAPPLE(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTestFenceAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glTestObjectAPPLE(RegalContext *_context, GLenum object, GLuint name)
{
  Internal("error_glTestObjectAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glTestObjectAPPLE(_context, object, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTestObjectAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_APPLE_flush_buffer_range

static void REGAL_CALL error_glBufferParameteriAPPLE(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glBufferParameteriAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferParameteriAPPLE(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferParameteriAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFlushMappedBufferRangeAPPLE(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size)
{
  Internal("error_glFlushMappedBufferRangeAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushMappedBufferRangeAPPLE(_context, target, offset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushMappedBufferRangeAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_flush_render

static void REGAL_CALL error_glFinishRenderAPPLE(RegalContext *_context)
{
  Internal("error_glFinishRenderAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinishRenderAPPLE(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinishRenderAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFlushRenderAPPLE(RegalContext *_context)
{
  Internal("error_glFlushRenderAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushRenderAPPLE(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushRenderAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSwapAPPLE(RegalContext *_context)
{
  Internal("error_glSwapAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSwapAPPLE(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSwapAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_framebuffer_multisample

static void REGAL_CALL error_glRenderbufferStorageMultisampleAPPLE(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageMultisampleAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageMultisampleAPPLE(_context, target, samples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageMultisampleAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResolveMultisampleFramebufferAPPLE(RegalContext *_context)
{
  Internal("error_glResolveMultisampleFramebufferAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResolveMultisampleFramebufferAPPLE(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResolveMultisampleFramebufferAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_object_purgeable

static void REGAL_CALL error_glGetObjectParameterivAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
  Internal("error_glGetObjectParameterivAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectParameterivAPPLE(_context, objectType, name, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectParameterivAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glObjectPurgeableAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum option)
{
  Internal("error_glObjectPurgeableAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glObjectPurgeableAPPLE(_context, objectType, name, option);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glObjectPurgeableAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLenum REGAL_CALL error_glObjectUnpurgeableAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum option)
{
  Internal("error_glObjectUnpurgeableAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glObjectUnpurgeableAPPLE(_context, objectType, name, option);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glObjectUnpurgeableAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_APPLE_sync

static GLenum REGAL_CALL error_glClientWaitSyncAPPLE(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Internal("error_glClientWaitSyncAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glClientWaitSyncAPPLE(_context, sync, flags, timeout);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClientWaitSyncAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteSyncAPPLE(RegalContext *_context, GLsync sync)
{
  Internal("error_glDeleteSyncAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteSyncAPPLE(_context, sync);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteSyncAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLsync REGAL_CALL error_glFenceSyncAPPLE(RegalContext *_context, GLenum condition, GLbitfield flags)
{
  Internal("error_glFenceSyncAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLsync  ret = _context->err.next.glFenceSyncAPPLE(_context, condition, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFenceSyncAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetInteger64vAPPLE(RegalContext *_context, GLenum pname, GLint64 *params)
{
  Internal("error_glGetInteger64vAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInteger64vAPPLE(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInteger64vAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSyncivAPPLE(RegalContext *_context, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Internal("error_glGetSyncivAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSyncivAPPLE(_context, sync, pname, bufSize, length, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSyncivAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsSyncAPPLE(RegalContext *_context, GLsync sync)
{
  Internal("error_glIsSyncAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsSyncAPPLE(_context, sync);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsSyncAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glWaitSyncAPPLE(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Internal("error_glWaitSyncAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWaitSyncAPPLE(_context, sync, flags, timeout);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWaitSyncAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_texture_range

static void REGAL_CALL error_glGetTexParameterPointervAPPLE(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("error_glGetTexParameterPointervAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterPointervAPPLE(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterPointervAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureRangeAPPLE(RegalContext *_context, GLenum target, GLsizei length, const GLvoid *pointer)
{
  Internal("error_glTextureRangeAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureRangeAPPLE(_context, target, length, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureRangeAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_vertex_array_object

static void REGAL_CALL error_glBindVertexArrayAPPLE(RegalContext *_context, GLuint array)
{
  Internal("error_glBindVertexArrayAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVertexArrayAPPLE(_context, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVertexArrayAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteVertexArraysAPPLE(RegalContext *_context, GLsizei n, const GLuint *arrays)
{
  Internal("error_glDeleteVertexArraysAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteVertexArraysAPPLE(_context, n, arrays);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteVertexArraysAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenVertexArraysAPPLE(RegalContext *_context, GLsizei n, GLuint *arrays)
{
  Internal("error_glGenVertexArraysAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenVertexArraysAPPLE(_context, n, arrays);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenVertexArraysAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsVertexArrayAPPLE(RegalContext *_context, GLuint array)
{
  Internal("error_glIsVertexArrayAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsVertexArrayAPPLE(_context, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsVertexArrayAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_APPLE_vertex_array_range

static void REGAL_CALL error_glFlushVertexArrayRangeAPPLE(RegalContext *_context, GLsizei length, GLvoid *pointer)
{
  Internal("error_glFlushVertexArrayRangeAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushVertexArrayRangeAPPLE(_context, length, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushVertexArrayRangeAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayParameteriAPPLE(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glVertexArrayParameteriAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayParameteriAPPLE(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayParameteriAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayRangeAPPLE(RegalContext *_context, GLsizei length, GLvoid *pointer)
{
  Internal("error_glVertexArrayRangeAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayRangeAPPLE(_context, length, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayRangeAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_APPLE_vertex_program_evaluators

static void REGAL_CALL error_glDisableVertexAttribAPPLE(RegalContext *_context, GLuint index, GLenum pname)
{
  Internal("error_glDisableVertexAttribAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableVertexAttribAPPLE(_context, index, pname);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableVertexAttribAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableVertexAttribAPPLE(RegalContext *_context, GLuint index, GLenum pname)
{
  Internal("error_glEnableVertexAttribAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableVertexAttribAPPLE(_context, index, pname);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableVertexAttribAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsVertexAttribEnabledAPPLE(RegalContext *_context, GLuint index, GLenum pname)
{
  Internal("error_glIsVertexAttribEnabledAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsVertexAttribEnabledAPPLE(_context, index, pname);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsVertexAttribEnabledAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glMapVertexAttrib1dAPPLE(RegalContext *_context, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  Internal("error_glMapVertexAttrib1dAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapVertexAttrib1dAPPLE(_context, index, size, u1, u2, stride, order, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapVertexAttrib1dAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapVertexAttrib1fAPPLE(RegalContext *_context, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  Internal("error_glMapVertexAttrib1fAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapVertexAttrib1fAPPLE(_context, index, size, u1, u2, stride, order, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapVertexAttrib1fAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapVertexAttrib2dAPPLE(RegalContext *_context, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  Internal("error_glMapVertexAttrib2dAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapVertexAttrib2dAPPLE(_context, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapVertexAttrib2dAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapVertexAttrib2fAPPLE(RegalContext *_context, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  Internal("error_glMapVertexAttrib2fAPPLE","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapVertexAttrib2fAPPLE(_context, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapVertexAttrib2fAPPLE : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_ES2_compatibility

static void REGAL_CALL error_glClearDepthf(RegalContext *_context, GLclampf d)
{
  Internal("error_glClearDepthf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearDepthf(_context, d);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearDepthf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthRangef(RegalContext *_context, GLclampf n, GLclampf f)
{
  Internal("error_glDepthRangef","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRangef(_context, n, f);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRangef : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetShaderPrecisionFormat(RegalContext *_context, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  Internal("error_glGetShaderPrecisionFormat","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetShaderPrecisionFormat(_context, shadertype, precisiontype, range, precision);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetShaderPrecisionFormat : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReleaseShaderCompiler(RegalContext *_context)
{
  Internal("error_glReleaseShaderCompiler","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReleaseShaderCompiler(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReleaseShaderCompiler : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShaderBinary(RegalContext *_context, GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  Internal("error_glShaderBinary","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderBinary(_context, count, shaders, binaryformat, binary, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderBinary : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_base_instance

static void REGAL_CALL error_glDrawArraysInstancedBaseInstance(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
  Internal("error_glDrawArraysInstancedBaseInstance","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysInstancedBaseInstance(_context, mode, first, count, primcount, baseinstance);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysInstancedBaseInstance : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstancedBaseInstance(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
  Internal("error_glDrawElementsInstancedBaseInstance","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstancedBaseInstance(_context, mode, count, type, indices, primcount, baseinstance);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstancedBaseInstance : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstancedBaseVertexBaseInstance(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  Internal("error_glDrawElementsInstancedBaseVertexBaseInstance","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstancedBaseVertexBaseInstance(_context, mode, count, type, indices, primcount, basevertex, baseinstance);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstancedBaseVertexBaseInstance : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_bindless_texture

static GLuint64 REGAL_CALL error_glGetImageHandleARB(RegalContext *_context, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  Internal("error_glGetImageHandleARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint64  ret = _context->err.next.glGetImageHandleARB(_context, texture, level, layered, layer, format);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetImageHandleARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint64 REGAL_CALL error_glGetTextureHandleARB(RegalContext *_context, GLuint texture)
{
  Internal("error_glGetTextureHandleARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint64  ret = _context->err.next.glGetTextureHandleARB(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureHandleARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint64 REGAL_CALL error_glGetTextureSamplerHandleARB(RegalContext *_context, GLuint texture, GLuint sampler)
{
  Internal("error_glGetTextureSamplerHandleARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint64  ret = _context->err.next.glGetTextureSamplerHandleARB(_context, texture, sampler);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureSamplerHandleARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetVertexAttribLui64vARB(RegalContext *_context, GLuint index, GLenum pname, GLuint64EXT *params)
{
  Internal("error_glGetVertexAttribLui64vARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribLui64vARB(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribLui64vARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsImageHandleResidentARB(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glIsImageHandleResidentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsImageHandleResidentARB(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsImageHandleResidentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsTextureHandleResidentARB(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glIsTextureHandleResidentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsTextureHandleResidentARB(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsTextureHandleResidentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glMakeImageHandleNonResidentARB(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glMakeImageHandleNonResidentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeImageHandleNonResidentARB(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeImageHandleNonResidentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeImageHandleResidentARB(RegalContext *_context, GLuint64 handle, GLenum access)
{
  Internal("error_glMakeImageHandleResidentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeImageHandleResidentARB(_context, handle, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeImageHandleResidentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeTextureHandleNonResidentARB(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glMakeTextureHandleNonResidentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeTextureHandleNonResidentARB(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeTextureHandleNonResidentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeTextureHandleResidentARB(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glMakeTextureHandleResidentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeTextureHandleResidentARB(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeTextureHandleResidentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformHandleui64ARB(RegalContext *_context, GLuint program, GLint location, GLuint64 value)
{
  Internal("error_glProgramUniformHandleui64ARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformHandleui64ARB(_context, program, location, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformHandleui64ARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformHandleui64vARB(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  Internal("error_glProgramUniformHandleui64vARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformHandleui64vARB(_context, program, location, count, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformHandleui64vARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformHandleui64ARB(RegalContext *_context, GLint location, GLuint64 value)
{
  Internal("error_glUniformHandleui64ARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformHandleui64ARB(_context, location, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformHandleui64ARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformHandleui64vARB(RegalContext *_context, GLint location, GLsizei count, const GLuint64 *value)
{
  Internal("error_glUniformHandleui64vARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformHandleui64vARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformHandleui64vARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1ui64ARB(RegalContext *_context, GLuint index, GLuint64EXT x)
{
  Internal("error_glVertexAttribL1ui64ARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1ui64ARB(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1ui64ARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1ui64vARB(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("error_glVertexAttribL1ui64vARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1ui64vARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1ui64vARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_blend_func_extended

static void REGAL_CALL error_glBindFragDataLocationIndexed(RegalContext *_context, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
  Internal("error_glBindFragDataLocationIndexed","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFragDataLocationIndexed(_context, program, colorNumber, index, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFragDataLocationIndexed : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetFragDataIndex(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glGetFragDataIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetFragDataIndex(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragDataIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_buffer_storage

static void REGAL_CALL error_glBufferStorage(RegalContext *_context, GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  Internal("error_glBufferStorage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferStorage(_context, target, size, data, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferStorage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedBufferStorageEXT(RegalContext *_context, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  Internal("error_glNamedBufferStorageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedBufferStorageEXT(_context, buffer, size, data, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedBufferStorageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_cl_event

static GLsync REGAL_CALL error_glCreateSyncFromCLeventARB(RegalContext *_context, cl_context context, cl_event event, GLbitfield flags)
{
  Internal("error_glCreateSyncFromCLeventARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLsync  ret = _context->err.next.glCreateSyncFromCLeventARB(_context, context, event, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateSyncFromCLeventARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_clear_buffer_object

static void REGAL_CALL error_glClearBufferData(RegalContext *_context, GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glClearBufferData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearBufferData(_context, target, internalformat, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearBufferData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearBufferSubData(RegalContext *_context, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glClearBufferSubData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearBufferSubData(_context, target, internalformat, offset, size, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearBufferSubData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearNamedBufferDataEXT(RegalContext *_context, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glClearNamedBufferDataEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearNamedBufferDataEXT(_context, buffer, internalformat, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearNamedBufferDataEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glClearNamedBufferSubDataEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearNamedBufferSubDataEXT(_context, buffer, internalformat, offset, size, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearNamedBufferSubDataEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_clear_texture

static void REGAL_CALL error_glClearTexImage(RegalContext *_context, GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glClearTexImage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearTexImage(_context, texture, level, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearTexImage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearTexSubImage(RegalContext *_context, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glClearTexSubImage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearTexSubImage(_context, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearTexSubImage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_color_buffer_float

static void REGAL_CALL error_glClampColorARB(RegalContext *_context, GLenum target, GLenum clamp)
{
  Internal("error_glClampColorARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClampColorARB(_context, target, clamp);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClampColorARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_compute_shader

static void REGAL_CALL error_glDispatchCompute(RegalContext *_context, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  Internal("error_glDispatchCompute","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDispatchCompute(_context, num_groups_x, num_groups_y, num_groups_z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDispatchCompute : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDispatchComputeIndirect(RegalContext *_context, GLintptr indirect)
{
  Internal("error_glDispatchComputeIndirect","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDispatchComputeIndirect(_context, indirect);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDispatchComputeIndirect : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_compute_variable_group_size

static void REGAL_CALL error_glDispatchComputeGroupSizeARB(RegalContext *_context, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
  Internal("error_glDispatchComputeGroupSizeARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDispatchComputeGroupSizeARB(_context, num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDispatchComputeGroupSizeARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_copy_buffer

static void REGAL_CALL error_glCopyBufferSubData(RegalContext *_context, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  Internal("error_glCopyBufferSubData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyBufferSubData(_context, readtarget, writetarget, readoffset, writeoffset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyBufferSubData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_copy_image

static void REGAL_CALL error_glCopyImageSubData(RegalContext *_context, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  Internal("error_glCopyImageSubData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyImageSubData(_context, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyImageSubData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_debug_output

static void REGAL_CALL error_glDebugMessageCallbackARB(RegalContext *_context, GLDEBUGPROCARB callback, const GLvoid *userParam)
{
  Internal("error_glDebugMessageCallbackARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageCallbackARB(_context, callback, userParam);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageCallbackARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDebugMessageControlARB(RegalContext *_context, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Internal("error_glDebugMessageControlARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageControlARB(_context, source, type, severity, count, ids, enabled);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageControlARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDebugMessageInsertARB(RegalContext *_context, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  Internal("error_glDebugMessageInsertARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageInsertARB(_context, source, type, id, severity, length, buf);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageInsertARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGetDebugMessageLogARB(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  Internal("error_glGetDebugMessageLogARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGetDebugMessageLogARB(_context, count, bufsize, sources, types, ids, severities, lengths, messageLog);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDebugMessageLogARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_draw_buffers

static void REGAL_CALL error_glDrawBuffersARB(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("error_glDrawBuffersARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBuffersARB(_context, n, bufs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBuffersARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_draw_buffers_blend

static void REGAL_CALL error_glBlendEquationSeparateiARB(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("error_glBlendEquationSeparateiARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationSeparateiARB(_context, buf, modeRGB, modeAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationSeparateiARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendEquationiARB(RegalContext *_context, GLuint buf, GLenum mode)
{
  Internal("error_glBlendEquationiARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationiARB(_context, buf, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationiARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFuncSeparateiARB(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Internal("error_glBlendFuncSeparateiARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparateiARB(_context, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparateiARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendFunciARB(RegalContext *_context, GLuint buf, GLenum src, GLenum dst)
{
  Internal("error_glBlendFunciARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFunciARB(_context, buf, src, dst);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFunciARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL error_glDrawElementsBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Internal("error_glDrawElementsBaseVertex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsBaseVertex(_context, mode, count, type, indices, basevertex);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsBaseVertex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstancedBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  Internal("error_glDrawElementsInstancedBaseVertex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstancedBaseVertex(_context, mode, count, type, indices, primcount, basevertex);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstancedBaseVertex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawRangeElementsBaseVertex(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Internal("error_glDrawRangeElementsBaseVertex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawRangeElementsBaseVertex(_context, mode, start, end, count, type, indices, basevertex);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawRangeElementsBaseVertex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElementsBaseVertex(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  Internal("error_glMultiDrawElementsBaseVertex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElementsBaseVertex(_context, mode, count, type, indices, primcount, basevertex);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElementsBaseVertex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_draw_indirect

static void REGAL_CALL error_glDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect)
{
  Internal("error_glDrawArraysIndirect","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysIndirect(_context, mode, indirect);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysIndirect : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect)
{
  Internal("error_glDrawElementsIndirect","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsIndirect(_context, mode, type, indirect);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsIndirect : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_draw_instanced

static void REGAL_CALL error_glDrawArraysInstancedARB(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Internal("error_glDrawArraysInstancedARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysInstancedARB(_context, mode, start, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysInstancedARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstancedARB(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("error_glDrawElementsInstancedARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstancedARB(_context, mode, count, type, indices, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstancedARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_framebuffer_no_attachments

static void REGAL_CALL error_glFramebufferParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glFramebufferParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferParameteri(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFramebufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetFramebufferParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFramebufferParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFramebufferParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedFramebufferParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint *params)
{
  Internal("error_glGetNamedFramebufferParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedFramebufferParameterivEXT(_context, framebuffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedFramebufferParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferParameteriEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint param)
{
  Internal("error_glNamedFramebufferParameteriEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferParameteriEXT(_context, framebuffer, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferParameteriEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_framebuffer_object

static void REGAL_CALL error_glBindFramebuffer(RegalContext *_context, GLenum target, GLuint framebuffer)
{
  Internal("error_glBindFramebuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFramebuffer(_context, target, framebuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFramebuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindRenderbuffer(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("error_glBindRenderbuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindRenderbuffer(_context, target, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindRenderbuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlitFramebuffer(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("error_glBlitFramebuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlitFramebuffer(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlitFramebuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glCheckFramebufferStatus(RegalContext *_context, GLenum target)
{
  Internal("error_glCheckFramebufferStatus","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glCheckFramebufferStatus(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCheckFramebufferStatus : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteFramebuffers(RegalContext *_context, GLsizei n, const GLuint *framebuffers)
{
  Internal("error_glDeleteFramebuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteFramebuffers(_context, n, framebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteFramebuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteRenderbuffers(RegalContext *_context, GLsizei n, const GLuint *renderbuffers)
{
  Internal("error_glDeleteRenderbuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteRenderbuffers(_context, n, renderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteRenderbuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferRenderbuffer(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("error_glFramebufferRenderbuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferRenderbuffer(_context, target, attachment, renderbuffertarget, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferRenderbuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture1D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTexture1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture1D(_context, target, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture2D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTexture2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture2D(_context, target, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture3D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  Internal("error_glFramebufferTexture3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture3D(_context, target, attachment, textarget, texture, level, layer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTextureLayer(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("error_glFramebufferTextureLayer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureLayer(_context, target, attachment, texture, level, layer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureLayer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenFramebuffers(RegalContext *_context, GLsizei n, GLuint *framebuffers)
{
  Internal("error_glGenFramebuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenFramebuffers(_context, n, framebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenFramebuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenRenderbuffers(RegalContext *_context, GLsizei n, GLuint *renderbuffers)
{
  Internal("error_glGenRenderbuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenRenderbuffers(_context, n, renderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenRenderbuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenerateMipmap(RegalContext *_context, GLenum target)
{
  Internal("error_glGenerateMipmap","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenerateMipmap(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenerateMipmap : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFramebufferAttachmentParameteriv(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("error_glGetFramebufferAttachmentParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFramebufferAttachmentParameteriv(_context, target, attachment, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFramebufferAttachmentParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetRenderbufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetRenderbufferParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetRenderbufferParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetRenderbufferParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsFramebuffer(RegalContext *_context, GLuint framebuffer)
{
  Internal("error_glIsFramebuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsFramebuffer(_context, framebuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsFramebuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsRenderbuffer(RegalContext *_context, GLuint renderbuffer)
{
  Internal("error_glIsRenderbuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsRenderbuffer(_context, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsRenderbuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glRenderbufferStorage(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorage(_context, target, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRenderbufferStorageMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageMultisample","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageMultisample(_context, target, samples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageMultisample : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_geometry_shader4

static void REGAL_CALL error_glFramebufferTextureARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTextureARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureARB(_context, target, attachment, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTextureFaceARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("error_glFramebufferTextureFaceARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureFaceARB(_context, target, attachment, texture, level, face);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureFaceARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTextureLayerARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("error_glFramebufferTextureLayerARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureLayerARB(_context, target, attachment, texture, level, layer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureLayerARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameteriARB(RegalContext *_context, GLuint program, GLenum pname, GLint value)
{
  Internal("error_glProgramParameteriARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameteriARB(_context, program, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameteriARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_get_program_binary

static void REGAL_CALL error_glGetProgramBinary(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  Internal("error_glGetProgramBinary","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramBinary(_context, program, bufSize, length, binaryFormat, binary);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramBinary : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramBinary(RegalContext *_context, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
  Internal("error_glProgramBinary","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramBinary(_context, program, binaryFormat, binary, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramBinary : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameteri(RegalContext *_context, GLuint program, GLenum pname, GLint value)
{
  Internal("error_glProgramParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameteri(_context, program, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_gpu_shader_fp64

static void REGAL_CALL error_glGetUniformdv(RegalContext *_context, GLuint program, GLint location, GLdouble *params)
{
  Internal("error_glGetUniformdv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformdv(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformdv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1d(RegalContext *_context, GLint location, GLdouble x)
{
  Internal("error_glUniform1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1d(_context, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glUniform1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1dv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2d(RegalContext *_context, GLint location, GLdouble x, GLdouble y)
{
  Internal("error_glUniform2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2d(_context, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glUniform2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2dv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glUniform3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3d(_context, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glUniform3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3dv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glUniform4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4d(_context, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glUniform4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4dv(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix2x3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2x3dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2x3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix2x4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2x4dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2x4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix3x2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3x2dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3x2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix3x4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3x4dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3x4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix4x2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4x2dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4x2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glUniformMatrix4x3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4x3dv(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4x3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_imaging

static void REGAL_CALL error_glColorSubTable(RegalContext *_context, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("error_glColorSubTable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorSubTable(_context, target, start, count, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorSubTable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorTable(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("error_glColorTable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTable(_context, target, internalformat, width, format, type, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorTableParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glColorTableParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTableParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTableParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorTableParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glColorTableParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTableParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTableParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionFilter1D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("error_glConvolutionFilter1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionFilter1D(_context, target, internalformat, width, format, type, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionFilter1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("error_glConvolutionFilter2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionFilter2D(_context, target, internalformat, width, height, format, type, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionFilter2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameterf(RegalContext *_context, GLenum target, GLenum pname, GLfloat params)
{
  Internal("error_glConvolutionParameterf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameterf(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameterf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glConvolutionParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint params)
{
  Internal("error_glConvolutionParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameteri(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glConvolutionParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyColorSubTable(RegalContext *_context, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyColorSubTable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyColorSubTable(_context, target, start, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyColorSubTable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyColorTable(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyColorTable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyColorTable(_context, target, internalformat, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyColorTable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyConvolutionFilter1D(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyConvolutionFilter1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyConvolutionFilter1D(_context, target, internalformat, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyConvolutionFilter1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyConvolutionFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyConvolutionFilter2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyConvolutionFilter2D(_context, target, internalformat, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyConvolutionFilter2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTable(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  Internal("error_glGetColorTable","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTable(_context, target, format, type, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTable : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetColorTableParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetColorTableParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetConvolutionFilter(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  Internal("error_glGetConvolutionFilter","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetConvolutionFilter(_context, target, format, type, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetConvolutionFilter : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetConvolutionParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetConvolutionParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetConvolutionParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetConvolutionParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetConvolutionParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetConvolutionParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetConvolutionParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetConvolutionParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetHistogram(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Internal("error_glGetHistogram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetHistogram(_context, target, reset, format, type, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHistogram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetHistogramParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetHistogramParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetHistogramParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHistogramParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetHistogramParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetHistogramParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetHistogramParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHistogramParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMinmax(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
  Internal("error_glGetMinmax","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMinmax(_context, target, reset, format, types, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMinmax : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMinmaxParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMinmaxParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMinmaxParameterfv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMinmaxParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMinmaxParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetMinmaxParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMinmaxParameteriv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMinmaxParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSeparableFilter(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  Internal("error_glGetSeparableFilter","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSeparableFilter(_context, target, format, type, row, column, span);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSeparableFilter : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glHistogram(RegalContext *_context, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  Internal("error_glHistogram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glHistogram(_context, target, width, internalformat, sink);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glHistogram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMinmax(RegalContext *_context, GLenum target, GLenum internalformat, GLboolean sink)
{
  Internal("error_glMinmax","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMinmax(_context, target, internalformat, sink);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMinmax : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResetHistogram(RegalContext *_context, GLenum target)
{
  Internal("error_glResetHistogram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResetHistogram(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResetHistogram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResetMinmax(RegalContext *_context, GLenum target)
{
  Internal("error_glResetMinmax","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResetMinmax(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResetMinmax : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSeparableFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  Internal("error_glSeparableFilter2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSeparableFilter2D(_context, target, internalformat, width, height, format, type, row, column);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSeparableFilter2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_indirect_parameters

static void REGAL_CALL error_glMultiDrawArraysIndirectCountARB(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  Internal("error_glMultiDrawArraysIndirectCountARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawArraysIndirectCountARB(_context, mode, indirect, drawcount, maxdrawcount, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawArraysIndirectCountARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElementsIndirectCountARB(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  Internal("error_glMultiDrawElementsIndirectCountARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElementsIndirectCountARB(_context, mode, type, indirect, drawcount, maxdrawcount, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElementsIndirectCountARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_instanced_arrays

static void REGAL_CALL error_glVertexAttribDivisorARB(RegalContext *_context, GLuint index, GLuint divisor)
{
  Internal("error_glVertexAttribDivisorARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribDivisorARB(_context, index, divisor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribDivisorARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_internalformat_query

static void REGAL_CALL error_glGetInternalformativ(RegalContext *_context, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
  Internal("error_glGetInternalformativ","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInternalformativ(_context, target, internalformat, pname, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInternalformativ : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_internalformat_query2

static void REGAL_CALL error_glGetInternalformati64v(RegalContext *_context, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
  Internal("error_glGetInternalformati64v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInternalformati64v(_context, target, internalformat, pname, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInternalformati64v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_invalidate_subdata

static void REGAL_CALL error_glInvalidateBufferData(RegalContext *_context, GLuint buffer)
{
  Internal("error_glInvalidateBufferData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInvalidateBufferData(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInvalidateBufferData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInvalidateBufferSubData(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Internal("error_glInvalidateBufferSubData","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInvalidateBufferSubData(_context, buffer, offset, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInvalidateBufferSubData : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInvalidateFramebuffer(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  Internal("error_glInvalidateFramebuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInvalidateFramebuffer(_context, target, numAttachments, attachments);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInvalidateFramebuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInvalidateSubFramebuffer(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glInvalidateSubFramebuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInvalidateSubFramebuffer(_context, target, numAttachments, attachments, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInvalidateSubFramebuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInvalidateTexImage(RegalContext *_context, GLuint texture, GLint level)
{
  Internal("error_glInvalidateTexImage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInvalidateTexImage(_context, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInvalidateTexImage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInvalidateTexSubImage(RegalContext *_context, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("error_glInvalidateTexSubImage","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInvalidateTexSubImage(_context, texture, level, xoffset, yoffset, zoffset, width, height, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInvalidateTexSubImage : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_map_buffer_range

static void REGAL_CALL error_glFlushMappedBufferRange(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Internal("error_glFlushMappedBufferRange","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushMappedBufferRange(_context, target, offset, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushMappedBufferRange : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLvoid *REGAL_CALL error_glMapBufferRange(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Internal("error_glMapBufferRange","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapBufferRange(_context, target, offset, length, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapBufferRange : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_matrix_palette

static void REGAL_CALL error_glCurrentPaletteMatrixARB(RegalContext *_context, GLint index)
{
  Internal("error_glCurrentPaletteMatrixARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCurrentPaletteMatrixARB(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCurrentPaletteMatrixARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixIndexPointerARB(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glMatrixIndexPointerARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixIndexPointerARB(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixIndexPointerARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixIndexubvARB(RegalContext *_context, GLint size, const GLubyte *indices)
{
  Internal("error_glMatrixIndexubvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixIndexubvARB(_context, size, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixIndexubvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixIndexuivARB(RegalContext *_context, GLint size, const GLuint *indices)
{
  Internal("error_glMatrixIndexuivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixIndexuivARB(_context, size, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixIndexuivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixIndexusvARB(RegalContext *_context, GLint size, const GLushort *indices)
{
  Internal("error_glMatrixIndexusvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixIndexusvARB(_context, size, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixIndexusvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_multi_bind

static void REGAL_CALL error_glBindBuffersBase(RegalContext *_context, GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
  Internal("error_glBindBuffersBase","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBuffersBase(_context, target, first, count, buffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBuffersBase : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBuffersRange(RegalContext *_context, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
  Internal("error_glBindBuffersRange","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBuffersRange(_context, target, first, count, buffers, offsets, sizes);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBuffersRange : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindImageTextures(RegalContext *_context, GLuint first, GLsizei count, const GLuint *textures)
{
  Internal("error_glBindImageTextures","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindImageTextures(_context, first, count, textures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindImageTextures : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindSamplers(RegalContext *_context, GLuint first, GLsizei count, const GLuint *samplers)
{
  Internal("error_glBindSamplers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindSamplers(_context, first, count, samplers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindSamplers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindTextures(RegalContext *_context, GLuint first, GLsizei count, const GLuint *textures)
{
  Internal("error_glBindTextures","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindTextures(_context, first, count, textures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTextures : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindVertexBuffers(RegalContext *_context, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
  Internal("error_glBindVertexBuffers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVertexBuffers(_context, first, count, buffers, offsets, strides);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVertexBuffers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_multi_draw_indirect

static void REGAL_CALL error_glMultiDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("error_glMultiDrawArraysIndirect","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawArraysIndirect(_context, mode, indirect, primcount, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawArraysIndirect : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("error_glMultiDrawElementsIndirect","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElementsIndirect(_context, mode, type, indirect, primcount, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElementsIndirect : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_multisample

static void REGAL_CALL error_glSampleCoverageARB(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("error_glSampleCoverageARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleCoverageARB(_context, value, invert);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleCoverageARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_multitexture

static void REGAL_CALL error_glActiveTextureARB(RegalContext *_context, GLenum texture)
{
  Internal("error_glActiveTextureARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glActiveTextureARB(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glActiveTextureARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClientActiveTextureARB(RegalContext *_context, GLenum texture)
{
  Internal("error_glClientActiveTextureARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClientActiveTextureARB(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClientActiveTextureARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1dARB(RegalContext *_context, GLenum target, GLdouble s)
{
  Internal("error_glMultiTexCoord1dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1dARB(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord1dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1dvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1fARB(RegalContext *_context, GLenum target, GLfloat s)
{
  Internal("error_glMultiTexCoord1fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1fARB(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord1fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1fvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1iARB(RegalContext *_context, GLenum target, GLint s)
{
  Internal("error_glMultiTexCoord1iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1iARB(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord1ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1ivARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1sARB(RegalContext *_context, GLenum target, GLshort s)
{
  Internal("error_glMultiTexCoord1sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1sARB(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord1svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1svARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t)
{
  Internal("error_glMultiTexCoord2dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2dARB(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord2dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2dvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t)
{
  Internal("error_glMultiTexCoord2fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2fARB(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord2fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2fvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2iARB(RegalContext *_context, GLenum target, GLint s, GLint t)
{
  Internal("error_glMultiTexCoord2iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2iARB(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord2ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2ivARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t)
{
  Internal("error_glMultiTexCoord2sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2sARB(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord2svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2svARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  Internal("error_glMultiTexCoord3dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3dARB(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord3dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3dvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  Internal("error_glMultiTexCoord3fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3fARB(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord3fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3fvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r)
{
  Internal("error_glMultiTexCoord3iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3iARB(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord3ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3ivARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r)
{
  Internal("error_glMultiTexCoord3sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3sARB(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord3svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3svARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Internal("error_glMultiTexCoord4dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4dARB(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("error_glMultiTexCoord4dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4dvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Internal("error_glMultiTexCoord4fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4fARB(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("error_glMultiTexCoord4fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4fvARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  Internal("error_glMultiTexCoord4iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4iARB(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("error_glMultiTexCoord4ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4ivARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Internal("error_glMultiTexCoord4sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4sARB(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("error_glMultiTexCoord4svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4svARB(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_occlusion_query

static void REGAL_CALL error_glBeginQueryARB(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBeginQueryARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginQueryARB(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginQueryARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteQueriesARB(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteQueriesARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteQueriesARB(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteQueriesARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndQueryARB(RegalContext *_context, GLenum target)
{
  Internal("error_glEndQueryARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndQueryARB(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndQueryARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenQueriesARB(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenQueriesARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenQueriesARB(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenQueriesARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectivARB(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryObjectivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectivARB(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectuivARB(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("error_glGetQueryObjectuivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectuivARB(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectuivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryivARB(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsQueryARB(RegalContext *_context, GLuint id)
{
  Internal("error_glIsQueryARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsQueryARB(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsQueryARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_point_parameters

static void REGAL_CALL error_glPointParameterfARB(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPointParameterfARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfARB(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterfvARB(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glPointParameterfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfvARB(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_program_interface_query

static void REGAL_CALL error_glGetProgramInterfaceiv(RegalContext *_context, GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
  Internal("error_glGetProgramInterfaceiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramInterfaceiv(_context, program, programInterface, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramInterfaceiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGetProgramResourceIndex(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name)
{
  Internal("error_glGetProgramResourceIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGetProgramResourceIndex(_context, program, programInterface, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramResourceIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLint REGAL_CALL error_glGetProgramResourceLocation(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name)
{
  Internal("error_glGetProgramResourceLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetProgramResourceLocation(_context, program, programInterface, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramResourceLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLint REGAL_CALL error_glGetProgramResourceLocationIndex(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name)
{
  Internal("error_glGetProgramResourceLocationIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetProgramResourceLocationIndex(_context, program, programInterface, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramResourceLocationIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetProgramResourceName(RegalContext *_context, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Internal("error_glGetProgramResourceName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramResourceName(_context, program, programInterface, index, bufSize, length, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramResourceName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramResourceiv(RegalContext *_context, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
  Internal("error_glGetProgramResourceiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramResourceiv(_context, program, programInterface, index, propCount, props, bufSize, length, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramResourceiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_provoking_vertex

static void REGAL_CALL error_glProvokingVertex(RegalContext *_context, GLenum mode)
{
  Internal("error_glProvokingVertex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProvokingVertex(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProvokingVertex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_robustness

static GLenum REGAL_CALL error_glGetGraphicsResetStatusARB(RegalContext *_context)
{
  Internal("error_glGetGraphicsResetStatusARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glGetGraphicsResetStatusARB(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetGraphicsResetStatusARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetnColorTableARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
  Internal("error_glGetnColorTableARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnColorTableARB(_context, target, format, type, bufSize, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnColorTableARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnCompressedTexImageARB(RegalContext *_context, GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
  Internal("error_glGetnCompressedTexImageARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnCompressedTexImageARB(_context, target, lod, bufSize, img);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnCompressedTexImageARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnConvolutionFilterARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
  Internal("error_glGetnConvolutionFilterARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnConvolutionFilterARB(_context, target, format, type, bufSize, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnConvolutionFilterARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnHistogramARB(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  Internal("error_glGetnHistogramARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnHistogramARB(_context, target, reset, format, type, bufSize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnHistogramARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnMapdvARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
  Internal("error_glGetnMapdvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnMapdvARB(_context, target, query, bufSize, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnMapdvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnMapfvARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
  Internal("error_glGetnMapfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnMapfvARB(_context, target, query, bufSize, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnMapfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnMapivARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
  Internal("error_glGetnMapivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnMapivARB(_context, target, query, bufSize, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnMapivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnMinmaxARB(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  Internal("error_glGetnMinmaxARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnMinmaxARB(_context, target, reset, format, type, bufSize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnMinmaxARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnPixelMapfvARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLfloat *values)
{
  Internal("error_glGetnPixelMapfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnPixelMapfvARB(_context, map, bufSize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnPixelMapfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnPixelMapuivARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLuint *values)
{
  Internal("error_glGetnPixelMapuivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnPixelMapuivARB(_context, map, bufSize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnPixelMapuivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnPixelMapusvARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLushort *values)
{
  Internal("error_glGetnPixelMapusvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnPixelMapusvARB(_context, map, bufSize, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnPixelMapusvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnPolygonStippleARB(RegalContext *_context, GLsizei bufSize, GLubyte *pattern)
{
  Internal("error_glGetnPolygonStippleARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnPolygonStippleARB(_context, bufSize, pattern);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnPolygonStippleARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnSeparableFilterARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
  Internal("error_glGetnSeparableFilterARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnSeparableFilterARB(_context, target, format, type, rowBufSize, row, columnBufSize, column, span);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnSeparableFilterARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnTexImageARB(RegalContext *_context, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
  Internal("error_glGetnTexImageARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnTexImageARB(_context, target, level, format, type, bufSize, img);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnTexImageARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnUniformdvARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
  Internal("error_glGetnUniformdvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnUniformdvARB(_context, program, location, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnUniformdvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnUniformfvARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  Internal("error_glGetnUniformfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnUniformfvARB(_context, program, location, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnUniformfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnUniformivARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  Internal("error_glGetnUniformivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnUniformivARB(_context, program, location, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnUniformivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnUniformuivARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
  Internal("error_glGetnUniformuivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnUniformuivARB(_context, program, location, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnUniformuivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReadnPixelsARB(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  Internal("error_glReadnPixelsARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadnPixelsARB(_context, x, y, width, height, format, type, bufSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadnPixelsARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_sample_shading

static void REGAL_CALL error_glMinSampleShading(RegalContext *_context, GLclampf value)
{
  Internal("error_glMinSampleShading","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMinSampleShading(_context, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMinSampleShading : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMinSampleShadingARB(RegalContext *_context, GLclampf value)
{
  Internal("error_glMinSampleShadingARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMinSampleShadingARB(_context, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMinSampleShadingARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_sampler_objects

static void REGAL_CALL error_glBindSampler(RegalContext *_context, GLuint unit, GLuint sampler)
{
  Internal("error_glBindSampler","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindSampler(_context, unit, sampler);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindSampler : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteSamplers(RegalContext *_context, GLsizei count, const GLuint *samplers)
{
  Internal("error_glDeleteSamplers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteSamplers(_context, count, samplers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteSamplers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenSamplers(RegalContext *_context, GLsizei count, GLuint *samplers)
{
  Internal("error_glGenSamplers","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenSamplers(_context, count, samplers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenSamplers : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSamplerParameterIiv(RegalContext *_context, GLuint sampler, GLenum pname, GLint *params)
{
  Internal("error_glGetSamplerParameterIiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSamplerParameterIiv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSamplerParameterIiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSamplerParameterIuiv(RegalContext *_context, GLuint sampler, GLenum pname, GLuint *params)
{
  Internal("error_glGetSamplerParameterIuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSamplerParameterIuiv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSamplerParameterIuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSamplerParameterfv(RegalContext *_context, GLuint sampler, GLenum pname, GLfloat *params)
{
  Internal("error_glGetSamplerParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSamplerParameterfv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSamplerParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSamplerParameteriv(RegalContext *_context, GLuint sampler, GLenum pname, GLint *params)
{
  Internal("error_glGetSamplerParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSamplerParameteriv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSamplerParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsSampler(RegalContext *_context, GLuint sampler)
{
  Internal("error_glIsSampler","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsSampler(_context, sampler);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsSampler : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glSamplerParameterIiv(RegalContext *_context, GLuint sampler, GLenum pname, const GLint *params)
{
  Internal("error_glSamplerParameterIiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplerParameterIiv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplerParameterIiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplerParameterIuiv(RegalContext *_context, GLuint sampler, GLenum pname, const GLuint *params)
{
  Internal("error_glSamplerParameterIuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplerParameterIuiv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplerParameterIuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplerParameterf(RegalContext *_context, GLuint sampler, GLenum pname, GLfloat param)
{
  Internal("error_glSamplerParameterf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplerParameterf(_context, sampler, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplerParameterf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplerParameterfv(RegalContext *_context, GLuint sampler, GLenum pname, const GLfloat *params)
{
  Internal("error_glSamplerParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplerParameterfv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplerParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplerParameteri(RegalContext *_context, GLuint sampler, GLenum pname, GLint param)
{
  Internal("error_glSamplerParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplerParameteri(_context, sampler, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplerParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplerParameteriv(RegalContext *_context, GLuint sampler, GLenum pname, const GLint *params)
{
  Internal("error_glSamplerParameteriv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplerParameteriv(_context, sampler, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplerParameteriv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_separate_shader_objects

static void REGAL_CALL error_glActiveShaderProgram(RegalContext *_context, GLuint pipeline, GLuint program)
{
  Internal("error_glActiveShaderProgram","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glActiveShaderProgram(_context, pipeline, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glActiveShaderProgram : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  Internal("error_glBindProgramPipeline","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindProgramPipeline(_context, pipeline);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindProgramPipeline : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glCreateShaderProgramv(RegalContext *_context, GLenum type, GLsizei count, const GLchar * const *strings)
{
  Internal("error_glCreateShaderProgramv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glCreateShaderProgramv(_context, type, count, strings);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateShaderProgramv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteProgramPipelines(RegalContext *_context, GLsizei n, const GLuint *pipelines)
{
  Internal("error_glDeleteProgramPipelines","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteProgramPipelines(_context, n, pipelines);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteProgramPipelines : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenProgramPipelines(RegalContext *_context, GLsizei n, GLuint *pipelines)
{
  Internal("error_glGenProgramPipelines","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenProgramPipelines(_context, n, pipelines);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenProgramPipelines : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramPipelineInfoLog(RegalContext *_context, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("error_glGetProgramPipelineInfoLog","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramPipelineInfoLog(_context, pipeline, bufSize, length, infoLog);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramPipelineInfoLog : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramPipelineiv(RegalContext *_context, GLuint pipeline, GLenum pname, GLint *params)
{
  Internal("error_glGetProgramPipelineiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramPipelineiv(_context, pipeline, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramPipelineiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  Internal("error_glIsProgramPipeline","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsProgramPipeline(_context, pipeline);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsProgramPipeline : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glProgramUniform1d(RegalContext *_context, GLuint program, GLint location, GLdouble x)
{
  Internal("error_glProgramUniform1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1d(_context, program, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1dv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1f(RegalContext *_context, GLuint program, GLint location, GLfloat x)
{
  Internal("error_glProgramUniform1f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1f(_context, program, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform1fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1fv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1i(RegalContext *_context, GLuint program, GLint location, GLint x)
{
  Internal("error_glProgramUniform1i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1i(_context, program, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform1iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1iv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1ui(RegalContext *_context, GLuint program, GLint location, GLuint v0)
{
  Internal("error_glProgramUniform1ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1ui(_context, program, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform1uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1uiv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Internal("error_glProgramUniform2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2d(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2dv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y)
{
  Internal("error_glProgramUniform2f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2f(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2fv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y)
{
  Internal("error_glProgramUniform2i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2i(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform2iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2iv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y)
{
  Internal("error_glProgramUniform2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2ui(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2uiv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glProgramUniform3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3d(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3dv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glProgramUniform3f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3f(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3fv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y, GLint z)
{
  Internal("error_glProgramUniform3i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3i(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform3iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3iv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
  Internal("error_glProgramUniform3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3ui(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3uiv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glProgramUniform4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4d(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4dv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glProgramUniform4f","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4f(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4f : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4fv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glProgramUniform4i","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4i(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4i : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform4iv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4iv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4iv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("error_glProgramUniform4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4ui(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4uiv(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix2x3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x3dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix2x3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x3fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix2x4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x4dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix2x4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x4fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix3x2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x2dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix3x2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x2fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix3x4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x4dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix3x4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x4fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix4fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix4x2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x2dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix4x2fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x2fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x2fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix4x3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x3dv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix4x3fv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x3fv(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x3fv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUseProgramStages(RegalContext *_context, GLuint pipeline, GLbitfield stages, GLuint program)
{
  Internal("error_glUseProgramStages","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUseProgramStages(_context, pipeline, stages, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUseProgramStages : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glValidateProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  Internal("error_glValidateProgramPipeline","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glValidateProgramPipeline(_context, pipeline);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glValidateProgramPipeline : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_shader_atomic_counters

static void REGAL_CALL error_glGetActiveAtomicCounterBufferiv(RegalContext *_context, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
  Internal("error_glGetActiveAtomicCounterBufferiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveAtomicCounterBufferiv(_context, program, bufferIndex, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveAtomicCounterBufferiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_shader_image_load_store

static void REGAL_CALL error_glBindImageTexture(RegalContext *_context, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  Internal("error_glBindImageTexture","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindImageTexture(_context, unit, texture, level, layered, layer, access, format);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindImageTexture : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMemoryBarrier(RegalContext *_context, GLbitfield barriers)
{
  Internal("error_glMemoryBarrier","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMemoryBarrier(_context, barriers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMemoryBarrier : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_shader_objects

static void REGAL_CALL error_glAttachObjectARB(RegalContext *_context, GLhandleARB containerObj, GLhandleARB obj)
{
  Internal("error_glAttachObjectARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAttachObjectARB(_context, containerObj, obj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAttachObjectARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompileShaderARB(RegalContext *_context, GLhandleARB shaderObj)
{
  Internal("error_glCompileShaderARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompileShaderARB(_context, shaderObj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompileShaderARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLhandleARB REGAL_CALL error_glCreateProgramObjectARB(RegalContext *_context)
{
  Internal("error_glCreateProgramObjectARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLhandleARB  ret = _context->err.next.glCreateProgramObjectARB(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateProgramObjectARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLhandleARB REGAL_CALL error_glCreateShaderObjectARB(RegalContext *_context, GLenum shaderType)
{
  Internal("error_glCreateShaderObjectARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLhandleARB  ret = _context->err.next.glCreateShaderObjectARB(_context, shaderType);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateShaderObjectARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteObjectARB(RegalContext *_context, GLhandleARB obj)
{
  Internal("error_glDeleteObjectARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteObjectARB(_context, obj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteObjectARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDetachObjectARB(RegalContext *_context, GLhandleARB containerObj, GLhandleARB attachedObj)
{
  Internal("error_glDetachObjectARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDetachObjectARB(_context, containerObj, attachedObj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDetachObjectARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveUniformARB(RegalContext *_context, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  Internal("error_glGetActiveUniformARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveUniformARB(_context, programObj, index, maxLength, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveUniformARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetAttachedObjectsARB(RegalContext *_context, GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
  Internal("error_glGetAttachedObjectsARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetAttachedObjectsARB(_context, containerObj, maxCount, count, obj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetAttachedObjectsARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLhandleARB REGAL_CALL error_glGetHandleARB(RegalContext *_context, GLenum pname)
{
  Internal("error_glGetHandleARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLhandleARB  ret = _context->err.next.glGetHandleARB(_context, pname);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHandleARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetInfoLogARB(RegalContext *_context, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  Internal("error_glGetInfoLogARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInfoLogARB(_context, obj, maxLength, length, infoLog);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInfoLogARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetObjectParameterfvARB(RegalContext *_context, GLhandleARB obj, GLenum pname, GLfloat *params)
{
  Internal("error_glGetObjectParameterfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectParameterfvARB(_context, obj, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectParameterfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetObjectParameterivARB(RegalContext *_context, GLhandleARB obj, GLenum pname, GLint *params)
{
  Internal("error_glGetObjectParameterivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectParameterivARB(_context, obj, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectParameterivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetShaderSourceARB(RegalContext *_context, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
  Internal("error_glGetShaderSourceARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetShaderSourceARB(_context, obj, maxLength, length, source);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetShaderSourceARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetUniformLocationARB(RegalContext *_context, GLhandleARB programObj, const GLcharARB *name)
{
  Internal("error_glGetUniformLocationARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetUniformLocationARB(_context, programObj, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformLocationARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetUniformfvARB(RegalContext *_context, GLhandleARB programObj, GLint location, GLfloat *params)
{
  Internal("error_glGetUniformfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformfvARB(_context, programObj, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetUniformivARB(RegalContext *_context, GLhandleARB programObj, GLint location, GLint *params)
{
  Internal("error_glGetUniformivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformivARB(_context, programObj, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLinkProgramARB(RegalContext *_context, GLhandleARB programObj)
{
  Internal("error_glLinkProgramARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLinkProgramARB(_context, programObj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLinkProgramARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShaderSourceARB(RegalContext *_context, GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
{
  Internal("error_glShaderSourceARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderSourceARB(_context, shaderObj, count, string, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderSourceARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1fARB(RegalContext *_context, GLint location, GLfloat v0)
{
  Internal("error_glUniform1fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1fARB(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform1fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1fvARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1iARB(RegalContext *_context, GLint location, GLint v0)
{
  Internal("error_glUniform1iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1iARB(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform1ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1ivARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1)
{
  Internal("error_glUniform2fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2fARB(_context, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform2fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2fvARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2iARB(RegalContext *_context, GLint location, GLint v0, GLint v1)
{
  Internal("error_glUniform2iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2iARB(_context, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform2ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2ivARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("error_glUniform3fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3fARB(_context, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform3fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3fvARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("error_glUniform3iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3iARB(_context, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform3ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3ivARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("error_glUniform4fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4fARB(_context, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glUniform4fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4fvARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("error_glUniform4iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4iARB(_context, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glUniform4ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4ivARB(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix2fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2fvARB(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix3fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3fvARB(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix4fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4fvARB(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUseProgramObjectARB(RegalContext *_context, GLhandleARB programObj)
{
  Internal("error_glUseProgramObjectARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUseProgramObjectARB(_context, programObj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUseProgramObjectARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glValidateProgramARB(RegalContext *_context, GLhandleARB programObj)
{
  Internal("error_glValidateProgramARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glValidateProgramARB(_context, programObj);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glValidateProgramARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_shader_storage_buffer_object

static void REGAL_CALL error_glShaderStorageBlockBinding(RegalContext *_context, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  Internal("error_glShaderStorageBlockBinding","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderStorageBlockBinding(_context, program, storageBlockIndex, storageBlockBinding);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderStorageBlockBinding : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_shader_subroutine

static void REGAL_CALL error_glGetActiveSubroutineName(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Internal("error_glGetActiveSubroutineName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveSubroutineName(_context, program, shaderType, index, bufSize, length, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveSubroutineName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveSubroutineUniformName(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Internal("error_glGetActiveSubroutineUniformName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveSubroutineUniformName(_context, program, shaderType, index, bufSize, length, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveSubroutineUniformName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveSubroutineUniformiv(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
  Internal("error_glGetActiveSubroutineUniformiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveSubroutineUniformiv(_context, program, shaderType, index, pname, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveSubroutineUniformiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramStageiv(RegalContext *_context, GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
  Internal("error_glGetProgramStageiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramStageiv(_context, program, shaderType, pname, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramStageiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramSubroutineParameteruivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params)
{
  Internal("error_glGetProgramSubroutineParameteruivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramSubroutineParameteruivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramSubroutineParameteruivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGetSubroutineIndex(RegalContext *_context, GLuint program, GLenum shaderType, const GLchar *name)
{
  Internal("error_glGetSubroutineIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGetSubroutineIndex(_context, program, shaderType, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSubroutineIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLint REGAL_CALL error_glGetSubroutineUniformLocation(RegalContext *_context, GLuint program, GLenum shaderType, const GLchar *name)
{
  Internal("error_glGetSubroutineUniformLocation","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetSubroutineUniformLocation(_context, program, shaderType, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSubroutineUniformLocation : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetUniformSubroutineuiv(RegalContext *_context, GLenum shaderType, GLint location, GLuint *params)
{
  Internal("error_glGetUniformSubroutineuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformSubroutineuiv(_context, shaderType, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformSubroutineuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramSubroutineParametersuivNV(RegalContext *_context, GLenum target, GLsizei count, const GLuint *params)
{
  Internal("error_glProgramSubroutineParametersuivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramSubroutineParametersuivNV(_context, target, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramSubroutineParametersuivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformSubroutinesuiv(RegalContext *_context, GLenum shaderType, GLsizei count, const GLuint *indices)
{
  Internal("error_glUniformSubroutinesuiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformSubroutinesuiv(_context, shaderType, count, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformSubroutinesuiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_shading_language_include

static void REGAL_CALL error_glCompileShaderIncludeARB(RegalContext *_context, GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
  Internal("error_glCompileShaderIncludeARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompileShaderIncludeARB(_context, shader, count, path, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompileShaderIncludeARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name)
{
  Internal("error_glDeleteNamedStringARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteNamedStringARB(_context, namelen, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteNamedStringARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
  Internal("error_glGetNamedStringARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedStringARB(_context, namelen, name, bufSize, stringlen, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedStringARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedStringivARB(RegalContext *_context, GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
  Internal("error_glGetNamedStringivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedStringivARB(_context, namelen, name, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedStringivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name)
{
  Internal("error_glIsNamedStringARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsNamedStringARB(_context, namelen, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsNamedStringARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glNamedStringARB(RegalContext *_context, GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
  Internal("error_glNamedStringARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedStringARB(_context, type, namelen, name, stringlen, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedStringARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_sparse_texture

static void REGAL_CALL error_glTexPageCommitmentARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  Internal("error_glTexPageCommitmentARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexPageCommitmentARB(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexPageCommitmentARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexturePageCommitmentEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  Internal("error_glTexturePageCommitmentEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexturePageCommitmentEXT(_context, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexturePageCommitmentEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_sync

static GLenum REGAL_CALL error_glClientWaitSync(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Internal("error_glClientWaitSync","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glClientWaitSync(_context, sync, flags, timeout);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClientWaitSync : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteSync(RegalContext *_context, GLsync sync)
{
  Internal("error_glDeleteSync","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteSync(_context, sync);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteSync : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLsync REGAL_CALL error_glFenceSync(RegalContext *_context, GLenum condition, GLbitfield flags)
{
  Internal("error_glFenceSync","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLsync  ret = _context->err.next.glFenceSync(_context, condition, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFenceSync : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetInteger64v(RegalContext *_context, GLenum pname, GLint64 *params)
{
  Internal("error_glGetInteger64v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInteger64v(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInteger64v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSynciv(RegalContext *_context, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Internal("error_glGetSynciv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSynciv(_context, sync, pname, bufSize, length, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSynciv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsSync(RegalContext *_context, GLsync sync)
{
  Internal("error_glIsSync","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsSync(_context, sync);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsSync : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glWaitSync(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Internal("error_glWaitSync","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWaitSync(_context, sync, flags, timeout);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWaitSync : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_tessellation_shader

static void REGAL_CALL error_glPatchParameterfv(RegalContext *_context, GLenum pname, const GLfloat *values)
{
  Internal("error_glPatchParameterfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPatchParameterfv(_context, pname, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPatchParameterfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPatchParameteri(RegalContext *_context, GLenum pname, GLint value)
{
  Internal("error_glPatchParameteri","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPatchParameteri(_context, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPatchParameteri : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_buffer_object

static void REGAL_CALL error_glTexBufferARB(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("error_glTexBufferARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexBufferARB(_context, target, internalformat, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexBufferARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_buffer_range

static void REGAL_CALL error_glTexBufferRange(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("error_glTexBufferRange","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexBufferRange(_context, target, internalformat, buffer, offset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexBufferRange : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureBufferRangeEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("error_glTextureBufferRangeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureBufferRangeEXT(_context, texture, target, internalformat, buffer, offset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureBufferRangeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_compression

static void REGAL_CALL error_glCompressedTexImage1DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage1DARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage1DARB(_context, target, level, internalformat, width, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage1DARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexImage2DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage2DARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage2DARB(_context, target, level, internalformat, width, height, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage2DARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexImage3DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage3DARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage3DARB(_context, target, level, internalformat, width, height, depth, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage3DARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage1DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage1DARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage1DARB(_context, target, level, xoffset, width, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage1DARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage2DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage2DARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage2DARB(_context, target, level, xoffset, yoffset, width, height, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage2DARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage3DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage3DARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage3DARB(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage3DARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCompressedTexImageARB(RegalContext *_context, GLenum target, GLint lod, GLvoid *img)
{
  Internal("error_glGetCompressedTexImageARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCompressedTexImageARB(_context, target, lod, img);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCompressedTexImageARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_multisample

static void REGAL_CALL error_glGetMultisamplefv(RegalContext *_context, GLenum pname, GLuint index, GLfloat *val)
{
  Internal("error_glGetMultisamplefv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultisamplefv(_context, pname, index, val);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultisamplefv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSampleMaski(RegalContext *_context, GLuint index, GLbitfield mask)
{
  Internal("error_glSampleMaski","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleMaski(_context, index, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleMaski : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Internal("error_glTexImage2DMultisample","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage2DMultisample(_context, target, samples, internalformat, width, height, fixedsamplelocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage2DMultisample : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Internal("error_glTexImage3DMultisample","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage3DMultisample(_context, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage3DMultisample : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_storage

static void REGAL_CALL error_glTexStorage1D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Internal("error_glTexStorage1D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage1D(_context, target, levels, internalformat, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage1D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexStorage2D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glTexStorage2D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage2D(_context, target, levels, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage2D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexStorage3D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("error_glTexStorage3D","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage3D(_context, target, levels, internalformat, width, height, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage3D : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureStorage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Internal("error_glTextureStorage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureStorage1DEXT(_context, texture, target, levels, internalformat, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureStorage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureStorage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glTextureStorage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureStorage2DEXT(_context, texture, target, levels, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureStorage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureStorage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("error_glTextureStorage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureStorage3DEXT(_context, texture, target, levels, internalformat, width, height, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureStorage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_storage_multisample

static void REGAL_CALL error_glTexStorage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Internal("error_glTexStorage2DMultisample","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage2DMultisample(_context, target, samples, internalformat, width, height, fixedsamplelocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage2DMultisample : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexStorage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Internal("error_glTexStorage3DMultisample","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage3DMultisample(_context, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage3DMultisample : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureStorage2DMultisampleEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Internal("error_glTextureStorage2DMultisampleEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureStorage2DMultisampleEXT(_context, texture, target, samples, internalformat, width, height, fixedsamplelocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureStorage2DMultisampleEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureStorage3DMultisampleEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Internal("error_glTextureStorage3DMultisampleEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureStorage3DMultisampleEXT(_context, texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureStorage3DMultisampleEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_texture_view

static void REGAL_CALL error_glTextureView(RegalContext *_context, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  Internal("error_glTextureView","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureView(_context, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureView : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_timer_query

static void REGAL_CALL error_glGetQueryObjecti64v(RegalContext *_context, GLuint id, GLenum pname, GLint64 *params)
{
  Internal("error_glGetQueryObjecti64v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjecti64v(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjecti64v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectui64v(RegalContext *_context, GLuint id, GLenum pname, GLuint64 *params)
{
  Internal("error_glGetQueryObjectui64v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectui64v(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectui64v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glQueryCounter(RegalContext *_context, GLuint id, GLenum target)
{
  Internal("error_glQueryCounter","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glQueryCounter(_context, id, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glQueryCounter : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_transform_feedback2

static void REGAL_CALL error_glBindTransformFeedback(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBindTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindTransformFeedback(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteTransformFeedbacks(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteTransformFeedbacks","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteTransformFeedbacks(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteTransformFeedbacks : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawTransformFeedback(RegalContext *_context, GLenum mode, GLuint name)
{
  Internal("error_glDrawTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawTransformFeedback(_context, mode, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenTransformFeedbacks(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenTransformFeedbacks","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenTransformFeedbacks(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenTransformFeedbacks : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsTransformFeedback(RegalContext *_context, GLuint id)
{
  Internal("error_glIsTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsTransformFeedback(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glPauseTransformFeedback(RegalContext *_context)
{
  Internal("error_glPauseTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPauseTransformFeedback(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPauseTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResumeTransformFeedback(RegalContext *_context)
{
  Internal("error_glResumeTransformFeedback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResumeTransformFeedback(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResumeTransformFeedback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_transform_feedback3

static void REGAL_CALL error_glBeginQueryIndexed(RegalContext *_context, GLenum target, GLuint index, GLuint id)
{
  Internal("error_glBeginQueryIndexed","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginQueryIndexed(_context, target, index, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginQueryIndexed : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawTransformFeedbackStream(RegalContext *_context, GLenum mode, GLuint id, GLuint stream)
{
  Internal("error_glDrawTransformFeedbackStream","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawTransformFeedbackStream(_context, mode, id, stream);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawTransformFeedbackStream : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndQueryIndexed(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("error_glEndQueryIndexed","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndQueryIndexed(_context, target, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndQueryIndexed : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryIndexediv(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryIndexediv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryIndexediv(_context, target, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryIndexediv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_transform_feedback_instanced

static void REGAL_CALL error_glDrawTransformFeedbackInstanced(RegalContext *_context, GLenum mode, GLuint id, GLsizei primcount)
{
  Internal("error_glDrawTransformFeedbackInstanced","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawTransformFeedbackInstanced(_context, mode, id, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawTransformFeedbackInstanced : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawTransformFeedbackStreamInstanced(RegalContext *_context, GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
  Internal("error_glDrawTransformFeedbackStreamInstanced","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawTransformFeedbackStreamInstanced(_context, mode, id, stream, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawTransformFeedbackStreamInstanced : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_transpose_matrix

static void REGAL_CALL error_glLoadTransposeMatrixdARB(RegalContext *_context, const GLdouble *m)
{
  Internal("error_glLoadTransposeMatrixdARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadTransposeMatrixdARB(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadTransposeMatrixdARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadTransposeMatrixfARB(RegalContext *_context, const GLfloat *m)
{
  Internal("error_glLoadTransposeMatrixfARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadTransposeMatrixfARB(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadTransposeMatrixfARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultTransposeMatrixdARB(RegalContext *_context, const GLdouble *m)
{
  Internal("error_glMultTransposeMatrixdARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultTransposeMatrixdARB(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultTransposeMatrixdARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultTransposeMatrixfARB(RegalContext *_context, const GLfloat *m)
{
  Internal("error_glMultTransposeMatrixfARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultTransposeMatrixfARB(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultTransposeMatrixfARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_uniform_buffer_object

static void REGAL_CALL error_glBindBufferBase(RegalContext *_context, GLenum target, GLuint index, GLuint buffer)
{
  Internal("error_glBindBufferBase","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferBase(_context, target, index, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferBase : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferRange(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("error_glBindBufferRange","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferRange(_context, target, index, buffer, offset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferRange : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveUniformBlockName(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
  Internal("error_glGetActiveUniformBlockName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveUniformBlockName(_context, program, uniformBlockIndex, bufSize, length, uniformBlockName);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveUniformBlockName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveUniformBlockiv(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
  Internal("error_glGetActiveUniformBlockiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveUniformBlockiv(_context, program, uniformBlockIndex, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveUniformBlockiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveUniformName(RegalContext *_context, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
  Internal("error_glGetActiveUniformName","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveUniformName(_context, program, uniformIndex, bufSize, length, uniformName);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveUniformName : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveUniformsiv(RegalContext *_context, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
  Internal("error_glGetActiveUniformsiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveUniformsiv(_context, program, uniformCount, uniformIndices, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveUniformsiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetIntegeri_v(RegalContext *_context, GLenum target, GLuint index, GLint *data)
{
  Internal("error_glGetIntegeri_v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetIntegeri_v(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetIntegeri_v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGetUniformBlockIndex(RegalContext *_context, GLuint program, const GLchar *uniformBlockName)
{
  Internal("error_glGetUniformBlockIndex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGetUniformBlockIndex(_context, program, uniformBlockName);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformBlockIndex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetUniformIndices(RegalContext *_context, GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
  Internal("error_glGetUniformIndices","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformIndices(_context, program, uniformCount, uniformNames, uniformIndices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformIndices : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformBlockBinding(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  Internal("error_glUniformBlockBinding","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformBlockBinding(_context, program, uniformBlockIndex, uniformBlockBinding);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformBlockBinding : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_vertex_array_object

static void REGAL_CALL error_glBindVertexArray(RegalContext *_context, GLuint array)
{
  Internal("error_glBindVertexArray","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVertexArray(_context, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVertexArray : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteVertexArrays(RegalContext *_context, GLsizei n, const GLuint *arrays)
{
  Internal("error_glDeleteVertexArrays","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteVertexArrays(_context, n, arrays);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteVertexArrays : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenVertexArrays(RegalContext *_context, GLsizei n, GLuint *arrays)
{
  Internal("error_glGenVertexArrays","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenVertexArrays(_context, n, arrays);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenVertexArrays : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsVertexArray(RegalContext *_context, GLuint array)
{
  Internal("error_glIsVertexArray","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsVertexArray(_context, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsVertexArray : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_vertex_attrib_64bit

static void REGAL_CALL error_glGetVertexAttribLdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("error_glGetVertexAttribLdv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribLdv(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribLdv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1d(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("error_glVertexAttribL1d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1d(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL1dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("error_glVertexAttribL2d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2d(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL2dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertexAttribL3d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3d(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL3dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertexAttribL4d","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4d(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4d : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL4dv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4dv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4dv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribLPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribLPointer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribLPointer(_context, index, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribLPointer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_vertex_attrib_binding

static void REGAL_CALL error_glBindVertexBuffer(RegalContext *_context, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Internal("error_glBindVertexBuffer","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVertexBuffer(_context, bindingindex, buffer, offset, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVertexBuffer : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayBindVertexBufferEXT(RegalContext *_context, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Internal("error_glVertexArrayBindVertexBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayBindVertexBufferEXT(_context, vaobj, bindingindex, buffer, offset, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayBindVertexBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribBindingEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  Internal("error_glVertexArrayVertexAttribBindingEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribBindingEXT(_context, vaobj, attribindex, bindingindex);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribBindingEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Internal("error_glVertexArrayVertexAttribFormatEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribFormatEXT(_context, vaobj, attribindex, size, type, normalized, relativeoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribFormatEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribIFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("error_glVertexArrayVertexAttribIFormatEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribIFormatEXT(_context, vaobj, attribindex, size, type, relativeoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribIFormatEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribLFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("error_glVertexArrayVertexAttribLFormatEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribLFormatEXT(_context, vaobj, attribindex, size, type, relativeoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribLFormatEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexBindingDivisorEXT(RegalContext *_context, GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  Internal("error_glVertexArrayVertexBindingDivisorEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexBindingDivisorEXT(_context, vaobj, bindingindex, divisor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexBindingDivisorEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribBinding(RegalContext *_context, GLuint attribindex, GLuint bindingindex)
{
  Internal("error_glVertexAttribBinding","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribBinding(_context, attribindex, bindingindex);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribBinding : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Internal("error_glVertexAttribFormat","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribFormat(_context, attribindex, size, type, normalized, relativeoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribFormat : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribIFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("error_glVertexAttribIFormat","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribIFormat(_context, attribindex, size, type, relativeoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribIFormat : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribLFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("error_glVertexAttribLFormat","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribLFormat(_context, attribindex, size, type, relativeoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribLFormat : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexBindingDivisor(RegalContext *_context, GLuint bindingindex, GLuint divisor)
{
  Internal("error_glVertexBindingDivisor","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexBindingDivisor(_context, bindingindex, divisor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexBindingDivisor : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_vertex_blend

static void REGAL_CALL error_glVertexBlendARB(RegalContext *_context, GLint count)
{
  Internal("error_glVertexBlendARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexBlendARB(_context, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexBlendARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightPointerARB(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glWeightPointerARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightPointerARB(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightPointerARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightbvARB(RegalContext *_context, GLint size, const GLbyte *weights)
{
  Internal("error_glWeightbvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightbvARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightbvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightdvARB(RegalContext *_context, GLint size, const GLdouble *weights)
{
  Internal("error_glWeightdvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightdvARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightdvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightfvARB(RegalContext *_context, GLint size, const GLfloat *weights)
{
  Internal("error_glWeightfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightfvARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightivARB(RegalContext *_context, GLint size, const GLint *weights)
{
  Internal("error_glWeightivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightivARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightsvARB(RegalContext *_context, GLint size, const GLshort *weights)
{
  Internal("error_glWeightsvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightsvARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightsvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightubvARB(RegalContext *_context, GLint size, const GLubyte *weights)
{
  Internal("error_glWeightubvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightubvARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightubvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightuivARB(RegalContext *_context, GLint size, const GLuint *weights)
{
  Internal("error_glWeightuivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightuivARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightuivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightusvARB(RegalContext *_context, GLint size, const GLushort *weights)
{
  Internal("error_glWeightusvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightusvARB(_context, size, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightusvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_vertex_buffer_object

static void REGAL_CALL error_glBindBufferARB(RegalContext *_context, GLenum target, GLuint buffer)
{
  Internal("error_glBindBufferARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferARB(_context, target, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBufferDataARB(RegalContext *_context, GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  Internal("error_glBufferDataARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferDataARB(_context, target, size, data, usage);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferDataARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBufferSubDataARB(RegalContext *_context, GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
  Internal("error_glBufferSubDataARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferSubDataARB(_context, target, offset, size, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferSubDataARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteBuffersARB(RegalContext *_context, GLsizei n, const GLuint *buffers)
{
  Internal("error_glDeleteBuffersARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteBuffersARB(_context, n, buffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteBuffersARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenBuffersARB(RegalContext *_context, GLsizei n, GLuint *buffers)
{
  Internal("error_glGenBuffersARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenBuffersARB(_context, n, buffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenBuffersARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferParameterivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetBufferParameterivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferParameterivARB(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferParameterivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferPointervARB(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("error_glGetBufferPointervARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferPointervARB(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferPointervARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBufferSubDataARB(RegalContext *_context, GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
  Internal("error_glGetBufferSubDataARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferSubDataARB(_context, target, offset, size, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferSubDataARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsBufferARB(RegalContext *_context, GLuint buffer)
{
  Internal("error_glIsBufferARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsBufferARB(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsBufferARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLvoid *REGAL_CALL error_glMapBufferARB(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("error_glMapBufferARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapBufferARB(_context, target, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapBufferARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glUnmapBufferARB(RegalContext *_context, GLenum target)
{
  Internal("error_glUnmapBufferARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glUnmapBufferARB(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnmapBufferARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_vertex_program

static void REGAL_CALL error_glBindProgramARB(RegalContext *_context, GLenum target, GLuint program)
{
  Internal("error_glBindProgramARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindProgramARB(_context, target, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindProgramARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteProgramsARB(RegalContext *_context, GLsizei n, const GLuint *programs)
{
  Internal("error_glDeleteProgramsARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteProgramsARB(_context, n, programs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteProgramsARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableVertexAttribArrayARB(RegalContext *_context, GLuint index)
{
  Internal("error_glDisableVertexAttribArrayARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableVertexAttribArrayARB(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableVertexAttribArrayARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableVertexAttribArrayARB(RegalContext *_context, GLuint index)
{
  Internal("error_glEnableVertexAttribArrayARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableVertexAttribArrayARB(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableVertexAttribArrayARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenProgramsARB(RegalContext *_context, GLsizei n, GLuint *programs)
{
  Internal("error_glGenProgramsARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenProgramsARB(_context, n, programs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenProgramsARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramEnvParameterdvARB(RegalContext *_context, GLenum target, GLuint index, GLdouble *params)
{
  Internal("error_glGetProgramEnvParameterdvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramEnvParameterdvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramEnvParameterdvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramEnvParameterfvARB(RegalContext *_context, GLenum target, GLuint index, GLfloat *params)
{
  Internal("error_glGetProgramEnvParameterfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramEnvParameterfvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramEnvParameterfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramLocalParameterdvARB(RegalContext *_context, GLenum target, GLuint index, GLdouble *params)
{
  Internal("error_glGetProgramLocalParameterdvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramLocalParameterdvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramLocalParameterdvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramLocalParameterfvARB(RegalContext *_context, GLenum target, GLuint index, GLfloat *params)
{
  Internal("error_glGetProgramLocalParameterfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramLocalParameterfvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramLocalParameterfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramStringARB(RegalContext *_context, GLenum target, GLenum pname, GLvoid *string)
{
  Internal("error_glGetProgramStringARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramStringARB(_context, target, pname, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramStringARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetProgramivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramivARB(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribPointervARB(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("error_glGetVertexAttribPointervARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribPointervARB(_context, index, pname, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribPointervARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribdvARB(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("error_glGetVertexAttribdvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribdvARB(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribdvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribfvARB(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("error_glGetVertexAttribfvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribfvARB(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribfvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribivARB(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetVertexAttribivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribivARB(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsProgramARB(RegalContext *_context, GLuint program)
{
  Internal("error_glIsProgramARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsProgramARB(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsProgramARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glProgramEnvParameter4dARB(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glProgramEnvParameter4dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameter4dARB(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameter4dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameter4dvARB(RegalContext *_context, GLenum target, GLuint index, const GLdouble *params)
{
  Internal("error_glProgramEnvParameter4dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameter4dvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameter4dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameter4fARB(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glProgramEnvParameter4fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameter4fARB(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameter4fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameter4fvARB(RegalContext *_context, GLenum target, GLuint index, const GLfloat *params)
{
  Internal("error_glProgramEnvParameter4fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameter4fvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameter4fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameter4dARB(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glProgramLocalParameter4dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameter4dARB(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameter4dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameter4dvARB(RegalContext *_context, GLenum target, GLuint index, const GLdouble *params)
{
  Internal("error_glProgramLocalParameter4dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameter4dvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameter4dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameter4fARB(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glProgramLocalParameter4fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameter4fARB(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameter4fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameter4fvARB(RegalContext *_context, GLenum target, GLuint index, const GLfloat *params)
{
  Internal("error_glProgramLocalParameter4fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameter4fvARB(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameter4fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramStringARB(RegalContext *_context, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Internal("error_glProgramStringARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramStringARB(_context, target, format, len, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramStringARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1dARB(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("error_glVertexAttrib1dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1dARB(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib1dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1dvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1fARB(RegalContext *_context, GLuint index, GLfloat x)
{
  Internal("error_glVertexAttrib1fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1fARB(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib1fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1fvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1sARB(RegalContext *_context, GLuint index, GLshort x)
{
  Internal("error_glVertexAttrib1sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1sARB(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib1svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1svARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("error_glVertexAttrib2dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2dARB(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib2dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2dvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  Internal("error_glVertexAttrib2fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2fARB(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib2fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2fvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  Internal("error_glVertexAttrib2sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2sARB(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib2svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2svARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertexAttrib3dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3dARB(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib3dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3dvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glVertexAttrib3fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3fARB(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib3fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3fvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glVertexAttrib3sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3sARB(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib3svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3svARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NbvARB(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("error_glVertexAttrib4NbvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NbvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NbvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NivARB(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttrib4NivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NivARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NsvARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib4NsvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NsvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NsvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NubARB(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Internal("error_glVertexAttrib4NubARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NubARB(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NubARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NubvARB(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttrib4NubvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NubvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NubvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NuivARB(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttrib4NuivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NuivARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NuivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4NusvARB(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("error_glVertexAttrib4NusvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4NusvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4NusvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4bvARB(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("error_glVertexAttrib4bvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4bvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4bvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertexAttrib4dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4dARB(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib4dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4dvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glVertexAttrib4fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4fARB(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib4fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4fvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4ivARB(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttrib4ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4ivARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glVertexAttrib4sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4sARB(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib4svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4svARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4ubvARB(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttrib4ubvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4ubvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4ubvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4uivARB(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttrib4uivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4uivARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4uivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4usvARB(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("error_glVertexAttrib4usvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4usvARB(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4usvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribPointerARB(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribPointerARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribPointerARB(_context, index, size, type, normalized, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribPointerARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_vertex_shader

static void REGAL_CALL error_glBindAttribLocationARB(RegalContext *_context, GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  Internal("error_glBindAttribLocationARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindAttribLocationARB(_context, programObj, index, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindAttribLocationARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveAttribARB(RegalContext *_context, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  Internal("error_glGetActiveAttribARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveAttribARB(_context, programObj, index, maxLength, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveAttribARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetAttribLocationARB(RegalContext *_context, GLhandleARB programObj, const GLcharARB *name)
{
  Internal("error_glGetAttribLocationARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetAttribLocationARB(_context, programObj, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetAttribLocationARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_ARB_vertex_type_2_10_10_10_rev

static void REGAL_CALL error_glColorP3ui(RegalContext *_context, GLenum type, GLuint color)
{
  Internal("error_glColorP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorP3ui(_context, type, color);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorP3uiv(RegalContext *_context, GLenum type, const GLuint *color)
{
  Internal("error_glColorP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorP3uiv(_context, type, color);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorP4ui(RegalContext *_context, GLenum type, GLuint color)
{
  Internal("error_glColorP4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorP4ui(_context, type, color);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorP4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorP4uiv(RegalContext *_context, GLenum type, const GLuint *color)
{
  Internal("error_glColorP4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorP4uiv(_context, type, color);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorP4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP1ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("error_glMultiTexCoordP1ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP1ui(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP1ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP1uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("error_glMultiTexCoordP1uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP1uiv(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP1uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP2ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("error_glMultiTexCoordP2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP2ui(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP2uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("error_glMultiTexCoordP2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP2uiv(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP3ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("error_glMultiTexCoordP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP3ui(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP3uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("error_glMultiTexCoordP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP3uiv(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP4ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("error_glMultiTexCoordP4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP4ui(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordP4uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("error_glMultiTexCoordP4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordP4uiv(_context, texture, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordP4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalP3ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glNormalP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalP3ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalP3uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glNormalP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalP3uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColorP3ui(RegalContext *_context, GLenum type, GLuint color)
{
  Internal("error_glSecondaryColorP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColorP3ui(_context, type, color);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColorP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColorP3uiv(RegalContext *_context, GLenum type, const GLuint *color)
{
  Internal("error_glSecondaryColorP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColorP3uiv(_context, type, color);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColorP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP1ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glTexCoordP1ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP1ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP1ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP1uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glTexCoordP1uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP1uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP1uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP2ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glTexCoordP2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP2ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP2uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glTexCoordP2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP2uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP3ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glTexCoordP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP3ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP3uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glTexCoordP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP3uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP4ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glTexCoordP4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP4ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordP4uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glTexCoordP4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordP4uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordP4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP1ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("error_glVertexAttribP1ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP1ui(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP1ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP1uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("error_glVertexAttribP1uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP1uiv(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP1uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP2ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("error_glVertexAttribP2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP2ui(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP2uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("error_glVertexAttribP2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP2uiv(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP3ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("error_glVertexAttribP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP3ui(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP3uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("error_glVertexAttribP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP3uiv(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP4ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("error_glVertexAttribP4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP4ui(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribP4uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("error_glVertexAttribP4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribP4uiv(_context, index, type, normalized, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribP4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexP2ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glVertexP2ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexP2ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexP2ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexP2uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glVertexP2uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexP2uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexP2uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexP3ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glVertexP3ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexP3ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexP3ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexP3uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glVertexP3uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexP3uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexP3uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexP4ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("error_glVertexP4ui","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexP4ui(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexP4ui : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexP4uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("error_glVertexP4uiv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexP4uiv(_context, type, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexP4uiv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_viewport_array

static void REGAL_CALL error_glDepthRangeArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLclampd *v)
{
  Internal("error_glDepthRangeArrayv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRangeArrayv(_context, first, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRangeArrayv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthRangeIndexed(RegalContext *_context, GLuint index, GLclampd n, GLclampd f)
{
  Internal("error_glDepthRangeIndexed","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRangeIndexed(_context, index, n, f);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRangeIndexed : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDoublei_v(RegalContext *_context, GLenum target, GLuint index, GLdouble *v)
{
  Internal("error_glGetDoublei_v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDoublei_v(_context, target, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDoublei_v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFloati_v(RegalContext *_context, GLenum target, GLuint index, GLfloat *v)
{
  Internal("error_glGetFloati_v","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFloati_v(_context, target, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFloati_v : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScissorArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLint *v)
{
  Internal("error_glScissorArrayv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScissorArrayv(_context, first, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScissorArrayv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScissorIndexed(RegalContext *_context, GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  Internal("error_glScissorIndexed","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScissorIndexed(_context, index, left, bottom, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScissorIndexed : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScissorIndexedv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glScissorIndexedv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScissorIndexedv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScissorIndexedv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glViewportArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLfloat *v)
{
  Internal("error_glViewportArrayv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glViewportArrayv(_context, first, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glViewportArrayv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glViewportIndexedf(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  Internal("error_glViewportIndexedf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glViewportIndexedf(_context, index, x, y, w, h);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glViewportIndexedf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glViewportIndexedfv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glViewportIndexedfv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glViewportIndexedfv(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glViewportIndexedfv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ARB_window_pos

static void REGAL_CALL error_glWindowPos2dARB(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("error_glWindowPos2dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2dARB(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2dvARB(RegalContext *_context, const GLdouble *p)
{
  Internal("error_glWindowPos2dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2dvARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2fARB(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("error_glWindowPos2fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2fARB(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2fvARB(RegalContext *_context, const GLfloat *p)
{
  Internal("error_glWindowPos2fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2fvARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2iARB(RegalContext *_context, GLint x, GLint y)
{
  Internal("error_glWindowPos2iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2iARB(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2ivARB(RegalContext *_context, const GLint *p)
{
  Internal("error_glWindowPos2ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2ivARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2sARB(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("error_glWindowPos2sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2sARB(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2svARB(RegalContext *_context, const GLshort *p)
{
  Internal("error_glWindowPos2svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2svARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3dARB(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glWindowPos3dARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3dARB(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3dARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3dvARB(RegalContext *_context, const GLdouble *p)
{
  Internal("error_glWindowPos3dvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3dvARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3dvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3fARB(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glWindowPos3fARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3fARB(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3fARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3fvARB(RegalContext *_context, const GLfloat *p)
{
  Internal("error_glWindowPos3fvARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3fvARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3fvARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3iARB(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("error_glWindowPos3iARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3iARB(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3iARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3ivARB(RegalContext *_context, const GLint *p)
{
  Internal("error_glWindowPos3ivARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3ivARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3ivARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3sARB(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glWindowPos3sARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3sARB(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3sARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3svARB(RegalContext *_context, const GLshort *p)
{
  Internal("error_glWindowPos3svARB","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3svARB(_context, p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3svARB : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_draw_buffers

static void REGAL_CALL error_glDrawBuffersATI(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("error_glDrawBuffersATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBuffersATI(_context, n, bufs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBuffersATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_element_array

static void REGAL_CALL error_glDrawElementArrayATI(RegalContext *_context, GLenum mode, GLsizei count)
{
  Internal("error_glDrawElementArrayATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementArrayATI(_context, mode, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementArrayATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawRangeElementArrayATI(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  Internal("error_glDrawRangeElementArrayATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawRangeElementArrayATI(_context, mode, start, end, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawRangeElementArrayATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glElementPointerATI(RegalContext *_context, GLenum type, const GLvoid *pointer)
{
  Internal("error_glElementPointerATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glElementPointerATI(_context, type, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glElementPointerATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_envmap_bumpmap

static void REGAL_CALL error_glGetTexBumpParameterfvATI(RegalContext *_context, GLenum pname, GLfloat *param)
{
  Internal("error_glGetTexBumpParameterfvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexBumpParameterfvATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexBumpParameterfvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexBumpParameterivATI(RegalContext *_context, GLenum pname, GLint *param)
{
  Internal("error_glGetTexBumpParameterivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexBumpParameterivATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexBumpParameterivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexBumpParameterfvATI(RegalContext *_context, GLenum pname, const GLfloat *param)
{
  Internal("error_glTexBumpParameterfvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexBumpParameterfvATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexBumpParameterfvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexBumpParameterivATI(RegalContext *_context, GLenum pname, const GLint *param)
{
  Internal("error_glTexBumpParameterivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexBumpParameterivATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexBumpParameterivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_fragment_shader

static void REGAL_CALL error_glAlphaFragmentOp1ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  Internal("error_glAlphaFragmentOp1ATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAlphaFragmentOp1ATI(_context, op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAlphaFragmentOp1ATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glAlphaFragmentOp2ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  Internal("error_glAlphaFragmentOp2ATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAlphaFragmentOp2ATI(_context, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAlphaFragmentOp2ATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glAlphaFragmentOp3ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  Internal("error_glAlphaFragmentOp3ATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAlphaFragmentOp3ATI(_context, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAlphaFragmentOp3ATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBeginFragmentShaderATI(RegalContext *_context)
{
  Internal("error_glBeginFragmentShaderATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginFragmentShaderATI(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginFragmentShaderATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindFragmentShaderATI(RegalContext *_context, GLuint id)
{
  Internal("error_glBindFragmentShaderATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFragmentShaderATI(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFragmentShaderATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorFragmentOp1ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  Internal("error_glColorFragmentOp1ATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorFragmentOp1ATI(_context, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorFragmentOp1ATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorFragmentOp2ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  Internal("error_glColorFragmentOp2ATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorFragmentOp2ATI(_context, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorFragmentOp2ATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorFragmentOp3ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  Internal("error_glColorFragmentOp3ATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorFragmentOp3ATI(_context, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorFragmentOp3ATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteFragmentShaderATI(RegalContext *_context, GLuint id)
{
  Internal("error_glDeleteFragmentShaderATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteFragmentShaderATI(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteFragmentShaderATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndFragmentShaderATI(RegalContext *_context)
{
  Internal("error_glEndFragmentShaderATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndFragmentShaderATI(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndFragmentShaderATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGenFragmentShadersATI(RegalContext *_context, GLuint range)
{
  Internal("error_glGenFragmentShadersATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGenFragmentShadersATI(_context, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenFragmentShadersATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glPassTexCoordATI(RegalContext *_context, GLuint dst, GLuint coord, GLenum swizzle)
{
  Internal("error_glPassTexCoordATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPassTexCoordATI(_context, dst, coord, swizzle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPassTexCoordATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSampleMapATI(RegalContext *_context, GLuint dst, GLuint interp, GLenum swizzle)
{
  Internal("error_glSampleMapATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleMapATI(_context, dst, interp, swizzle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleMapATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSetFragmentShaderConstantATI(RegalContext *_context, GLuint dst, const GLfloat *value)
{
  Internal("error_glSetFragmentShaderConstantATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSetFragmentShaderConstantATI(_context, dst, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSetFragmentShaderConstantATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_map_object_buffer

static GLvoid *REGAL_CALL error_glMapObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("error_glMapObjectBufferATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapObjectBufferATI(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapObjectBufferATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glUnmapObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("error_glUnmapObjectBufferATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUnmapObjectBufferATI(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnmapObjectBufferATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_pn_triangles

static void REGAL_CALL error_glPNTrianglesfATI(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPNTrianglesfATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPNTrianglesfATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPNTrianglesfATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPNTrianglesiATI(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glPNTrianglesiATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPNTrianglesiATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPNTrianglesiATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_separate_stencil

static void REGAL_CALL error_glStencilFuncSeparateATI(RegalContext *_context, GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  Internal("error_glStencilFuncSeparateATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilFuncSeparateATI(_context, frontfunc, backfunc, ref, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilFuncSeparateATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilOpSeparateATI(RegalContext *_context, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  Internal("error_glStencilOpSeparateATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilOpSeparateATI(_context, face, sfail, dpfail, dppass);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilOpSeparateATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_vertex_array_object

static void REGAL_CALL error_glArrayObjectATI(RegalContext *_context, GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  Internal("error_glArrayObjectATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glArrayObjectATI(_context, array, size, type, stride, buffer, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glArrayObjectATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFreeObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("error_glFreeObjectBufferATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFreeObjectBufferATI(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFreeObjectBufferATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetArrayObjectfvATI(RegalContext *_context, GLenum array, GLenum pname, GLfloat *params)
{
  Internal("error_glGetArrayObjectfvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetArrayObjectfvATI(_context, array, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetArrayObjectfvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetArrayObjectivATI(RegalContext *_context, GLenum array, GLenum pname, GLint *params)
{
  Internal("error_glGetArrayObjectivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetArrayObjectivATI(_context, array, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetArrayObjectivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetObjectBufferfvATI(RegalContext *_context, GLuint buffer, GLenum pname, GLfloat *params)
{
  Internal("error_glGetObjectBufferfvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectBufferfvATI(_context, buffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectBufferfvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetObjectBufferivATI(RegalContext *_context, GLuint buffer, GLenum pname, GLint *params)
{
  Internal("error_glGetObjectBufferivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectBufferivATI(_context, buffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectBufferivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVariantArrayObjectfvATI(RegalContext *_context, GLuint id, GLenum pname, GLfloat *params)
{
  Internal("error_glGetVariantArrayObjectfvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVariantArrayObjectfvATI(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVariantArrayObjectfvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVariantArrayObjectivATI(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetVariantArrayObjectivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVariantArrayObjectivATI(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVariantArrayObjectivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("error_glIsObjectBufferATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsObjectBufferATI(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsObjectBufferATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glNewObjectBufferATI(RegalContext *_context, GLsizei size, const GLvoid *pointer, GLenum usage)
{
  Internal("error_glNewObjectBufferATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glNewObjectBufferATI(_context, size, pointer, usage);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNewObjectBufferATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glUpdateObjectBufferATI(RegalContext *_context, GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
  Internal("error_glUpdateObjectBufferATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUpdateObjectBufferATI(_context, buffer, offset, size, pointer, preserve);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUpdateObjectBufferATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantArrayObjectATI(RegalContext *_context, GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  Internal("error_glVariantArrayObjectATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantArrayObjectATI(_context, id, type, stride, buffer, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantArrayObjectATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_vertex_attrib_array_object

static void REGAL_CALL error_glGetVertexAttribArrayObjectfvATI(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("error_glGetVertexAttribArrayObjectfvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribArrayObjectfvATI(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribArrayObjectfvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribArrayObjectivATI(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetVertexAttribArrayObjectivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribArrayObjectivATI(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribArrayObjectivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribArrayObjectATI(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  Internal("error_glVertexAttribArrayObjectATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribArrayObjectATI(_context, index, size, type, normalized, stride, buffer, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribArrayObjectATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_ATI_vertex_streams

static void REGAL_CALL error_glClientActiveVertexStreamATI(RegalContext *_context, GLenum stream)
{
  Internal("error_glClientActiveVertexStreamATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClientActiveVertexStreamATI(_context, stream);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClientActiveVertexStreamATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3bATI(RegalContext *_context, GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
  Internal("error_glNormalStream3bATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3bATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3bATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3bvATI(RegalContext *_context, GLenum stream, const GLbyte *coords)
{
  Internal("error_glNormalStream3bvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3bvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3bvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glNormalStream3dATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3dATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3dATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("error_glNormalStream3dvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3dvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3dvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glNormalStream3fATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3fATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3fATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("error_glNormalStream3fvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3fvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3fvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z)
{
  Internal("error_glNormalStream3iATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3iATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3iATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("error_glNormalStream3ivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3ivATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3ivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glNormalStream3sATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3sATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3sATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalStream3svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("error_glNormalStream3svATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalStream3svATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalStream3svATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexBlendEnvfATI(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glVertexBlendEnvfATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexBlendEnvfATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexBlendEnvfATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexBlendEnviATI(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glVertexBlendEnviATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexBlendEnviATI(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexBlendEnviATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1dATI(RegalContext *_context, GLenum stream, GLdouble x)
{
  Internal("error_glVertexStream1dATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1dATI(_context, stream, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1dATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("error_glVertexStream1dvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1dvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1dvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1fATI(RegalContext *_context, GLenum stream, GLfloat x)
{
  Internal("error_glVertexStream1fATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1fATI(_context, stream, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1fATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("error_glVertexStream1fvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1fvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1fvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1iATI(RegalContext *_context, GLenum stream, GLint x)
{
  Internal("error_glVertexStream1iATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1iATI(_context, stream, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1iATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("error_glVertexStream1ivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1ivATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1ivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1sATI(RegalContext *_context, GLenum stream, GLshort x)
{
  Internal("error_glVertexStream1sATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1sATI(_context, stream, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1sATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream1svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("error_glVertexStream1svATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream1svATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream1svATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y)
{
  Internal("error_glVertexStream2dATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2dATI(_context, stream, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2dATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("error_glVertexStream2dvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2dvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2dvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y)
{
  Internal("error_glVertexStream2fATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2fATI(_context, stream, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2fATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("error_glVertexStream2fvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2fvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2fvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2iATI(RegalContext *_context, GLenum stream, GLint x, GLint y)
{
  Internal("error_glVertexStream2iATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2iATI(_context, stream, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2iATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("error_glVertexStream2ivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2ivATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2ivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y)
{
  Internal("error_glVertexStream2sATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2sATI(_context, stream, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2sATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream2svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("error_glVertexStream2svATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream2svATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream2svATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertexStream3dATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3dATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3dATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("error_glVertexStream3dvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3dvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3dvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glVertexStream3fATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3fATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3fATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("error_glVertexStream3fvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3fvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3fvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z)
{
  Internal("error_glVertexStream3iATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3iATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3iATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("error_glVertexStream3ivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3ivATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3ivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glVertexStream3sATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3sATI(_context, stream, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3sATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream3svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("error_glVertexStream3svATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream3svATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream3svATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertexStream4dATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4dATI(_context, stream, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4dATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("error_glVertexStream4dvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4dvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4dvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glVertexStream4fATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4fATI(_context, stream, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4fATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("error_glVertexStream4fvATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4fvATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4fvATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glVertexStream4iATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4iATI(_context, stream, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4iATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("error_glVertexStream4ivATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4ivATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4ivATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glVertexStream4sATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4sATI(_context, stream, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4sATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexStream4svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("error_glVertexStream4svATI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexStream4svATI(_context, stream, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexStream4svATI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_bindable_uniform

static GLint REGAL_CALL error_glGetUniformBufferSizeEXT(RegalContext *_context, GLuint program, GLint location)
{
  Internal("error_glGetUniformBufferSizeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetUniformBufferSizeEXT(_context, program, location);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformBufferSizeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLintptr REGAL_CALL error_glGetUniformOffsetEXT(RegalContext *_context, GLuint program, GLint location)
{
  Internal("error_glGetUniformOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLintptr  ret = _context->err.next.glGetUniformOffsetEXT(_context, program, location);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glUniformBufferEXT(RegalContext *_context, GLuint program, GLint location, GLuint buffer)
{
  Internal("error_glUniformBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformBufferEXT(_context, program, location, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_blend_color

static void REGAL_CALL error_glBlendColorEXT(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("error_glBlendColorEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendColorEXT(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendColorEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_blend_equation_separate

static void REGAL_CALL error_glBlendEquationSeparateEXT(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("error_glBlendEquationSeparateEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationSeparateEXT(_context, modeRGB, modeAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationSeparateEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_blend_func_separate

static void REGAL_CALL error_glBlendFuncSeparateEXT(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("error_glBlendFuncSeparateEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparateEXT(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparateEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_blend_minmax

static void REGAL_CALL error_glBlendEquationEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glBlendEquationEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_color_subtable

static void REGAL_CALL error_glColorSubTableEXT(RegalContext *_context, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("error_glColorSubTableEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorSubTableEXT(_context, target, start, count, format, type, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorSubTableEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyColorSubTableEXT(RegalContext *_context, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyColorSubTableEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyColorSubTableEXT(_context, target, start, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyColorSubTableEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_compiled_vertex_array

static void REGAL_CALL error_glLockArraysEXT(RegalContext *_context, GLint first, GLsizei count)
{
  Internal("error_glLockArraysEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLockArraysEXT(_context, first, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLockArraysEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUnlockArraysEXT(RegalContext *_context)
{
  Internal("error_glUnlockArraysEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUnlockArraysEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnlockArraysEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_convolution

static void REGAL_CALL error_glConvolutionFilter1DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("error_glConvolutionFilter1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionFilter1DEXT(_context, target, internalformat, width, format, type, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionFilter1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("error_glConvolutionFilter2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionFilter2DEXT(_context, target, internalformat, width, height, format, type, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionFilter2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameterfEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glConvolutionParameterfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameterfEXT(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameterfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glConvolutionParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameteriEXT(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glConvolutionParameteriEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameteriEXT(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameteriEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glConvolutionParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glConvolutionParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glConvolutionParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glConvolutionParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyConvolutionFilter1DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyConvolutionFilter1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyConvolutionFilter1DEXT(_context, target, internalformat, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyConvolutionFilter1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyConvolutionFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyConvolutionFilter2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyConvolutionFilter2DEXT(_context, target, internalformat, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyConvolutionFilter2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetConvolutionFilterEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  Internal("error_glGetConvolutionFilterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetConvolutionFilterEXT(_context, target, format, type, image);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetConvolutionFilterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetConvolutionParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetConvolutionParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetConvolutionParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetConvolutionParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetConvolutionParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetConvolutionParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetConvolutionParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetConvolutionParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetSeparableFilterEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  Internal("error_glGetSeparableFilterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSeparableFilterEXT(_context, target, format, type, row, column, span);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSeparableFilterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSeparableFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  Internal("error_glSeparableFilter2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSeparableFilter2DEXT(_context, target, internalformat, width, height, format, type, row, column);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSeparableFilter2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_coordinate_frame

static void REGAL_CALL error_glBinormal3bEXT(RegalContext *_context, GLbyte bx, GLbyte by, GLbyte bz)
{
  Internal("error_glBinormal3bEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3bEXT(_context, bx, by, bz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3bEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3bvEXT(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glBinormal3bvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3bvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3bvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3dEXT(RegalContext *_context, GLdouble bx, GLdouble by, GLdouble bz)
{
  Internal("error_glBinormal3dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3dEXT(_context, bx, by, bz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3dvEXT(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glBinormal3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3dvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3fEXT(RegalContext *_context, GLfloat bx, GLfloat by, GLfloat bz)
{
  Internal("error_glBinormal3fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3fEXT(_context, bx, by, bz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3fvEXT(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glBinormal3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3fvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3iEXT(RegalContext *_context, GLint bx, GLint by, GLint bz)
{
  Internal("error_glBinormal3iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3iEXT(_context, bx, by, bz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3ivEXT(RegalContext *_context, const GLint *v)
{
  Internal("error_glBinormal3ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3ivEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3sEXT(RegalContext *_context, GLshort bx, GLshort by, GLshort bz)
{
  Internal("error_glBinormal3sEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3sEXT(_context, bx, by, bz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3sEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormal3svEXT(RegalContext *_context, const GLshort *v)
{
  Internal("error_glBinormal3svEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormal3svEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormal3svEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBinormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glBinormalPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBinormalPointerEXT(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBinormalPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3bEXT(RegalContext *_context, GLbyte tx, GLbyte ty, GLbyte tz)
{
  Internal("error_glTangent3bEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3bEXT(_context, tx, ty, tz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3bEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3bvEXT(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glTangent3bvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3bvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3bvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3dEXT(RegalContext *_context, GLdouble tx, GLdouble ty, GLdouble tz)
{
  Internal("error_glTangent3dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3dEXT(_context, tx, ty, tz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3dvEXT(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glTangent3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3dvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3fEXT(RegalContext *_context, GLfloat tx, GLfloat ty, GLfloat tz)
{
  Internal("error_glTangent3fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3fEXT(_context, tx, ty, tz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3fvEXT(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glTangent3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3fvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3iEXT(RegalContext *_context, GLint tx, GLint ty, GLint tz)
{
  Internal("error_glTangent3iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3iEXT(_context, tx, ty, tz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3ivEXT(RegalContext *_context, const GLint *v)
{
  Internal("error_glTangent3ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3ivEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3sEXT(RegalContext *_context, GLshort tx, GLshort ty, GLshort tz)
{
  Internal("error_glTangent3sEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3sEXT(_context, tx, ty, tz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3sEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangent3svEXT(RegalContext *_context, const GLshort *v)
{
  Internal("error_glTangent3svEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangent3svEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangent3svEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTangentPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glTangentPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTangentPointerEXT(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTangentPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_copy_texture

static void REGAL_CALL error_glCopyTexImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("error_glCopyTexImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexImage1DEXT(_context, target, level, internalformat, x, y, width, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("error_glCopyTexImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexImage2DEXT(_context, target, level, internalformat, x, y, width, height, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyTexSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage1DEXT(_context, target, level, xoffset, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTexSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage2DEXT(_context, target, level, xoffset, yoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTexSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage3DEXT(_context, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_cull_vertex

static void REGAL_CALL error_glCullParameterdvEXT(RegalContext *_context, GLenum pname, GLdouble *params)
{
  Internal("error_glCullParameterdvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCullParameterdvEXT(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCullParameterdvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCullParameterfvEXT(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("error_glCullParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCullParameterfvEXT(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCullParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_debug_label

static void REGAL_CALL error_glGetObjectLabelEXT(RegalContext *_context, GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Internal("error_glGetObjectLabelEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectLabelEXT(_context, type, object, bufSize, length, label);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectLabelEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLabelObjectEXT(RegalContext *_context, GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
  Internal("error_glLabelObjectEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLabelObjectEXT(_context, type, object, length, label);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLabelObjectEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_debug_marker

static void REGAL_CALL error_glInsertEventMarkerEXT(RegalContext *_context, GLsizei length, const GLchar *marker)
{
  Internal("error_glInsertEventMarkerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInsertEventMarkerEXT(_context, length, marker);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInsertEventMarkerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPopGroupMarkerEXT(RegalContext *_context)
{
  Internal("error_glPopGroupMarkerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPopGroupMarkerEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPopGroupMarkerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushGroupMarkerEXT(RegalContext *_context, GLsizei length, const GLchar *marker)
{
  Internal("error_glPushGroupMarkerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushGroupMarkerEXT(_context, length, marker);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushGroupMarkerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_depth_bounds_test

static void REGAL_CALL error_glDepthBoundsEXT(RegalContext *_context, GLclampd zmin, GLclampd zmax)
{
  Internal("error_glDepthBoundsEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthBoundsEXT(_context, zmin, zmax);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthBoundsEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_direct_state_access

static void REGAL_CALL error_glBindMultiTextureEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint texture)
{
  Internal("error_glBindMultiTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindMultiTextureEXT(_context, texunit, target, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindMultiTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glCheckNamedFramebufferStatusEXT(RegalContext *_context, GLuint framebuffer, GLenum target)
{
  Internal("error_glCheckNamedFramebufferStatusEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glCheckNamedFramebufferStatusEXT(_context, framebuffer, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCheckNamedFramebufferStatusEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glClientAttribDefaultEXT(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glClientAttribDefaultEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClientAttribDefaultEXT(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClientAttribDefaultEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedMultiTexImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedMultiTexImage1DEXT(_context, texunit, target, level, internalformat, width, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedMultiTexImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedMultiTexImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedMultiTexImage2DEXT(_context, texunit, target, level, internalformat, width, height, border, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedMultiTexImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedMultiTexImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedMultiTexImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedMultiTexImage3DEXT(_context, texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedMultiTexImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedMultiTexSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedMultiTexSubImage1DEXT(_context, texunit, target, level, xoffset, width, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedMultiTexSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedMultiTexSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedMultiTexSubImage2DEXT(_context, texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedMultiTexSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedMultiTexSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedMultiTexSubImage3DEXT(_context, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedMultiTexSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedTextureImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTextureImage1DEXT(_context, texture, target, level, internalformat, width, border, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTextureImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedTextureImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTextureImage2DEXT(_context, texture, target, level, internalformat, width, height, border, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTextureImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTextureImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedTextureImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTextureImage3DEXT(_context, texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTextureImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedTextureSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTextureSubImage1DEXT(_context, texture, target, level, xoffset, width, format, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTextureSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedTextureSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTextureSubImage2DEXT(_context, texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTextureSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Internal("error_glCompressedTextureSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTextureSubImage3DEXT(_context, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTextureSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("error_glCopyMultiTexImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyMultiTexImage1DEXT(_context, texunit, target, level, internalformat, x, y, width, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyMultiTexImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("error_glCopyMultiTexImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyMultiTexImage2DEXT(_context, texunit, target, level, internalformat, x, y, width, height, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyMultiTexImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyMultiTexSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyMultiTexSubImage1DEXT(_context, texunit, target, level, xoffset, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyMultiTexSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyMultiTexSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyMultiTexSubImage2DEXT(_context, texunit, target, level, xoffset, yoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyMultiTexSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyMultiTexSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyMultiTexSubImage3DEXT(_context, texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyMultiTexSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("error_glCopyTextureImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTextureImage1DEXT(_context, texture, target, level, internalformat, x, y, width, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTextureImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("error_glCopyTextureImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTextureImage2DEXT(_context, texture, target, level, internalformat, x, y, width, height, border);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTextureImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyTextureSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTextureSubImage1DEXT(_context, texture, target, level, xoffset, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTextureSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTextureSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTextureSubImage2DEXT(_context, texture, target, level, xoffset, yoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTextureSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTextureSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTextureSubImage3DEXT(_context, texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTextureSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableClientStateIndexedEXT(RegalContext *_context, GLenum array, GLuint index)
{
  Internal("error_glDisableClientStateIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableClientStateIndexedEXT(_context, array, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableClientStateIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableClientStateiEXT(RegalContext *_context, GLenum array, GLuint index)
{
  Internal("error_glDisableClientStateiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableClientStateiEXT(_context, array, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableClientStateiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableVertexArrayAttribEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("error_glDisableVertexArrayAttribEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableVertexArrayAttribEXT(_context, vaobj, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableVertexArrayAttribEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableVertexArrayEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("error_glDisableVertexArrayEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableVertexArrayEXT(_context, vaobj, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableVertexArrayEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableClientStateIndexedEXT(RegalContext *_context, GLenum array, GLuint index)
{
  Internal("error_glEnableClientStateIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableClientStateIndexedEXT(_context, array, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableClientStateIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableClientStateiEXT(RegalContext *_context, GLenum array, GLuint index)
{
  Internal("error_glEnableClientStateiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableClientStateiEXT(_context, array, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableClientStateiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableVertexArrayAttribEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("error_glEnableVertexArrayAttribEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableVertexArrayAttribEXT(_context, vaobj, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableVertexArrayAttribEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableVertexArrayEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("error_glEnableVertexArrayEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableVertexArrayEXT(_context, vaobj, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableVertexArrayEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFlushMappedNamedBufferRangeEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Internal("error_glFlushMappedNamedBufferRangeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushMappedNamedBufferRangeEXT(_context, buffer, offset, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushMappedNamedBufferRangeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferDrawBufferEXT(RegalContext *_context, GLuint framebuffer, GLenum mode)
{
  Internal("error_glFramebufferDrawBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferDrawBufferEXT(_context, framebuffer, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferDrawBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferDrawBuffersEXT(RegalContext *_context, GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  Internal("error_glFramebufferDrawBuffersEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferDrawBuffersEXT(_context, framebuffer, n, bufs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferDrawBuffersEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferReadBufferEXT(RegalContext *_context, GLuint framebuffer, GLenum mode)
{
  Internal("error_glFramebufferReadBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferReadBufferEXT(_context, framebuffer, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferReadBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenerateMultiTexMipmapEXT(RegalContext *_context, GLenum texunit, GLenum target)
{
  Internal("error_glGenerateMultiTexMipmapEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenerateMultiTexMipmapEXT(_context, texunit, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenerateMultiTexMipmapEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenerateTextureMipmapEXT(RegalContext *_context, GLuint texture, GLenum target)
{
  Internal("error_glGenerateTextureMipmapEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenerateTextureMipmapEXT(_context, texture, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenerateTextureMipmapEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCompressedMultiTexImageEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  Internal("error_glGetCompressedMultiTexImageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCompressedMultiTexImageEXT(_context, texunit, target, lod, img);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCompressedMultiTexImageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCompressedTextureImageEXT(RegalContext *_context, GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  Internal("error_glGetCompressedTextureImageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCompressedTextureImageEXT(_context, texture, target, lod, img);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCompressedTextureImageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDoubleIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLdouble *data)
{
  Internal("error_glGetDoubleIndexedvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDoubleIndexedvEXT(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDoubleIndexedvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDoublei_vEXT(RegalContext *_context, GLenum target, GLuint index, GLdouble *data)
{
  Internal("error_glGetDoublei_vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDoublei_vEXT(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDoublei_vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFloatIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLfloat *data)
{
  Internal("error_glGetFloatIndexedvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFloatIndexedvEXT(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFloatIndexedvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFloati_vEXT(RegalContext *_context, GLenum target, GLuint index, GLfloat *data)
{
  Internal("error_glGetFloati_vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFloati_vEXT(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFloati_vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFramebufferParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint *params)
{
  Internal("error_glGetFramebufferParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFramebufferParameterivEXT(_context, framebuffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFramebufferParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMultiTexEnvfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexEnvfvEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexEnvfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetMultiTexEnvivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexEnvivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexEnvivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  Internal("error_glGetMultiTexGendvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexGendvEXT(_context, texunit, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexGendvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMultiTexGenfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexGenfvEXT(_context, texunit, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexGenfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  Internal("error_glGetMultiTexGenivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexGenivEXT(_context, texunit, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexGenivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexImageEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("error_glGetMultiTexImageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexImageEXT(_context, texunit, target, level, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexImageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexLevelParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMultiTexLevelParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexLevelParameterfvEXT(_context, texunit, target, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexLevelParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexLevelParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Internal("error_glGetMultiTexLevelParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexLevelParameterivEXT(_context, texunit, target, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexLevelParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexParameterIivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetMultiTexParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexParameterIivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexParameterIuivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  Internal("error_glGetMultiTexParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexParameterIuivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMultiTexParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexParameterfvEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMultiTexParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetMultiTexParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultiTexParameterivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultiTexParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedBufferParameterivEXT(RegalContext *_context, GLuint buffer, GLenum pname, GLint *params)
{
  Internal("error_glGetNamedBufferParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedBufferParameterivEXT(_context, buffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedBufferParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedBufferPointervEXT(RegalContext *_context, GLuint buffer, GLenum pname, GLvoid **params)
{
  Internal("error_glGetNamedBufferPointervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedBufferPointervEXT(_context, buffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedBufferPointervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Internal("error_glGetNamedBufferSubDataEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedBufferSubDataEXT(_context, buffer, offset, size, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedBufferSubDataEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedFramebufferAttachmentParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("error_glGetNamedFramebufferAttachmentParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedFramebufferAttachmentParameterivEXT(_context, framebuffer, attachment, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedFramebufferAttachmentParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterIivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLint *params)
{
  Internal("error_glGetNamedProgramLocalParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedProgramLocalParameterIivEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedProgramLocalParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterIuivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLuint *params)
{
  Internal("error_glGetNamedProgramLocalParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedProgramLocalParameterIuivEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedProgramLocalParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterdvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  Internal("error_glGetNamedProgramLocalParameterdvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedProgramLocalParameterdvEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedProgramLocalParameterdvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterfvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  Internal("error_glGetNamedProgramLocalParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedProgramLocalParameterfvEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedProgramLocalParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedProgramStringEXT(RegalContext *_context, GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  Internal("error_glGetNamedProgramStringEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedProgramStringEXT(_context, program, target, pname, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedProgramStringEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedProgramivEXT(RegalContext *_context, GLuint program, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetNamedProgramivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedProgramivEXT(_context, program, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedProgramivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedRenderbufferParameterivEXT(RegalContext *_context, GLuint renderbuffer, GLenum pname, GLint *params)
{
  Internal("error_glGetNamedRenderbufferParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedRenderbufferParameterivEXT(_context, renderbuffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedRenderbufferParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPointerIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLvoid **data)
{
  Internal("error_glGetPointerIndexedvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPointerIndexedvEXT(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPointerIndexedvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPointeri_vEXT(RegalContext *_context, GLenum pname, GLuint index, GLvoid **params)
{
  Internal("error_glGetPointeri_vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPointeri_vEXT(_context, pname, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPointeri_vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureImageEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("error_glGetTextureImageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureImageEXT(_context, texture, target, level, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureImageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureLevelParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTextureLevelParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureLevelParameterfvEXT(_context, texture, target, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureLevelParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureLevelParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Internal("error_glGetTextureLevelParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureLevelParameterivEXT(_context, texture, target, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureLevelParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureParameterIivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetTextureParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureParameterIivEXT(_context, texture, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureParameterIuivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  Internal("error_glGetTextureParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureParameterIuivEXT(_context, texture, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTextureParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureParameterfvEXT(_context, texture, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTextureParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetTextureParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTextureParameterivEXT(_context, texture, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexArrayIntegeri_vEXT(RegalContext *_context, GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
  Internal("error_glGetVertexArrayIntegeri_vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexArrayIntegeri_vEXT(_context, vaobj, index, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexArrayIntegeri_vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexArrayIntegervEXT(RegalContext *_context, GLuint vaobj, GLenum pname, GLint *param)
{
  Internal("error_glGetVertexArrayIntegervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexArrayIntegervEXT(_context, vaobj, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexArrayIntegervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexArrayPointeri_vEXT(RegalContext *_context, GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
  Internal("error_glGetVertexArrayPointeri_vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexArrayPointeri_vEXT(_context, vaobj, index, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexArrayPointeri_vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexArrayPointervEXT(RegalContext *_context, GLuint vaobj, GLenum pname, GLvoid **param)
{
  Internal("error_glGetVertexArrayPointervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexArrayPointervEXT(_context, vaobj, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexArrayPointervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLvoid *REGAL_CALL error_glMapNamedBufferEXT(RegalContext *_context, GLuint buffer, GLenum access)
{
  Internal("error_glMapNamedBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapNamedBufferEXT(_context, buffer, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapNamedBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLvoid *REGAL_CALL error_glMapNamedBufferRangeEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Internal("error_glMapNamedBufferRangeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapNamedBufferRangeEXT(_context, buffer, offset, length, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapNamedBufferRangeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glMatrixFrustumEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("error_glMatrixFrustumEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixFrustumEXT(_context, mode, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixFrustumEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixLoadIdentityEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glMatrixLoadIdentityEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixLoadIdentityEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixLoadIdentityEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixLoadTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("error_glMatrixLoadTransposedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixLoadTransposedEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixLoadTransposedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixLoadTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("error_glMatrixLoadTransposefEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixLoadTransposefEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixLoadTransposefEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixLoaddEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("error_glMatrixLoaddEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixLoaddEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixLoaddEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixLoadfEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("error_glMatrixLoadfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixLoadfEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixLoadfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixMultTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("error_glMatrixMultTransposedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixMultTransposedEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixMultTransposedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixMultTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("error_glMatrixMultTransposefEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixMultTransposefEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixMultTransposefEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixMultdEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("error_glMatrixMultdEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixMultdEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixMultdEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixMultfEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("error_glMatrixMultfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixMultfEXT(_context, mode, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixMultfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixOrthoEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("error_glMatrixOrthoEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixOrthoEXT(_context, mode, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixOrthoEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixPopEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glMatrixPopEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixPopEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixPopEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixPushEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glMatrixPushEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixPushEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixPushEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixRotatedEXT(RegalContext *_context, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glMatrixRotatedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixRotatedEXT(_context, mode, angle, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixRotatedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixRotatefEXT(RegalContext *_context, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glMatrixRotatefEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixRotatefEXT(_context, mode, angle, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixRotatefEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixScaledEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glMatrixScaledEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixScaledEXT(_context, mode, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixScaledEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixScalefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glMatrixScalefEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixScalefEXT(_context, mode, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixScalefEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixTranslatedEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glMatrixTranslatedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixTranslatedEXT(_context, mode, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixTranslatedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixTranslatefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glMatrixTranslatefEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixTranslatefEXT(_context, mode, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixTranslatefEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexBufferEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("error_glMultiTexBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexBufferEXT(_context, texunit, target, internalformat, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoordPointerEXT(RegalContext *_context, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glMultiTexCoordPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoordPointerEXT(_context, texunit, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoordPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexEnvfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glMultiTexEnvfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexEnvfEXT(_context, texunit, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexEnvfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glMultiTexEnvfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexEnvfvEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexEnvfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexEnviEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glMultiTexEnviEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexEnviEXT(_context, texunit, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexEnviEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glMultiTexEnvivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexEnvivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexEnvivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexGendEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  Internal("error_glMultiTexGendEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexGendEXT(_context, texunit, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexGendEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  Internal("error_glMultiTexGendvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexGendvEXT(_context, texunit, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexGendvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexGenfEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  Internal("error_glMultiTexGenfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexGenfEXT(_context, texunit, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexGenfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  Internal("error_glMultiTexGenfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexGenfvEXT(_context, texunit, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexGenfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexGeniEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  Internal("error_glMultiTexGeniEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexGeniEXT(_context, texunit, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexGeniEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  Internal("error_glMultiTexGenivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexGenivEXT(_context, texunit, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexGenivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glMultiTexImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexImage1DEXT(_context, texunit, target, level, internalformat, width, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glMultiTexImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexImage2DEXT(_context, texunit, target, level, internalformat, width, height, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glMultiTexImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexImage3DEXT(_context, texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexParameterIivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glMultiTexParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexParameterIivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexParameterIuivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("error_glMultiTexParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexParameterIuivEXT(_context, texunit, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexParameterfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glMultiTexParameterfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexParameterfEXT(_context, texunit, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexParameterfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  Internal("error_glMultiTexParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexParameterfvEXT(_context, texunit, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexParameteriEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glMultiTexParameteriEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexParameteriEXT(_context, texunit, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexParameteriEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  Internal("error_glMultiTexParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexParameterivEXT(_context, texunit, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexRenderbufferEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint renderbuffer)
{
  Internal("error_glMultiTexRenderbufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexRenderbufferEXT(_context, texunit, target, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexRenderbufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glMultiTexSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexSubImage1DEXT(_context, texunit, target, level, xoffset, width, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glMultiTexSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexSubImage2DEXT(_context, texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glMultiTexSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexSubImage3DEXT(_context, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedBufferDataEXT(RegalContext *_context, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Internal("error_glNamedBufferDataEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedBufferDataEXT(_context, buffer, size, data, usage);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedBufferDataEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Internal("error_glNamedBufferSubDataEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedBufferSubDataEXT(_context, buffer, offset, size, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedBufferSubDataEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedCopyBufferSubDataEXT(RegalContext *_context, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  Internal("error_glNamedCopyBufferSubDataEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedCopyBufferSubDataEXT(_context, readBuffer, writeBuffer, readOffset, writeOffset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedCopyBufferSubDataEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferRenderbufferEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("error_glNamedFramebufferRenderbufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferRenderbufferEXT(_context, framebuffer, attachment, renderbuffertarget, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferRenderbufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferTexture1DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glNamedFramebufferTexture1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferTexture1DEXT(_context, framebuffer, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferTexture1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferTexture2DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glNamedFramebufferTexture2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferTexture2DEXT(_context, framebuffer, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferTexture2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferTexture3DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Internal("error_glNamedFramebufferTexture3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferTexture3DEXT(_context, framebuffer, attachment, textarget, texture, level, zoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferTexture3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferTextureEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  Internal("error_glNamedFramebufferTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferTextureEXT(_context, framebuffer, attachment, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferTextureFaceEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("error_glNamedFramebufferTextureFaceEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferTextureFaceEXT(_context, framebuffer, attachment, texture, level, face);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferTextureFaceEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedFramebufferTextureLayerEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("error_glNamedFramebufferTextureLayerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedFramebufferTextureLayerEXT(_context, framebuffer, attachment, texture, level, layer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedFramebufferTextureLayerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4dEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glNamedProgramLocalParameter4dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameter4dEXT(_context, program, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameter4dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4dvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  Internal("error_glNamedProgramLocalParameter4dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameter4dvEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameter4dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4fEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glNamedProgramLocalParameter4fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameter4fEXT(_context, program, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameter4fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4fvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  Internal("error_glNamedProgramLocalParameter4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameter4fvEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameter4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4iEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glNamedProgramLocalParameterI4iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameterI4iEXT(_context, program, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameterI4iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4ivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLint *params)
{
  Internal("error_glNamedProgramLocalParameterI4ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameterI4ivEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameterI4ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4uiEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("error_glNamedProgramLocalParameterI4uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameterI4uiEXT(_context, program, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameterI4uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4uivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  Internal("error_glNamedProgramLocalParameterI4uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameterI4uivEXT(_context, program, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameterI4uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParameters4fvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("error_glNamedProgramLocalParameters4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParameters4fvEXT(_context, program, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParameters4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParametersI4ivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Internal("error_glNamedProgramLocalParametersI4ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParametersI4ivEXT(_context, program, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParametersI4ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramLocalParametersI4uivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("error_glNamedProgramLocalParametersI4uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramLocalParametersI4uivEXT(_context, program, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramLocalParametersI4uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedProgramStringEXT(RegalContext *_context, GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Internal("error_glNamedProgramStringEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedProgramStringEXT(_context, program, target, format, len, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedProgramStringEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedRenderbufferStorageEXT(RegalContext *_context, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glNamedRenderbufferStorageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedRenderbufferStorageEXT(_context, renderbuffer, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedRenderbufferStorageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedRenderbufferStorageMultisampleCoverageEXT(RegalContext *_context, GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glNamedRenderbufferStorageMultisampleCoverageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedRenderbufferStorageMultisampleCoverageEXT(_context, renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedRenderbufferStorageMultisampleCoverageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNamedRenderbufferStorageMultisampleEXT(RegalContext *_context, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glNamedRenderbufferStorageMultisampleEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNamedRenderbufferStorageMultisampleEXT(_context, renderbuffer, samples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNamedRenderbufferStorageMultisampleEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x)
{
  Internal("error_glProgramUniform1dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1dEXT(_context, program, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform1dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1dvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0)
{
  Internal("error_glProgramUniform1fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1fEXT(_context, program, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform1fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1fvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0)
{
  Internal("error_glProgramUniform1iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1iEXT(_context, program, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform1ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1ivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0)
{
  Internal("error_glProgramUniform1uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1uiEXT(_context, program, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform1uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1uivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Internal("error_glProgramUniform2dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2dEXT(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform2dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2dvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  Internal("error_glProgramUniform2fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2fEXT(_context, program, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform2fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2fvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1)
{
  Internal("error_glProgramUniform2iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2iEXT(_context, program, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform2ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2ivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1)
{
  Internal("error_glProgramUniform2uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2uiEXT(_context, program, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform2uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2uivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glProgramUniform3dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3dEXT(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3dvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("error_glProgramUniform3fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3fEXT(_context, program, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3fvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("error_glProgramUniform3iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3iEXT(_context, program, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform3ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3ivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Internal("error_glProgramUniform3uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3uiEXT(_context, program, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform3uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3uivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glProgramUniform4dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4dEXT(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("error_glProgramUniform4dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4dvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("error_glProgramUniform4fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4fEXT(_context, program, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("error_glProgramUniform4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4fvEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("error_glProgramUniform4iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4iEXT(_context, program, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("error_glProgramUniform4ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4ivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Internal("error_glProgramUniform4uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4uiEXT(_context, program, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glProgramUniform4uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4uivEXT(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix2dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix2fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix2x3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x3dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix2x3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x3fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix2x4dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x4dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x4dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix2x4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix2x4fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix2x4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix3x2dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x2dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x2dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix3x2fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x2fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x2fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix3x4dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x4dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x4dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix3x4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix3x4fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix3x4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix4dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix4x2dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x2dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x2dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix4x2fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x2fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x2fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("error_glProgramUniformMatrix4x3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x3dvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glProgramUniformMatrix4x3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformMatrix4x3fvEXT(_context, program, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformMatrix4x3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushClientAttribDefaultEXT(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glPushClientAttribDefaultEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushClientAttribDefaultEXT(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushClientAttribDefaultEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureBufferEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("error_glTextureBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureBufferEXT(_context, texture, target, internalformat, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTextureImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage1DEXT(_context, texture, target, level, internalformat, width, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTextureImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage2DEXT(_context, texture, target, level, internalformat, width, height, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTextureImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage3DEXT(_context, texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureParameterIivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glTextureParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureParameterIivEXT(_context, texture, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureParameterIuivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("error_glTextureParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureParameterIuivEXT(_context, texture, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureParameterfEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glTextureParameterfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureParameterfEXT(_context, texture, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureParameterfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  Internal("error_glTextureParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureParameterfvEXT(_context, texture, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureParameteriEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glTextureParameteriEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureParameteriEXT(_context, texture, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureParameteriEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  Internal("error_glTextureParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureParameterivEXT(_context, texture, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureRenderbufferEXT(RegalContext *_context, GLuint texture, GLenum target, GLuint renderbuffer)
{
  Internal("error_glTextureRenderbufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureRenderbufferEXT(_context, texture, target, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureRenderbufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTextureSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureSubImage1DEXT(_context, texture, target, level, xoffset, width, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTextureSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureSubImage2DEXT(_context, texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTextureSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureSubImage3DEXT(_context, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glUnmapNamedBufferEXT(RegalContext *_context, GLuint buffer)
{
  Internal("error_glUnmapNamedBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glUnmapNamedBufferEXT(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnmapNamedBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glVertexArrayColorOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayColorOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayColorOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayColorOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayEdgeFlagOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayEdgeFlagOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayEdgeFlagOffsetEXT(_context, vaobj, buffer, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayEdgeFlagOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayFogCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayFogCoordOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayFogCoordOffsetEXT(_context, vaobj, buffer, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayFogCoordOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayIndexOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayIndexOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayIndexOffsetEXT(_context, vaobj, buffer, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayIndexOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayMultiTexCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayMultiTexCoordOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayMultiTexCoordOffsetEXT(_context, vaobj, buffer, texunit, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayMultiTexCoordOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayNormalOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayNormalOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayNormalOffsetEXT(_context, vaobj, buffer, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayNormalOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArraySecondaryColorOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArraySecondaryColorOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArraySecondaryColorOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArraySecondaryColorOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayTexCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayTexCoordOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayTexCoordOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayTexCoordOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribIOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayVertexAttribIOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribIOffsetEXT(_context, vaobj, buffer, index, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribIOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayVertexAttribOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribOffsetEXT(_context, vaobj, buffer, index, size, type, normalized, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("error_glVertexArrayVertexOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_discard_framebuffer

static void REGAL_CALL error_glDiscardFramebufferEXT(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  Internal("error_glDiscardFramebufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDiscardFramebufferEXT(_context, target, numAttachments, attachments);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDiscardFramebufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_disjoint_timer_query

static void REGAL_CALL error_glGetQueryObjectivEXT(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryObjectivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectivEXT(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glQueryCounterEXT(RegalContext *_context, GLuint id, GLenum target)
{
  Internal("error_glQueryCounterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glQueryCounterEXT(_context, id, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glQueryCounterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_draw_buffers2

static void REGAL_CALL error_glColorMaskIndexedEXT(RegalContext *_context, GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Internal("error_glColorMaskIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorMaskIndexedEXT(_context, buf, r, g, b, a);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorMaskIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("error_glDisableIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableIndexedEXT(_context, target, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("error_glEnableIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableIndexedEXT(_context, target, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetBooleanIndexedvEXT(RegalContext *_context, GLenum value, GLuint index, GLboolean *data)
{
  Internal("error_glGetBooleanIndexedvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBooleanIndexedvEXT(_context, value, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBooleanIndexedvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetIntegerIndexedvEXT(RegalContext *_context, GLenum value, GLuint index, GLint *data)
{
  Internal("error_glGetIntegerIndexedvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetIntegerIndexedvEXT(_context, value, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetIntegerIndexedvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsEnabledIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("error_glIsEnabledIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsEnabledIndexedEXT(_context, target, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsEnabledIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_EXT_draw_instanced

static void REGAL_CALL error_glDrawArraysInstancedEXT(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Internal("error_glDrawArraysInstancedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysInstancedEXT(_context, mode, start, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysInstancedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawElementsInstancedEXT(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("error_glDrawElementsInstancedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawElementsInstancedEXT(_context, mode, count, type, indices, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawElementsInstancedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_draw_range_elements

static void REGAL_CALL error_glDrawRangeElementsEXT(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("error_glDrawRangeElementsEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawRangeElementsEXT(_context, mode, start, end, count, type, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawRangeElementsEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_fog_coord

static void REGAL_CALL error_glFogCoordPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glFogCoordPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordPointerEXT(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoorddEXT(RegalContext *_context, GLdouble coord)
{
  Internal("error_glFogCoorddEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoorddEXT(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoorddEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoorddvEXT(RegalContext *_context, const GLdouble *coord)
{
  Internal("error_glFogCoorddvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoorddvEXT(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoorddvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordfEXT(RegalContext *_context, GLfloat coord)
{
  Internal("error_glFogCoordfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordfEXT(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordfvEXT(RegalContext *_context, const GLfloat *coord)
{
  Internal("error_glFogCoordfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordfvEXT(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_fragment_lighting

static void REGAL_CALL error_glFragmentColorMaterialEXT(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("error_glFragmentColorMaterialEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentColorMaterialEXT(_context, face, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentColorMaterialEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModelfEXT(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glFragmentLightModelfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModelfEXT(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModelfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModelfvEXT(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("error_glFragmentLightModelfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModelfvEXT(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModelfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModeliEXT(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glFragmentLightModeliEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModeliEXT(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModeliEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModelivEXT(RegalContext *_context, GLenum pname, GLint *params)
{
  Internal("error_glFragmentLightModelivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModelivEXT(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModelivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightfEXT(RegalContext *_context, GLenum light, GLenum pname, GLfloat param)
{
  Internal("error_glFragmentLightfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightfEXT(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightfvEXT(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params)
{
  Internal("error_glFragmentLightfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightfvEXT(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightiEXT(RegalContext *_context, GLenum light, GLenum pname, GLint param)
{
  Internal("error_glFragmentLightiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightiEXT(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightivEXT(RegalContext *_context, GLenum light, GLenum pname, GLint *params)
{
  Internal("error_glFragmentLightivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightivEXT(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialfEXT(RegalContext *_context, GLenum face, GLenum pname, const GLfloat param)
{
  Internal("error_glFragmentMaterialfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialfEXT(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialfvEXT(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  Internal("error_glFragmentMaterialfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialfvEXT(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialiEXT(RegalContext *_context, GLenum face, GLenum pname, const GLint param)
{
  Internal("error_glFragmentMaterialiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialiEXT(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialivEXT(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  Internal("error_glFragmentMaterialivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialivEXT(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentLightfvEXT(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params)
{
  Internal("error_glGetFragmentLightfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentLightfvEXT(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentLightfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentLightivEXT(RegalContext *_context, GLenum light, GLenum pname, GLint *params)
{
  Internal("error_glGetFragmentLightivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentLightivEXT(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentLightivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentMaterialfvEXT(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  Internal("error_glGetFragmentMaterialfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentMaterialfvEXT(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentMaterialfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentMaterialivEXT(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  Internal("error_glGetFragmentMaterialivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentMaterialivEXT(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentMaterialivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightEnviEXT(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glLightEnviEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightEnviEXT(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightEnviEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_framebuffer_blit

static void REGAL_CALL error_glBlitFramebufferEXT(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("error_glBlitFramebufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlitFramebufferEXT(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlitFramebufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_framebuffer_multisample

static void REGAL_CALL error_glRenderbufferStorageMultisampleEXT(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageMultisampleEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageMultisampleEXT(_context, target, samples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageMultisampleEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_framebuffer_object

static void REGAL_CALL error_glBindFramebufferEXT(RegalContext *_context, GLenum target, GLuint framebuffer)
{
  Internal("error_glBindFramebufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFramebufferEXT(_context, target, framebuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFramebufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindRenderbufferEXT(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("error_glBindRenderbufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindRenderbufferEXT(_context, target, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindRenderbufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glCheckFramebufferStatusEXT(RegalContext *_context, GLenum target)
{
  Internal("error_glCheckFramebufferStatusEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glCheckFramebufferStatusEXT(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCheckFramebufferStatusEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteFramebuffersEXT(RegalContext *_context, GLsizei n, const GLuint *framebuffers)
{
  Internal("error_glDeleteFramebuffersEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteFramebuffersEXT(_context, n, framebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteFramebuffersEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteRenderbuffersEXT(RegalContext *_context, GLsizei n, const GLuint *renderbuffers)
{
  Internal("error_glDeleteRenderbuffersEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteRenderbuffersEXT(_context, n, renderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteRenderbuffersEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferRenderbufferEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("error_glFramebufferRenderbufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferRenderbufferEXT(_context, target, attachment, renderbuffertarget, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferRenderbufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture1DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTexture1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture1DEXT(_context, target, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture2DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTexture2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture2DEXT(_context, target, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture3DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Internal("error_glFramebufferTexture3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture3DEXT(_context, target, attachment, textarget, texture, level, zoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenFramebuffersEXT(RegalContext *_context, GLsizei n, GLuint *framebuffers)
{
  Internal("error_glGenFramebuffersEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenFramebuffersEXT(_context, n, framebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenFramebuffersEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenRenderbuffersEXT(RegalContext *_context, GLsizei n, GLuint *renderbuffers)
{
  Internal("error_glGenRenderbuffersEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenRenderbuffersEXT(_context, n, renderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenRenderbuffersEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenerateMipmapEXT(RegalContext *_context, GLenum target)
{
  Internal("error_glGenerateMipmapEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenerateMipmapEXT(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenerateMipmapEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFramebufferAttachmentParameterivEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("error_glGetFramebufferAttachmentParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFramebufferAttachmentParameterivEXT(_context, target, attachment, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFramebufferAttachmentParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetRenderbufferParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetRenderbufferParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetRenderbufferParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetRenderbufferParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsFramebufferEXT(RegalContext *_context, GLuint framebuffer)
{
  Internal("error_glIsFramebufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsFramebufferEXT(_context, framebuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsFramebufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsRenderbufferEXT(RegalContext *_context, GLuint renderbuffer)
{
  Internal("error_glIsRenderbufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsRenderbufferEXT(_context, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsRenderbufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glRenderbufferStorageEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageEXT(_context, target, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_geometry_shader4

static void REGAL_CALL error_glFramebufferTextureEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureEXT(_context, target, attachment, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTextureFaceEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("error_glFramebufferTextureFaceEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureFaceEXT(_context, target, attachment, texture, level, face);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureFaceEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameteriEXT(RegalContext *_context, GLuint program, GLenum pname, GLint value)
{
  Internal("error_glProgramParameteriEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameteriEXT(_context, program, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameteriEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_gpu_program_parameters

static void REGAL_CALL error_glProgramEnvParameters4fvEXT(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("error_glProgramEnvParameters4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameters4fvEXT(_context, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameters4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameters4fvEXT(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("error_glProgramLocalParameters4fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameters4fvEXT(_context, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameters4fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_gpu_shader4

static void REGAL_CALL error_glBindFragDataLocationEXT(RegalContext *_context, GLuint program, GLuint color, const GLchar *name)
{
  Internal("error_glBindFragDataLocationEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFragDataLocationEXT(_context, program, color, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFragDataLocationEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetFragDataLocationEXT(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glGetFragDataLocationEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetFragDataLocationEXT(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragDataLocationEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetUniformuivEXT(RegalContext *_context, GLuint program, GLint location, GLuint *params)
{
  Internal("error_glGetUniformuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformuivEXT(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribIivEXT(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetVertexAttribIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribIivEXT(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribIuivEXT(RegalContext *_context, GLuint index, GLenum pname, GLuint *params)
{
  Internal("error_glGetVertexAttribIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribIuivEXT(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1uiEXT(RegalContext *_context, GLint location, GLuint v0)
{
  Internal("error_glUniform1uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1uiEXT(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform1uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1uivEXT(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1)
{
  Internal("error_glUniform2uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2uiEXT(_context, location, v0, v1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform2uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2uivEXT(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Internal("error_glUniform3uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3uiEXT(_context, location, v0, v1, v2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform3uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3uivEXT(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Internal("error_glUniform4uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4uiEXT(_context, location, v0, v1, v2, v3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("error_glUniform4uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4uivEXT(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1iEXT(RegalContext *_context, GLuint index, GLint x)
{
  Internal("error_glVertexAttribI1iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1iEXT(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI1ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1ivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1uiEXT(RegalContext *_context, GLuint index, GLuint x)
{
  Internal("error_glVertexAttribI1uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1uiEXT(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI1uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI1uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI1uivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI1uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2iEXT(RegalContext *_context, GLuint index, GLint x, GLint y)
{
  Internal("error_glVertexAttribI2iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2iEXT(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI2ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2ivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y)
{
  Internal("error_glVertexAttribI2uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2uiEXT(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI2uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI2uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI2uivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI2uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3iEXT(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z)
{
  Internal("error_glVertexAttribI3iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3iEXT(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI3ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3ivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z)
{
  Internal("error_glVertexAttribI3uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3uiEXT(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI3uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI3uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI3uivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI3uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4bvEXT(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("error_glVertexAttribI4bvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4bvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4bvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4iEXT(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glVertexAttribI4iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4iEXT(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("error_glVertexAttribI4ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4ivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4svEXT(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttribI4svEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4svEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4svEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4ubvEXT(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttribI4ubvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4ubvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4ubvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("error_glVertexAttribI4uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4uiEXT(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("error_glVertexAttribI4uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4uivEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribI4usvEXT(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("error_glVertexAttribI4usvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribI4usvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribI4usvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribIPointerEXT(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribIPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribIPointerEXT(_context, index, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribIPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_histogram

static void REGAL_CALL error_glGetHistogramEXT(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Internal("error_glGetHistogramEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetHistogramEXT(_context, target, reset, format, type, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHistogramEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetHistogramParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetHistogramParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetHistogramParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHistogramParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetHistogramParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetHistogramParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetHistogramParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetHistogramParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMinmaxEXT(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Internal("error_glGetMinmaxEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMinmaxEXT(_context, target, reset, format, type, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMinmaxEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMinmaxParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMinmaxParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMinmaxParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMinmaxParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMinmaxParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetMinmaxParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMinmaxParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMinmaxParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glHistogramEXT(RegalContext *_context, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  Internal("error_glHistogramEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glHistogramEXT(_context, target, width, internalformat, sink);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glHistogramEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMinmaxEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLboolean sink)
{
  Internal("error_glMinmaxEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMinmaxEXT(_context, target, internalformat, sink);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMinmaxEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResetHistogramEXT(RegalContext *_context, GLenum target)
{
  Internal("error_glResetHistogramEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResetHistogramEXT(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResetHistogramEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResetMinmaxEXT(RegalContext *_context, GLenum target)
{
  Internal("error_glResetMinmaxEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResetMinmaxEXT(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResetMinmaxEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_index_func

static void REGAL_CALL error_glIndexFuncEXT(RegalContext *_context, GLenum func, GLfloat ref)
{
  Internal("error_glIndexFuncEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexFuncEXT(_context, func, ref);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexFuncEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_index_material

static void REGAL_CALL error_glIndexMaterialEXT(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("error_glIndexMaterialEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexMaterialEXT(_context, face, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexMaterialEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_light_texture

static void REGAL_CALL error_glApplyTextureEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glApplyTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glApplyTextureEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glApplyTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureLightEXT(RegalContext *_context, GLenum pname)
{
  Internal("error_glTextureLightEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureLightEXT(_context, pname);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureLightEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureMaterialEXT(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("error_glTextureMaterialEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureMaterialEXT(_context, face, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureMaterialEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_map_buffer_range

static void REGAL_CALL error_glFlushMappedBufferRangeEXT(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Internal("error_glFlushMappedBufferRangeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushMappedBufferRangeEXT(_context, target, offset, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushMappedBufferRangeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLvoid *REGAL_CALL error_glMapBufferRangeEXT(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Internal("error_glMapBufferRangeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapBufferRangeEXT(_context, target, offset, length, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapBufferRangeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_EXT_multi_draw_arrays

static void REGAL_CALL error_glMultiDrawArraysEXT(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("error_glMultiDrawArraysEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawArraysEXT(_context, mode, first, count, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawArraysEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiDrawElementsEXT(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  Internal("error_glMultiDrawElementsEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiDrawElementsEXT(_context, mode, count, type, indices, primcount);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiDrawElementsEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_multisample

static void REGAL_CALL error_glSampleMaskEXT(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("error_glSampleMaskEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleMaskEXT(_context, value, invert);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleMaskEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplePatternEXT(RegalContext *_context, GLenum pattern)
{
  Internal("error_glSamplePatternEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplePatternEXT(_context, pattern);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplePatternEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_multisampled_render_to_texture

static void REGAL_CALL error_glFramebufferTexture2DMultisampleEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  Internal("error_glFramebufferTexture2DMultisampleEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture2DMultisampleEXT(_context, target, attachment, textarget, texture, level, samples);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture2DMultisampleEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_multiview_draw_buffers

static void REGAL_CALL error_glDrawBuffersIndexedEXT(RegalContext *_context, GLint n, const GLenum *location, const GLint *indices)
{
  Internal("error_glDrawBuffersIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBuffersIndexedEXT(_context, n, location, indices);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBuffersIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetIntegeri_vEXT(RegalContext *_context, GLenum target, GLuint index, GLint *data)
{
  Internal("error_glGetIntegeri_vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetIntegeri_vEXT(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetIntegeri_vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReadBufferIndexedEXT(RegalContext *_context, GLenum src, GLint index)
{
  Internal("error_glReadBufferIndexedEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadBufferIndexedEXT(_context, src, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadBufferIndexedEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_occlusion_query_boolean

static void REGAL_CALL error_glBeginQueryEXT(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBeginQueryEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginQueryEXT(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginQueryEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteQueriesEXT(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteQueriesEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteQueriesEXT(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteQueriesEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndQueryEXT(RegalContext *_context, GLenum target)
{
  Internal("error_glEndQueryEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndQueryEXT(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndQueryEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenQueriesEXT(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenQueriesEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenQueriesEXT(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenQueriesEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectuivEXT(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("error_glGetQueryObjectuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectuivEXT(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetQueryivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsQueryEXT(RegalContext *_context, GLuint id)
{
  Internal("error_glIsQueryEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsQueryEXT(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsQueryEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_EXT_paletted_texture

static void REGAL_CALL error_glColorTableEXT(RegalContext *_context, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("error_glColorTableEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTableEXT(_context, target, internalFormat, width, format, type, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTableEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *data)
{
  Internal("error_glGetColorTableEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableEXT(_context, target, format, type, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetColorTableParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetColorTableParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_pixel_transform

static void REGAL_CALL error_glGetPixelTransformParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glGetPixelTransformParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelTransformParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelTransformParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPixelTransformParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glGetPixelTransformParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelTransformParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelTransformParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTransformParameterfEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat param)
{
  Internal("error_glPixelTransformParameterfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTransformParameterfEXT(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTransformParameterfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTransformParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glPixelTransformParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTransformParameterfvEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTransformParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTransformParameteriEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint param)
{
  Internal("error_glPixelTransformParameteriEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTransformParameteriEXT(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTransformParameteriEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTransformParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glPixelTransformParameterivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTransformParameterivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTransformParameterivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_point_parameters

static void REGAL_CALL error_glPointParameterfEXT(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPointParameterfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfEXT(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterfvEXT(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glPointParameterfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfvEXT(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_polygon_offset

static void REGAL_CALL error_glPolygonOffsetEXT(RegalContext *_context, GLfloat factor, GLfloat bias)
{
  Internal("error_glPolygonOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPolygonOffsetEXT(_context, factor, bias);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPolygonOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_provoking_vertex

static void REGAL_CALL error_glProvokingVertexEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glProvokingVertexEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProvokingVertexEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProvokingVertexEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_robustness

static void REGAL_CALL error_glGetnUniformfvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  Internal("error_glGetnUniformfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnUniformfvEXT(_context, program, location, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnUniformfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetnUniformivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  Internal("error_glGetnUniformivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetnUniformivEXT(_context, program, location, bufSize, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetnUniformivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReadnPixelsEXT(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  Internal("error_glReadnPixelsEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadnPixelsEXT(_context, x, y, width, height, format, type, bufSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadnPixelsEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_scene_marker

static void REGAL_CALL error_glBeginSceneEXT(RegalContext *_context)
{
  Internal("error_glBeginSceneEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginSceneEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginSceneEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndSceneEXT(RegalContext *_context)
{
  Internal("error_glEndSceneEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndSceneEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndSceneEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_secondary_color

static void REGAL_CALL error_glSecondaryColor3bEXT(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  Internal("error_glSecondaryColor3bEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3bEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3bEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3bvEXT(RegalContext *_context, const GLbyte *v)
{
  Internal("error_glSecondaryColor3bvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3bvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3bvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3dEXT(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  Internal("error_glSecondaryColor3dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3dEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3dvEXT(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glSecondaryColor3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3dvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3fEXT(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  Internal("error_glSecondaryColor3fEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3fEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3fEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3fvEXT(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glSecondaryColor3fvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3fvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3fvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3iEXT(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  Internal("error_glSecondaryColor3iEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3iEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3iEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3ivEXT(RegalContext *_context, const GLint *v)
{
  Internal("error_glSecondaryColor3ivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3ivEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3ivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3sEXT(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  Internal("error_glSecondaryColor3sEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3sEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3sEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3svEXT(RegalContext *_context, const GLshort *v)
{
  Internal("error_glSecondaryColor3svEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3svEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3svEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3ubEXT(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  Internal("error_glSecondaryColor3ubEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3ubEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3ubEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3ubvEXT(RegalContext *_context, const GLubyte *v)
{
  Internal("error_glSecondaryColor3ubvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3ubvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3ubvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3uiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  Internal("error_glSecondaryColor3uiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3uiEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3uiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3uivEXT(RegalContext *_context, const GLuint *v)
{
  Internal("error_glSecondaryColor3uivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3uivEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3uivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3usEXT(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  Internal("error_glSecondaryColor3usEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3usEXT(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3usEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3usvEXT(RegalContext *_context, const GLushort *v)
{
  Internal("error_glSecondaryColor3usvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3usvEXT(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3usvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glSecondaryColorPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColorPointerEXT(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColorPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_separate_shader_objects

static void REGAL_CALL error_glActiveProgramEXT(RegalContext *_context, GLuint program)
{
  Internal("error_glActiveProgramEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glActiveProgramEXT(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glActiveProgramEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glCreateShaderProgramEXT(RegalContext *_context, GLenum type, const GLchar *string)
{
  Internal("error_glCreateShaderProgramEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glCreateShaderProgramEXT(_context, type, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCreateShaderProgramEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glUseShaderProgramEXT(RegalContext *_context, GLenum type, GLuint program)
{
  Internal("error_glUseShaderProgramEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUseShaderProgramEXT(_context, type, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUseShaderProgramEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_shader_image_load_store

static void REGAL_CALL error_glBindImageTextureEXT(RegalContext *_context, GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  Internal("error_glBindImageTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindImageTextureEXT(_context, index, texture, level, layered, layer, access, format);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindImageTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMemoryBarrierEXT(RegalContext *_context, GLbitfield barriers)
{
  Internal("error_glMemoryBarrierEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMemoryBarrierEXT(_context, barriers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMemoryBarrierEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_stencil_clear_tag

static void REGAL_CALL error_glStencilClearTagEXT(RegalContext *_context, GLsizei stencilTagBits, GLuint stencilClearTag)
{
  Internal("error_glStencilClearTagEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilClearTagEXT(_context, stencilTagBits, stencilClearTag);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilClearTagEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_stencil_two_side

static void REGAL_CALL error_glActiveStencilFaceEXT(RegalContext *_context, GLenum face)
{
  Internal("error_glActiveStencilFaceEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glActiveStencilFaceEXT(_context, face);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glActiveStencilFaceEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_subtexture

static void REGAL_CALL error_glTexSubImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage1DEXT(_context, target, level, xoffset, width, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage2DEXT(_context, target, level, xoffset, yoffset, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage3DEXT(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture3D

static void REGAL_CALL error_glTexImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexImage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage3DEXT(_context, target, level, internalformat, width, height, depth, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture_array

static void REGAL_CALL error_glFramebufferTextureLayerEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("error_glFramebufferTextureLayerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTextureLayerEXT(_context, target, attachment, texture, level, layer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTextureLayerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture_buffer_object

static void REGAL_CALL error_glTexBufferEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("error_glTexBufferEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexBufferEXT(_context, target, internalformat, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexBufferEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture_integer

static void REGAL_CALL error_glClearColorIiEXT(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha)
{
  Internal("error_glClearColorIiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearColorIiEXT(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearColorIiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearColorIuiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  Internal("error_glClearColorIuiEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearColorIuiEXT(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearColorIuiEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexParameterIivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetTexParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterIivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexParameterIuivEXT(RegalContext *_context, GLenum target, GLenum pname, GLuint *params)
{
  Internal("error_glGetTexParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterIuivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterIivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glTexParameterIivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterIivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterIivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterIuivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("error_glTexParameterIuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterIuivEXT(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterIuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture_object

static GLboolean REGAL_CALL error_glAreTexturesResidentEXT(RegalContext *_context, GLsizei n, const GLuint *textures, GLboolean *residences)
{
  Internal("error_glAreTexturesResidentEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glAreTexturesResidentEXT(_context, n, textures, residences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAreTexturesResidentEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glBindTextureEXT(RegalContext *_context, GLenum target, GLuint texture)
{
  Internal("error_glBindTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindTextureEXT(_context, target, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteTexturesEXT(RegalContext *_context, GLsizei n, const GLuint *textures)
{
  Internal("error_glDeleteTexturesEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteTexturesEXT(_context, n, textures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteTexturesEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenTexturesEXT(RegalContext *_context, GLsizei n, GLuint *textures)
{
  Internal("error_glGenTexturesEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenTexturesEXT(_context, n, textures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenTexturesEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsTextureEXT(RegalContext *_context, GLuint texture)
{
  Internal("error_glIsTextureEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsTextureEXT(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsTextureEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glPrioritizeTexturesEXT(RegalContext *_context, GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  Internal("error_glPrioritizeTexturesEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPrioritizeTexturesEXT(_context, n, textures, priorities);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPrioritizeTexturesEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture_perturb_normal

static void REGAL_CALL error_glTextureNormalEXT(RegalContext *_context, GLenum mode)
{
  Internal("error_glTextureNormalEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureNormalEXT(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureNormalEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_texture_storage

static void REGAL_CALL error_glTexStorage1DEXT(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Internal("error_glTexStorage1DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage1DEXT(_context, target, levels, internalformat, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage1DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexStorage2DEXT(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glTexStorage2DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage2DEXT(_context, target, levels, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage2DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexStorage3DEXT(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("error_glTexStorage3DEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexStorage3DEXT(_context, target, levels, internalformat, width, height, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexStorage3DEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_timer_query

static void REGAL_CALL error_glGetQueryObjecti64vEXT(RegalContext *_context, GLuint id, GLenum pname, GLint64EXT *params)
{
  Internal("error_glGetQueryObjecti64vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjecti64vEXT(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjecti64vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetQueryObjectui64vEXT(RegalContext *_context, GLuint id, GLenum pname, GLuint64EXT *params)
{
  Internal("error_glGetQueryObjectui64vEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetQueryObjectui64vEXT(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetQueryObjectui64vEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_transform_feedback

static void REGAL_CALL error_glBeginTransformFeedbackEXT(RegalContext *_context, GLenum primitiveMode)
{
  Internal("error_glBeginTransformFeedbackEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginTransformFeedbackEXT(_context, primitiveMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginTransformFeedbackEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferBaseEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer)
{
  Internal("error_glBindBufferBaseEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferBaseEXT(_context, target, index, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferBaseEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferOffsetEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  Internal("error_glBindBufferOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferOffsetEXT(_context, target, index, buffer, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferRangeEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("error_glBindBufferRangeEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferRangeEXT(_context, target, index, buffer, offset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferRangeEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndTransformFeedbackEXT(RegalContext *_context)
{
  Internal("error_glEndTransformFeedbackEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndTransformFeedbackEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndTransformFeedbackEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTransformFeedbackVaryingEXT(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Internal("error_glGetTransformFeedbackVaryingEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTransformFeedbackVaryingEXT(_context, program, index, bufSize, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTransformFeedbackVaryingEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTransformFeedbackVaryingsEXT(RegalContext *_context, GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
{
  Internal("error_glTransformFeedbackVaryingsEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTransformFeedbackVaryingsEXT(_context, program, count, varyings, bufferMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTransformFeedbackVaryingsEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_vertex_array

static void REGAL_CALL error_glArrayElementEXT(RegalContext *_context, GLint i)
{
  Internal("error_glArrayElementEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glArrayElementEXT(_context, i);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glArrayElementEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("error_glColorPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorPointerEXT(_context, size, type, stride, count, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawArraysEXT(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  Internal("error_glDrawArraysEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawArraysEXT(_context, mode, first, count);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawArraysEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEdgeFlagPointerEXT(RegalContext *_context, GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  Internal("error_glEdgeFlagPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEdgeFlagPointerEXT(_context, stride, count, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEdgeFlagPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPointervEXT(RegalContext *_context, GLenum pname, GLvoid **params)
{
  Internal("error_glGetPointervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPointervEXT(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPointervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("error_glIndexPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexPointerEXT(_context, type, stride, count, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("error_glNormalPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalPointerEXT(_context, type, stride, count, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("error_glTexCoordPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordPointerEXT(_context, size, type, stride, count, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("error_glVertexPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexPointerEXT(_context, size, type, stride, count, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_vertex_attrib_64bit

static void REGAL_CALL error_glGetVertexAttribLdvEXT(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("error_glGetVertexAttribLdvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribLdvEXT(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribLdvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayVertexAttribLOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  Internal("error_glVertexArrayVertexAttribLOffsetEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayVertexAttribLOffsetEXT(_context, vaobj, buffer, index, size, type, stride, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayVertexAttribLOffsetEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1dEXT(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("error_glVertexAttribL1dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1dEXT(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL1dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1dvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("error_glVertexAttribL2dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2dEXT(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL2dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2dvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertexAttribL3dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3dEXT(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL3dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3dvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertexAttribL4dEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4dEXT(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4dEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttribL4dvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4dvEXT(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4dvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribLPointerEXT(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribLPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribLPointerEXT(_context, index, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribLPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_vertex_shader

static void REGAL_CALL error_glBeginVertexShaderEXT(RegalContext *_context)
{
  Internal("error_glBeginVertexShaderEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginVertexShaderEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginVertexShaderEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glBindLightParameterEXT(RegalContext *_context, GLenum light, GLenum value)
{
  Internal("error_glBindLightParameterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glBindLightParameterEXT(_context, light, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindLightParameterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glBindMaterialParameterEXT(RegalContext *_context, GLenum face, GLenum value)
{
  Internal("error_glBindMaterialParameterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glBindMaterialParameterEXT(_context, face, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindMaterialParameterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glBindParameterEXT(RegalContext *_context, GLenum value)
{
  Internal("error_glBindParameterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glBindParameterEXT(_context, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindParameterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glBindTexGenParameterEXT(RegalContext *_context, GLenum unit, GLenum coord, GLenum value)
{
  Internal("error_glBindTexGenParameterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glBindTexGenParameterEXT(_context, unit, coord, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTexGenParameterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glBindTextureUnitParameterEXT(RegalContext *_context, GLenum unit, GLenum value)
{
  Internal("error_glBindTextureUnitParameterEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glBindTextureUnitParameterEXT(_context, unit, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTextureUnitParameterEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glBindVertexShaderEXT(RegalContext *_context, GLuint id)
{
  Internal("error_glBindVertexShaderEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVertexShaderEXT(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVertexShaderEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteVertexShaderEXT(RegalContext *_context, GLuint id)
{
  Internal("error_glDeleteVertexShaderEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteVertexShaderEXT(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteVertexShaderEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDisableVariantClientStateEXT(RegalContext *_context, GLuint id)
{
  Internal("error_glDisableVariantClientStateEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableVariantClientStateEXT(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableVariantClientStateEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableVariantClientStateEXT(RegalContext *_context, GLuint id)
{
  Internal("error_glEnableVariantClientStateEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableVariantClientStateEXT(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableVariantClientStateEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndVertexShaderEXT(RegalContext *_context)
{
  Internal("error_glEndVertexShaderEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndVertexShaderEXT(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndVertexShaderEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtractComponentEXT(RegalContext *_context, GLuint res, GLuint src, GLuint num)
{
  Internal("error_glExtractComponentEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtractComponentEXT(_context, res, src, num);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtractComponentEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGenSymbolsEXT(RegalContext *_context, GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  Internal("error_glGenSymbolsEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGenSymbolsEXT(_context, datatype, storagetype, range, components);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenSymbolsEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glGenVertexShadersEXT(RegalContext *_context, GLuint range)
{
  Internal("error_glGenVertexShadersEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGenVertexShadersEXT(_context, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenVertexShadersEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetInvariantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data)
{
  Internal("error_glGetInvariantBooleanvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInvariantBooleanvEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInvariantBooleanvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetInvariantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data)
{
  Internal("error_glGetInvariantFloatvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInvariantFloatvEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInvariantFloatvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetInvariantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data)
{
  Internal("error_glGetInvariantIntegervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetInvariantIntegervEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInvariantIntegervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetLocalConstantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data)
{
  Internal("error_glGetLocalConstantBooleanvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetLocalConstantBooleanvEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetLocalConstantBooleanvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetLocalConstantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data)
{
  Internal("error_glGetLocalConstantFloatvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetLocalConstantFloatvEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetLocalConstantFloatvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetLocalConstantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data)
{
  Internal("error_glGetLocalConstantIntegervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetLocalConstantIntegervEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetLocalConstantIntegervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVariantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data)
{
  Internal("error_glGetVariantBooleanvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVariantBooleanvEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVariantBooleanvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVariantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data)
{
  Internal("error_glGetVariantFloatvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVariantFloatvEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVariantFloatvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVariantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data)
{
  Internal("error_glGetVariantIntegervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVariantIntegervEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVariantIntegervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVariantPointervEXT(RegalContext *_context, GLuint id, GLenum value, GLvoid **data)
{
  Internal("error_glGetVariantPointervEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVariantPointervEXT(_context, id, value, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVariantPointervEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInsertComponentEXT(RegalContext *_context, GLuint res, GLuint src, GLuint num)
{
  Internal("error_glInsertComponentEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInsertComponentEXT(_context, res, src, num);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInsertComponentEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsVariantEnabledEXT(RegalContext *_context, GLuint id, GLenum cap)
{
  Internal("error_glIsVariantEnabledEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsVariantEnabledEXT(_context, id, cap);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsVariantEnabledEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glSetInvariantEXT(RegalContext *_context, GLuint id, GLenum type, const GLvoid *addr)
{
  Internal("error_glSetInvariantEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSetInvariantEXT(_context, id, type, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSetInvariantEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSetLocalConstantEXT(RegalContext *_context, GLuint id, GLenum type, const GLvoid *addr)
{
  Internal("error_glSetLocalConstantEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSetLocalConstantEXT(_context, id, type, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSetLocalConstantEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShaderOp1EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1)
{
  Internal("error_glShaderOp1EXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderOp1EXT(_context, op, res, arg1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderOp1EXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShaderOp2EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  Internal("error_glShaderOp2EXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderOp2EXT(_context, op, res, arg1, arg2);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderOp2EXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glShaderOp3EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  Internal("error_glShaderOp3EXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glShaderOp3EXT(_context, op, res, arg1, arg2, arg3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glShaderOp3EXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSwizzleEXT(RegalContext *_context, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  Internal("error_glSwizzleEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSwizzleEXT(_context, res, in, outX, outY, outZ, outW);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSwizzleEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantPointerEXT(RegalContext *_context, GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
  Internal("error_glVariantPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantPointerEXT(_context, id, type, stride, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantbvEXT(RegalContext *_context, GLuint id, const GLbyte *addr)
{
  Internal("error_glVariantbvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantbvEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantbvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantdvEXT(RegalContext *_context, GLuint id, const GLdouble *addr)
{
  Internal("error_glVariantdvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantdvEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantdvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantfvEXT(RegalContext *_context, GLuint id, const GLfloat *addr)
{
  Internal("error_glVariantfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantfvEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantivEXT(RegalContext *_context, GLuint id, const GLint *addr)
{
  Internal("error_glVariantivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantivEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantsvEXT(RegalContext *_context, GLuint id, const GLshort *addr)
{
  Internal("error_glVariantsvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantsvEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantsvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantubvEXT(RegalContext *_context, GLuint id, const GLubyte *addr)
{
  Internal("error_glVariantubvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantubvEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantubvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantuivEXT(RegalContext *_context, GLuint id, const GLuint *addr)
{
  Internal("error_glVariantuivEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantuivEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantuivEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVariantusvEXT(RegalContext *_context, GLuint id, const GLushort *addr)
{
  Internal("error_glVariantusvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVariantusvEXT(_context, id, addr);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVariantusvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWriteMaskEXT(RegalContext *_context, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  Internal("error_glWriteMaskEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWriteMaskEXT(_context, res, in, outX, outY, outZ, outW);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWriteMaskEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_vertex_weighting

static void REGAL_CALL error_glVertexWeightPointerEXT(RegalContext *_context, GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexWeightPointerEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexWeightPointerEXT(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexWeightPointerEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexWeightfEXT(RegalContext *_context, GLfloat weight)
{
  Internal("error_glVertexWeightfEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexWeightfEXT(_context, weight);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexWeightfEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexWeightfvEXT(RegalContext *_context, const GLfloat *weight)
{
  Internal("error_glVertexWeightfvEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexWeightfvEXT(_context, weight);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexWeightfvEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_EXT_x11_sync_object

static GLsync REGAL_CALL error_glImportSyncEXT(RegalContext *_context, GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  Internal("error_glImportSyncEXT","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLsync  ret = _context->err.next.glImportSyncEXT(_context, external_sync_type, external_sync, flags);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glImportSyncEXT : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_GREMEDY_frame_terminator

static void REGAL_CALL error_glFrameTerminatorGREMEDY(RegalContext *_context)
{
  Internal("error_glFrameTerminatorGREMEDY","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrameTerminatorGREMEDY(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrameTerminatorGREMEDY : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_GREMEDY_string_marker

static void REGAL_CALL error_glStringMarkerGREMEDY(RegalContext *_context, GLsizei len, const GLvoid *string)
{
  Internal("error_glStringMarkerGREMEDY","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStringMarkerGREMEDY(_context, len, string);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStringMarkerGREMEDY : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_HP_image_transform

static void REGAL_CALL error_glGetImageTransformParameterfvHP(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetImageTransformParameterfvHP","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetImageTransformParameterfvHP(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetImageTransformParameterfvHP : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetImageTransformParameterivHP(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetImageTransformParameterivHP","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetImageTransformParameterivHP(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetImageTransformParameterivHP : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glImageTransformParameterfHP(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("error_glImageTransformParameterfHP","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glImageTransformParameterfHP(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glImageTransformParameterfHP : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glImageTransformParameterfvHP(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glImageTransformParameterfvHP","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glImageTransformParameterfvHP(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glImageTransformParameterfvHP : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glImageTransformParameteriHP(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glImageTransformParameteriHP","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glImageTransformParameteriHP(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glImageTransformParameteriHP : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glImageTransformParameterivHP(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glImageTransformParameterivHP","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glImageTransformParameterivHP(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glImageTransformParameterivHP : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_IBM_multimode_draw_arrays

static void REGAL_CALL error_glMultiModeDrawArraysIBM(RegalContext *_context, const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
  Internal("error_glMultiModeDrawArraysIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiModeDrawArraysIBM(_context, mode, first, count, primcount, modestride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiModeDrawArraysIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiModeDrawElementsIBM(RegalContext *_context, const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
  Internal("error_glMultiModeDrawElementsIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiModeDrawElementsIBM(_context, mode, count, type, indices, primcount, modestride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiModeDrawElementsIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_IBM_vertex_array_lists

static void REGAL_CALL error_glColorPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glColorPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorPointerListIBM(_context, size, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEdgeFlagPointerListIBM(RegalContext *_context, GLint stride, const GLboolean **pointer, GLint ptrstride)
{
  Internal("error_glEdgeFlagPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEdgeFlagPointerListIBM(_context, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEdgeFlagPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glFogCoordPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordPointerListIBM(_context, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glIndexPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexPointerListIBM(_context, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glNormalPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalPointerListIBM(_context, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColorPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glSecondaryColorPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColorPointerListIBM(_context, size, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColorPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glTexCoordPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordPointerListIBM(_context, size, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("error_glVertexPointerListIBM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexPointerListIBM(_context, size, type, stride, pointer, ptrstride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexPointerListIBM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_IMG_multisampled_render_to_texture

static void REGAL_CALL error_glFramebufferTexture2DMultisampleIMG(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  Internal("error_glFramebufferTexture2DMultisampleIMG","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture2DMultisampleIMG(_context, target, attachment, textarget, texture, level, samples);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture2DMultisampleIMG : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRenderbufferStorageMultisampleIMG(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageMultisampleIMG","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageMultisampleIMG(_context, target, samples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageMultisampleIMG : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_INGR_blend_func_separate

static void REGAL_CALL error_glBlendFuncSeparateINGR(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("error_glBlendFuncSeparateINGR","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparateINGR(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparateINGR : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_INTEL_map_texture

static GLvoid *REGAL_CALL error_glMapTexture2DINTEL(RegalContext *_context, GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
{
  Internal("error_glMapTexture2DINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapTexture2DINTEL(_context, texture, level, access, stride, layout);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapTexture2DINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glSyncTextureINTEL(RegalContext *_context, GLuint texture)
{
  Internal("error_glSyncTextureINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSyncTextureINTEL(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSyncTextureINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUnmapTexture2DINTEL(RegalContext *_context, GLuint texture, GLint level)
{
  Internal("error_glUnmapTexture2DINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUnmapTexture2DINTEL(_context, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnmapTexture2DINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_INTEL_parallel_arrays

static void REGAL_CALL error_glColorPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer)
{
  Internal("error_glColorPointervINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorPointervINTEL(_context, size, type, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorPointervINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalPointervINTEL(RegalContext *_context, GLenum type, const GLvoid **pointer)
{
  Internal("error_glNormalPointervINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalPointervINTEL(_context, type, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalPointervINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer)
{
  Internal("error_glTexCoordPointervINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordPointervINTEL(_context, size, type, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordPointervINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer)
{
  Internal("error_glVertexPointervINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexPointervINTEL(_context, size, type, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexPointervINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_INTEL_texture_scissor

static void REGAL_CALL error_glTexScissorFuncINTEL(RegalContext *_context, GLenum target, GLenum lfunc, GLenum hfunc)
{
  Internal("error_glTexScissorFuncINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexScissorFuncINTEL(_context, target, lfunc, hfunc);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexScissorFuncINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexScissorINTEL(RegalContext *_context, GLenum target, GLclampf tlow, GLclampf thigh)
{
  Internal("error_glTexScissorINTEL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexScissorINTEL(_context, target, tlow, thigh);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexScissorINTEL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_KHR_debug

static void REGAL_CALL error_glDebugMessageCallback(RegalContext *_context, GLDEBUGPROC callback, const GLvoid *userParam)
{
  Internal("error_glDebugMessageCallback","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageCallback(_context, callback, userParam);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageCallback : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDebugMessageControl(RegalContext *_context, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Internal("error_glDebugMessageControl","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageControl(_context, source, type, severity, count, ids, enabled);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageControl : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDebugMessageInsert(RegalContext *_context, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  Internal("error_glDebugMessageInsert","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDebugMessageInsert(_context, source, type, id, severity, length, buf);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDebugMessageInsert : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGetDebugMessageLog(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  Internal("error_glGetDebugMessageLog","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGetDebugMessageLog(_context, count, bufsize, sources, types, ids, severities, lengths, messageLog);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDebugMessageLog : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetObjectLabel(RegalContext *_context, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Internal("error_glGetObjectLabel","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectLabel(_context, identifier, name, bufSize, length, label);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectLabel : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetObjectPtrLabel(RegalContext *_context, const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Internal("error_glGetObjectPtrLabel","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetObjectPtrLabel(_context, ptr, bufSize, length, label);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetObjectPtrLabel : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glObjectLabel(RegalContext *_context, GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
  Internal("error_glObjectLabel","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glObjectLabel(_context, identifier, name, length, label);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glObjectLabel : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glObjectPtrLabel(RegalContext *_context, const GLvoid *ptr, GLsizei length, const GLchar *label)
{
  Internal("error_glObjectPtrLabel","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glObjectPtrLabel(_context, ptr, length, label);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glObjectPtrLabel : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPopDebugGroup(RegalContext *_context)
{
  Internal("error_glPopDebugGroup","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPopDebugGroup(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPopDebugGroup : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPushDebugGroup(RegalContext *_context, GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
  Internal("error_glPushDebugGroup","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPushDebugGroup(_context, source, id, length, message);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPushDebugGroup : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_KTX_buffer_region

static GLuint REGAL_CALL error_glBufferRegionEnabled(RegalContext *_context)
{
  Internal("error_glBufferRegionEnabled","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glBufferRegionEnabled(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferRegionEnabled : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteBufferRegion(RegalContext *_context, GLenum region)
{
  Internal("error_glDeleteBufferRegion","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteBufferRegion(_context, region);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteBufferRegion : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawBufferRegion(RegalContext *_context, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
  Internal("error_glDrawBufferRegion","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBufferRegion(_context, region, x, y, width, height, xDest, yDest);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBufferRegion : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glNewBufferRegion(RegalContext *_context, GLenum region)
{
  Internal("error_glNewBufferRegion","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glNewBufferRegion(_context, region);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNewBufferRegion : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glReadBufferRegion(RegalContext *_context, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glReadBufferRegion","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadBufferRegion(_context, region, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadBufferRegion : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_MESA_resize_buffers

static void REGAL_CALL error_glResizeBuffersMESA(RegalContext *_context)
{
  Internal("error_glResizeBuffersMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResizeBuffersMESA(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResizeBuffersMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_MESA_window_pos

static void REGAL_CALL error_glWindowPos2dMESA(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("error_glWindowPos2dMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2dMESA(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2dMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2dvMESA(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glWindowPos2dvMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2dvMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2dvMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2fMESA(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("error_glWindowPos2fMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2fMESA(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2fMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2fvMESA(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glWindowPos2fvMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2fvMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2fvMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2iMESA(RegalContext *_context, GLint x, GLint y)
{
  Internal("error_glWindowPos2iMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2iMESA(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2iMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2ivMESA(RegalContext *_context, const GLint *v)
{
  Internal("error_glWindowPos2ivMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2ivMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2ivMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2sMESA(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("error_glWindowPos2sMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2sMESA(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2sMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos2svMESA(RegalContext *_context, const GLshort *v)
{
  Internal("error_glWindowPos2svMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos2svMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos2svMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3dMESA(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glWindowPos3dMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3dMESA(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3dMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3dvMESA(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glWindowPos3dvMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3dvMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3dvMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3fMESA(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glWindowPos3fMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3fMESA(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3fMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3fvMESA(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glWindowPos3fvMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3fvMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3fvMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3iMESA(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("error_glWindowPos3iMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3iMESA(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3iMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3ivMESA(RegalContext *_context, const GLint *v)
{
  Internal("error_glWindowPos3ivMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3ivMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3ivMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3sMESA(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glWindowPos3sMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3sMESA(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3sMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos3svMESA(RegalContext *_context, const GLshort *v)
{
  Internal("error_glWindowPos3svMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos3svMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos3svMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4dMESA(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glWindowPos4dMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4dMESA(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4dMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4dvMESA(RegalContext *_context, const GLdouble *v)
{
  Internal("error_glWindowPos4dvMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4dvMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4dvMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4fMESA(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glWindowPos4fMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4fMESA(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4fMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4fvMESA(RegalContext *_context, const GLfloat *v)
{
  Internal("error_glWindowPos4fvMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4fvMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4fvMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4iMESA(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glWindowPos4iMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4iMESA(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4iMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4ivMESA(RegalContext *_context, const GLint *v)
{
  Internal("error_glWindowPos4ivMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4ivMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4ivMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4sMESA(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glWindowPos4sMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4sMESA(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4sMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWindowPos4svMESA(RegalContext *_context, const GLshort *v)
{
  Internal("error_glWindowPos4svMESA","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWindowPos4svMESA(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWindowPos4svMESA : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NVX_conditional_render

static void REGAL_CALL error_glBeginConditionalRenderNVX(RegalContext *_context, GLuint id)
{
  Internal("error_glBeginConditionalRenderNVX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginConditionalRenderNVX(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginConditionalRenderNVX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndConditionalRenderNVX(RegalContext *_context)
{
  Internal("error_glEndConditionalRenderNVX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndConditionalRenderNVX(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndConditionalRenderNVX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_bindless_texture

static GLuint64 REGAL_CALL error_glGetImageHandleNV(RegalContext *_context, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  Internal("error_glGetImageHandleNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint64  ret = _context->err.next.glGetImageHandleNV(_context, texture, level, layered, layer, format);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetImageHandleNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint64 REGAL_CALL error_glGetTextureHandleNV(RegalContext *_context, GLuint texture)
{
  Internal("error_glGetTextureHandleNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint64  ret = _context->err.next.glGetTextureHandleNV(_context, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureHandleNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint64 REGAL_CALL error_glGetTextureSamplerHandleNV(RegalContext *_context, GLuint texture, GLuint sampler)
{
  Internal("error_glGetTextureSamplerHandleNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint64  ret = _context->err.next.glGetTextureSamplerHandleNV(_context, texture, sampler);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTextureSamplerHandleNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsImageHandleResidentNV(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glIsImageHandleResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsImageHandleResidentNV(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsImageHandleResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsTextureHandleResidentNV(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glIsTextureHandleResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsTextureHandleResidentNV(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsTextureHandleResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glMakeImageHandleNonResidentNV(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glMakeImageHandleNonResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeImageHandleNonResidentNV(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeImageHandleNonResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeImageHandleResidentNV(RegalContext *_context, GLuint64 handle, GLenum access)
{
  Internal("error_glMakeImageHandleResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeImageHandleResidentNV(_context, handle, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeImageHandleResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeTextureHandleNonResidentNV(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glMakeTextureHandleNonResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeTextureHandleNonResidentNV(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeTextureHandleNonResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeTextureHandleResidentNV(RegalContext *_context, GLuint64 handle)
{
  Internal("error_glMakeTextureHandleResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeTextureHandleResidentNV(_context, handle);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeTextureHandleResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformHandleui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64 value)
{
  Internal("error_glProgramUniformHandleui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformHandleui64NV(_context, program, location, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformHandleui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformHandleui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  Internal("error_glProgramUniformHandleui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformHandleui64vNV(_context, program, location, count, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformHandleui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformHandleui64NV(RegalContext *_context, GLint location, GLuint64 value)
{
  Internal("error_glUniformHandleui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformHandleui64NV(_context, location, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformHandleui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformHandleui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64 *value)
{
  Internal("error_glUniformHandleui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformHandleui64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformHandleui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_blend_equation_advanced

static void REGAL_CALL error_glBlendBarrierNV(RegalContext *_context)
{
  Internal("error_glBlendBarrierNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendBarrierNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendBarrierNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBlendParameteriNV(RegalContext *_context, GLenum pname, GLint value)
{
  Internal("error_glBlendParameteriNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendParameteriNV(_context, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendParameteriNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_conditional_render

static void REGAL_CALL error_glBeginConditionalRenderNV(RegalContext *_context, GLuint id, GLenum mode)
{
  Internal("error_glBeginConditionalRenderNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginConditionalRenderNV(_context, id, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginConditionalRenderNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndConditionalRenderNV(RegalContext *_context)
{
  Internal("error_glEndConditionalRenderNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndConditionalRenderNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndConditionalRenderNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_copy_buffer

static void REGAL_CALL error_glCopyBufferSubDataNV(RegalContext *_context, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  Internal("error_glCopyBufferSubDataNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyBufferSubDataNV(_context, readtarget, writetarget, readoffset, writeoffset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyBufferSubDataNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_copy_image

static void REGAL_CALL error_glCopyImageSubDataNV(RegalContext *_context, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("error_glCopyImageSubDataNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyImageSubDataNV(_context, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyImageSubDataNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_coverage_sample

static void REGAL_CALL error_glCoverageMaskNV(RegalContext *_context, GLboolean mask)
{
  Internal("error_glCoverageMaskNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCoverageMaskNV(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCoverageMaskNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCoverageOperationNV(RegalContext *_context, GLenum operation)
{
  Internal("error_glCoverageOperationNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCoverageOperationNV(_context, operation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCoverageOperationNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_depth_buffer_float

static void REGAL_CALL error_glClearDepthdNV(RegalContext *_context, GLdouble depth)
{
  Internal("error_glClearDepthdNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearDepthdNV(_context, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearDepthdNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthBoundsdNV(RegalContext *_context, GLdouble zmin, GLdouble zmax)
{
  Internal("error_glDepthBoundsdNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthBoundsdNV(_context, zmin, zmax);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthBoundsdNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthRangedNV(RegalContext *_context, GLdouble zNear, GLdouble zFar)
{
  Internal("error_glDepthRangedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRangedNV(_context, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRangedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_draw_buffers

static void REGAL_CALL error_glDrawBuffersNV(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("error_glDrawBuffersNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawBuffersNV(_context, n, bufs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawBuffersNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_draw_texture

static void REGAL_CALL error_glDrawTextureNV(RegalContext *_context, GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
  Internal("error_glDrawTextureNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawTextureNV(_context, texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawTextureNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_evaluators

static void REGAL_CALL error_glEvalMapsNV(RegalContext *_context, GLenum target, GLenum mode)
{
  Internal("error_glEvalMapsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEvalMapsNV(_context, target, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEvalMapsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapAttribParameterfvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMapAttribParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapAttribParameterfvNV(_context, target, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapAttribParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapAttribParameterivNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetMapAttribParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapAttribParameterivNV(_context, target, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapAttribParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapControlPointsNV(RegalContext *_context, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
  Internal("error_glGetMapControlPointsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapControlPointsNV(_context, target, index, type, ustride, vstride, packed, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapControlPointsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapParameterfvNV(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetMapParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapParameterfvNV(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMapParameterivNV(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetMapParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMapParameterivNV(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMapParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapControlPointsNV(RegalContext *_context, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
  Internal("error_glMapControlPointsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapControlPointsNV(_context, target, index, type, ustride, vstride, uorder, vorder, packed, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapControlPointsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapParameterfvNV(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glMapParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapParameterfvNV(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMapParameterivNV(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glMapParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMapParameterivNV(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_explicit_multisample

static void REGAL_CALL error_glGetMultisamplefvNV(RegalContext *_context, GLenum pname, GLuint index, GLfloat *val)
{
  Internal("error_glGetMultisamplefvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMultisamplefvNV(_context, pname, index, val);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMultisamplefvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSampleMaskIndexedNV(RegalContext *_context, GLuint index, GLbitfield mask)
{
  Internal("error_glSampleMaskIndexedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleMaskIndexedNV(_context, index, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleMaskIndexedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexRenderbufferNV(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("error_glTexRenderbufferNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexRenderbufferNV(_context, target, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexRenderbufferNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_fence

static void REGAL_CALL error_glDeleteFencesNV(RegalContext *_context, GLsizei n, const GLuint *fences)
{
  Internal("error_glDeleteFencesNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteFencesNV(_context, n, fences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteFencesNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFinishFenceNV(RegalContext *_context, GLuint fence)
{
  Internal("error_glFinishFenceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinishFenceNV(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinishFenceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenFencesNV(RegalContext *_context, GLsizei n, GLuint *fences)
{
  Internal("error_glGenFencesNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenFencesNV(_context, n, fences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenFencesNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFenceivNV(RegalContext *_context, GLuint fence, GLenum pname, GLint *params)
{
  Internal("error_glGetFenceivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFenceivNV(_context, fence, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFenceivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsFenceNV(RegalContext *_context, GLuint fence)
{
  Internal("error_glIsFenceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsFenceNV(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsFenceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glSetFenceNV(RegalContext *_context, GLuint fence, GLenum condition)
{
  Internal("error_glSetFenceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSetFenceNV(_context, fence, condition);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSetFenceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glTestFenceNV(RegalContext *_context, GLuint fence)
{
  Internal("error_glTestFenceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glTestFenceNV(_context, fence);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTestFenceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_NV_fragment_program

static void REGAL_CALL error_glGetProgramNamedParameterdvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
  Internal("error_glGetProgramNamedParameterdvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramNamedParameterdvNV(_context, id, len, name, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramNamedParameterdvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramNamedParameterfvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
  Internal("error_glGetProgramNamedParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramNamedParameterfvNV(_context, id, len, name, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramNamedParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramNamedParameter4dNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glProgramNamedParameter4dNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramNamedParameter4dNV(_context, id, len, name, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramNamedParameter4dNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramNamedParameter4dvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
  Internal("error_glProgramNamedParameter4dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramNamedParameter4dvNV(_context, id, len, name, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramNamedParameter4dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramNamedParameter4fNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glProgramNamedParameter4fNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramNamedParameter4fNV(_context, id, len, name, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramNamedParameter4fNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramNamedParameter4fvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
  Internal("error_glProgramNamedParameter4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramNamedParameter4fvNV(_context, id, len, name, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramNamedParameter4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_framebuffer_blit

static void REGAL_CALL error_glBlitFramebufferNV(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("error_glBlitFramebufferNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlitFramebufferNV(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlitFramebufferNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL error_glRenderbufferStorageMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageMultisampleCoverageNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageMultisampleCoverageNV(_context, target, coverageSamples, colorSamples, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageMultisampleCoverageNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_geometry_program4

static void REGAL_CALL error_glProgramVertexLimitNV(RegalContext *_context, GLenum target, GLint limit)
{
  Internal("error_glProgramVertexLimitNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramVertexLimitNV(_context, target, limit);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramVertexLimitNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_gpu_program4

static void REGAL_CALL error_glGetProgramEnvParameterIivNV(RegalContext *_context, GLenum target, GLuint index, GLint *params)
{
  Internal("error_glGetProgramEnvParameterIivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramEnvParameterIivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramEnvParameterIivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramEnvParameterIuivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params)
{
  Internal("error_glGetProgramEnvParameterIuivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramEnvParameterIuivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramEnvParameterIuivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramLocalParameterIivNV(RegalContext *_context, GLenum target, GLuint index, GLint *params)
{
  Internal("error_glGetProgramLocalParameterIivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramLocalParameterIivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramLocalParameterIivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramLocalParameterIuivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params)
{
  Internal("error_glGetProgramLocalParameterIuivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramLocalParameterIuivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramLocalParameterIuivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameterI4iNV(RegalContext *_context, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glProgramEnvParameterI4iNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameterI4iNV(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameterI4iNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameterI4ivNV(RegalContext *_context, GLenum target, GLuint index, const GLint *params)
{
  Internal("error_glProgramEnvParameterI4ivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameterI4ivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameterI4ivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameterI4uiNV(RegalContext *_context, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("error_glProgramEnvParameterI4uiNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameterI4uiNV(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameterI4uiNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParameterI4uivNV(RegalContext *_context, GLenum target, GLuint index, const GLuint *params)
{
  Internal("error_glProgramEnvParameterI4uivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParameterI4uivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParameterI4uivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParametersI4ivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Internal("error_glProgramEnvParametersI4ivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParametersI4ivNV(_context, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParametersI4ivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramEnvParametersI4uivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("error_glProgramEnvParametersI4uivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramEnvParametersI4uivNV(_context, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramEnvParametersI4uivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameterI4iNV(RegalContext *_context, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("error_glProgramLocalParameterI4iNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameterI4iNV(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameterI4iNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameterI4ivNV(RegalContext *_context, GLenum target, GLuint index, const GLint *params)
{
  Internal("error_glProgramLocalParameterI4ivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameterI4ivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameterI4ivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameterI4uiNV(RegalContext *_context, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("error_glProgramLocalParameterI4uiNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameterI4uiNV(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameterI4uiNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParameterI4uivNV(RegalContext *_context, GLenum target, GLuint index, const GLuint *params)
{
  Internal("error_glProgramLocalParameterI4uivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParameterI4uivNV(_context, target, index, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParameterI4uivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParametersI4ivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Internal("error_glProgramLocalParametersI4ivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParametersI4ivNV(_context, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParametersI4ivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramLocalParametersI4uivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("error_glProgramLocalParametersI4uivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramLocalParametersI4uivNV(_context, target, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramLocalParametersI4uivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_gpu_shader5

static void REGAL_CALL error_glGetUniformi64vNV(RegalContext *_context, GLuint program, GLint location, GLint64EXT *params)
{
  Internal("error_glGetUniformi64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformi64vNV(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformi64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x)
{
  Internal("error_glProgramUniform1i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1i64NV(_context, program, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glProgramUniform1i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1i64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x)
{
  Internal("error_glProgramUniform1ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1ui64NV(_context, program, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform1ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glProgramUniform1ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform1ui64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform1ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  Internal("error_glProgramUniform2i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2i64NV(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glProgramUniform2i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2i64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  Internal("error_glProgramUniform2ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2ui64NV(_context, program, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform2ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glProgramUniform2ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform2ui64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform2ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Internal("error_glProgramUniform3i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3i64NV(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glProgramUniform3i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3i64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Internal("error_glProgramUniform3ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3ui64NV(_context, program, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform3ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glProgramUniform3ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform3ui64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform3ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Internal("error_glProgramUniform4i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4i64NV(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glProgramUniform4i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4i64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Internal("error_glProgramUniform4ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4ui64NV(_context, program, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniform4ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glProgramUniform4ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniform4ui64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniform4ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1i64NV(RegalContext *_context, GLint location, GLint64EXT x)
{
  Internal("error_glUniform1i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1i64NV(_context, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glUniform1i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1i64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1ui64NV(RegalContext *_context, GLint location, GLuint64EXT x)
{
  Internal("error_glUniform1ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1ui64NV(_context, location, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform1ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glUniform1ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform1ui64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform1ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y)
{
  Internal("error_glUniform2i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2i64NV(_context, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glUniform2i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2i64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  Internal("error_glUniform2ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2ui64NV(_context, location, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform2ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glUniform2ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform2ui64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform2ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Internal("error_glUniform3i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3i64NV(_context, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glUniform3i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3i64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Internal("error_glUniform3ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3ui64NV(_context, location, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform3ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glUniform3ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform3ui64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform3ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Internal("error_glUniform4i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4i64NV(_context, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("error_glUniform4i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4i64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Internal("error_glUniform4ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4ui64NV(_context, location, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniform4ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glUniform4ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniform4ui64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniform4ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_half_float

static void REGAL_CALL error_glColor3hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  Internal("error_glColor3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3hNV(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glColor3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  Internal("error_glColor4hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4hNV(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glColor4hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordhNV(RegalContext *_context, GLhalfNV coord)
{
  Internal("error_glFogCoordhNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordhNV(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordhNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordhvNV(RegalContext *_context, const GLhalfNV *coord)
{
  Internal("error_glFogCoordhvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordhvNV(_context, coord);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordhvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1hNV(RegalContext *_context, GLenum target, GLhalfNV s)
{
  Internal("error_glMultiTexCoord1hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1hNV(_context, target, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord1hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("error_glMultiTexCoord1hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord1hvNV(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord1hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t)
{
  Internal("error_glMultiTexCoord2hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2hNV(_context, target, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord2hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("error_glMultiTexCoord2hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord2hvNV(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord2hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  Internal("error_glMultiTexCoord3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3hNV(_context, target, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord3hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("error_glMultiTexCoord3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord3hvNV(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  Internal("error_glMultiTexCoord4hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4hNV(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("error_glMultiTexCoord4hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4hvNV(_context, target, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3hNV(RegalContext *_context, GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  Internal("error_glNormal3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3hNV(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glNormal3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  Internal("error_glSecondaryColor3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3hNV(_context, red, green, blue);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColor3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glSecondaryColor3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColor3hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColor3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1hNV(RegalContext *_context, GLhalfNV s)
{
  Internal("error_glTexCoord1hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1hNV(_context, s);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord1hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glTexCoord1hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord1hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord1hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t)
{
  Internal("error_glTexCoord2hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2hNV(_context, s, t);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glTexCoord2hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  Internal("error_glTexCoord3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3hNV(_context, s, t, r);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glTexCoord3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord3hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  Internal("error_glTexCoord4hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4hNV(_context, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glTexCoord4hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y)
{
  Internal("error_glVertex2hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2hNV(_context, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex2hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glVertex2hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex2hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex2hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  Internal("error_glVertex3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3hNV(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glVertex3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex3hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  Internal("error_glVertex4hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4hNV(_context, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertex4hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("error_glVertex4hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertex4hvNV(_context, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertex4hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1hNV(RegalContext *_context, GLuint index, GLhalfNV x)
{
  Internal("error_glVertexAttrib1hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1hNV(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("error_glVertexAttrib1hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1hvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y)
{
  Internal("error_glVertexAttrib2hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2hNV(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("error_glVertexAttrib2hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2hvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  Internal("error_glVertexAttrib3hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3hNV(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("error_glVertexAttrib3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3hvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  Internal("error_glVertexAttrib4hNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4hNV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4hNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("error_glVertexAttrib4hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4hvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs1hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("error_glVertexAttribs1hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs1hvNV(_context, index, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs1hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs2hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("error_glVertexAttribs2hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs2hvNV(_context, index, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs2hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs3hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("error_glVertexAttribs3hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs3hvNV(_context, index, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs3hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs4hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("error_glVertexAttribs4hvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs4hvNV(_context, index, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs4hvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexWeighthNV(RegalContext *_context, GLhalfNV weight)
{
  Internal("error_glVertexWeighthNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexWeighthNV(_context, weight);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexWeighthNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexWeighthvNV(RegalContext *_context, const GLhalfNV *weight)
{
  Internal("error_glVertexWeighthvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexWeighthvNV(_context, weight);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexWeighthvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_non_square_matrices

static void REGAL_CALL error_glUniformMatrix2x3fvNV(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix2x3fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2x3fvNV(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2x3fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix2x4fvNV(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix2x4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix2x4fvNV(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix2x4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3x2fvNV(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix3x2fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3x2fvNV(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3x2fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix3x4fvNV(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix3x4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix3x4fvNV(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix3x4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4x2fvNV(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix4x2fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4x2fvNV(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4x2fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformMatrix4x3fvNV(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("error_glUniformMatrix4x3fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformMatrix4x3fvNV(_context, location, count, transpose, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformMatrix4x3fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_occlusion_query

static void REGAL_CALL error_glBeginOcclusionQueryNV(RegalContext *_context, GLuint id)
{
  Internal("error_glBeginOcclusionQueryNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginOcclusionQueryNV(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginOcclusionQueryNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteOcclusionQueriesNV(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteOcclusionQueriesNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteOcclusionQueriesNV(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteOcclusionQueriesNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndOcclusionQueryNV(RegalContext *_context)
{
  Internal("error_glEndOcclusionQueryNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndOcclusionQueryNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndOcclusionQueryNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenOcclusionQueriesNV(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenOcclusionQueriesNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenOcclusionQueriesNV(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenOcclusionQueriesNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetOcclusionQueryivNV(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetOcclusionQueryivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetOcclusionQueryivNV(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetOcclusionQueryivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetOcclusionQueryuivNV(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("error_glGetOcclusionQueryuivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetOcclusionQueryuivNV(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetOcclusionQueryuivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsOcclusionQueryNV(RegalContext *_context, GLuint id)
{
  Internal("error_glIsOcclusionQueryNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsOcclusionQueryNV(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsOcclusionQueryNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_NV_parameter_buffer_object

static void REGAL_CALL error_glProgramBufferParametersIivNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
  Internal("error_glProgramBufferParametersIivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramBufferParametersIivNV(_context, target, buffer, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramBufferParametersIivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramBufferParametersIuivNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("error_glProgramBufferParametersIuivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramBufferParametersIuivNV(_context, target, buffer, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramBufferParametersIuivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramBufferParametersfvNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("error_glProgramBufferParametersfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramBufferParametersfvNV(_context, target, buffer, index, count, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramBufferParametersfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_path_rendering

static void REGAL_CALL error_glCopyPathNV(RegalContext *_context, GLuint resultPath, GLuint srcPath)
{
  Internal("error_glCopyPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyPathNV(_context, resultPath, srcPath);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCoverFillPathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  Internal("error_glCoverFillPathInstancedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCoverFillPathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCoverFillPathInstancedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCoverFillPathNV(RegalContext *_context, GLuint path, GLenum coverMode)
{
  Internal("error_glCoverFillPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCoverFillPathNV(_context, path, coverMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCoverFillPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCoverStrokePathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  Internal("error_glCoverStrokePathInstancedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCoverStrokePathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCoverStrokePathInstancedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCoverStrokePathNV(RegalContext *_context, GLuint name, GLenum coverMode)
{
  Internal("error_glCoverStrokePathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCoverStrokePathNV(_context, name, coverMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCoverStrokePathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeletePathsNV(RegalContext *_context, GLuint path, GLsizei range)
{
  Internal("error_glDeletePathsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeletePathsNV(_context, path, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeletePathsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLuint REGAL_CALL error_glGenPathsNV(RegalContext *_context, GLsizei range)
{
  Internal("error_glGenPathsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGenPathsNV(_context, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenPathsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetPathColorGenfvNV(RegalContext *_context, GLenum color, GLenum pname, GLfloat *value)
{
  Internal("error_glGetPathColorGenfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathColorGenfvNV(_context, color, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathColorGenfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathColorGenivNV(RegalContext *_context, GLenum color, GLenum pname, GLint *value)
{
  Internal("error_glGetPathColorGenivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathColorGenivNV(_context, color, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathColorGenivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathCommandsNV(RegalContext *_context, GLuint name, GLubyte *commands)
{
  Internal("error_glGetPathCommandsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathCommandsNV(_context, name, commands);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathCommandsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathCoordsNV(RegalContext *_context, GLuint name, GLfloat *coords)
{
  Internal("error_glGetPathCoordsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathCoordsNV(_context, name, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathCoordsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathDashArrayNV(RegalContext *_context, GLuint name, GLfloat *dashArray)
{
  Internal("error_glGetPathDashArrayNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathDashArrayNV(_context, name, dashArray);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathDashArrayNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLfloat REGAL_CALL error_glGetPathLengthNV(RegalContext *_context, GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  Internal("error_glGetPathLengthNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLfloat  ret = _context->err.next.glGetPathLengthNV(_context, path, startSegment, numSegments);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathLengthNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glGetPathMetricRangeNV(RegalContext *_context, GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
  Internal("error_glGetPathMetricRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathMetricRangeNV(_context, metricQueryMask, fistPathName, numPaths, stride, metrics);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathMetricRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathMetricsNV(RegalContext *_context, GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
  Internal("error_glGetPathMetricsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathMetricsNV(_context, metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathMetricsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathParameterfvNV(RegalContext *_context, GLuint name, GLenum param, GLfloat *value)
{
  Internal("error_glGetPathParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathParameterfvNV(_context, name, param, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathParameterivNV(RegalContext *_context, GLuint name, GLenum param, GLint *value)
{
  Internal("error_glGetPathParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathParameterivNV(_context, name, param, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathSpacingNV(RegalContext *_context, GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
  Internal("error_glGetPathSpacingNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathSpacingNV(_context, pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathSpacingNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathTexGenfvNV(RegalContext *_context, GLenum texCoordSet, GLenum pname, GLfloat *value)
{
  Internal("error_glGetPathTexGenfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathTexGenfvNV(_context, texCoordSet, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathTexGenfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPathTexGenivNV(RegalContext *_context, GLenum texCoordSet, GLenum pname, GLint *value)
{
  Internal("error_glGetPathTexGenivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPathTexGenivNV(_context, texCoordSet, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPathTexGenivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glInterpolatePathsNV(RegalContext *_context, GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  Internal("error_glInterpolatePathsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInterpolatePathsNV(_context, resultPath, pathA, pathB, weight);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInterpolatePathsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsPathNV(RegalContext *_context, GLuint path)
{
  Internal("error_glIsPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsPathNV(_context, path);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsPointInFillPathNV(RegalContext *_context, GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  Internal("error_glIsPointInFillPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsPointInFillPathNV(_context, path, mask, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsPointInFillPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsPointInStrokePathNV(RegalContext *_context, GLuint path, GLfloat x, GLfloat y)
{
  Internal("error_glIsPointInStrokePathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsPointInStrokePathNV(_context, path, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsPointInStrokePathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glPathColorGenNV(RegalContext *_context, GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
  Internal("error_glPathColorGenNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathColorGenNV(_context, color, genMode, colorFormat, coeffs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathColorGenNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathCommandsNV(RegalContext *_context, GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("error_glPathCommandsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathCommandsNV(_context, path, numCommands, commands, numCoords, coordType, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathCommandsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathCoordsNV(RegalContext *_context, GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("error_glPathCoordsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathCoordsNV(_context, path, numCoords, coordType, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathCoordsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathCoverDepthFuncNV(RegalContext *_context, GLenum zfunc)
{
  Internal("error_glPathCoverDepthFuncNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathCoverDepthFuncNV(_context, zfunc);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathCoverDepthFuncNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathDashArrayNV(RegalContext *_context, GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
  Internal("error_glPathDashArrayNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathDashArrayNV(_context, path, dashCount, dashArray);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathDashArrayNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathFogGenNV(RegalContext *_context, GLenum genMode)
{
  Internal("error_glPathFogGenNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathFogGenNV(_context, genMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathFogGenNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathGlyphRangeNV(RegalContext *_context, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  Internal("error_glPathGlyphRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathGlyphRangeNV(_context, firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathGlyphRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathGlyphsNV(RegalContext *_context, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  Internal("error_glPathGlyphsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathGlyphsNV(_context, firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathGlyphsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathParameterfNV(RegalContext *_context, GLuint path, GLenum pname, GLfloat value)
{
  Internal("error_glPathParameterfNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathParameterfNV(_context, path, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathParameterfNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathParameterfvNV(RegalContext *_context, GLuint path, GLenum pname, const GLfloat *value)
{
  Internal("error_glPathParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathParameterfvNV(_context, path, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathParameteriNV(RegalContext *_context, GLuint path, GLenum pname, GLint value)
{
  Internal("error_glPathParameteriNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathParameteriNV(_context, path, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathParameteriNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathParameterivNV(RegalContext *_context, GLuint path, GLenum pname, const GLint *value)
{
  Internal("error_glPathParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathParameterivNV(_context, path, pname, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathStencilDepthOffsetNV(RegalContext *_context, GLfloat factor, GLfloat units)
{
  Internal("error_glPathStencilDepthOffsetNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathStencilDepthOffsetNV(_context, factor, units);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathStencilDepthOffsetNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathStencilFuncNV(RegalContext *_context, GLenum func, GLint ref, GLuint mask)
{
  Internal("error_glPathStencilFuncNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathStencilFuncNV(_context, func, ref, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathStencilFuncNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathStringNV(RegalContext *_context, GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
  Internal("error_glPathStringNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathStringNV(_context, path, format, length, pathString);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathStringNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathSubCommandsNV(RegalContext *_context, GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("error_glPathSubCommandsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathSubCommandsNV(_context, path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathSubCommandsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathSubCoordsNV(RegalContext *_context, GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("error_glPathSubCoordsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathSubCoordsNV(_context, path, coordStart, numCoords, coordType, coords);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathSubCoordsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPathTexGenNV(RegalContext *_context, GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
  Internal("error_glPathTexGenNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPathTexGenNV(_context, texCoordSet, genMode, components, coeffs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPathTexGenNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glPointAlongPathNV(RegalContext *_context, GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
  Internal("error_glPointAlongPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glPointAlongPathNV(_context, path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointAlongPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glStencilFillPathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  Internal("error_glStencilFillPathInstancedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilFillPathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilFillPathInstancedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilFillPathNV(RegalContext *_context, GLuint path, GLenum fillMode, GLuint mask)
{
  Internal("error_glStencilFillPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilFillPathNV(_context, path, fillMode, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilFillPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilStrokePathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  Internal("error_glStencilStrokePathInstancedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilStrokePathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilStrokePathInstancedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStencilStrokePathNV(RegalContext *_context, GLuint path, GLint reference, GLuint mask)
{
  Internal("error_glStencilStrokePathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStencilStrokePathNV(_context, path, reference, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStencilStrokePathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTransformPathNV(RegalContext *_context, GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
  Internal("error_glTransformPathNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTransformPathNV(_context, resultPath, srcPath, transformType, transformValues);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTransformPathNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightPathsNV(RegalContext *_context, GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
  Internal("error_glWeightPathsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightPathsNV(_context, resultPath, numPaths, paths, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightPathsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_pixel_data_range

static void REGAL_CALL error_glFlushPixelDataRangeNV(RegalContext *_context, GLenum target)
{
  Internal("error_glFlushPixelDataRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushPixelDataRangeNV(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushPixelDataRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelDataRangeNV(RegalContext *_context, GLenum target, GLsizei size, const GLvoid *pointer)
{
  Internal("error_glPixelDataRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelDataRangeNV(_context, target, size, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelDataRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_point_sprite

static void REGAL_CALL error_glPointParameteriNV(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glPointParameteriNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameteriNV(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameteriNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterivNV(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glPointParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterivNV(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_present_video

static void REGAL_CALL error_glGetVideoi64vNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLint64EXT *params)
{
  Internal("error_glGetVideoi64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoi64vNV(_context, video_slot, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoi64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideoivNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLint *params)
{
  Internal("error_glGetVideoivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoivNV(_context, video_slot, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideoui64vNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
  Internal("error_glGetVideoui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoui64vNV(_context, video_slot, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideouivNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLuint *params)
{
  Internal("error_glGetVideouivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideouivNV(_context, video_slot, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideouivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPresentFrameDualFillNV(RegalContext *_context, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  Internal("error_glPresentFrameDualFillNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPresentFrameDualFillNV(_context, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPresentFrameDualFillNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPresentFrameKeyedNV(RegalContext *_context, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  Internal("error_glPresentFrameKeyedNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPresentFrameKeyedNV(_context, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPresentFrameKeyedNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_primitive_restart

static void REGAL_CALL error_glPrimitiveRestartIndexNV(RegalContext *_context, GLuint index)
{
  Internal("error_glPrimitiveRestartIndexNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPrimitiveRestartIndexNV(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPrimitiveRestartIndexNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPrimitiveRestartNV(RegalContext *_context)
{
  Internal("error_glPrimitiveRestartNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPrimitiveRestartNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPrimitiveRestartNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_read_buffer

static void REGAL_CALL error_glReadBufferNV(RegalContext *_context, GLenum mode)
{
  Internal("error_glReadBufferNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadBufferNV(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadBufferNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_register_combiners

static void REGAL_CALL error_glCombinerInputNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  Internal("error_glCombinerInputNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerInputNV(_context, stage, portion, variable, input, mapping, componentUsage);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerInputNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCombinerOutputNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  Internal("error_glCombinerOutputNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerOutputNV(_context, stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerOutputNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCombinerParameterfNV(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glCombinerParameterfNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerParameterfNV(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerParameterfNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCombinerParameterfvNV(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glCombinerParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerParameterfvNV(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCombinerParameteriNV(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glCombinerParameteriNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerParameteriNV(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerParameteriNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCombinerParameterivNV(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glCombinerParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerParameterivNV(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFinalCombinerInputNV(RegalContext *_context, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  Internal("error_glFinalCombinerInputNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinalCombinerInputNV(_context, variable, input, mapping, componentUsage);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinalCombinerInputNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCombinerInputParameterfvNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
  Internal("error_glGetCombinerInputParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCombinerInputParameterfvNV(_context, stage, portion, variable, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCombinerInputParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCombinerInputParameterivNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
  Internal("error_glGetCombinerInputParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCombinerInputParameterivNV(_context, stage, portion, variable, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCombinerInputParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCombinerOutputParameterfvNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
  Internal("error_glGetCombinerOutputParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCombinerOutputParameterfvNV(_context, stage, portion, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCombinerOutputParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCombinerOutputParameterivNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
  Internal("error_glGetCombinerOutputParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCombinerOutputParameterivNV(_context, stage, portion, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCombinerOutputParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFinalCombinerInputParameterfvNV(RegalContext *_context, GLenum variable, GLenum pname, GLfloat *params)
{
  Internal("error_glGetFinalCombinerInputParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFinalCombinerInputParameterfvNV(_context, variable, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFinalCombinerInputParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFinalCombinerInputParameterivNV(RegalContext *_context, GLenum variable, GLenum pname, GLint *params)
{
  Internal("error_glGetFinalCombinerInputParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFinalCombinerInputParameterivNV(_context, variable, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFinalCombinerInputParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_register_combiners2

static void REGAL_CALL error_glCombinerStageParameterfvNV(RegalContext *_context, GLenum stage, GLenum pname, const GLfloat *params)
{
  Internal("error_glCombinerStageParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCombinerStageParameterfvNV(_context, stage, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCombinerStageParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetCombinerStageParameterfvNV(RegalContext *_context, GLenum stage, GLenum pname, GLfloat *params)
{
  Internal("error_glGetCombinerStageParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetCombinerStageParameterfvNV(_context, stage, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetCombinerStageParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_shader_buffer_load

static void REGAL_CALL error_glGetBufferParameterui64vNV(RegalContext *_context, GLenum target, GLenum pname, GLuint64EXT *params)
{
  Internal("error_glGetBufferParameterui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferParameterui64vNV(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferParameterui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetIntegerui64vNV(RegalContext *_context, GLenum target, GLuint64EXT *data)
{
  Internal("error_glGetIntegerui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetIntegerui64vNV(_context, target, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetIntegerui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetNamedBufferParameterui64vNV(RegalContext *_context, GLuint buffer, GLenum pname, GLuint64EXT *params)
{
  Internal("error_glGetNamedBufferParameterui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetNamedBufferParameterui64vNV(_context, buffer, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetNamedBufferParameterui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetUniformui64vNV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT *params)
{
  Internal("error_glGetUniformui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetUniformui64vNV(_context, program, location, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetUniformui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsBufferResidentNV(RegalContext *_context, GLenum target)
{
  Internal("error_glIsBufferResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsBufferResidentNV(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsBufferResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsNamedBufferResidentNV(RegalContext *_context, GLuint buffer)
{
  Internal("error_glIsNamedBufferResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsNamedBufferResidentNV(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsNamedBufferResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glMakeBufferNonResidentNV(RegalContext *_context, GLenum target)
{
  Internal("error_glMakeBufferNonResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeBufferNonResidentNV(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeBufferNonResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeBufferResidentNV(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("error_glMakeBufferResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeBufferResidentNV(_context, target, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeBufferResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeNamedBufferNonResidentNV(RegalContext *_context, GLuint buffer)
{
  Internal("error_glMakeNamedBufferNonResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeNamedBufferNonResidentNV(_context, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeNamedBufferNonResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMakeNamedBufferResidentNV(RegalContext *_context, GLuint buffer, GLenum access)
{
  Internal("error_glMakeNamedBufferResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMakeNamedBufferResidentNV(_context, buffer, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMakeNamedBufferResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT v0)
{
  Internal("error_glProgramUniformui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformui64NV(_context, program, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramUniformui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glProgramUniformui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramUniformui64vNV(_context, program, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramUniformui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformui64NV(RegalContext *_context, GLint location, GLuint64EXT v0)
{
  Internal("error_glUniformui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformui64NV(_context, location, v0);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glUniformui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("error_glUniformui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glUniformui64vNV(_context, location, count, value);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUniformui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_texture_barrier

static void REGAL_CALL error_glTextureBarrierNV(RegalContext *_context)
{
  Internal("error_glTextureBarrierNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureBarrierNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureBarrierNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_texture_multisample

static void REGAL_CALL error_glTexImage2DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Internal("error_glTexImage2DMultisampleCoverageNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage2DMultisampleCoverageNV(_context, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage2DMultisampleCoverageNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage3DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Internal("error_glTexImage3DMultisampleCoverageNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage3DMultisampleCoverageNV(_context, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage3DMultisampleCoverageNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage2DMultisampleCoverageNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Internal("error_glTextureImage2DMultisampleCoverageNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage2DMultisampleCoverageNV(_context, texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage2DMultisampleCoverageNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage2DMultisampleNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Internal("error_glTextureImage2DMultisampleNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage2DMultisampleNV(_context, texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage2DMultisampleNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage3DMultisampleCoverageNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Internal("error_glTextureImage3DMultisampleCoverageNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage3DMultisampleCoverageNV(_context, texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage3DMultisampleCoverageNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTextureImage3DMultisampleNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Internal("error_glTextureImage3DMultisampleNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureImage3DMultisampleNV(_context, texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureImage3DMultisampleNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_transform_feedback

static void REGAL_CALL error_glActiveVaryingNV(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glActiveVaryingNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glActiveVaryingNV(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glActiveVaryingNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBeginTransformFeedbackNV(RegalContext *_context, GLenum primitiveMode)
{
  Internal("error_glBeginTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginTransformFeedbackNV(_context, primitiveMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferBaseNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer)
{
  Internal("error_glBindBufferBaseNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferBaseNV(_context, target, index, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferBaseNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferOffsetNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  Internal("error_glBindBufferOffsetNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferOffsetNV(_context, target, index, buffer, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferOffsetNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindBufferRangeNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("error_glBindBufferRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindBufferRangeNV(_context, target, index, buffer, offset, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindBufferRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndTransformFeedbackNV(RegalContext *_context)
{
  Internal("error_glEndTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndTransformFeedbackNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetActiveVaryingNV(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Internal("error_glGetActiveVaryingNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetActiveVaryingNV(_context, program, index, bufSize, length, size, type, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetActiveVaryingNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTransformFeedbackVaryingNV(RegalContext *_context, GLuint program, GLuint index, GLint *location)
{
  Internal("error_glGetTransformFeedbackVaryingNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTransformFeedbackVaryingNV(_context, program, index, location);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTransformFeedbackVaryingNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glGetVaryingLocationNV(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("error_glGetVaryingLocationNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetVaryingLocationNV(_context, program, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVaryingLocationNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glTransformFeedbackAttribsNV(RegalContext *_context, GLuint count, const GLint *attribs, GLenum bufferMode)
{
  Internal("error_glTransformFeedbackAttribsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTransformFeedbackAttribsNV(_context, count, attribs, bufferMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTransformFeedbackAttribsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTransformFeedbackVaryingsNV(RegalContext *_context, GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
  Internal("error_glTransformFeedbackVaryingsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTransformFeedbackVaryingsNV(_context, program, count, locations, bufferMode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTransformFeedbackVaryingsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_transform_feedback2

static void REGAL_CALL error_glBindTransformFeedbackNV(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBindTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindTransformFeedbackNV(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteTransformFeedbacksNV(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("error_glDeleteTransformFeedbacksNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteTransformFeedbacksNV(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteTransformFeedbacksNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDrawTransformFeedbackNV(RegalContext *_context, GLenum mode, GLuint name)
{
  Internal("error_glDrawTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawTransformFeedbackNV(_context, mode, name);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenTransformFeedbacksNV(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("error_glGenTransformFeedbacksNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenTransformFeedbacksNV(_context, n, ids);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenTransformFeedbacksNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsTransformFeedbackNV(RegalContext *_context, GLuint id)
{
  Internal("error_glIsTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsTransformFeedbackNV(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glPauseTransformFeedbackNV(RegalContext *_context)
{
  Internal("error_glPauseTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPauseTransformFeedbackNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPauseTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glResumeTransformFeedbackNV(RegalContext *_context)
{
  Internal("error_glResumeTransformFeedbackNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glResumeTransformFeedbackNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glResumeTransformFeedbackNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_vdpau_interop

static void REGAL_CALL error_glVDPAUFiniNV(RegalContext *_context)
{
  Internal("error_glVDPAUFiniNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUFiniNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUFiniNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVDPAUGetSurfaceivNV(RegalContext *_context, GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Internal("error_glVDPAUGetSurfaceivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUGetSurfaceivNV(_context, surface, pname, bufSize, length, values);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUGetSurfaceivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVDPAUInitNV(RegalContext *_context, const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
  Internal("error_glVDPAUInitNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUInitNV(_context, vdpDevice, getProcAddress);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUInitNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glVDPAUIsSurfaceNV(RegalContext *_context, GLvdpauSurfaceNV surface)
{
  Internal("error_glVDPAUIsSurfaceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glVDPAUIsSurfaceNV(_context, surface);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUIsSurfaceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glVDPAUMapSurfacesNV(RegalContext *_context, GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  Internal("error_glVDPAUMapSurfacesNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUMapSurfacesNV(_context, numSurfaces, surfaces);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUMapSurfacesNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLvdpauSurfaceNV REGAL_CALL error_glVDPAURegisterOutputSurfaceNV(RegalContext *_context, const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  Internal("error_glVDPAURegisterOutputSurfaceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvdpauSurfaceNV  ret = _context->err.next.glVDPAURegisterOutputSurfaceNV(_context, vdpSurface, target, numTextureNames, textureNames);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAURegisterOutputSurfaceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLvdpauSurfaceNV REGAL_CALL error_glVDPAURegisterVideoSurfaceNV(RegalContext *_context, const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  Internal("error_glVDPAURegisterVideoSurfaceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvdpauSurfaceNV  ret = _context->err.next.glVDPAURegisterVideoSurfaceNV(_context, vdpSurface, target, numTextureNames, textureNames);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAURegisterVideoSurfaceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glVDPAUSurfaceAccessNV(RegalContext *_context, GLvdpauSurfaceNV surface, GLenum access)
{
  Internal("error_glVDPAUSurfaceAccessNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUSurfaceAccessNV(_context, surface, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUSurfaceAccessNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVDPAUUnmapSurfacesNV(RegalContext *_context, GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  Internal("error_glVDPAUUnmapSurfacesNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUUnmapSurfacesNV(_context, numSurfaces, surfaces);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUUnmapSurfacesNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVDPAUUnregisterSurfaceNV(RegalContext *_context, GLvdpauSurfaceNV surface)
{
  Internal("error_glVDPAUUnregisterSurfaceNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVDPAUUnregisterSurfaceNV(_context, surface);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVDPAUUnregisterSurfaceNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_vertex_array_range

static void REGAL_CALL error_glFlushVertexArrayRangeNV(RegalContext *_context)
{
  Internal("error_glFlushVertexArrayRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushVertexArrayRangeNV(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushVertexArrayRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexArrayRangeNV(RegalContext *_context, GLsizei size, const GLvoid *pointer)
{
  Internal("error_glVertexArrayRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexArrayRangeNV(_context, size, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexArrayRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_vertex_attrib_integer_64bit

static void REGAL_CALL error_glGetVertexAttribLi64vNV(RegalContext *_context, GLuint index, GLenum pname, GLint64EXT *params)
{
  Internal("error_glGetVertexAttribLi64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribLi64vNV(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribLi64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribLui64vNV(RegalContext *_context, GLuint index, GLenum pname, GLuint64EXT *params)
{
  Internal("error_glGetVertexAttribLui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribLui64vNV(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribLui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1i64NV(RegalContext *_context, GLuint index, GLint64EXT x)
{
  Internal("error_glVertexAttribL1i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1i64NV(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("error_glVertexAttribL1i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1i64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x)
{
  Internal("error_glVertexAttribL1ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1ui64NV(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL1ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("error_glVertexAttribL1ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL1ui64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL1ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y)
{
  Internal("error_glVertexAttribL2i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2i64NV(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("error_glVertexAttribL2i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2i64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  Internal("error_glVertexAttribL2ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2ui64NV(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL2ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("error_glVertexAttribL2ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL2ui64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL2ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Internal("error_glVertexAttribL3i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3i64NV(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("error_glVertexAttribL3i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3i64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Internal("error_glVertexAttribL3ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3ui64NV(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL3ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("error_glVertexAttribL3ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL3ui64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL3ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Internal("error_glVertexAttribL4i64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4i64NV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4i64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("error_glVertexAttribL4i64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4i64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4i64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Internal("error_glVertexAttribL4ui64NV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4ui64NV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4ui64NV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribL4ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("error_glVertexAttribL4ui64vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribL4ui64vNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribL4ui64vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribLFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride)
{
  Internal("error_glVertexAttribLFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribLFormatNV(_context, index, size, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribLFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_vertex_buffer_unified_memory

static void REGAL_CALL error_glBufferAddressRangeNV(RegalContext *_context, GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  Internal("error_glBufferAddressRangeNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBufferAddressRangeNV(_context, pname, index, address, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBufferAddressRangeNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("error_glColorFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorFormatNV(_context, size, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEdgeFlagFormatNV(RegalContext *_context, GLsizei stride)
{
  Internal("error_glEdgeFlagFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEdgeFlagFormatNV(_context, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEdgeFlagFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogCoordFormatNV(RegalContext *_context, GLenum type, GLsizei stride)
{
  Internal("error_glFogCoordFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogCoordFormatNV(_context, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogCoordFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetIntegerui64i_vNV(RegalContext *_context, GLenum target, GLuint index, GLuint64EXT *data)
{
  Internal("error_glGetIntegerui64i_vNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetIntegerui64i_vNV(_context, target, index, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetIntegerui64i_vNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glIndexFormatNV(RegalContext *_context, GLenum type, GLsizei stride)
{
  Internal("error_glIndexFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIndexFormatNV(_context, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIndexFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormalFormatNV(RegalContext *_context, GLenum type, GLsizei stride)
{
  Internal("error_glNormalFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormalFormatNV(_context, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormalFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSecondaryColorFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("error_glSecondaryColorFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSecondaryColorFormatNV(_context, size, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSecondaryColorFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoordFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("error_glTexCoordFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoordFormatNV(_context, size, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoordFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  Internal("error_glVertexAttribFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribFormatNV(_context, index, size, type, normalized, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribIFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride)
{
  Internal("error_glVertexAttribIFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribIFormatNV(_context, index, size, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribIFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("error_glVertexFormatNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexFormatNV(_context, size, type, stride);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexFormatNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_vertex_program

static GLboolean REGAL_CALL error_glAreProgramsResidentNV(RegalContext *_context, GLsizei n, const GLuint *programs, GLboolean *residences)
{
  Internal("error_glAreProgramsResidentNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glAreProgramsResidentNV(_context, n, programs, residences);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAreProgramsResidentNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glBindProgramNV(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("error_glBindProgramNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindProgramNV(_context, target, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindProgramNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteProgramsNV(RegalContext *_context, GLsizei n, const GLuint *programs)
{
  Internal("error_glDeleteProgramsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteProgramsNV(_context, n, programs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteProgramsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExecuteProgramNV(RegalContext *_context, GLenum target, GLuint id, const GLfloat *params)
{
  Internal("error_glExecuteProgramNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExecuteProgramNV(_context, target, id, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExecuteProgramNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenProgramsNV(RegalContext *_context, GLsizei n, GLuint *programs)
{
  Internal("error_glGenProgramsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenProgramsNV(_context, n, programs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenProgramsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramParameterdvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("error_glGetProgramParameterdvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramParameterdvNV(_context, target, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramParameterdvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramParameterfvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("error_glGetProgramParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramParameterfvNV(_context, target, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramStringNV(RegalContext *_context, GLuint id, GLenum pname, GLubyte *program)
{
  Internal("error_glGetProgramStringNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramStringNV(_context, id, pname, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramStringNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetProgramivNV(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("error_glGetProgramivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramivNV(_context, id, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTrackMatrixivNV(RegalContext *_context, GLenum target, GLuint address, GLenum pname, GLint *params)
{
  Internal("error_glGetTrackMatrixivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTrackMatrixivNV(_context, target, address, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTrackMatrixivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribPointervNV(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("error_glGetVertexAttribPointervNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribPointervNV(_context, index, pname, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribPointervNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribdvNV(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("error_glGetVertexAttribdvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribdvNV(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribdvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribfvNV(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("error_glGetVertexAttribfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribfvNV(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVertexAttribivNV(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("error_glGetVertexAttribivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVertexAttribivNV(_context, index, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVertexAttribivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsProgramNV(RegalContext *_context, GLuint id)
{
  Internal("error_glIsProgramNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsProgramNV(_context, id);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsProgramNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glLoadProgramNV(RegalContext *_context, GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
  Internal("error_glLoadProgramNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadProgramNV(_context, target, id, len, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadProgramNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameter4dNV(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glProgramParameter4dNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameter4dNV(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameter4dNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameter4dvNV(RegalContext *_context, GLenum target, GLuint index, const GLdouble *v)
{
  Internal("error_glProgramParameter4dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameter4dvNV(_context, target, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameter4dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameter4fNV(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glProgramParameter4fNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameter4fNV(_context, target, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameter4fNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameter4fvNV(RegalContext *_context, GLenum target, GLuint index, const GLfloat *v)
{
  Internal("error_glProgramParameter4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameter4fvNV(_context, target, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameter4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameters4dvNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLdouble *v)
{
  Internal("error_glProgramParameters4dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameters4dvNV(_context, target, index, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameters4dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramParameters4fvNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *v)
{
  Internal("error_glProgramParameters4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramParameters4fvNV(_context, target, index, count, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramParameters4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRequestResidentProgramsNV(RegalContext *_context, GLsizei n, const GLuint *programs)
{
  Internal("error_glRequestResidentProgramsNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRequestResidentProgramsNV(_context, n, programs);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRequestResidentProgramsNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTrackMatrixNV(RegalContext *_context, GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  Internal("error_glTrackMatrixNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTrackMatrixNV(_context, target, address, matrix, transform);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTrackMatrixNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1dNV(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("error_glVertexAttrib1dNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1dNV(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1dNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib1dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1dvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1fNV(RegalContext *_context, GLuint index, GLfloat x)
{
  Internal("error_glVertexAttrib1fNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1fNV(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1fNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib1fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1fvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1sNV(RegalContext *_context, GLuint index, GLshort x)
{
  Internal("error_glVertexAttrib1sNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1sNV(_context, index, x);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1sNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib1svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib1svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib1svNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib1svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("error_glVertexAttrib2dNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2dNV(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2dNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib2dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2dvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  Internal("error_glVertexAttrib2fNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2fNV(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2fNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib2fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2fvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  Internal("error_glVertexAttrib2sNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2sNV(_context, index, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2sNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib2svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib2svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib2svNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib2svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("error_glVertexAttrib3dNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3dNV(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3dNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib3dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3dvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glVertexAttrib3fNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3fNV(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3fNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib3fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3fvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Internal("error_glVertexAttrib3sNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3sNV(_context, index, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3sNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib3svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib3svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib3svNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib3svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("error_glVertexAttrib4dNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4dNV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4dNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("error_glVertexAttrib4dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4dvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glVertexAttrib4fNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4fNV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4fNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("error_glVertexAttrib4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4fvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("error_glVertexAttrib4sNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4sNV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4sNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("error_glVertexAttrib4svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4svNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4ubNV(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Internal("error_glVertexAttrib4ubNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4ubNV(_context, index, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4ubNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttrib4ubvNV(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("error_glVertexAttrib4ubvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttrib4ubvNV(_context, index, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttrib4ubvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribPointerNV(RegalContext *_context, GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glVertexAttribPointerNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribPointerNV(_context, index, fsize, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribPointerNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs1dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("error_glVertexAttribs1dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs1dvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs1dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs1fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("error_glVertexAttribs1fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs1fvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs1fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs1svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("error_glVertexAttribs1svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs1svNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs1svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs2dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("error_glVertexAttribs2dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs2dvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs2dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs2fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("error_glVertexAttribs2fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs2fvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs2fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs2svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("error_glVertexAttribs2svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs2svNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs2svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs3dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("error_glVertexAttribs3dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs3dvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs3dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs3fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("error_glVertexAttribs3fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs3fvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs3fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs3svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("error_glVertexAttribs3svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs3svNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs3svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs4dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("error_glVertexAttribs4dvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs4dvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs4dvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs4fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("error_glVertexAttribs4fvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs4fvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs4fvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs4svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("error_glVertexAttribs4svNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs4svNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs4svNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVertexAttribs4ubvNV(RegalContext *_context, GLuint index, GLsizei n, const GLubyte *v)
{
  Internal("error_glVertexAttribs4ubvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVertexAttribs4ubvNV(_context, index, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVertexAttribs4ubvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_NV_video_capture

static void REGAL_CALL error_glBeginVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot)
{
  Internal("error_glBeginVideoCaptureNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBeginVideoCaptureNV(_context, video_capture_slot);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBeginVideoCaptureNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindVideoCaptureStreamBufferNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
  Internal("error_glBindVideoCaptureStreamBufferNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVideoCaptureStreamBufferNV(_context, video_capture_slot, stream, frame_region, offset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVideoCaptureStreamBufferNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindVideoCaptureStreamTextureNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  Internal("error_glBindVideoCaptureStreamTextureNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVideoCaptureStreamTextureNV(_context, video_capture_slot, stream, frame_region, target, texture);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVideoCaptureStreamTextureNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEndVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot)
{
  Internal("error_glEndVideoCaptureNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndVideoCaptureNV(_context, video_capture_slot);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndVideoCaptureNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideoCaptureStreamdvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
  Internal("error_glGetVideoCaptureStreamdvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoCaptureStreamdvNV(_context, video_capture_slot, stream, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoCaptureStreamdvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideoCaptureStreamfvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
  Internal("error_glGetVideoCaptureStreamfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoCaptureStreamfvNV(_context, video_capture_slot, stream, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoCaptureStreamfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideoCaptureStreamivNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
  Internal("error_glGetVideoCaptureStreamivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoCaptureStreamivNV(_context, video_capture_slot, stream, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoCaptureStreamivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetVideoCaptureivNV(RegalContext *_context, GLuint video_capture_slot, GLenum pname, GLint *params)
{
  Internal("error_glGetVideoCaptureivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetVideoCaptureivNV(_context, video_capture_slot, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetVideoCaptureivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
  Internal("error_glVideoCaptureNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glVideoCaptureNV(_context, video_capture_slot, sequence_num, capture_time);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVideoCaptureNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glVideoCaptureStreamParameterdvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
  Internal("error_glVideoCaptureStreamParameterdvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVideoCaptureStreamParameterdvNV(_context, video_capture_slot, stream, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVideoCaptureStreamParameterdvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVideoCaptureStreamParameterfvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
  Internal("error_glVideoCaptureStreamParameterfvNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVideoCaptureStreamParameterfvNV(_context, video_capture_slot, stream, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVideoCaptureStreamParameterfvNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glVideoCaptureStreamParameterivNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
  Internal("error_glVideoCaptureStreamParameterivNV","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glVideoCaptureStreamParameterivNV(_context, video_capture_slot, stream, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glVideoCaptureStreamParameterivNV : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_blend_equation_separate

static void REGAL_CALL error_glBlendEquationSeparateOES(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("error_glBlendEquationSeparateOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationSeparateOES(_context, modeRGB, modeAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationSeparateOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_blend_func_separate

static void REGAL_CALL error_glBlendFuncSeparateOES(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("error_glBlendFuncSeparateOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendFuncSeparateOES(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendFuncSeparateOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_blend_subtract

static void REGAL_CALL error_glBlendEquationOES(RegalContext *_context, GLenum mode)
{
  Internal("error_glBlendEquationOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBlendEquationOES(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBlendEquationOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_framebuffer_object

static void REGAL_CALL error_glBindFramebufferOES(RegalContext *_context, GLenum target, GLuint framebuffer)
{
  Internal("error_glBindFramebufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindFramebufferOES(_context, target, framebuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindFramebufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glBindRenderbufferOES(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("error_glBindRenderbufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindRenderbufferOES(_context, target, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindRenderbufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLenum REGAL_CALL error_glCheckFramebufferStatusOES(RegalContext *_context, GLenum target)
{
  Internal("error_glCheckFramebufferStatusOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLenum  ret = _context->err.next.glCheckFramebufferStatusOES(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCheckFramebufferStatusOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glDeleteFramebuffersOES(RegalContext *_context, GLsizei n, const GLuint *framebuffers)
{
  Internal("error_glDeleteFramebuffersOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteFramebuffersOES(_context, n, framebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteFramebuffersOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteRenderbuffersOES(RegalContext *_context, GLsizei n, const GLuint *renderbuffers)
{
  Internal("error_glDeleteRenderbuffersOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteRenderbuffersOES(_context, n, renderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteRenderbuffersOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferRenderbufferOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("error_glFramebufferRenderbufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferRenderbufferOES(_context, target, attachment, renderbuffertarget, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferRenderbufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture2DOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("error_glFramebufferTexture2DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture2DOES(_context, target, attachment, textarget, texture, level);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture2DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenFramebuffersOES(RegalContext *_context, GLsizei n, GLuint *framebuffers)
{
  Internal("error_glGenFramebuffersOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenFramebuffersOES(_context, n, framebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenFramebuffersOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenRenderbuffersOES(RegalContext *_context, GLsizei n, GLuint *renderbuffers)
{
  Internal("error_glGenRenderbuffersOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenRenderbuffersOES(_context, n, renderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenRenderbuffersOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenerateMipmapOES(RegalContext *_context, GLenum target)
{
  Internal("error_glGenerateMipmapOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenerateMipmapOES(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenerateMipmapOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFramebufferAttachmentParameterivOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("error_glGetFramebufferAttachmentParameterivOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFramebufferAttachmentParameterivOES(_context, target, attachment, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFramebufferAttachmentParameterivOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetRenderbufferParameterivOES(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetRenderbufferParameterivOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetRenderbufferParameterivOES(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetRenderbufferParameterivOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsFramebufferOES(RegalContext *_context, GLuint framebuffer)
{
  Internal("error_glIsFramebufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsFramebufferOES(_context, framebuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsFramebufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsRenderbufferOES(RegalContext *_context, GLuint renderbuffer)
{
  Internal("error_glIsRenderbufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsRenderbufferOES(_context, renderbuffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsRenderbufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glRenderbufferStorageOES(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("error_glRenderbufferStorageOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRenderbufferStorageOES(_context, target, internalformat, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRenderbufferStorageOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_get_program_binary

static void REGAL_CALL error_glGetProgramBinaryOES(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  Internal("error_glGetProgramBinaryOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetProgramBinaryOES(_context, program, bufSize, length, binaryFormat, binary);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetProgramBinaryOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glProgramBinaryOES(RegalContext *_context, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
  Internal("error_glProgramBinaryOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glProgramBinaryOES(_context, program, binaryFormat, binary, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glProgramBinaryOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_mapbuffer

static void REGAL_CALL error_glGetBufferPointervOES(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("error_glGetBufferPointervOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetBufferPointervOES(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetBufferPointervOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLvoid *REGAL_CALL error_glMapBufferOES(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("error_glMapBufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLvoid * ret = _context->err.next.glMapBufferOES(_context, target, access);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMapBufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glUnmapBufferOES(RegalContext *_context, GLenum target)
{
  Internal("error_glUnmapBufferOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glUnmapBufferOES(_context, target);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glUnmapBufferOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_OES_matrix_palette

static void REGAL_CALL error_glCurrentPaletteMatrixOES(RegalContext *_context, GLuint index)
{
  Internal("error_glCurrentPaletteMatrixOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCurrentPaletteMatrixOES(_context, index);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCurrentPaletteMatrixOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMatrixIndexPointerOES(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  Internal("error_glMatrixIndexPointerOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMatrixIndexPointerOES(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMatrixIndexPointerOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glWeightPointerOES(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  Internal("error_glWeightPointerOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glWeightPointerOES(_context, size, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glWeightPointerOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_single_precision

static void REGAL_CALL error_glClearDepthfOES(RegalContext *_context, GLclampd depth)
{
  Internal("error_glClearDepthfOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearDepthfOES(_context, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearDepthfOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClipPlanefOES(RegalContext *_context, GLenum plane, const GLfloat *equation)
{
  Internal("error_glClipPlanefOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClipPlanefOES(_context, plane, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClipPlanefOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthRangefOES(RegalContext *_context, GLclampf n, GLclampf f)
{
  Internal("error_glDepthRangefOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRangefOES(_context, n, f);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRangefOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFrustumfOES(RegalContext *_context, GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  Internal("error_glFrustumfOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrustumfOES(_context, l, r, b, t, n, f);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrustumfOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetClipPlanefOES(RegalContext *_context, GLenum plane, GLfloat *equation)
{
  Internal("error_glGetClipPlanefOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetClipPlanefOES(_context, plane, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetClipPlanefOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glOrthofOES(RegalContext *_context, GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  Internal("error_glOrthofOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glOrthofOES(_context, l, r, b, t, n, f);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glOrthofOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_texture_3D

static void REGAL_CALL error_glCompressedTexImage3DOES(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexImage3DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexImage3DOES(_context, target, level, internalformat, width, height, depth, border, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexImage3DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCompressedTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("error_glCompressedTexSubImage3DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCompressedTexSubImage3DOES(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCompressedTexSubImage3DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glCopyTexSubImage3DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyTexSubImage3DOES(_context, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyTexSubImage3DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFramebufferTexture3DOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Internal("error_glFramebufferTexture3DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFramebufferTexture3DOES(_context, target, attachment, textarget, texture, level, zoffset);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFramebufferTexture3DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexImage3DOES(RegalContext *_context, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexImage3DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage3DOES(_context, target, level, internalFormat, width, height, depth, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage3DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage3DOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage3DOES(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage3DOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_texture_cube_map

static void REGAL_CALL error_glGetTexGenfvOES(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params)
{
  Internal("error_glGetTexGenfvOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexGenfvOES(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexGenfvOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexGenivOES(RegalContext *_context, GLenum coord, GLenum pname, GLint *params)
{
  Internal("error_glGetTexGenivOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexGenivOES(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexGenivOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexGenxvOES(RegalContext *_context, GLenum coord, GLenum pname, GLfixed *params)
{
  Internal("error_glGetTexGenxvOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexGenxvOES(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexGenxvOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenfOES(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param)
{
  Internal("error_glTexGenfOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenfOES(_context, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenfOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenfvOES(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params)
{
  Internal("error_glTexGenfvOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenfvOES(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenfvOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGeniOES(RegalContext *_context, GLenum coord, GLenum pname, GLint param)
{
  Internal("error_glTexGeniOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGeniOES(_context, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGeniOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenivOES(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params)
{
  Internal("error_glTexGenivOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenivOES(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenivOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenxOES(RegalContext *_context, GLenum coord, GLenum pname, GLfixed param)
{
  Internal("error_glTexGenxOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenxOES(_context, coord, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenxOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexGenxvOES(RegalContext *_context, GLenum coord, GLenum pname, const GLfixed *params)
{
  Internal("error_glTexGenxvOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexGenxvOES(_context, coord, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexGenxvOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_OES_vertex_array_object

static void REGAL_CALL error_glBindVertexArrayOES(RegalContext *_context, GLuint array)
{
  Internal("error_glBindVertexArrayOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glBindVertexArrayOES(_context, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glBindVertexArrayOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteVertexArraysOES(RegalContext *_context, GLsizei n, const GLuint *arrays)
{
  Internal("error_glDeleteVertexArraysOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteVertexArraysOES(_context, n, arrays);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteVertexArraysOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGenVertexArraysOES(RegalContext *_context, GLsizei n, GLuint *arrays)
{
  Internal("error_glGenVertexArraysOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGenVertexArraysOES(_context, n, arrays);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenVertexArraysOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glIsVertexArrayOES(RegalContext *_context, GLuint array)
{
  Internal("error_glIsVertexArrayOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsVertexArrayOES(_context, array);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsVertexArrayOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_PGI_misc_hints

static void REGAL_CALL error_glHintPGI(RegalContext *_context, GLenum target, GLint mode)
{
  Internal("error_glHintPGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glHintPGI(_context, target, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glHintPGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_QCOM_alpha_test

static void REGAL_CALL error_glAlphaFuncQCOM(RegalContext *_context, GLenum func, GLclampf ref)
{
  Internal("error_glAlphaFuncQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAlphaFuncQCOM(_context, func, ref);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAlphaFuncQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_QCOM_driver_control

static void REGAL_CALL error_glDisableDriverControlQCOM(RegalContext *_context, GLuint driverControl)
{
  Internal("error_glDisableDriverControlQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDisableDriverControlQCOM(_context, driverControl);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDisableDriverControlQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glEnableDriverControlQCOM(RegalContext *_context, GLuint driverControl)
{
  Internal("error_glEnableDriverControlQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEnableDriverControlQCOM(_context, driverControl);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEnableDriverControlQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDriverControlStringQCOM(RegalContext *_context, GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
  Internal("error_glGetDriverControlStringQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDriverControlStringQCOM(_context, driverControl, bufSize, length, driverControlString);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDriverControlStringQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDriverControlsQCOM(RegalContext *_context, GLint *num, GLsizei size, GLuint *driverControls)
{
  Internal("error_glGetDriverControlsQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDriverControlsQCOM(_context, num, size, driverControls);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDriverControlsQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_QCOM_extended_get

static void REGAL_CALL error_glExtGetBufferPointervQCOM(RegalContext *_context, GLenum target, GLvoid **params)
{
  Internal("error_glExtGetBufferPointervQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetBufferPointervQCOM(_context, target, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetBufferPointervQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetBuffersQCOM(RegalContext *_context, GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
  Internal("error_glExtGetBuffersQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetBuffersQCOM(_context, buffers, maxBuffers, numBuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetBuffersQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetFramebuffersQCOM(RegalContext *_context, GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
  Internal("error_glExtGetFramebuffersQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetFramebuffersQCOM(_context, framebuffers, maxFramebuffers, numFramebuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetFramebuffersQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetRenderbuffersQCOM(RegalContext *_context, GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
  Internal("error_glExtGetRenderbuffersQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetRenderbuffersQCOM(_context, renderbuffers, maxRenderbuffers, numRenderbuffers);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetRenderbuffersQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetTexLevelParameterivQCOM(RegalContext *_context, GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
  Internal("error_glExtGetTexLevelParameterivQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetTexLevelParameterivQCOM(_context, texture, face, level, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetTexLevelParameterivQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetTexSubImageQCOM(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
{
  Internal("error_glExtGetTexSubImageQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetTexSubImageQCOM(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetTexSubImageQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetTexturesQCOM(RegalContext *_context, GLuint *textures, GLint maxTextures, GLint *numTextures)
{
  Internal("error_glExtGetTexturesQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetTexturesQCOM(_context, textures, maxTextures, numTextures);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetTexturesQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtTexObjectStateOverrideiQCOM(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("error_glExtTexObjectStateOverrideiQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtTexObjectStateOverrideiQCOM(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtTexObjectStateOverrideiQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_QCOM_extended_get2

static void REGAL_CALL error_glExtGetProgramBinarySourceQCOM(RegalContext *_context, GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
  Internal("error_glExtGetProgramBinarySourceQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetProgramBinarySourceQCOM(_context, program, shadertype, source, length);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetProgramBinarySourceQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetProgramsQCOM(RegalContext *_context, GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
  Internal("error_glExtGetProgramsQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetProgramsQCOM(_context, programs, maxPrograms, numPrograms);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetProgramsQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glExtGetShadersQCOM(RegalContext *_context, GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
  Internal("error_glExtGetShadersQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glExtGetShadersQCOM(_context, shaders, maxShaders, numShaders);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtGetShadersQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLboolean REGAL_CALL error_glExtIsProgramBinaryQCOM(RegalContext *_context, GLuint program)
{
  Internal("error_glExtIsProgramBinaryQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glExtIsProgramBinaryQCOM(_context, program);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glExtIsProgramBinaryQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_QCOM_tiled_rendering

static void REGAL_CALL error_glEndTilingQCOM(RegalContext *_context, GLbitfield preserveMask)
{
  Internal("error_glEndTilingQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glEndTilingQCOM(_context, preserveMask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glEndTilingQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStartTilingQCOM(RegalContext *_context, GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  Internal("error_glStartTilingQCOM","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStartTilingQCOM(_context, x, y, width, height, preserveMask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStartTilingQCOM : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_REGAL_ES1_0_compatibility

static void REGAL_CALL error_glAlphaFuncx(RegalContext *_context, GLenum func, GLclampx ref)
{
  Internal("error_glAlphaFuncx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAlphaFuncx(_context, func, ref);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAlphaFuncx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearColorx(RegalContext *_context, GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
  Internal("error_glClearColorx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearColorx(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearColorx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClearDepthx(RegalContext *_context, GLclampx depth)
{
  Internal("error_glClearDepthx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClearDepthx(_context, depth);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClearDepthx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4x(RegalContext *_context, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  Internal("error_glColor4x","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4x(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4x : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDepthRangex(RegalContext *_context, GLclampx zNear, GLclampx zFar)
{
  Internal("error_glDepthRangex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDepthRangex(_context, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDepthRangex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogx(RegalContext *_context, GLenum pname, GLfixed param)
{
  Internal("error_glFogx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogx(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFogxv(RegalContext *_context, GLenum pname, const GLfixed *params)
{
  Internal("error_glFogxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogxv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFrustumf(RegalContext *_context, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  Internal("error_glFrustumf","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrustumf(_context, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrustumf : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFrustumx(RegalContext *_context, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  Internal("error_glFrustumx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrustumx(_context, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrustumx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightModelx(RegalContext *_context, GLenum pname, GLfixed param)
{
  Internal("error_glLightModelx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightModelx(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightModelx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightModelxv(RegalContext *_context, GLenum pname, const GLfixed *params)
{
  Internal("error_glLightModelxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightModelxv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightModelxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightx(RegalContext *_context, GLenum light, GLenum pname, GLfixed param)
{
  Internal("error_glLightx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightx(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightxv(RegalContext *_context, GLenum light, GLenum pname, const GLfixed *params)
{
  Internal("error_glLightxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightxv(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLineWidthx(RegalContext *_context, GLfixed width)
{
  Internal("error_glLineWidthx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLineWidthx(_context, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLineWidthx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadMatrixx(RegalContext *_context, const GLfixed *m)
{
  Internal("error_glLoadMatrixx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadMatrixx(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadMatrixx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMaterialx(RegalContext *_context, GLenum face, GLenum pname, GLfixed param)
{
  Internal("error_glMaterialx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMaterialx(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMaterialx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMaterialxv(RegalContext *_context, GLenum face, GLenum pname, const GLfixed *params)
{
  Internal("error_glMaterialxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMaterialxv(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMaterialxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultMatrixx(RegalContext *_context, const GLfixed *m)
{
  Internal("error_glMultMatrixx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultMatrixx(_context, m);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultMatrixx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glMultiTexCoord4x(RegalContext *_context, GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
  Internal("error_glMultiTexCoord4x","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glMultiTexCoord4x(_context, target, s, t, r, q);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glMultiTexCoord4x : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3x(RegalContext *_context, GLfixed nx, GLfixed ny, GLfixed nz)
{
  Internal("error_glNormal3x","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3x(_context, nx, ny, nz);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3x : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glOrthof(RegalContext *_context, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  Internal("error_glOrthof","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glOrthof(_context, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glOrthof : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glOrthox(RegalContext *_context, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  Internal("error_glOrthox","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glOrthox(_context, left, right, bottom, top, zNear, zFar);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glOrthox : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointSizex(RegalContext *_context, GLfixed size)
{
  Internal("error_glPointSizex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointSizex(_context, size);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointSizex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPolygonOffsetx(RegalContext *_context, GLfixed factor, GLfixed units)
{
  Internal("error_glPolygonOffsetx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPolygonOffsetx(_context, factor, units);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPolygonOffsetx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glRotatex(RegalContext *_context, GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
  Internal("error_glRotatex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glRotatex(_context, angle, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glRotatex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSampleCoveragex(RegalContext *_context, GLclampx value, GLboolean invert)
{
  Internal("error_glSampleCoveragex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleCoveragex(_context, value, invert);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleCoveragex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glScalex(RegalContext *_context, GLfixed x, GLfixed y, GLfixed z)
{
  Internal("error_glScalex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glScalex(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glScalex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexEnvx(RegalContext *_context, GLenum target, GLenum pname, GLfixed param)
{
  Internal("error_glTexEnvx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexEnvx(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexEnvx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexEnvxv(RegalContext *_context, GLenum target, GLenum pname, const GLfixed *params)
{
  Internal("error_glTexEnvxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexEnvxv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexEnvxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterx(RegalContext *_context, GLenum target, GLenum pname, GLfixed param)
{
  Internal("error_glTexParameterx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterx(_context, target, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTranslatex(RegalContext *_context, GLfixed x, GLfixed y, GLfixed z)
{
  Internal("error_glTranslatex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTranslatex(_context, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTranslatex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_REGAL_ES1_1_compatibility

static void REGAL_CALL error_glClipPlanef(RegalContext *_context, GLenum plane, const GLfloat *equation)
{
  Internal("error_glClipPlanef","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClipPlanef(_context, plane, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClipPlanef : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glClipPlanex(RegalContext *_context, GLenum plane, const GLfixed *equation)
{
  Internal("error_glClipPlanex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glClipPlanex(_context, plane, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glClipPlanex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetClipPlanef(RegalContext *_context, GLenum pname, GLfloat *eqn)
{
  Internal("error_glGetClipPlanef","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetClipPlanef(_context, pname, eqn);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetClipPlanef : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetClipPlanex(RegalContext *_context, GLenum pname, GLfixed *eqn)
{
  Internal("error_glGetClipPlanex","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetClipPlanex(_context, pname, eqn);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetClipPlanex : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFixedv(RegalContext *_context, GLenum pname, GLfixed *params)
{
  Internal("error_glGetFixedv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFixedv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFixedv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetLightxv(RegalContext *_context, GLenum light, GLenum pname, GLfixed *params)
{
  Internal("error_glGetLightxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetLightxv(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetLightxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetMaterialxv(RegalContext *_context, GLenum face, GLenum pname, GLfixed *params)
{
  Internal("error_glGetMaterialxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetMaterialxv(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetMaterialxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexEnvxv(RegalContext *_context, GLenum env, GLenum pname, GLfixed *params)
{
  Internal("error_glGetTexEnvxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexEnvxv(_context, env, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexEnvxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetTexParameterxv(RegalContext *_context, GLenum target, GLenum pname, GLfixed *params)
{
  Internal("error_glGetTexParameterxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexParameterxv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexParameterxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterx(RegalContext *_context, GLenum pname, GLfixed param)
{
  Internal("error_glPointParameterx","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterx(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterx : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterxv(RegalContext *_context, GLenum pname, const GLfixed *params)
{
  Internal("error_glPointParameterxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterxv(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointSizePointerOES(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("error_glPointSizePointerOES","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointSizePointerOES(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointSizePointerOES : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexParameterxv(RegalContext *_context, GLenum target, GLenum pname, const GLfixed *params)
{
  Internal("error_glTexParameterxv","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexParameterxv(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexParameterxv : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_REGAL_log

static void REGAL_CALL error_glLogMessageCallbackREGAL(RegalContext *_context, GLLOGPROCREGAL callback)
{
  Internal("error_glLogMessageCallbackREGAL","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLogMessageCallbackREGAL(_context, callback);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLogMessageCallbackREGAL : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_detail_texture

static void REGAL_CALL error_glDetailTexFuncSGIS(RegalContext *_context, GLenum target, GLsizei n, const GLfloat *points)
{
  Internal("error_glDetailTexFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDetailTexFuncSGIS(_context, target, n, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDetailTexFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetDetailTexFuncSGIS(RegalContext *_context, GLenum target, GLfloat *points)
{
  Internal("error_glGetDetailTexFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetDetailTexFuncSGIS(_context, target, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetDetailTexFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_fog_function

static void REGAL_CALL error_glFogFuncSGIS(RegalContext *_context, GLsizei n, const GLfloat *points)
{
  Internal("error_glFogFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFogFuncSGIS(_context, n, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFogFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFogFuncSGIS(RegalContext *_context, GLfloat *points)
{
  Internal("error_glGetFogFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFogFuncSGIS(_context, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFogFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_multisample

static void REGAL_CALL error_glSampleMaskSGIS(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("error_glSampleMaskSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSampleMaskSGIS(_context, value, invert);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSampleMaskSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSamplePatternSGIS(RegalContext *_context, GLenum pattern)
{
  Internal("error_glSamplePatternSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSamplePatternSGIS(_context, pattern);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSamplePatternSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_pixel_texture

static void REGAL_CALL error_glGetPixelTexGenParameterfvSGIS(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("error_glGetPixelTexGenParameterfvSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelTexGenParameterfvSGIS(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelTexGenParameterfvSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetPixelTexGenParameterivSGIS(RegalContext *_context, GLenum pname, GLint *params)
{
  Internal("error_glGetPixelTexGenParameterivSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetPixelTexGenParameterivSGIS(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetPixelTexGenParameterivSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTexGenParameterfSGIS(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPixelTexGenParameterfSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTexGenParameterfSGIS(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTexGenParameterfSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTexGenParameterfvSGIS(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glPixelTexGenParameterfvSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTexGenParameterfvSGIS(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTexGenParameterfvSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTexGenParameteriSGIS(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glPixelTexGenParameteriSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTexGenParameteriSGIS(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTexGenParameteriSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPixelTexGenParameterivSGIS(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glPixelTexGenParameterivSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTexGenParameterivSGIS(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTexGenParameterivSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_point_parameters

static void REGAL_CALL error_glPointParameterfSGIS(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glPointParameterfSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfSGIS(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glPointParameterfvSGIS(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glPointParameterfvSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPointParameterfvSGIS(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPointParameterfvSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_sharpen_texture

static void REGAL_CALL error_glGetSharpenTexFuncSGIS(RegalContext *_context, GLenum target, GLfloat *points)
{
  Internal("error_glGetSharpenTexFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetSharpenTexFuncSGIS(_context, target, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetSharpenTexFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSharpenTexFuncSGIS(RegalContext *_context, GLenum target, GLsizei n, const GLfloat *points)
{
  Internal("error_glSharpenTexFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSharpenTexFuncSGIS(_context, target, n, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSharpenTexFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_texture4D

static void REGAL_CALL error_glTexImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexImage4DSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexImage4DSGIS(_context, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexImage4DSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexSubImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("error_glTexSubImage4DSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexSubImage4DSGIS(_context, target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexSubImage4DSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_texture_color_mask

static void REGAL_CALL error_glTextureColorMaskSGIS(RegalContext *_context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Internal("error_glTextureColorMaskSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureColorMaskSGIS(_context, red, green, blue, alpha);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureColorMaskSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIS_texture_filter4

static void REGAL_CALL error_glGetTexFilterFuncSGIS(RegalContext *_context, GLenum target, GLenum filter, GLfloat *weights)
{
  Internal("error_glGetTexFilterFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetTexFilterFuncSGIS(_context, target, filter, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetTexFilterFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexFilterFuncSGIS(RegalContext *_context, GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
  Internal("error_glTexFilterFuncSGIS","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexFilterFuncSGIS(_context, target, filter, n, weights);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexFilterFuncSGIS : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_async

static void REGAL_CALL error_glAsyncMarkerSGIX(RegalContext *_context, GLuint marker)
{
  Internal("error_glAsyncMarkerSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAsyncMarkerSGIX(_context, marker);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAsyncMarkerSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeleteAsyncMarkersSGIX(RegalContext *_context, GLuint marker, GLsizei range)
{
  Internal("error_glDeleteAsyncMarkersSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeleteAsyncMarkersSGIX(_context, marker, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeleteAsyncMarkersSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glFinishAsyncSGIX(RegalContext *_context, GLuint *markerp)
{
  Internal("error_glFinishAsyncSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glFinishAsyncSGIX(_context, markerp);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinishAsyncSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLuint REGAL_CALL error_glGenAsyncMarkersSGIX(RegalContext *_context, GLsizei range)
{
  Internal("error_glGenAsyncMarkersSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLuint  ret = _context->err.next.glGenAsyncMarkersSGIX(_context, range);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGenAsyncMarkersSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLboolean REGAL_CALL error_glIsAsyncMarkerSGIX(RegalContext *_context, GLuint marker)
{
  Internal("error_glIsAsyncMarkerSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLboolean  ret = _context->err.next.glIsAsyncMarkerSGIX(_context, marker);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIsAsyncMarkerSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static GLint REGAL_CALL error_glPollAsyncSGIX(RegalContext *_context, GLuint *markerp)
{
  Internal("error_glPollAsyncSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glPollAsyncSGIX(_context, markerp);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPollAsyncSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

// GL_SGIX_flush_raster

static void REGAL_CALL error_glFlushRasterSGIX(RegalContext *_context)
{
  Internal("error_glFlushRasterSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFlushRasterSGIX(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFlushRasterSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_fog_texture

static void REGAL_CALL error_glTextureFogSGIX(RegalContext *_context, GLenum pname)
{
  Internal("error_glTextureFogSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTextureFogSGIX(_context, pname);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTextureFogSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_fragment_lighting

static void REGAL_CALL error_glFragmentColorMaterialSGIX(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("error_glFragmentColorMaterialSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentColorMaterialSGIX(_context, face, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentColorMaterialSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModelfSGIX(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glFragmentLightModelfSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModelfSGIX(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModelfSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModelfvSGIX(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glFragmentLightModelfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModelfvSGIX(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModelfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModeliSGIX(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glFragmentLightModeliSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModeliSGIX(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModeliSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightModelivSGIX(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glFragmentLightModelivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightModelivSGIX(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightModelivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightfSGIX(RegalContext *_context, GLenum light, GLenum pname, GLfloat param)
{
  Internal("error_glFragmentLightfSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightfSGIX(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightfSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightfvSGIX(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params)
{
  Internal("error_glFragmentLightfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightfvSGIX(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightiSGIX(RegalContext *_context, GLenum light, GLenum pname, GLint param)
{
  Internal("error_glFragmentLightiSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightiSGIX(_context, light, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightiSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentLightivSGIX(RegalContext *_context, GLenum light, GLenum pname, const GLint *params)
{
  Internal("error_glFragmentLightivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentLightivSGIX(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentLightivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialfSGIX(RegalContext *_context, GLenum face, GLenum pname, GLfloat param)
{
  Internal("error_glFragmentMaterialfSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialfSGIX(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialfSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialfvSGIX(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  Internal("error_glFragmentMaterialfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialfvSGIX(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialiSGIX(RegalContext *_context, GLenum face, GLenum pname, GLint param)
{
  Internal("error_glFragmentMaterialiSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialiSGIX(_context, face, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialiSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glFragmentMaterialivSGIX(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  Internal("error_glFragmentMaterialivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFragmentMaterialivSGIX(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFragmentMaterialivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentLightfvSGIX(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params)
{
  Internal("error_glGetFragmentLightfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentLightfvSGIX(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentLightfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentLightivSGIX(RegalContext *_context, GLenum light, GLenum pname, GLint *params)
{
  Internal("error_glGetFragmentLightivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentLightivSGIX(_context, light, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentLightivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentMaterialfvSGIX(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params)
{
  Internal("error_glGetFragmentMaterialfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentMaterialfvSGIX(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentMaterialfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetFragmentMaterialivSGIX(RegalContext *_context, GLenum face, GLenum pname, GLint *params)
{
  Internal("error_glGetFragmentMaterialivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetFragmentMaterialivSGIX(_context, face, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetFragmentMaterialivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLightEnviSGIX(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glLightEnviSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLightEnviSGIX(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLightEnviSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_framezoom

static void REGAL_CALL error_glFrameZoomSGIX(RegalContext *_context, GLint factor)
{
  Internal("error_glFrameZoomSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFrameZoomSGIX(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFrameZoomSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_igloo_interface

static void REGAL_CALL error_glIglooInterfaceSGIX(RegalContext *_context, GLenum pname, const GLvoid *params)
{
  Internal("error_glIglooInterfaceSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glIglooInterfaceSGIX(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glIglooInterfaceSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_instruments

static GLint REGAL_CALL error_glGetInstrumentsSGIX(RegalContext *_context)
{
  Internal("error_glGetInstrumentsSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glGetInstrumentsSGIX(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetInstrumentsSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glInstrumentsBufferSGIX(RegalContext *_context, GLsizei size, GLint *buffer)
{
  Internal("error_glInstrumentsBufferSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glInstrumentsBufferSGIX(_context, size, buffer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glInstrumentsBufferSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static GLint REGAL_CALL error_glPollInstrumentsSGIX(RegalContext *_context, GLint *marker_p)
{
  Internal("error_glPollInstrumentsSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  GLint  ret = _context->err.next.glPollInstrumentsSGIX(_context, marker_p);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPollInstrumentsSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
return ret;
}

static void REGAL_CALL error_glReadInstrumentsSGIX(RegalContext *_context, GLint marker)
{
  Internal("error_glReadInstrumentsSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadInstrumentsSGIX(_context, marker);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadInstrumentsSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStartInstrumentsSGIX(RegalContext *_context)
{
  Internal("error_glStartInstrumentsSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStartInstrumentsSGIX(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStartInstrumentsSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glStopInstrumentsSGIX(RegalContext *_context, GLint marker)
{
  Internal("error_glStopInstrumentsSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glStopInstrumentsSGIX(_context, marker);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glStopInstrumentsSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_list_priority

static void REGAL_CALL error_glGetListParameterfvSGIX(RegalContext *_context, GLuint list, GLenum pname, GLfloat *params)
{
  Internal("error_glGetListParameterfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetListParameterfvSGIX(_context, list, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetListParameterfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetListParameterivSGIX(RegalContext *_context, GLuint list, GLenum pname, GLint *params)
{
  Internal("error_glGetListParameterivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetListParameterivSGIX(_context, list, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetListParameterivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glListParameterfSGIX(RegalContext *_context, GLuint list, GLenum pname, GLfloat param)
{
  Internal("error_glListParameterfSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glListParameterfSGIX(_context, list, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glListParameterfSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glListParameterfvSGIX(RegalContext *_context, GLuint list, GLenum pname, const GLfloat *params)
{
  Internal("error_glListParameterfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glListParameterfvSGIX(_context, list, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glListParameterfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glListParameteriSGIX(RegalContext *_context, GLuint list, GLenum pname, GLint param)
{
  Internal("error_glListParameteriSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glListParameteriSGIX(_context, list, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glListParameteriSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glListParameterivSGIX(RegalContext *_context, GLuint list, GLenum pname, const GLint *params)
{
  Internal("error_glListParameterivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glListParameterivSGIX(_context, list, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glListParameterivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_pixel_texture

static void REGAL_CALL error_glPixelTexGenSGIX(RegalContext *_context, GLenum mode)
{
  Internal("error_glPixelTexGenSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glPixelTexGenSGIX(_context, mode);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glPixelTexGenSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_polynomial_ffd

static void REGAL_CALL error_glDeformSGIX(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glDeformSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeformSGIX(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeformSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeformationMap3dSGIX(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
  Internal("error_glDeformationMap3dSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeformationMap3dSGIX(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeformationMap3dSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glDeformationMap3fSGIX(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
  Internal("error_glDeformationMap3fSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDeformationMap3fSGIX(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDeformationMap3fSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glLoadIdentityDeformationMapSGIX(RegalContext *_context, GLbitfield mask)
{
  Internal("error_glLoadIdentityDeformationMapSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glLoadIdentityDeformationMapSGIX(_context, mask);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glLoadIdentityDeformationMapSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_reference_plane

static void REGAL_CALL error_glReferencePlaneSGIX(RegalContext *_context, const GLdouble *equation)
{
  Internal("error_glReferencePlaneSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReferencePlaneSGIX(_context, equation);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReferencePlaneSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_sprite

static void REGAL_CALL error_glSpriteParameterfSGIX(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("error_glSpriteParameterfSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSpriteParameterfSGIX(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSpriteParameterfSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSpriteParameterfvSGIX(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("error_glSpriteParameterfvSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSpriteParameterfvSGIX(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSpriteParameterfvSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSpriteParameteriSGIX(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("error_glSpriteParameteriSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSpriteParameteriSGIX(_context, pname, param);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSpriteParameteriSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glSpriteParameterivSGIX(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("error_glSpriteParameterivSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glSpriteParameterivSGIX(_context, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glSpriteParameterivSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGIX_tag_sample_buffer

static void REGAL_CALL error_glTagSampleBufferSGIX(RegalContext *_context)
{
  Internal("error_glTagSampleBufferSGIX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTagSampleBufferSGIX(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTagSampleBufferSGIX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SGI_color_table

static void REGAL_CALL error_glColorTableParameterfvSGI(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("error_glColorTableParameterfvSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTableParameterfvSGI(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTableParameterfvSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorTableParameterivSGI(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("error_glColorTableParameterivSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTableParameterivSGI(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTableParameterivSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColorTableSGI(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("error_glColorTableSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColorTableSGI(_context, target, internalformat, width, format, type, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColorTableSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glCopyColorTableSGI(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("error_glCopyColorTableSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glCopyColorTableSGI(_context, target, internalformat, x, y, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glCopyColorTableSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableParameterfvSGI(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("error_glGetColorTableParameterfvSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableParameterfvSGI(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableParameterfvSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableParameterivSGI(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("error_glGetColorTableParameterivSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableParameterivSGI(_context, target, pname, params);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableParameterivSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGetColorTableSGI(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  Internal("error_glGetColorTableSGI","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGetColorTableSGI(_context, target, format, type, table);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGetColorTableSGI : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SUNX_constant_data

static void REGAL_CALL error_glFinishTextureSUNX(RegalContext *_context)
{
  Internal("error_glFinishTextureSUNX","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glFinishTextureSUNX(_context);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glFinishTextureSUNX : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SUN_global_alpha

static void REGAL_CALL error_glGlobalAlphaFactorbSUN(RegalContext *_context, GLbyte factor)
{
  Internal("error_glGlobalAlphaFactorbSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactorbSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactorbSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactordSUN(RegalContext *_context, GLdouble factor)
{
  Internal("error_glGlobalAlphaFactordSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactordSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactordSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactorfSUN(RegalContext *_context, GLfloat factor)
{
  Internal("error_glGlobalAlphaFactorfSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactorfSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactorfSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactoriSUN(RegalContext *_context, GLint factor)
{
  Internal("error_glGlobalAlphaFactoriSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactoriSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactoriSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactorsSUN(RegalContext *_context, GLshort factor)
{
  Internal("error_glGlobalAlphaFactorsSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactorsSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactorsSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactorubSUN(RegalContext *_context, GLubyte factor)
{
  Internal("error_glGlobalAlphaFactorubSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactorubSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactorubSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactoruiSUN(RegalContext *_context, GLuint factor)
{
  Internal("error_glGlobalAlphaFactoruiSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactoruiSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactoruiSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glGlobalAlphaFactorusSUN(RegalContext *_context, GLushort factor)
{
  Internal("error_glGlobalAlphaFactorusSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glGlobalAlphaFactorusSUN(_context, factor);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glGlobalAlphaFactorusSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SUN_mesh_array

static void REGAL_CALL error_glDrawMeshArraysSUN(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  Internal("error_glDrawMeshArraysSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glDrawMeshArraysSUN(_context, mode, first, count, width);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glDrawMeshArraysSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SUN_read_video_pixels

static void REGAL_CALL error_glReadVideoPixelsSUN(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("error_glReadVideoPixelsSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReadVideoPixelsSUN(_context, x, y, width, height, format, type, pixels);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReadVideoPixelsSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SUN_triangle_list

static void REGAL_CALL error_glReplacementCodePointerSUN(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid **pointer)
{
  Internal("error_glReplacementCodePointerSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodePointerSUN(_context, type, stride, pointer);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodePointerSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeubSUN(RegalContext *_context, GLubyte code)
{
  Internal("error_glReplacementCodeubSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeubSUN(_context, code);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeubSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeubvSUN(RegalContext *_context, const GLubyte *code)
{
  Internal("error_glReplacementCodeubvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeubvSUN(_context, code);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeubvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiSUN(RegalContext *_context, GLuint code)
{
  Internal("error_glReplacementCodeuiSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiSUN(_context, code);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuivSUN(RegalContext *_context, const GLuint *code)
{
  Internal("error_glReplacementCodeuivSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuivSUN(_context, code);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuivSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeusSUN(RegalContext *_context, GLushort code)
{
  Internal("error_glReplacementCodeusSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeusSUN(_context, code);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeusSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeusvSUN(RegalContext *_context, const GLushort *code)
{
  Internal("error_glReplacementCodeusvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeusvSUN(_context, code);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeusvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_SUN_vertex

static void REGAL_CALL error_glColor3fVertex3fSUN(RegalContext *_context, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glColor3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3fVertex3fSUN(_context, r, g, b, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor3fVertex3fvSUN(RegalContext *_context, const GLfloat *c, const GLfloat *v)
{
  Internal("error_glColor3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor3fVertex3fvSUN(_context, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4fNormal3fVertex3fSUN(RegalContext *_context, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glColor4fNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4fNormal3fVertex3fSUN(_context, r, g, b, a, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4fNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glColor4fNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4fNormal3fVertex3fvSUN(_context, c, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4fNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ubVertex2fSUN(RegalContext *_context, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  Internal("error_glColor4ubVertex2fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ubVertex2fSUN(_context, r, g, b, a, x, y);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ubVertex2fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ubVertex2fvSUN(RegalContext *_context, const GLubyte *c, const GLfloat *v)
{
  Internal("error_glColor4ubVertex2fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ubVertex2fvSUN(_context, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ubVertex2fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ubVertex3fSUN(RegalContext *_context, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glColor4ubVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ubVertex3fSUN(_context, r, g, b, a, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ubVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glColor4ubVertex3fvSUN(RegalContext *_context, const GLubyte *c, const GLfloat *v)
{
  Internal("error_glColor4ubVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glColor4ubVertex3fvSUN(_context, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glColor4ubVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3fVertex3fSUN(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3fVertex3fSUN(_context, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glNormal3fVertex3fvSUN(_context, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiColor3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiColor3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiColor3fVertex3fSUN(_context, rc, r, g, b, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiColor3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiColor3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiColor3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiColor3fVertex3fvSUN(_context, rc, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiColor3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiColor4fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiColor4fNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiColor4fNormal3fVertex3fSUN(_context, rc, r, g, b, a, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiColor4fNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiColor4fNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(_context, rc, c, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiColor4fNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiColor4ubVertex3fSUN(RegalContext *_context, GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiColor4ubVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiColor4ubVertex3fSUN(_context, rc, r, g, b, a, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiColor4ubVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiColor4ubVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiColor4ubVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiColor4ubVertex3fvSUN(_context, rc, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiColor4ubVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiNormal3fVertex3fSUN(_context, rc, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiNormal3fVertex3fvSUN(_context, rc, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(_context, rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(_context, rc, tc, c, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(_context, rc, s, t, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(_context, rc, tc, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiTexCoord2fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiTexCoord2fVertex3fSUN(_context, rc, s, t, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiTexCoord2fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiTexCoord2fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiTexCoord2fVertex3fvSUN(_context, rc, tc, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiTexCoord2fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glReplacementCodeuiVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiVertex3fSUN(_context, rc, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glReplacementCodeuiVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *v)
{
  Internal("error_glReplacementCodeuiVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glReplacementCodeuiVertex3fvSUN(_context, rc, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glReplacementCodeuiVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fColor3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glTexCoord2fColor3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fColor3fVertex3fSUN(_context, s, t, r, g, b, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fColor3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fColor3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
  Internal("error_glTexCoord2fColor3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fColor3fVertex3fvSUN(_context, tc, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fColor3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fColor4fNormal3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glTexCoord2fColor4fNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fColor4fNormal3fVertex3fSUN(_context, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fColor4fNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glTexCoord2fColor4fNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fColor4fNormal3fVertex3fvSUN(_context, tc, c, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fColor4fNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fColor4ubVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glTexCoord2fColor4ubVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fColor4ubVertex3fSUN(_context, s, t, r, g, b, a, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fColor4ubVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fColor4ubVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
  Internal("error_glTexCoord2fColor4ubVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fColor4ubVertex3fvSUN(_context, tc, c, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fColor4ubVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fNormal3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glTexCoord2fNormal3fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fNormal3fVertex3fSUN(_context, s, t, nx, ny, nz, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fNormal3fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glTexCoord2fNormal3fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fNormal3fVertex3fvSUN(_context, tc, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fNormal3fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("error_glTexCoord2fVertex3fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fVertex3fSUN(_context, s, t, x, y, z);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fVertex3fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord2fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *v)
{
  Internal("error_glTexCoord2fVertex3fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord2fVertex3fvSUN(_context, tc, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord2fVertex3fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4fColor4fNormal3fVertex4fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glTexCoord4fColor4fNormal3fVertex4fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4fColor4fNormal3fVertex4fSUN(_context, s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4fColor4fNormal3fVertex4fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4fColor4fNormal3fVertex4fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("error_glTexCoord4fColor4fNormal3fVertex4fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4fColor4fNormal3fVertex4fvSUN(_context, tc, c, n, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4fColor4fNormal3fVertex4fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4fVertex4fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("error_glTexCoord4fVertex4fSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4fVertex4fSUN(_context, s, t, p, q, x, y, z, w);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4fVertex4fSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

static void REGAL_CALL error_glTexCoord4fVertex4fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *v)
{
  Internal("error_glTexCoord4fVertex4fvSUN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glTexCoord4fVertex4fvSUN(_context, tc, v);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glTexCoord4fVertex4fvSUN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

// GL_WIN_swap_hint

static void REGAL_CALL error_glAddSwapHintRectWIN(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("error_glAddSwapHintRectWIN","()");
  RegalAssert(_context);
  GLenum _error = GL_NO_ERROR;
  if (!_context->err.inBeginEnd)
    _error = _context->err.next.glGetError( _context );
  RegalAssert(_error==GL_NO_ERROR);
  _context->err.next.glAddSwapHintRectWIN(_context, x, y, width, height);
  if (!_context->err.inBeginEnd) {
    _error = _context->err.next.glGetError( _context );
    if (_error!=GL_NO_ERROR) {
      Error("glAddSwapHintRectWIN : ",Token::GLerrorToString(_error));
      #if REGAL_BREAK
      Break::ErrorCB(_error);
      #endif
      if (_context->err.callback)
        _context->err.callback( _error );
    }
  }
}

void InitDispatchError(Dispatch::GL &tbl)
{

  // GL_VERSION_1_0

  tbl.glAccum = error_glAccum;
  tbl.glAlphaFunc = error_glAlphaFunc;
  tbl.glBegin = error_glBegin;
  tbl.glBitmap = error_glBitmap;
  tbl.glBlendFunc = error_glBlendFunc;
  tbl.glCallList = error_glCallList;
  tbl.glCallLists = error_glCallLists;
  tbl.glClear = error_glClear;
  tbl.glClearAccum = error_glClearAccum;
  tbl.glClearColor = error_glClearColor;
  tbl.glClearDepth = error_glClearDepth;
  tbl.glClearIndex = error_glClearIndex;
  tbl.glClearStencil = error_glClearStencil;
  tbl.glClipPlane = error_glClipPlane;
  tbl.glColor3b = error_glColor3b;
  tbl.glColor3bv = error_glColor3bv;
  tbl.glColor3d = error_glColor3d;
  tbl.glColor3dv = error_glColor3dv;
  tbl.glColor3f = error_glColor3f;
  tbl.glColor3fv = error_glColor3fv;
  tbl.glColor3i = error_glColor3i;
  tbl.glColor3iv = error_glColor3iv;
  tbl.glColor3s = error_glColor3s;
  tbl.glColor3sv = error_glColor3sv;
  tbl.glColor3ub = error_glColor3ub;
  tbl.glColor3ubv = error_glColor3ubv;
  tbl.glColor3ui = error_glColor3ui;
  tbl.glColor3uiv = error_glColor3uiv;
  tbl.glColor3us = error_glColor3us;
  tbl.glColor3usv = error_glColor3usv;
  tbl.glColor4b = error_glColor4b;
  tbl.glColor4bv = error_glColor4bv;
  tbl.glColor4d = error_glColor4d;
  tbl.glColor4dv = error_glColor4dv;
  tbl.glColor4f = error_glColor4f;
  tbl.glColor4fv = error_glColor4fv;
  tbl.glColor4i = error_glColor4i;
  tbl.glColor4iv = error_glColor4iv;
  tbl.glColor4s = error_glColor4s;
  tbl.glColor4sv = error_glColor4sv;
  tbl.glColor4ub = error_glColor4ub;
  tbl.glColor4ubv = error_glColor4ubv;
  tbl.glColor4ui = error_glColor4ui;
  tbl.glColor4uiv = error_glColor4uiv;
  tbl.glColor4us = error_glColor4us;
  tbl.glColor4usv = error_glColor4usv;
  tbl.glColorMask = error_glColorMask;
  tbl.glColorMaterial = error_glColorMaterial;
  tbl.glCopyPixels = error_glCopyPixels;
  tbl.glCullFace = error_glCullFace;
  tbl.glDeleteLists = error_glDeleteLists;
  tbl.glDepthFunc = error_glDepthFunc;
  tbl.glDepthMask = error_glDepthMask;
  tbl.glDepthRange = error_glDepthRange;
  tbl.glDisable = error_glDisable;
  tbl.glDrawBuffer = error_glDrawBuffer;
  tbl.glDrawPixels = error_glDrawPixels;
  tbl.glEdgeFlag = error_glEdgeFlag;
  tbl.glEdgeFlagv = error_glEdgeFlagv;
  tbl.glEnable = error_glEnable;
  tbl.glEnd = error_glEnd;
  tbl.glEndList = error_glEndList;
  tbl.glEvalCoord1d = error_glEvalCoord1d;
  tbl.glEvalCoord1dv = error_glEvalCoord1dv;
  tbl.glEvalCoord1f = error_glEvalCoord1f;
  tbl.glEvalCoord1fv = error_glEvalCoord1fv;
  tbl.glEvalCoord2d = error_glEvalCoord2d;
  tbl.glEvalCoord2dv = error_glEvalCoord2dv;
  tbl.glEvalCoord2f = error_glEvalCoord2f;
  tbl.glEvalCoord2fv = error_glEvalCoord2fv;
  tbl.glEvalMesh1 = error_glEvalMesh1;
  tbl.glEvalMesh2 = error_glEvalMesh2;
  tbl.glEvalPoint1 = error_glEvalPoint1;
  tbl.glEvalPoint2 = error_glEvalPoint2;
  tbl.glFeedbackBuffer = error_glFeedbackBuffer;
  tbl.glFinish = error_glFinish;
  tbl.glFlush = error_glFlush;
  tbl.glFogf = error_glFogf;
  tbl.glFogfv = error_glFogfv;
  tbl.glFogi = error_glFogi;
  tbl.glFogiv = error_glFogiv;
  tbl.glFrontFace = error_glFrontFace;
  tbl.glFrustum = error_glFrustum;
  tbl.glGenLists = error_glGenLists;
  tbl.glGetBooleanv = error_glGetBooleanv;
  tbl.glGetClipPlane = error_glGetClipPlane;
  tbl.glGetDoublev = error_glGetDoublev;
  tbl.glGetError = error_glGetError;
  tbl.glGetFloatv = error_glGetFloatv;
  tbl.glGetIntegerv = error_glGetIntegerv;
  tbl.glGetLightfv = error_glGetLightfv;
  tbl.glGetLightiv = error_glGetLightiv;
  tbl.glGetMapdv = error_glGetMapdv;
  tbl.glGetMapfv = error_glGetMapfv;
  tbl.glGetMapiv = error_glGetMapiv;
  tbl.glGetMaterialfv = error_glGetMaterialfv;
  tbl.glGetMaterialiv = error_glGetMaterialiv;
  tbl.glGetPixelMapfv = error_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = error_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = error_glGetPixelMapusv;
  tbl.glGetPolygonStipple = error_glGetPolygonStipple;
  tbl.glGetString = error_glGetString;
  tbl.glGetTexEnvfv = error_glGetTexEnvfv;
  tbl.glGetTexEnviv = error_glGetTexEnviv;
  tbl.glGetTexGendv = error_glGetTexGendv;
  tbl.glGetTexGenfv = error_glGetTexGenfv;
  tbl.glGetTexGeniv = error_glGetTexGeniv;
  tbl.glGetTexImage = error_glGetTexImage;
  tbl.glGetTexLevelParameterfv = error_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = error_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = error_glGetTexParameterfv;
  tbl.glGetTexParameteriv = error_glGetTexParameteriv;
  tbl.glHint = error_glHint;
  tbl.glIndexMask = error_glIndexMask;
  tbl.glIndexd = error_glIndexd;
  tbl.glIndexdv = error_glIndexdv;
  tbl.glIndexf = error_glIndexf;
  tbl.glIndexfv = error_glIndexfv;
  tbl.glIndexi = error_glIndexi;
  tbl.glIndexiv = error_glIndexiv;
  tbl.glIndexs = error_glIndexs;
  tbl.glIndexsv = error_glIndexsv;
  tbl.glInitNames = error_glInitNames;
  tbl.glIsEnabled = error_glIsEnabled;
  tbl.glIsList = error_glIsList;
  tbl.glLightModelf = error_glLightModelf;
  tbl.glLightModelfv = error_glLightModelfv;
  tbl.glLightModeli = error_glLightModeli;
  tbl.glLightModeliv = error_glLightModeliv;
  tbl.glLightf = error_glLightf;
  tbl.glLightfv = error_glLightfv;
  tbl.glLighti = error_glLighti;
  tbl.glLightiv = error_glLightiv;
  tbl.glLineStipple = error_glLineStipple;
  tbl.glLineWidth = error_glLineWidth;
  tbl.glListBase = error_glListBase;
  tbl.glLoadIdentity = error_glLoadIdentity;
  tbl.glLoadMatrixd = error_glLoadMatrixd;
  tbl.glLoadMatrixf = error_glLoadMatrixf;
  tbl.glLoadName = error_glLoadName;
  tbl.glLogicOp = error_glLogicOp;
  tbl.glMap1d = error_glMap1d;
  tbl.glMap1f = error_glMap1f;
  tbl.glMap2d = error_glMap2d;
  tbl.glMap2f = error_glMap2f;
  tbl.glMapGrid1d = error_glMapGrid1d;
  tbl.glMapGrid1f = error_glMapGrid1f;
  tbl.glMapGrid2d = error_glMapGrid2d;
  tbl.glMapGrid2f = error_glMapGrid2f;
  tbl.glMaterialf = error_glMaterialf;
  tbl.glMaterialfv = error_glMaterialfv;
  tbl.glMateriali = error_glMateriali;
  tbl.glMaterialiv = error_glMaterialiv;
  tbl.glMatrixMode = error_glMatrixMode;
  tbl.glMultMatrixd = error_glMultMatrixd;
  tbl.glMultMatrixf = error_glMultMatrixf;
  tbl.glNewList = error_glNewList;
  tbl.glNormal3b = error_glNormal3b;
  tbl.glNormal3bv = error_glNormal3bv;
  tbl.glNormal3d = error_glNormal3d;
  tbl.glNormal3dv = error_glNormal3dv;
  tbl.glNormal3f = error_glNormal3f;
  tbl.glNormal3fv = error_glNormal3fv;
  tbl.glNormal3i = error_glNormal3i;
  tbl.glNormal3iv = error_glNormal3iv;
  tbl.glNormal3s = error_glNormal3s;
  tbl.glNormal3sv = error_glNormal3sv;
  tbl.glOrtho = error_glOrtho;
  tbl.glPassThrough = error_glPassThrough;
  tbl.glPixelMapfv = error_glPixelMapfv;
  tbl.glPixelMapuiv = error_glPixelMapuiv;
  tbl.glPixelMapusv = error_glPixelMapusv;
  tbl.glPixelStoref = error_glPixelStoref;
  tbl.glPixelStorei = error_glPixelStorei;
  tbl.glPixelTransferf = error_glPixelTransferf;
  tbl.glPixelTransferi = error_glPixelTransferi;
  tbl.glPixelZoom = error_glPixelZoom;
  tbl.glPointSize = error_glPointSize;
  tbl.glPolygonMode = error_glPolygonMode;
  tbl.glPolygonStipple = error_glPolygonStipple;
  tbl.glPopAttrib = error_glPopAttrib;
  tbl.glPopMatrix = error_glPopMatrix;
  tbl.glPopName = error_glPopName;
  tbl.glPushAttrib = error_glPushAttrib;
  tbl.glPushMatrix = error_glPushMatrix;
  tbl.glPushName = error_glPushName;
  tbl.glRasterPos2d = error_glRasterPos2d;
  tbl.glRasterPos2dv = error_glRasterPos2dv;
  tbl.glRasterPos2f = error_glRasterPos2f;
  tbl.glRasterPos2fv = error_glRasterPos2fv;
  tbl.glRasterPos2i = error_glRasterPos2i;
  tbl.glRasterPos2iv = error_glRasterPos2iv;
  tbl.glRasterPos2s = error_glRasterPos2s;
  tbl.glRasterPos2sv = error_glRasterPos2sv;
  tbl.glRasterPos3d = error_glRasterPos3d;
  tbl.glRasterPos3dv = error_glRasterPos3dv;
  tbl.glRasterPos3f = error_glRasterPos3f;
  tbl.glRasterPos3fv = error_glRasterPos3fv;
  tbl.glRasterPos3i = error_glRasterPos3i;
  tbl.glRasterPos3iv = error_glRasterPos3iv;
  tbl.glRasterPos3s = error_glRasterPos3s;
  tbl.glRasterPos3sv = error_glRasterPos3sv;
  tbl.glRasterPos4d = error_glRasterPos4d;
  tbl.glRasterPos4dv = error_glRasterPos4dv;
  tbl.glRasterPos4f = error_glRasterPos4f;
  tbl.glRasterPos4fv = error_glRasterPos4fv;
  tbl.glRasterPos4i = error_glRasterPos4i;
  tbl.glRasterPos4iv = error_glRasterPos4iv;
  tbl.glRasterPos4s = error_glRasterPos4s;
  tbl.glRasterPos4sv = error_glRasterPos4sv;
  tbl.glReadBuffer = error_glReadBuffer;
  tbl.glReadPixels = error_glReadPixels;
  tbl.glRectd = error_glRectd;
  tbl.glRectdv = error_glRectdv;
  tbl.glRectf = error_glRectf;
  tbl.glRectfv = error_glRectfv;
  tbl.glRecti = error_glRecti;
  tbl.glRectiv = error_glRectiv;
  tbl.glRects = error_glRects;
  tbl.glRectsv = error_glRectsv;
  tbl.glRenderMode = error_glRenderMode;
  tbl.glRotated = error_glRotated;
  tbl.glRotatef = error_glRotatef;
  tbl.glScaled = error_glScaled;
  tbl.glScalef = error_glScalef;
  tbl.glScissor = error_glScissor;
  tbl.glSelectBuffer = error_glSelectBuffer;
  tbl.glShadeModel = error_glShadeModel;
  tbl.glStencilFunc = error_glStencilFunc;
  tbl.glStencilMask = error_glStencilMask;
  tbl.glStencilOp = error_glStencilOp;
  tbl.glTexCoord1d = error_glTexCoord1d;
  tbl.glTexCoord1dv = error_glTexCoord1dv;
  tbl.glTexCoord1f = error_glTexCoord1f;
  tbl.glTexCoord1fv = error_glTexCoord1fv;
  tbl.glTexCoord1i = error_glTexCoord1i;
  tbl.glTexCoord1iv = error_glTexCoord1iv;
  tbl.glTexCoord1s = error_glTexCoord1s;
  tbl.glTexCoord1sv = error_glTexCoord1sv;
  tbl.glTexCoord2d = error_glTexCoord2d;
  tbl.glTexCoord2dv = error_glTexCoord2dv;
  tbl.glTexCoord2f = error_glTexCoord2f;
  tbl.glTexCoord2fv = error_glTexCoord2fv;
  tbl.glTexCoord2i = error_glTexCoord2i;
  tbl.glTexCoord2iv = error_glTexCoord2iv;
  tbl.glTexCoord2s = error_glTexCoord2s;
  tbl.glTexCoord2sv = error_glTexCoord2sv;
  tbl.glTexCoord3d = error_glTexCoord3d;
  tbl.glTexCoord3dv = error_glTexCoord3dv;
  tbl.glTexCoord3f = error_glTexCoord3f;
  tbl.glTexCoord3fv = error_glTexCoord3fv;
  tbl.glTexCoord3i = error_glTexCoord3i;
  tbl.glTexCoord3iv = error_glTexCoord3iv;
  tbl.glTexCoord3s = error_glTexCoord3s;
  tbl.glTexCoord3sv = error_glTexCoord3sv;
  tbl.glTexCoord4d = error_glTexCoord4d;
  tbl.glTexCoord4dv = error_glTexCoord4dv;
  tbl.glTexCoord4f = error_glTexCoord4f;
  tbl.glTexCoord4fv = error_glTexCoord4fv;
  tbl.glTexCoord4i = error_glTexCoord4i;
  tbl.glTexCoord4iv = error_glTexCoord4iv;
  tbl.glTexCoord4s = error_glTexCoord4s;
  tbl.glTexCoord4sv = error_glTexCoord4sv;
  tbl.glTexEnvf = error_glTexEnvf;
  tbl.glTexEnvfv = error_glTexEnvfv;
  tbl.glTexEnvi = error_glTexEnvi;
  tbl.glTexEnviv = error_glTexEnviv;
  tbl.glTexGend = error_glTexGend;
  tbl.glTexGendv = error_glTexGendv;
  tbl.glTexGenf = error_glTexGenf;
  tbl.glTexGenfv = error_glTexGenfv;
  tbl.glTexGeni = error_glTexGeni;
  tbl.glTexGeniv = error_glTexGeniv;
  tbl.glTexImage1D = error_glTexImage1D;
  tbl.glTexImage2D = error_glTexImage2D;
  tbl.glTexParameterf = error_glTexParameterf;
  tbl.glTexParameterfv = error_glTexParameterfv;
  tbl.glTexParameteri = error_glTexParameteri;
  tbl.glTexParameteriv = error_glTexParameteriv;
  tbl.glTranslated = error_glTranslated;
  tbl.glTranslatef = error_glTranslatef;
  tbl.glVertex2d = error_glVertex2d;
  tbl.glVertex2dv = error_glVertex2dv;
  tbl.glVertex2f = error_glVertex2f;
  tbl.glVertex2fv = error_glVertex2fv;
  tbl.glVertex2i = error_glVertex2i;
  tbl.glVertex2iv = error_glVertex2iv;
  tbl.glVertex2s = error_glVertex2s;
  tbl.glVertex2sv = error_glVertex2sv;
  tbl.glVertex3d = error_glVertex3d;
  tbl.glVertex3dv = error_glVertex3dv;
  tbl.glVertex3f = error_glVertex3f;
  tbl.glVertex3fv = error_glVertex3fv;
  tbl.glVertex3i = error_glVertex3i;
  tbl.glVertex3iv = error_glVertex3iv;
  tbl.glVertex3s = error_glVertex3s;
  tbl.glVertex3sv = error_glVertex3sv;
  tbl.glVertex4d = error_glVertex4d;
  tbl.glVertex4dv = error_glVertex4dv;
  tbl.glVertex4f = error_glVertex4f;
  tbl.glVertex4fv = error_glVertex4fv;
  tbl.glVertex4i = error_glVertex4i;
  tbl.glVertex4iv = error_glVertex4iv;
  tbl.glVertex4s = error_glVertex4s;
  tbl.glVertex4sv = error_glVertex4sv;
  tbl.glViewport = error_glViewport;

  // GL_VERSION_1_1

  tbl.glAreTexturesResident = error_glAreTexturesResident;
  tbl.glArrayElement = error_glArrayElement;
  tbl.glBindTexture = error_glBindTexture;
  tbl.glColorPointer = error_glColorPointer;
  tbl.glCopyTexImage1D = error_glCopyTexImage1D;
  tbl.glCopyTexImage2D = error_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = error_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = error_glCopyTexSubImage2D;
  tbl.glDeleteTextures = error_glDeleteTextures;
  tbl.glDisableClientState = error_glDisableClientState;
  tbl.glDrawArrays = error_glDrawArrays;
  tbl.glDrawElements = error_glDrawElements;
  tbl.glEdgeFlagPointer = error_glEdgeFlagPointer;
  tbl.glEnableClientState = error_glEnableClientState;
  tbl.glGenTextures = error_glGenTextures;
  tbl.glGetPointerv = error_glGetPointerv;
  tbl.glIndexPointer = error_glIndexPointer;
  tbl.glIndexub = error_glIndexub;
  tbl.glIndexubv = error_glIndexubv;
  tbl.glInterleavedArrays = error_glInterleavedArrays;
  tbl.glIsTexture = error_glIsTexture;
  tbl.glNormalPointer = error_glNormalPointer;
  tbl.glPolygonOffset = error_glPolygonOffset;
  tbl.glPopClientAttrib = error_glPopClientAttrib;
  tbl.glPrioritizeTextures = error_glPrioritizeTextures;
  tbl.glPushClientAttrib = error_glPushClientAttrib;
  tbl.glTexCoordPointer = error_glTexCoordPointer;
  tbl.glTexSubImage1D = error_glTexSubImage1D;
  tbl.glTexSubImage2D = error_glTexSubImage2D;
  tbl.glVertexPointer = error_glVertexPointer;

  // GL_VERSION_1_2

  tbl.glBlendColor = error_glBlendColor;
  tbl.glBlendEquation = error_glBlendEquation;
  tbl.glCopyTexSubImage3D = error_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = error_glDrawRangeElements;
  tbl.glTexImage3D = error_glTexImage3D;
  tbl.glTexSubImage3D = error_glTexSubImage3D;

  // GL_VERSION_1_3

  tbl.glActiveTexture = error_glActiveTexture;
  tbl.glClientActiveTexture = error_glClientActiveTexture;
  tbl.glCompressedTexImage1D = error_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = error_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = error_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = error_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = error_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = error_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = error_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = error_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = error_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = error_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = error_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = error_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = error_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = error_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = error_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = error_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = error_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = error_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = error_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = error_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = error_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = error_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = error_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = error_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = error_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = error_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = error_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = error_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = error_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = error_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = error_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = error_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = error_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = error_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = error_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = error_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = error_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = error_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = error_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = error_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = error_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = error_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = error_glMultiTexCoord4sv;
  tbl.glSampleCoverage = error_glSampleCoverage;

  // GL_VERSION_1_4

  tbl.glBlendFuncSeparate = error_glBlendFuncSeparate;
  tbl.glFogCoordPointer = error_glFogCoordPointer;
  tbl.glFogCoordd = error_glFogCoordd;
  tbl.glFogCoorddv = error_glFogCoorddv;
  tbl.glFogCoordf = error_glFogCoordf;
  tbl.glFogCoordfv = error_glFogCoordfv;
  tbl.glMultiDrawArrays = error_glMultiDrawArrays;
  tbl.glMultiDrawElements = error_glMultiDrawElements;
  tbl.glPointParameterf = error_glPointParameterf;
  tbl.glPointParameterfv = error_glPointParameterfv;
  tbl.glPointParameteri = error_glPointParameteri;
  tbl.glPointParameteriv = error_glPointParameteriv;
  tbl.glSecondaryColor3b = error_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = error_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = error_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = error_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = error_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = error_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = error_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = error_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = error_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = error_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = error_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = error_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = error_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = error_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = error_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = error_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = error_glSecondaryColorPointer;
  tbl.glWindowPos2d = error_glWindowPos2d;
  tbl.glWindowPos2dv = error_glWindowPos2dv;
  tbl.glWindowPos2f = error_glWindowPos2f;
  tbl.glWindowPos2fv = error_glWindowPos2fv;
  tbl.glWindowPos2i = error_glWindowPos2i;
  tbl.glWindowPos2iv = error_glWindowPos2iv;
  tbl.glWindowPos2s = error_glWindowPos2s;
  tbl.glWindowPos2sv = error_glWindowPos2sv;
  tbl.glWindowPos3d = error_glWindowPos3d;
  tbl.glWindowPos3dv = error_glWindowPos3dv;
  tbl.glWindowPos3f = error_glWindowPos3f;
  tbl.glWindowPos3fv = error_glWindowPos3fv;
  tbl.glWindowPos3i = error_glWindowPos3i;
  tbl.glWindowPos3iv = error_glWindowPos3iv;
  tbl.glWindowPos3s = error_glWindowPos3s;
  tbl.glWindowPos3sv = error_glWindowPos3sv;

  // GL_VERSION_1_5

  tbl.glBeginQuery = error_glBeginQuery;
  tbl.glBindBuffer = error_glBindBuffer;
  tbl.glBufferData = error_glBufferData;
  tbl.glBufferSubData = error_glBufferSubData;
  tbl.glDeleteBuffers = error_glDeleteBuffers;
  tbl.glDeleteQueries = error_glDeleteQueries;
  tbl.glEndQuery = error_glEndQuery;
  tbl.glGenBuffers = error_glGenBuffers;
  tbl.glGenQueries = error_glGenQueries;
  tbl.glGetBufferParameteriv = error_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = error_glGetBufferPointerv;
  tbl.glGetBufferSubData = error_glGetBufferSubData;
  tbl.glGetQueryObjectiv = error_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = error_glGetQueryObjectuiv;
  tbl.glGetQueryiv = error_glGetQueryiv;
  tbl.glIsBuffer = error_glIsBuffer;
  tbl.glIsQuery = error_glIsQuery;
  tbl.glMapBuffer = error_glMapBuffer;
  tbl.glUnmapBuffer = error_glUnmapBuffer;

  // GL_VERSION_2_0

  tbl.glAttachShader = error_glAttachShader;
  tbl.glBindAttribLocation = error_glBindAttribLocation;
  tbl.glBlendEquationSeparate = error_glBlendEquationSeparate;
  tbl.glCompileShader = error_glCompileShader;
  tbl.glCreateProgram = error_glCreateProgram;
  tbl.glCreateShader = error_glCreateShader;
  tbl.glDeleteProgram = error_glDeleteProgram;
  tbl.glDeleteShader = error_glDeleteShader;
  tbl.glDetachShader = error_glDetachShader;
  tbl.glDisableVertexAttribArray = error_glDisableVertexAttribArray;
  tbl.glDrawBuffers = error_glDrawBuffers;
  tbl.glEnableVertexAttribArray = error_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = error_glGetActiveAttrib;
  tbl.glGetActiveUniform = error_glGetActiveUniform;
  tbl.glGetAttachedShaders = error_glGetAttachedShaders;
  tbl.glGetAttribLocation = error_glGetAttribLocation;
  tbl.glGetProgramInfoLog = error_glGetProgramInfoLog;
  tbl.glGetProgramiv = error_glGetProgramiv;
  tbl.glGetShaderInfoLog = error_glGetShaderInfoLog;
  tbl.glGetShaderSource = error_glGetShaderSource;
  tbl.glGetShaderiv = error_glGetShaderiv;
  tbl.glGetUniformLocation = error_glGetUniformLocation;
  tbl.glGetUniformfv = error_glGetUniformfv;
  tbl.glGetUniformiv = error_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = error_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = error_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = error_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = error_glGetVertexAttribiv;
  tbl.glIsProgram = error_glIsProgram;
  tbl.glIsShader = error_glIsShader;
  tbl.glLinkProgram = error_glLinkProgram;
  tbl.glShaderSource = error_glShaderSource;
  tbl.glStencilFuncSeparate = error_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = error_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = error_glStencilOpSeparate;
  tbl.glUniform1f = error_glUniform1f;
  tbl.glUniform1fv = error_glUniform1fv;
  tbl.glUniform1i = error_glUniform1i;
  tbl.glUniform1iv = error_glUniform1iv;
  tbl.glUniform2f = error_glUniform2f;
  tbl.glUniform2fv = error_glUniform2fv;
  tbl.glUniform2i = error_glUniform2i;
  tbl.glUniform2iv = error_glUniform2iv;
  tbl.glUniform3f = error_glUniform3f;
  tbl.glUniform3fv = error_glUniform3fv;
  tbl.glUniform3i = error_glUniform3i;
  tbl.glUniform3iv = error_glUniform3iv;
  tbl.glUniform4f = error_glUniform4f;
  tbl.glUniform4fv = error_glUniform4fv;
  tbl.glUniform4i = error_glUniform4i;
  tbl.glUniform4iv = error_glUniform4iv;
  tbl.glUniformMatrix2fv = error_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = error_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = error_glUniformMatrix4fv;
  tbl.glUseProgram = error_glUseProgram;
  tbl.glValidateProgram = error_glValidateProgram;
  tbl.glVertexAttrib1d = error_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = error_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = error_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = error_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = error_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = error_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = error_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = error_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = error_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = error_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = error_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = error_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = error_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = error_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = error_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = error_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = error_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = error_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = error_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = error_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = error_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = error_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = error_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = error_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = error_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = error_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = error_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = error_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = error_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = error_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = error_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = error_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = error_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = error_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = error_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = error_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = error_glVertexAttribPointer;

  // GL_VERSION_2_1

  tbl.glUniformMatrix2x3fv = error_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = error_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = error_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = error_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = error_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = error_glUniformMatrix4x3fv;

  // GL_VERSION_3_0

  tbl.glBeginConditionalRender = error_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = error_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = error_glBindFragDataLocation;
  tbl.glClampColor = error_glClampColor;
  tbl.glClearBufferfi = error_glClearBufferfi;
  tbl.glClearBufferfv = error_glClearBufferfv;
  tbl.glClearBufferiv = error_glClearBufferiv;
  tbl.glClearBufferuiv = error_glClearBufferuiv;
  tbl.glColorMaski = error_glColorMaski;
  tbl.glDisablei = error_glDisablei;
  tbl.glEnablei = error_glEnablei;
  tbl.glEndConditionalRender = error_glEndConditionalRender;
  tbl.glEndTransformFeedback = error_glEndTransformFeedback;
  tbl.glGetBooleani_v = error_glGetBooleani_v;
  tbl.glGetFragDataLocation = error_glGetFragDataLocation;
  tbl.glGetStringi = error_glGetStringi;
  tbl.glGetTexParameterIiv = error_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = error_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = error_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = error_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = error_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = error_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = error_glIsEnabledi;
  tbl.glTexParameterIiv = error_glTexParameterIiv;
  tbl.glTexParameterIuiv = error_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = error_glTransformFeedbackVaryings;
  tbl.glUniform1ui = error_glUniform1ui;
  tbl.glUniform1uiv = error_glUniform1uiv;
  tbl.glUniform2ui = error_glUniform2ui;
  tbl.glUniform2uiv = error_glUniform2uiv;
  tbl.glUniform3ui = error_glUniform3ui;
  tbl.glUniform3uiv = error_glUniform3uiv;
  tbl.glUniform4ui = error_glUniform4ui;
  tbl.glUniform4uiv = error_glUniform4uiv;
  tbl.glVertexAttribI1i = error_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = error_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = error_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = error_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = error_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = error_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = error_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = error_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = error_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = error_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = error_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = error_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = error_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = error_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = error_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = error_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = error_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = error_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = error_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = error_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = error_glVertexAttribIPointer;

  // GL_VERSION_3_1

  tbl.glDrawArraysInstanced = error_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = error_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = error_glPrimitiveRestartIndex;
  tbl.glTexBuffer = error_glTexBuffer;

  // GL_VERSION_3_2

  tbl.glFramebufferTexture = error_glFramebufferTexture;
  tbl.glFramebufferTextureFace = error_glFramebufferTextureFace;
  tbl.glGetBufferParameteri64v = error_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = error_glGetInteger64i_v;

  // GL_VERSION_3_3

  tbl.glVertexAttribDivisor = error_glVertexAttribDivisor;

  // GL_VERSION_4_0

  tbl.glBlendEquationSeparatei = error_glBlendEquationSeparatei;
  tbl.glBlendEquationi = error_glBlendEquationi;
  tbl.glBlendFuncSeparatei = error_glBlendFuncSeparatei;
  tbl.glBlendFunci = error_glBlendFunci;

  // GL_3DFX_tbuffer

  tbl.glTbufferMask3DFX = error_glTbufferMask3DFX;

  // GL_AMD_debug_output

  tbl.glDebugMessageCallbackAMD = error_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = error_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = error_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = error_glGetDebugMessageLogAMD;

  // GL_AMD_draw_buffers_blend

  tbl.glBlendEquationIndexedAMD = error_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = error_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = error_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = error_glBlendFuncSeparateIndexedAMD;

  // GL_AMD_interleaved_elements

  tbl.glVertexAttribParameteriAMD = error_glVertexAttribParameteriAMD;

  // GL_AMD_multi_draw_indirect

  tbl.glMultiDrawArraysIndirectAMD = error_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = error_glMultiDrawElementsIndirectAMD;

  // GL_AMD_name_gen_delete

  tbl.glDeleteNamesAMD = error_glDeleteNamesAMD;
  tbl.glGenNamesAMD = error_glGenNamesAMD;
  tbl.glIsNameAMD = error_glIsNameAMD;

  // GL_AMD_performance_monitor

  tbl.glBeginPerfMonitorAMD = error_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = error_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = error_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = error_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = error_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = error_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = error_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = error_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = error_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = error_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = error_glSelectPerfMonitorCountersAMD;

  // GL_AMD_sample_positions

  tbl.glSetMultisamplefvAMD = error_glSetMultisamplefvAMD;

  // GL_AMD_sparse_texture

  tbl.glTexStorageSparseAMD = error_glTexStorageSparseAMD;
  tbl.glTextureStorageSparseAMD = error_glTextureStorageSparseAMD;

  // GL_AMD_stencil_operation_extended

  tbl.glStencilOpValueAMD = error_glStencilOpValueAMD;

  // GL_AMD_vertex_shader_tessellator

  tbl.glTessellationFactorAMD = error_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = error_glTessellationModeAMD;

  // GL_ANGLE_framebuffer_blit

  tbl.glBlitFramebufferANGLE = error_glBlitFramebufferANGLE;

  // GL_ANGLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleANGLE = error_glRenderbufferStorageMultisampleANGLE;

  // GL_ANGLE_instanced_arrays

  tbl.glDrawArraysInstancedANGLE = error_glDrawArraysInstancedANGLE;
  tbl.glDrawElementsInstancedANGLE = error_glDrawElementsInstancedANGLE;
  tbl.glVertexAttribDivisorANGLE = error_glVertexAttribDivisorANGLE;

  // GL_ANGLE_timer_query

  tbl.glBeginQueryANGLE = error_glBeginQueryANGLE;
  tbl.glDeleteQueriesANGLE = error_glDeleteQueriesANGLE;
  tbl.glEndQueryANGLE = error_glEndQueryANGLE;
  tbl.glGenQueriesANGLE = error_glGenQueriesANGLE;
  tbl.glGetQueryObjecti64vANGLE = error_glGetQueryObjecti64vANGLE;
  tbl.glGetQueryObjectivANGLE = error_glGetQueryObjectivANGLE;
  tbl.glGetQueryObjectui64vANGLE = error_glGetQueryObjectui64vANGLE;
  tbl.glGetQueryObjectuivANGLE = error_glGetQueryObjectuivANGLE;
  tbl.glGetQueryivANGLE = error_glGetQueryivANGLE;
  tbl.glIsQueryANGLE = error_glIsQueryANGLE;
  tbl.glQueryCounterANGLE = error_glQueryCounterANGLE;

  // GL_ANGLE_translated_shader_source

  tbl.glGetTranslatedShaderSourceANGLE = error_glGetTranslatedShaderSourceANGLE;

  // GL_APPLE_copy_texture_levels

  tbl.glCopyTextureLevelsAPPLE = error_glCopyTextureLevelsAPPLE;

  // GL_APPLE_element_array

  tbl.glDrawElementArrayAPPLE = error_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = error_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = error_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = error_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = error_glMultiDrawRangeElementArrayAPPLE;

  // GL_APPLE_fence

  tbl.glDeleteFencesAPPLE = error_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = error_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = error_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = error_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = error_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = error_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = error_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = error_glTestObjectAPPLE;

  // GL_APPLE_flush_buffer_range

  tbl.glBufferParameteriAPPLE = error_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = error_glFlushMappedBufferRangeAPPLE;

  // GL_APPLE_flush_render

  tbl.glFinishRenderAPPLE = error_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = error_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = error_glSwapAPPLE;

  // GL_APPLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleAPPLE = error_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = error_glResolveMultisampleFramebufferAPPLE;

  // GL_APPLE_object_purgeable

  tbl.glGetObjectParameterivAPPLE = error_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = error_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = error_glObjectUnpurgeableAPPLE;

  // GL_APPLE_sync

  tbl.glClientWaitSyncAPPLE = error_glClientWaitSyncAPPLE;
  tbl.glDeleteSyncAPPLE = error_glDeleteSyncAPPLE;
  tbl.glFenceSyncAPPLE = error_glFenceSyncAPPLE;
  tbl.glGetInteger64vAPPLE = error_glGetInteger64vAPPLE;
  tbl.glGetSyncivAPPLE = error_glGetSyncivAPPLE;
  tbl.glIsSyncAPPLE = error_glIsSyncAPPLE;
  tbl.glWaitSyncAPPLE = error_glWaitSyncAPPLE;

  // GL_APPLE_texture_range

  tbl.glGetTexParameterPointervAPPLE = error_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = error_glTextureRangeAPPLE;

  // GL_APPLE_vertex_array_object

  tbl.glBindVertexArrayAPPLE = error_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = error_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = error_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = error_glIsVertexArrayAPPLE;

  // GL_APPLE_vertex_array_range

  tbl.glFlushVertexArrayRangeAPPLE = error_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = error_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = error_glVertexArrayRangeAPPLE;

  // GL_APPLE_vertex_program_evaluators

  tbl.glDisableVertexAttribAPPLE = error_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = error_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = error_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = error_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = error_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = error_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = error_glMapVertexAttrib2fAPPLE;

  // GL_ARB_ES2_compatibility

  tbl.glClearDepthf = error_glClearDepthf;
  tbl.glDepthRangef = error_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = error_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = error_glReleaseShaderCompiler;
  tbl.glShaderBinary = error_glShaderBinary;

  // GL_ARB_base_instance

  tbl.glDrawArraysInstancedBaseInstance = error_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = error_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = error_glDrawElementsInstancedBaseVertexBaseInstance;

  // GL_ARB_bindless_texture

  tbl.glGetImageHandleARB = error_glGetImageHandleARB;
  tbl.glGetTextureHandleARB = error_glGetTextureHandleARB;
  tbl.glGetTextureSamplerHandleARB = error_glGetTextureSamplerHandleARB;
  tbl.glGetVertexAttribLui64vARB = error_glGetVertexAttribLui64vARB;
  tbl.glIsImageHandleResidentARB = error_glIsImageHandleResidentARB;
  tbl.glIsTextureHandleResidentARB = error_glIsTextureHandleResidentARB;
  tbl.glMakeImageHandleNonResidentARB = error_glMakeImageHandleNonResidentARB;
  tbl.glMakeImageHandleResidentARB = error_glMakeImageHandleResidentARB;
  tbl.glMakeTextureHandleNonResidentARB = error_glMakeTextureHandleNonResidentARB;
  tbl.glMakeTextureHandleResidentARB = error_glMakeTextureHandleResidentARB;
  tbl.glProgramUniformHandleui64ARB = error_glProgramUniformHandleui64ARB;
  tbl.glProgramUniformHandleui64vARB = error_glProgramUniformHandleui64vARB;
  tbl.glUniformHandleui64ARB = error_glUniformHandleui64ARB;
  tbl.glUniformHandleui64vARB = error_glUniformHandleui64vARB;
  tbl.glVertexAttribL1ui64ARB = error_glVertexAttribL1ui64ARB;
  tbl.glVertexAttribL1ui64vARB = error_glVertexAttribL1ui64vARB;

  // GL_ARB_blend_func_extended

  tbl.glBindFragDataLocationIndexed = error_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = error_glGetFragDataIndex;

  // GL_ARB_buffer_storage

  tbl.glBufferStorage = error_glBufferStorage;
  tbl.glNamedBufferStorageEXT = error_glNamedBufferStorageEXT;

  // GL_ARB_cl_event

  tbl.glCreateSyncFromCLeventARB = error_glCreateSyncFromCLeventARB;

  // GL_ARB_clear_buffer_object

  tbl.glClearBufferData = error_glClearBufferData;
  tbl.glClearBufferSubData = error_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = error_glClearNamedBufferDataEXT;
  tbl.glClearNamedBufferSubDataEXT = error_glClearNamedBufferSubDataEXT;

  // GL_ARB_clear_texture

  tbl.glClearTexImage = error_glClearTexImage;
  tbl.glClearTexSubImage = error_glClearTexSubImage;

  // GL_ARB_color_buffer_float

  tbl.glClampColorARB = error_glClampColorARB;

  // GL_ARB_compute_shader

  tbl.glDispatchCompute = error_glDispatchCompute;
  tbl.glDispatchComputeIndirect = error_glDispatchComputeIndirect;

  // GL_ARB_compute_variable_group_size

  tbl.glDispatchComputeGroupSizeARB = error_glDispatchComputeGroupSizeARB;

  // GL_ARB_copy_buffer

  tbl.glCopyBufferSubData = error_glCopyBufferSubData;

  // GL_ARB_copy_image

  tbl.glCopyImageSubData = error_glCopyImageSubData;

  // GL_ARB_debug_output

  tbl.glDebugMessageCallbackARB = error_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = error_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = error_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = error_glGetDebugMessageLogARB;

  // GL_ARB_draw_buffers

  tbl.glDrawBuffersARB = error_glDrawBuffersARB;

  // GL_ARB_draw_buffers_blend

  tbl.glBlendEquationSeparateiARB = error_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = error_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = error_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = error_glBlendFunciARB;

  // GL_ARB_draw_elements_base_vertex

  tbl.glDrawElementsBaseVertex = error_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = error_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = error_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = error_glMultiDrawElementsBaseVertex;

  // GL_ARB_draw_indirect

  tbl.glDrawArraysIndirect = error_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = error_glDrawElementsIndirect;

  // GL_ARB_draw_instanced

  tbl.glDrawArraysInstancedARB = error_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = error_glDrawElementsInstancedARB;

  // GL_ARB_framebuffer_no_attachments

  tbl.glFramebufferParameteri = error_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = error_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = error_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = error_glNamedFramebufferParameteriEXT;

  // GL_ARB_framebuffer_object

  tbl.glBindFramebuffer = error_glBindFramebuffer;
  tbl.glBindRenderbuffer = error_glBindRenderbuffer;
  tbl.glBlitFramebuffer = error_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = error_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = error_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = error_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = error_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = error_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = error_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = error_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = error_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = error_glGenFramebuffers;
  tbl.glGenRenderbuffers = error_glGenRenderbuffers;
  tbl.glGenerateMipmap = error_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = error_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = error_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = error_glIsFramebuffer;
  tbl.glIsRenderbuffer = error_glIsRenderbuffer;
  tbl.glRenderbufferStorage = error_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = error_glRenderbufferStorageMultisample;

  // GL_ARB_geometry_shader4

  tbl.glFramebufferTextureARB = error_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = error_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = error_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = error_glProgramParameteriARB;

  // GL_ARB_get_program_binary

  tbl.glGetProgramBinary = error_glGetProgramBinary;
  tbl.glProgramBinary = error_glProgramBinary;
  tbl.glProgramParameteri = error_glProgramParameteri;

  // GL_ARB_gpu_shader_fp64

  tbl.glGetUniformdv = error_glGetUniformdv;
  tbl.glUniform1d = error_glUniform1d;
  tbl.glUniform1dv = error_glUniform1dv;
  tbl.glUniform2d = error_glUniform2d;
  tbl.glUniform2dv = error_glUniform2dv;
  tbl.glUniform3d = error_glUniform3d;
  tbl.glUniform3dv = error_glUniform3dv;
  tbl.glUniform4d = error_glUniform4d;
  tbl.glUniform4dv = error_glUniform4dv;
  tbl.glUniformMatrix2dv = error_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = error_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = error_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = error_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = error_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = error_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = error_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = error_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = error_glUniformMatrix4x3dv;

  // GL_ARB_imaging

  tbl.glColorSubTable = error_glColorSubTable;
  tbl.glColorTable = error_glColorTable;
  tbl.glColorTableParameterfv = error_glColorTableParameterfv;
  tbl.glColorTableParameteriv = error_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = error_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = error_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = error_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = error_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = error_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = error_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = error_glCopyColorSubTable;
  tbl.glCopyColorTable = error_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = error_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = error_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = error_glGetColorTable;
  tbl.glGetColorTableParameterfv = error_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = error_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = error_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = error_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = error_glGetConvolutionParameteriv;
  tbl.glGetHistogram = error_glGetHistogram;
  tbl.glGetHistogramParameterfv = error_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = error_glGetHistogramParameteriv;
  tbl.glGetMinmax = error_glGetMinmax;
  tbl.glGetMinmaxParameterfv = error_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = error_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = error_glGetSeparableFilter;
  tbl.glHistogram = error_glHistogram;
  tbl.glMinmax = error_glMinmax;
  tbl.glResetHistogram = error_glResetHistogram;
  tbl.glResetMinmax = error_glResetMinmax;
  tbl.glSeparableFilter2D = error_glSeparableFilter2D;

  // GL_ARB_indirect_parameters

  tbl.glMultiDrawArraysIndirectCountARB = error_glMultiDrawArraysIndirectCountARB;
  tbl.glMultiDrawElementsIndirectCountARB = error_glMultiDrawElementsIndirectCountARB;

  // GL_ARB_instanced_arrays

  tbl.glVertexAttribDivisorARB = error_glVertexAttribDivisorARB;

  // GL_ARB_internalformat_query

  tbl.glGetInternalformativ = error_glGetInternalformativ;

  // GL_ARB_internalformat_query2

  tbl.glGetInternalformati64v = error_glGetInternalformati64v;

  // GL_ARB_invalidate_subdata

  tbl.glInvalidateBufferData = error_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = error_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = error_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = error_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = error_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = error_glInvalidateTexSubImage;

  // GL_ARB_map_buffer_range

  tbl.glFlushMappedBufferRange = error_glFlushMappedBufferRange;
  tbl.glMapBufferRange = error_glMapBufferRange;

  // GL_ARB_matrix_palette

  tbl.glCurrentPaletteMatrixARB = error_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = error_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = error_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = error_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = error_glMatrixIndexusvARB;

  // GL_ARB_multi_bind

  tbl.glBindBuffersBase = error_glBindBuffersBase;
  tbl.glBindBuffersRange = error_glBindBuffersRange;
  tbl.glBindImageTextures = error_glBindImageTextures;
  tbl.glBindSamplers = error_glBindSamplers;
  tbl.glBindTextures = error_glBindTextures;
  tbl.glBindVertexBuffers = error_glBindVertexBuffers;

  // GL_ARB_multi_draw_indirect

  tbl.glMultiDrawArraysIndirect = error_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = error_glMultiDrawElementsIndirect;

  // GL_ARB_multisample

  tbl.glSampleCoverageARB = error_glSampleCoverageARB;

  // GL_ARB_multitexture

  tbl.glActiveTextureARB = error_glActiveTextureARB;
  tbl.glClientActiveTextureARB = error_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = error_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = error_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = error_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = error_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = error_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = error_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = error_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = error_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = error_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = error_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = error_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = error_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = error_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = error_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = error_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = error_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = error_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = error_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = error_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = error_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = error_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = error_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = error_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = error_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = error_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = error_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = error_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = error_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = error_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = error_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = error_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = error_glMultiTexCoord4svARB;

  // GL_ARB_occlusion_query

  tbl.glBeginQueryARB = error_glBeginQueryARB;
  tbl.glDeleteQueriesARB = error_glDeleteQueriesARB;
  tbl.glEndQueryARB = error_glEndQueryARB;
  tbl.glGenQueriesARB = error_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = error_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = error_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = error_glGetQueryivARB;
  tbl.glIsQueryARB = error_glIsQueryARB;

  // GL_ARB_point_parameters

  tbl.glPointParameterfARB = error_glPointParameterfARB;
  tbl.glPointParameterfvARB = error_glPointParameterfvARB;

  // GL_ARB_program_interface_query

  tbl.glGetProgramInterfaceiv = error_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = error_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = error_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = error_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = error_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = error_glGetProgramResourceiv;

  // GL_ARB_provoking_vertex

  tbl.glProvokingVertex = error_glProvokingVertex;

  // GL_ARB_robustness

  tbl.glGetGraphicsResetStatusARB = error_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = error_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = error_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = error_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = error_glGetnHistogramARB;
  tbl.glGetnMapdvARB = error_glGetnMapdvARB;
  tbl.glGetnMapfvARB = error_glGetnMapfvARB;
  tbl.glGetnMapivARB = error_glGetnMapivARB;
  tbl.glGetnMinmaxARB = error_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = error_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = error_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = error_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = error_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = error_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = error_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = error_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = error_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = error_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = error_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = error_glReadnPixelsARB;

  // GL_ARB_sample_shading

  tbl.glMinSampleShading = error_glMinSampleShading;
  tbl.glMinSampleShadingARB = error_glMinSampleShadingARB;

  // GL_ARB_sampler_objects

  tbl.glBindSampler = error_glBindSampler;
  tbl.glDeleteSamplers = error_glDeleteSamplers;
  tbl.glGenSamplers = error_glGenSamplers;
  tbl.glGetSamplerParameterIiv = error_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = error_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = error_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = error_glGetSamplerParameteriv;
  tbl.glIsSampler = error_glIsSampler;
  tbl.glSamplerParameterIiv = error_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = error_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = error_glSamplerParameterf;
  tbl.glSamplerParameterfv = error_glSamplerParameterfv;
  tbl.glSamplerParameteri = error_glSamplerParameteri;
  tbl.glSamplerParameteriv = error_glSamplerParameteriv;

  // GL_ARB_separate_shader_objects

  tbl.glActiveShaderProgram = error_glActiveShaderProgram;
  tbl.glBindProgramPipeline = error_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = error_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = error_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = error_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = error_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = error_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = error_glIsProgramPipeline;
  tbl.glProgramUniform1d = error_glProgramUniform1d;
  tbl.glProgramUniform1dv = error_glProgramUniform1dv;
  tbl.glProgramUniform1f = error_glProgramUniform1f;
  tbl.glProgramUniform1fv = error_glProgramUniform1fv;
  tbl.glProgramUniform1i = error_glProgramUniform1i;
  tbl.glProgramUniform1iv = error_glProgramUniform1iv;
  tbl.glProgramUniform1ui = error_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = error_glProgramUniform1uiv;
  tbl.glProgramUniform2d = error_glProgramUniform2d;
  tbl.glProgramUniform2dv = error_glProgramUniform2dv;
  tbl.glProgramUniform2f = error_glProgramUniform2f;
  tbl.glProgramUniform2fv = error_glProgramUniform2fv;
  tbl.glProgramUniform2i = error_glProgramUniform2i;
  tbl.glProgramUniform2iv = error_glProgramUniform2iv;
  tbl.glProgramUniform2ui = error_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = error_glProgramUniform2uiv;
  tbl.glProgramUniform3d = error_glProgramUniform3d;
  tbl.glProgramUniform3dv = error_glProgramUniform3dv;
  tbl.glProgramUniform3f = error_glProgramUniform3f;
  tbl.glProgramUniform3fv = error_glProgramUniform3fv;
  tbl.glProgramUniform3i = error_glProgramUniform3i;
  tbl.glProgramUniform3iv = error_glProgramUniform3iv;
  tbl.glProgramUniform3ui = error_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = error_glProgramUniform3uiv;
  tbl.glProgramUniform4d = error_glProgramUniform4d;
  tbl.glProgramUniform4dv = error_glProgramUniform4dv;
  tbl.glProgramUniform4f = error_glProgramUniform4f;
  tbl.glProgramUniform4fv = error_glProgramUniform4fv;
  tbl.glProgramUniform4i = error_glProgramUniform4i;
  tbl.glProgramUniform4iv = error_glProgramUniform4iv;
  tbl.glProgramUniform4ui = error_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = error_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = error_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = error_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = error_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = error_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = error_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = error_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = error_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = error_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = error_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = error_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = error_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = error_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = error_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = error_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = error_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = error_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = error_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = error_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = error_glUseProgramStages;
  tbl.glValidateProgramPipeline = error_glValidateProgramPipeline;

  // GL_ARB_shader_atomic_counters

  tbl.glGetActiveAtomicCounterBufferiv = error_glGetActiveAtomicCounterBufferiv;

  // GL_ARB_shader_image_load_store

  tbl.glBindImageTexture = error_glBindImageTexture;
  tbl.glMemoryBarrier = error_glMemoryBarrier;

  // GL_ARB_shader_objects

  tbl.glAttachObjectARB = error_glAttachObjectARB;
  tbl.glCompileShaderARB = error_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = error_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = error_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = error_glDeleteObjectARB;
  tbl.glDetachObjectARB = error_glDetachObjectARB;
  tbl.glGetActiveUniformARB = error_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = error_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = error_glGetHandleARB;
  tbl.glGetInfoLogARB = error_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = error_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = error_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = error_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = error_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = error_glGetUniformfvARB;
  tbl.glGetUniformivARB = error_glGetUniformivARB;
  tbl.glLinkProgramARB = error_glLinkProgramARB;
  tbl.glShaderSourceARB = error_glShaderSourceARB;
  tbl.glUniform1fARB = error_glUniform1fARB;
  tbl.glUniform1fvARB = error_glUniform1fvARB;
  tbl.glUniform1iARB = error_glUniform1iARB;
  tbl.glUniform1ivARB = error_glUniform1ivARB;
  tbl.glUniform2fARB = error_glUniform2fARB;
  tbl.glUniform2fvARB = error_glUniform2fvARB;
  tbl.glUniform2iARB = error_glUniform2iARB;
  tbl.glUniform2ivARB = error_glUniform2ivARB;
  tbl.glUniform3fARB = error_glUniform3fARB;
  tbl.glUniform3fvARB = error_glUniform3fvARB;
  tbl.glUniform3iARB = error_glUniform3iARB;
  tbl.glUniform3ivARB = error_glUniform3ivARB;
  tbl.glUniform4fARB = error_glUniform4fARB;
  tbl.glUniform4fvARB = error_glUniform4fvARB;
  tbl.glUniform4iARB = error_glUniform4iARB;
  tbl.glUniform4ivARB = error_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = error_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = error_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = error_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = error_glUseProgramObjectARB;
  tbl.glValidateProgramARB = error_glValidateProgramARB;

  // GL_ARB_shader_storage_buffer_object

  tbl.glShaderStorageBlockBinding = error_glShaderStorageBlockBinding;

  // GL_ARB_shader_subroutine

  tbl.glGetActiveSubroutineName = error_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = error_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = error_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = error_glGetProgramStageiv;
  tbl.glGetProgramSubroutineParameteruivNV = error_glGetProgramSubroutineParameteruivNV;
  tbl.glGetSubroutineIndex = error_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = error_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = error_glGetUniformSubroutineuiv;
  tbl.glProgramSubroutineParametersuivNV = error_glProgramSubroutineParametersuivNV;
  tbl.glUniformSubroutinesuiv = error_glUniformSubroutinesuiv;

  // GL_ARB_shading_language_include

  tbl.glCompileShaderIncludeARB = error_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = error_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = error_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = error_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = error_glIsNamedStringARB;
  tbl.glNamedStringARB = error_glNamedStringARB;

  // GL_ARB_sparse_texture

  tbl.glTexPageCommitmentARB = error_glTexPageCommitmentARB;
  tbl.glTexturePageCommitmentEXT = error_glTexturePageCommitmentEXT;

  // GL_ARB_sync

  tbl.glClientWaitSync = error_glClientWaitSync;
  tbl.glDeleteSync = error_glDeleteSync;
  tbl.glFenceSync = error_glFenceSync;
  tbl.glGetInteger64v = error_glGetInteger64v;
  tbl.glGetSynciv = error_glGetSynciv;
  tbl.glIsSync = error_glIsSync;
  tbl.glWaitSync = error_glWaitSync;

  // GL_ARB_tessellation_shader

  tbl.glPatchParameterfv = error_glPatchParameterfv;
  tbl.glPatchParameteri = error_glPatchParameteri;

  // GL_ARB_texture_buffer_object

  tbl.glTexBufferARB = error_glTexBufferARB;

  // GL_ARB_texture_buffer_range

  tbl.glTexBufferRange = error_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = error_glTextureBufferRangeEXT;

  // GL_ARB_texture_compression

  tbl.glCompressedTexImage1DARB = error_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = error_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = error_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = error_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = error_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = error_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = error_glGetCompressedTexImageARB;

  // GL_ARB_texture_multisample

  tbl.glGetMultisamplefv = error_glGetMultisamplefv;
  tbl.glSampleMaski = error_glSampleMaski;
  tbl.glTexImage2DMultisample = error_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = error_glTexImage3DMultisample;

  // GL_ARB_texture_storage

  tbl.glTexStorage1D = error_glTexStorage1D;
  tbl.glTexStorage2D = error_glTexStorage2D;
  tbl.glTexStorage3D = error_glTexStorage3D;
  tbl.glTextureStorage1DEXT = error_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = error_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = error_glTextureStorage3DEXT;

  // GL_ARB_texture_storage_multisample

  tbl.glTexStorage2DMultisample = error_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = error_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = error_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = error_glTextureStorage3DMultisampleEXT;

  // GL_ARB_texture_view

  tbl.glTextureView = error_glTextureView;

  // GL_ARB_timer_query

  tbl.glGetQueryObjecti64v = error_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = error_glGetQueryObjectui64v;
  tbl.glQueryCounter = error_glQueryCounter;

  // GL_ARB_transform_feedback2

  tbl.glBindTransformFeedback = error_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = error_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = error_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = error_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = error_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = error_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = error_glResumeTransformFeedback;

  // GL_ARB_transform_feedback3

  tbl.glBeginQueryIndexed = error_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = error_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = error_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = error_glGetQueryIndexediv;

  // GL_ARB_transform_feedback_instanced

  tbl.glDrawTransformFeedbackInstanced = error_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = error_glDrawTransformFeedbackStreamInstanced;

  // GL_ARB_transpose_matrix

  tbl.glLoadTransposeMatrixdARB = error_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = error_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = error_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = error_glMultTransposeMatrixfARB;

  // GL_ARB_uniform_buffer_object

  tbl.glBindBufferBase = error_glBindBufferBase;
  tbl.glBindBufferRange = error_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = error_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = error_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = error_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = error_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = error_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = error_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = error_glGetUniformIndices;
  tbl.glUniformBlockBinding = error_glUniformBlockBinding;

  // GL_ARB_vertex_array_object

  tbl.glBindVertexArray = error_glBindVertexArray;
  tbl.glDeleteVertexArrays = error_glDeleteVertexArrays;
  tbl.glGenVertexArrays = error_glGenVertexArrays;
  tbl.glIsVertexArray = error_glIsVertexArray;

  // GL_ARB_vertex_attrib_64bit

  tbl.glGetVertexAttribLdv = error_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = error_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = error_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = error_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = error_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = error_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = error_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = error_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = error_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = error_glVertexAttribLPointer;

  // GL_ARB_vertex_attrib_binding

  tbl.glBindVertexBuffer = error_glBindVertexBuffer;
  tbl.glVertexArrayBindVertexBufferEXT = error_glVertexArrayBindVertexBufferEXT;
  tbl.glVertexArrayVertexAttribBindingEXT = error_glVertexArrayVertexAttribBindingEXT;
  tbl.glVertexArrayVertexAttribFormatEXT = error_glVertexArrayVertexAttribFormatEXT;
  tbl.glVertexArrayVertexAttribIFormatEXT = error_glVertexArrayVertexAttribIFormatEXT;
  tbl.glVertexArrayVertexAttribLFormatEXT = error_glVertexArrayVertexAttribLFormatEXT;
  tbl.glVertexArrayVertexBindingDivisorEXT = error_glVertexArrayVertexBindingDivisorEXT;
  tbl.glVertexAttribBinding = error_glVertexAttribBinding;
  tbl.glVertexAttribFormat = error_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = error_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = error_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = error_glVertexBindingDivisor;

  // GL_ARB_vertex_blend

  tbl.glVertexBlendARB = error_glVertexBlendARB;
  tbl.glWeightPointerARB = error_glWeightPointerARB;
  tbl.glWeightbvARB = error_glWeightbvARB;
  tbl.glWeightdvARB = error_glWeightdvARB;
  tbl.glWeightfvARB = error_glWeightfvARB;
  tbl.glWeightivARB = error_glWeightivARB;
  tbl.glWeightsvARB = error_glWeightsvARB;
  tbl.glWeightubvARB = error_glWeightubvARB;
  tbl.glWeightuivARB = error_glWeightuivARB;
  tbl.glWeightusvARB = error_glWeightusvARB;

  // GL_ARB_vertex_buffer_object

  tbl.glBindBufferARB = error_glBindBufferARB;
  tbl.glBufferDataARB = error_glBufferDataARB;
  tbl.glBufferSubDataARB = error_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = error_glDeleteBuffersARB;
  tbl.glGenBuffersARB = error_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = error_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = error_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = error_glGetBufferSubDataARB;
  tbl.glIsBufferARB = error_glIsBufferARB;
  tbl.glMapBufferARB = error_glMapBufferARB;
  tbl.glUnmapBufferARB = error_glUnmapBufferARB;

  // GL_ARB_vertex_program

  tbl.glBindProgramARB = error_glBindProgramARB;
  tbl.glDeleteProgramsARB = error_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = error_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = error_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = error_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = error_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = error_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = error_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = error_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = error_glGetProgramStringARB;
  tbl.glGetProgramivARB = error_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = error_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = error_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = error_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = error_glGetVertexAttribivARB;
  tbl.glIsProgramARB = error_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = error_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = error_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = error_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = error_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = error_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = error_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = error_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = error_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = error_glProgramStringARB;
  tbl.glVertexAttrib1dARB = error_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = error_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = error_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = error_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = error_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = error_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = error_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = error_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = error_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = error_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = error_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = error_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = error_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = error_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = error_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = error_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = error_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = error_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = error_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = error_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = error_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = error_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = error_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = error_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = error_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = error_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = error_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = error_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = error_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = error_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = error_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = error_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = error_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = error_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = error_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = error_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = error_glVertexAttribPointerARB;

  // GL_ARB_vertex_shader

  tbl.glBindAttribLocationARB = error_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = error_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = error_glGetAttribLocationARB;

  // GL_ARB_vertex_type_2_10_10_10_rev

  tbl.glColorP3ui = error_glColorP3ui;
  tbl.glColorP3uiv = error_glColorP3uiv;
  tbl.glColorP4ui = error_glColorP4ui;
  tbl.glColorP4uiv = error_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = error_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = error_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = error_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = error_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = error_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = error_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = error_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = error_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = error_glNormalP3ui;
  tbl.glNormalP3uiv = error_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = error_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = error_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = error_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = error_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = error_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = error_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = error_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = error_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = error_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = error_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = error_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = error_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = error_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = error_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = error_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = error_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = error_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = error_glVertexAttribP4uiv;
  tbl.glVertexP2ui = error_glVertexP2ui;
  tbl.glVertexP2uiv = error_glVertexP2uiv;
  tbl.glVertexP3ui = error_glVertexP3ui;
  tbl.glVertexP3uiv = error_glVertexP3uiv;
  tbl.glVertexP4ui = error_glVertexP4ui;
  tbl.glVertexP4uiv = error_glVertexP4uiv;

  // GL_ARB_viewport_array

  tbl.glDepthRangeArrayv = error_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = error_glDepthRangeIndexed;
  tbl.glGetDoublei_v = error_glGetDoublei_v;
  tbl.glGetFloati_v = error_glGetFloati_v;
  tbl.glScissorArrayv = error_glScissorArrayv;
  tbl.glScissorIndexed = error_glScissorIndexed;
  tbl.glScissorIndexedv = error_glScissorIndexedv;
  tbl.glViewportArrayv = error_glViewportArrayv;
  tbl.glViewportIndexedf = error_glViewportIndexedf;
  tbl.glViewportIndexedfv = error_glViewportIndexedfv;

  // GL_ARB_window_pos

  tbl.glWindowPos2dARB = error_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = error_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = error_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = error_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = error_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = error_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = error_glWindowPos2sARB;
  tbl.glWindowPos2svARB = error_glWindowPos2svARB;
  tbl.glWindowPos3dARB = error_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = error_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = error_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = error_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = error_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = error_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = error_glWindowPos3sARB;
  tbl.glWindowPos3svARB = error_glWindowPos3svARB;

  // GL_ATI_draw_buffers

  tbl.glDrawBuffersATI = error_glDrawBuffersATI;

  // GL_ATI_element_array

  tbl.glDrawElementArrayATI = error_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = error_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = error_glElementPointerATI;

  // GL_ATI_envmap_bumpmap

  tbl.glGetTexBumpParameterfvATI = error_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = error_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = error_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = error_glTexBumpParameterivATI;

  // GL_ATI_fragment_shader

  tbl.glAlphaFragmentOp1ATI = error_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = error_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = error_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = error_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = error_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = error_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = error_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = error_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = error_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = error_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = error_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = error_glPassTexCoordATI;
  tbl.glSampleMapATI = error_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = error_glSetFragmentShaderConstantATI;

  // GL_ATI_map_object_buffer

  tbl.glMapObjectBufferATI = error_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = error_glUnmapObjectBufferATI;

  // GL_ATI_pn_triangles

  tbl.glPNTrianglesfATI = error_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = error_glPNTrianglesiATI;

  // GL_ATI_separate_stencil

  tbl.glStencilFuncSeparateATI = error_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = error_glStencilOpSeparateATI;

  // GL_ATI_vertex_array_object

  tbl.glArrayObjectATI = error_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = error_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = error_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = error_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = error_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = error_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = error_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = error_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = error_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = error_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = error_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = error_glVariantArrayObjectATI;

  // GL_ATI_vertex_attrib_array_object

  tbl.glGetVertexAttribArrayObjectfvATI = error_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = error_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = error_glVertexAttribArrayObjectATI;

  // GL_ATI_vertex_streams

  tbl.glClientActiveVertexStreamATI = error_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = error_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = error_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = error_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = error_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = error_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = error_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = error_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = error_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = error_glNormalStream3sATI;
  tbl.glNormalStream3svATI = error_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = error_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = error_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = error_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = error_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = error_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = error_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = error_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = error_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = error_glVertexStream1sATI;
  tbl.glVertexStream1svATI = error_glVertexStream1svATI;
  tbl.glVertexStream2dATI = error_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = error_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = error_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = error_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = error_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = error_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = error_glVertexStream2sATI;
  tbl.glVertexStream2svATI = error_glVertexStream2svATI;
  tbl.glVertexStream3dATI = error_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = error_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = error_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = error_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = error_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = error_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = error_glVertexStream3sATI;
  tbl.glVertexStream3svATI = error_glVertexStream3svATI;
  tbl.glVertexStream4dATI = error_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = error_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = error_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = error_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = error_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = error_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = error_glVertexStream4sATI;
  tbl.glVertexStream4svATI = error_glVertexStream4svATI;

  // GL_EXT_bindable_uniform

  tbl.glGetUniformBufferSizeEXT = error_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = error_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = error_glUniformBufferEXT;

  // GL_EXT_blend_color

  tbl.glBlendColorEXT = error_glBlendColorEXT;

  // GL_EXT_blend_equation_separate

  tbl.glBlendEquationSeparateEXT = error_glBlendEquationSeparateEXT;

  // GL_EXT_blend_func_separate

  tbl.glBlendFuncSeparateEXT = error_glBlendFuncSeparateEXT;

  // GL_EXT_blend_minmax

  tbl.glBlendEquationEXT = error_glBlendEquationEXT;

  // GL_EXT_color_subtable

  tbl.glColorSubTableEXT = error_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = error_glCopyColorSubTableEXT;

  // GL_EXT_compiled_vertex_array

  tbl.glLockArraysEXT = error_glLockArraysEXT;
  tbl.glUnlockArraysEXT = error_glUnlockArraysEXT;

  // GL_EXT_convolution

  tbl.glConvolutionFilter1DEXT = error_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = error_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = error_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = error_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = error_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = error_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = error_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = error_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = error_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = error_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = error_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = error_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = error_glSeparableFilter2DEXT;

  // GL_EXT_coordinate_frame

  tbl.glBinormal3bEXT = error_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = error_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = error_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = error_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = error_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = error_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = error_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = error_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = error_glBinormal3sEXT;
  tbl.glBinormal3svEXT = error_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = error_glBinormalPointerEXT;
  tbl.glTangent3bEXT = error_glTangent3bEXT;
  tbl.glTangent3bvEXT = error_glTangent3bvEXT;
  tbl.glTangent3dEXT = error_glTangent3dEXT;
  tbl.glTangent3dvEXT = error_glTangent3dvEXT;
  tbl.glTangent3fEXT = error_glTangent3fEXT;
  tbl.glTangent3fvEXT = error_glTangent3fvEXT;
  tbl.glTangent3iEXT = error_glTangent3iEXT;
  tbl.glTangent3ivEXT = error_glTangent3ivEXT;
  tbl.glTangent3sEXT = error_glTangent3sEXT;
  tbl.glTangent3svEXT = error_glTangent3svEXT;
  tbl.glTangentPointerEXT = error_glTangentPointerEXT;

  // GL_EXT_copy_texture

  tbl.glCopyTexImage1DEXT = error_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = error_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = error_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = error_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = error_glCopyTexSubImage3DEXT;

  // GL_EXT_cull_vertex

  tbl.glCullParameterdvEXT = error_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = error_glCullParameterfvEXT;

  // GL_EXT_debug_label

  tbl.glGetObjectLabelEXT = error_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = error_glLabelObjectEXT;

  // GL_EXT_debug_marker

  tbl.glInsertEventMarkerEXT = error_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = error_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = error_glPushGroupMarkerEXT;

  // GL_EXT_depth_bounds_test

  tbl.glDepthBoundsEXT = error_glDepthBoundsEXT;

  // GL_EXT_direct_state_access

  tbl.glBindMultiTextureEXT = error_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = error_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = error_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = error_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = error_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = error_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = error_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = error_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = error_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = error_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = error_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = error_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = error_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = error_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = error_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = error_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = error_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = error_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = error_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = error_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = error_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = error_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = error_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = error_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = error_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = error_glDisableClientStateIndexedEXT;
  tbl.glDisableClientStateiEXT = error_glDisableClientStateiEXT;
  tbl.glDisableVertexArrayAttribEXT = error_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = error_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = error_glEnableClientStateIndexedEXT;
  tbl.glEnableClientStateiEXT = error_glEnableClientStateiEXT;
  tbl.glEnableVertexArrayAttribEXT = error_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = error_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = error_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = error_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = error_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = error_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = error_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = error_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = error_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = error_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = error_glGetDoubleIndexedvEXT;
  tbl.glGetDoublei_vEXT = error_glGetDoublei_vEXT;
  tbl.glGetFloatIndexedvEXT = error_glGetFloatIndexedvEXT;
  tbl.glGetFloati_vEXT = error_glGetFloati_vEXT;
  tbl.glGetFramebufferParameterivEXT = error_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = error_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = error_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = error_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = error_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = error_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = error_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = error_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = error_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = error_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = error_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = error_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = error_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = error_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = error_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = error_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = error_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = error_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = error_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = error_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = error_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = error_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = error_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = error_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = error_glGetPointerIndexedvEXT;
  tbl.glGetPointeri_vEXT = error_glGetPointeri_vEXT;
  tbl.glGetTextureImageEXT = error_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = error_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = error_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = error_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = error_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = error_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = error_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = error_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = error_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = error_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = error_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = error_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = error_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = error_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = error_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = error_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = error_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = error_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = error_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = error_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = error_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = error_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = error_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = error_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = error_glMatrixPopEXT;
  tbl.glMatrixPushEXT = error_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = error_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = error_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = error_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = error_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = error_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = error_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = error_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = error_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = error_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = error_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = error_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = error_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = error_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = error_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = error_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = error_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = error_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = error_glMultiTexGenivEXT;
  tbl.glMultiTexImage1DEXT = error_glMultiTexImage1DEXT;
  tbl.glMultiTexImage2DEXT = error_glMultiTexImage2DEXT;
  tbl.glMultiTexImage3DEXT = error_glMultiTexImage3DEXT;
  tbl.glMultiTexParameterIivEXT = error_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = error_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = error_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = error_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = error_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = error_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = error_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = error_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = error_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = error_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = error_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = error_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = error_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = error_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = error_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = error_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = error_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = error_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = error_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = error_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = error_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = error_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = error_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = error_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = error_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = error_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = error_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = error_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = error_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = error_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = error_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = error_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = error_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = error_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = error_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = error_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = error_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = error_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = error_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = error_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = error_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = error_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = error_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = error_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = error_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = error_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = error_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = error_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = error_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = error_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = error_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = error_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = error_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = error_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = error_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = error_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = error_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = error_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = error_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = error_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = error_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = error_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = error_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = error_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = error_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = error_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = error_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = error_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = error_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = error_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = error_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = error_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = error_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = error_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = error_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = error_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = error_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = error_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = error_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = error_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = error_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = error_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = error_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = error_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = error_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = error_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = error_glTextureBufferEXT;
  tbl.glTextureImage1DEXT = error_glTextureImage1DEXT;
  tbl.glTextureImage2DEXT = error_glTextureImage2DEXT;
  tbl.glTextureImage3DEXT = error_glTextureImage3DEXT;
  tbl.glTextureParameterIivEXT = error_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = error_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = error_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = error_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = error_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = error_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = error_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = error_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = error_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = error_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = error_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = error_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = error_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = error_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = error_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = error_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = error_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = error_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = error_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = error_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = error_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = error_glVertexArrayVertexOffsetEXT;

  // GL_EXT_discard_framebuffer

  tbl.glDiscardFramebufferEXT = error_glDiscardFramebufferEXT;

  // GL_EXT_disjoint_timer_query

  tbl.glGetQueryObjectivEXT = error_glGetQueryObjectivEXT;
  tbl.glQueryCounterEXT = error_glQueryCounterEXT;

  // GL_EXT_draw_buffers2

  tbl.glColorMaskIndexedEXT = error_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = error_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = error_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = error_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = error_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = error_glIsEnabledIndexedEXT;

  // GL_EXT_draw_instanced

  tbl.glDrawArraysInstancedEXT = error_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = error_glDrawElementsInstancedEXT;

  // GL_EXT_draw_range_elements

  tbl.glDrawRangeElementsEXT = error_glDrawRangeElementsEXT;

  // GL_EXT_fog_coord

  tbl.glFogCoordPointerEXT = error_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = error_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = error_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = error_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = error_glFogCoordfvEXT;

  // GL_EXT_fragment_lighting

  tbl.glFragmentColorMaterialEXT = error_glFragmentColorMaterialEXT;
  tbl.glFragmentLightModelfEXT = error_glFragmentLightModelfEXT;
  tbl.glFragmentLightModelfvEXT = error_glFragmentLightModelfvEXT;
  tbl.glFragmentLightModeliEXT = error_glFragmentLightModeliEXT;
  tbl.glFragmentLightModelivEXT = error_glFragmentLightModelivEXT;
  tbl.glFragmentLightfEXT = error_glFragmentLightfEXT;
  tbl.glFragmentLightfvEXT = error_glFragmentLightfvEXT;
  tbl.glFragmentLightiEXT = error_glFragmentLightiEXT;
  tbl.glFragmentLightivEXT = error_glFragmentLightivEXT;
  tbl.glFragmentMaterialfEXT = error_glFragmentMaterialfEXT;
  tbl.glFragmentMaterialfvEXT = error_glFragmentMaterialfvEXT;
  tbl.glFragmentMaterialiEXT = error_glFragmentMaterialiEXT;
  tbl.glFragmentMaterialivEXT = error_glFragmentMaterialivEXT;
  tbl.glGetFragmentLightfvEXT = error_glGetFragmentLightfvEXT;
  tbl.glGetFragmentLightivEXT = error_glGetFragmentLightivEXT;
  tbl.glGetFragmentMaterialfvEXT = error_glGetFragmentMaterialfvEXT;
  tbl.glGetFragmentMaterialivEXT = error_glGetFragmentMaterialivEXT;
  tbl.glLightEnviEXT = error_glLightEnviEXT;

  // GL_EXT_framebuffer_blit

  tbl.glBlitFramebufferEXT = error_glBlitFramebufferEXT;

  // GL_EXT_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleEXT = error_glRenderbufferStorageMultisampleEXT;

  // GL_EXT_framebuffer_object

  tbl.glBindFramebufferEXT = error_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = error_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = error_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = error_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = error_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = error_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = error_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = error_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = error_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = error_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = error_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = error_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = error_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = error_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = error_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = error_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = error_glRenderbufferStorageEXT;

  // GL_EXT_geometry_shader4

  tbl.glFramebufferTextureEXT = error_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = error_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = error_glProgramParameteriEXT;

  // GL_EXT_gpu_program_parameters

  tbl.glProgramEnvParameters4fvEXT = error_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = error_glProgramLocalParameters4fvEXT;

  // GL_EXT_gpu_shader4

  tbl.glBindFragDataLocationEXT = error_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = error_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = error_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = error_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = error_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = error_glUniform1uiEXT;
  tbl.glUniform1uivEXT = error_glUniform1uivEXT;
  tbl.glUniform2uiEXT = error_glUniform2uiEXT;
  tbl.glUniform2uivEXT = error_glUniform2uivEXT;
  tbl.glUniform3uiEXT = error_glUniform3uiEXT;
  tbl.glUniform3uivEXT = error_glUniform3uivEXT;
  tbl.glUniform4uiEXT = error_glUniform4uiEXT;
  tbl.glUniform4uivEXT = error_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = error_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = error_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = error_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = error_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = error_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = error_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = error_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = error_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = error_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = error_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = error_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = error_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = error_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = error_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = error_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = error_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = error_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = error_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = error_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = error_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = error_glVertexAttribIPointerEXT;

  // GL_EXT_histogram

  tbl.glGetHistogramEXT = error_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = error_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = error_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = error_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = error_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = error_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = error_glHistogramEXT;
  tbl.glMinmaxEXT = error_glMinmaxEXT;
  tbl.glResetHistogramEXT = error_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = error_glResetMinmaxEXT;

  // GL_EXT_index_func

  tbl.glIndexFuncEXT = error_glIndexFuncEXT;

  // GL_EXT_index_material

  tbl.glIndexMaterialEXT = error_glIndexMaterialEXT;

  // GL_EXT_light_texture

  tbl.glApplyTextureEXT = error_glApplyTextureEXT;
  tbl.glTextureLightEXT = error_glTextureLightEXT;
  tbl.glTextureMaterialEXT = error_glTextureMaterialEXT;

  // GL_EXT_map_buffer_range

  tbl.glFlushMappedBufferRangeEXT = error_glFlushMappedBufferRangeEXT;
  tbl.glMapBufferRangeEXT = error_glMapBufferRangeEXT;

  // GL_EXT_multi_draw_arrays

  tbl.glMultiDrawArraysEXT = error_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = error_glMultiDrawElementsEXT;

  // GL_EXT_multisample

  tbl.glSampleMaskEXT = error_glSampleMaskEXT;
  tbl.glSamplePatternEXT = error_glSamplePatternEXT;

  // GL_EXT_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleEXT = error_glFramebufferTexture2DMultisampleEXT;

  // GL_EXT_multiview_draw_buffers

  tbl.glDrawBuffersIndexedEXT = error_glDrawBuffersIndexedEXT;
  tbl.glGetIntegeri_vEXT = error_glGetIntegeri_vEXT;
  tbl.glReadBufferIndexedEXT = error_glReadBufferIndexedEXT;

  // GL_EXT_occlusion_query_boolean

  tbl.glBeginQueryEXT = error_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = error_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = error_glEndQueryEXT;
  tbl.glGenQueriesEXT = error_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = error_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = error_glGetQueryivEXT;
  tbl.glIsQueryEXT = error_glIsQueryEXT;

  // GL_EXT_paletted_texture

  tbl.glColorTableEXT = error_glColorTableEXT;
  tbl.glGetColorTableEXT = error_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = error_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = error_glGetColorTableParameterivEXT;

  // GL_EXT_pixel_transform

  tbl.glGetPixelTransformParameterfvEXT = error_glGetPixelTransformParameterfvEXT;
  tbl.glGetPixelTransformParameterivEXT = error_glGetPixelTransformParameterivEXT;
  tbl.glPixelTransformParameterfEXT = error_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = error_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = error_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = error_glPixelTransformParameterivEXT;

  // GL_EXT_point_parameters

  tbl.glPointParameterfEXT = error_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = error_glPointParameterfvEXT;

  // GL_EXT_polygon_offset

  tbl.glPolygonOffsetEXT = error_glPolygonOffsetEXT;

  // GL_EXT_provoking_vertex

  tbl.glProvokingVertexEXT = error_glProvokingVertexEXT;

  // GL_EXT_robustness

  tbl.glGetnUniformfvEXT = error_glGetnUniformfvEXT;
  tbl.glGetnUniformivEXT = error_glGetnUniformivEXT;
  tbl.glReadnPixelsEXT = error_glReadnPixelsEXT;

  // GL_EXT_scene_marker

  tbl.glBeginSceneEXT = error_glBeginSceneEXT;
  tbl.glEndSceneEXT = error_glEndSceneEXT;

  // GL_EXT_secondary_color

  tbl.glSecondaryColor3bEXT = error_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = error_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = error_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = error_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = error_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = error_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = error_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = error_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = error_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = error_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = error_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = error_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = error_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = error_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = error_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = error_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = error_glSecondaryColorPointerEXT;

  // GL_EXT_separate_shader_objects

  tbl.glActiveProgramEXT = error_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = error_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = error_glUseShaderProgramEXT;

  // GL_EXT_shader_image_load_store

  tbl.glBindImageTextureEXT = error_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = error_glMemoryBarrierEXT;

  // GL_EXT_stencil_clear_tag

  tbl.glStencilClearTagEXT = error_glStencilClearTagEXT;

  // GL_EXT_stencil_two_side

  tbl.glActiveStencilFaceEXT = error_glActiveStencilFaceEXT;

  // GL_EXT_subtexture

  tbl.glTexSubImage1DEXT = error_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = error_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = error_glTexSubImage3DEXT;

  // GL_EXT_texture3D

  tbl.glTexImage3DEXT = error_glTexImage3DEXT;

  // GL_EXT_texture_array

  tbl.glFramebufferTextureLayerEXT = error_glFramebufferTextureLayerEXT;

  // GL_EXT_texture_buffer_object

  tbl.glTexBufferEXT = error_glTexBufferEXT;

  // GL_EXT_texture_integer

  tbl.glClearColorIiEXT = error_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = error_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = error_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = error_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = error_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = error_glTexParameterIuivEXT;

  // GL_EXT_texture_object

  tbl.glAreTexturesResidentEXT = error_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = error_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = error_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = error_glGenTexturesEXT;
  tbl.glIsTextureEXT = error_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = error_glPrioritizeTexturesEXT;

  // GL_EXT_texture_perturb_normal

  tbl.glTextureNormalEXT = error_glTextureNormalEXT;

  // GL_EXT_texture_storage

  tbl.glTexStorage1DEXT = error_glTexStorage1DEXT;
  tbl.glTexStorage2DEXT = error_glTexStorage2DEXT;
  tbl.glTexStorage3DEXT = error_glTexStorage3DEXT;

  // GL_EXT_timer_query

  tbl.glGetQueryObjecti64vEXT = error_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = error_glGetQueryObjectui64vEXT;

  // GL_EXT_transform_feedback

  tbl.glBeginTransformFeedbackEXT = error_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = error_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = error_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = error_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = error_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = error_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = error_glTransformFeedbackVaryingsEXT;

  // GL_EXT_vertex_array

  tbl.glArrayElementEXT = error_glArrayElementEXT;
  tbl.glColorPointerEXT = error_glColorPointerEXT;
  tbl.glDrawArraysEXT = error_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = error_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = error_glGetPointervEXT;
  tbl.glIndexPointerEXT = error_glIndexPointerEXT;
  tbl.glNormalPointerEXT = error_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = error_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = error_glVertexPointerEXT;

  // GL_EXT_vertex_attrib_64bit

  tbl.glGetVertexAttribLdvEXT = error_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = error_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = error_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = error_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = error_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = error_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = error_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = error_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = error_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = error_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = error_glVertexAttribLPointerEXT;

  // GL_EXT_vertex_shader

  tbl.glBeginVertexShaderEXT = error_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = error_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = error_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = error_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = error_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = error_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = error_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = error_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = error_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = error_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = error_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = error_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = error_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = error_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = error_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = error_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = error_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = error_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = error_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = error_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = error_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = error_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = error_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = error_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = error_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = error_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = error_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = error_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = error_glShaderOp1EXT;
  tbl.glShaderOp2EXT = error_glShaderOp2EXT;
  tbl.glShaderOp3EXT = error_glShaderOp3EXT;
  tbl.glSwizzleEXT = error_glSwizzleEXT;
  tbl.glVariantPointerEXT = error_glVariantPointerEXT;
  tbl.glVariantbvEXT = error_glVariantbvEXT;
  tbl.glVariantdvEXT = error_glVariantdvEXT;
  tbl.glVariantfvEXT = error_glVariantfvEXT;
  tbl.glVariantivEXT = error_glVariantivEXT;
  tbl.glVariantsvEXT = error_glVariantsvEXT;
  tbl.glVariantubvEXT = error_glVariantubvEXT;
  tbl.glVariantuivEXT = error_glVariantuivEXT;
  tbl.glVariantusvEXT = error_glVariantusvEXT;
  tbl.glWriteMaskEXT = error_glWriteMaskEXT;

  // GL_EXT_vertex_weighting

  tbl.glVertexWeightPointerEXT = error_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = error_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = error_glVertexWeightfvEXT;

  // GL_EXT_x11_sync_object

  tbl.glImportSyncEXT = error_glImportSyncEXT;

  // GL_GREMEDY_frame_terminator

  tbl.glFrameTerminatorGREMEDY = error_glFrameTerminatorGREMEDY;

  // GL_GREMEDY_string_marker

  tbl.glStringMarkerGREMEDY = error_glStringMarkerGREMEDY;

  // GL_HP_image_transform

  tbl.glGetImageTransformParameterfvHP = error_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = error_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = error_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = error_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = error_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = error_glImageTransformParameterivHP;

  // GL_IBM_multimode_draw_arrays

  tbl.glMultiModeDrawArraysIBM = error_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = error_glMultiModeDrawElementsIBM;

  // GL_IBM_vertex_array_lists

  tbl.glColorPointerListIBM = error_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = error_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = error_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = error_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = error_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = error_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = error_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = error_glVertexPointerListIBM;

  // GL_IMG_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleIMG = error_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = error_glRenderbufferStorageMultisampleIMG;

  // GL_INGR_blend_func_separate

  tbl.glBlendFuncSeparateINGR = error_glBlendFuncSeparateINGR;

  // GL_INTEL_map_texture

  tbl.glMapTexture2DINTEL = error_glMapTexture2DINTEL;
  tbl.glSyncTextureINTEL = error_glSyncTextureINTEL;
  tbl.glUnmapTexture2DINTEL = error_glUnmapTexture2DINTEL;

  // GL_INTEL_parallel_arrays

  tbl.glColorPointervINTEL = error_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = error_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = error_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = error_glVertexPointervINTEL;

  // GL_INTEL_texture_scissor

  tbl.glTexScissorFuncINTEL = error_glTexScissorFuncINTEL;
  tbl.glTexScissorINTEL = error_glTexScissorINTEL;

  // GL_KHR_debug

  tbl.glDebugMessageCallback = error_glDebugMessageCallback;
  tbl.glDebugMessageControl = error_glDebugMessageControl;
  tbl.glDebugMessageInsert = error_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = error_glGetDebugMessageLog;
  tbl.glGetObjectLabel = error_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = error_glGetObjectPtrLabel;
  tbl.glObjectLabel = error_glObjectLabel;
  tbl.glObjectPtrLabel = error_glObjectPtrLabel;
  tbl.glPopDebugGroup = error_glPopDebugGroup;
  tbl.glPushDebugGroup = error_glPushDebugGroup;

  // GL_KTX_buffer_region

  tbl.glBufferRegionEnabled = error_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = error_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = error_glDrawBufferRegion;
  tbl.glNewBufferRegion = error_glNewBufferRegion;
  tbl.glReadBufferRegion = error_glReadBufferRegion;

  // GL_MESA_resize_buffers

  tbl.glResizeBuffersMESA = error_glResizeBuffersMESA;

  // GL_MESA_window_pos

  tbl.glWindowPos2dMESA = error_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = error_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = error_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = error_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = error_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = error_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = error_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = error_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = error_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = error_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = error_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = error_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = error_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = error_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = error_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = error_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = error_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = error_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = error_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = error_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = error_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = error_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = error_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = error_glWindowPos4svMESA;

  // GL_NVX_conditional_render

  tbl.glBeginConditionalRenderNVX = error_glBeginConditionalRenderNVX;
  tbl.glEndConditionalRenderNVX = error_glEndConditionalRenderNVX;

  // GL_NV_bindless_texture

  tbl.glGetImageHandleNV = error_glGetImageHandleNV;
  tbl.glGetTextureHandleNV = error_glGetTextureHandleNV;
  tbl.glGetTextureSamplerHandleNV = error_glGetTextureSamplerHandleNV;
  tbl.glIsImageHandleResidentNV = error_glIsImageHandleResidentNV;
  tbl.glIsTextureHandleResidentNV = error_glIsTextureHandleResidentNV;
  tbl.glMakeImageHandleNonResidentNV = error_glMakeImageHandleNonResidentNV;
  tbl.glMakeImageHandleResidentNV = error_glMakeImageHandleResidentNV;
  tbl.glMakeTextureHandleNonResidentNV = error_glMakeTextureHandleNonResidentNV;
  tbl.glMakeTextureHandleResidentNV = error_glMakeTextureHandleResidentNV;
  tbl.glProgramUniformHandleui64NV = error_glProgramUniformHandleui64NV;
  tbl.glProgramUniformHandleui64vNV = error_glProgramUniformHandleui64vNV;
  tbl.glUniformHandleui64NV = error_glUniformHandleui64NV;
  tbl.glUniformHandleui64vNV = error_glUniformHandleui64vNV;

  // GL_NV_blend_equation_advanced

  tbl.glBlendBarrierNV = error_glBlendBarrierNV;
  tbl.glBlendParameteriNV = error_glBlendParameteriNV;

  // GL_NV_conditional_render

  tbl.glBeginConditionalRenderNV = error_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = error_glEndConditionalRenderNV;

  // GL_NV_copy_buffer

  tbl.glCopyBufferSubDataNV = error_glCopyBufferSubDataNV;

  // GL_NV_copy_image

  tbl.glCopyImageSubDataNV = error_glCopyImageSubDataNV;

  // GL_NV_coverage_sample

  tbl.glCoverageMaskNV = error_glCoverageMaskNV;
  tbl.glCoverageOperationNV = error_glCoverageOperationNV;

  // GL_NV_depth_buffer_float

  tbl.glClearDepthdNV = error_glClearDepthdNV;
  tbl.glDepthBoundsdNV = error_glDepthBoundsdNV;
  tbl.glDepthRangedNV = error_glDepthRangedNV;

  // GL_NV_draw_buffers

  tbl.glDrawBuffersNV = error_glDrawBuffersNV;

  // GL_NV_draw_texture

  tbl.glDrawTextureNV = error_glDrawTextureNV;

  // GL_NV_evaluators

  tbl.glEvalMapsNV = error_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = error_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = error_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = error_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = error_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = error_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = error_glMapControlPointsNV;
  tbl.glMapParameterfvNV = error_glMapParameterfvNV;
  tbl.glMapParameterivNV = error_glMapParameterivNV;

  // GL_NV_explicit_multisample

  tbl.glGetMultisamplefvNV = error_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = error_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = error_glTexRenderbufferNV;

  // GL_NV_fence

  tbl.glDeleteFencesNV = error_glDeleteFencesNV;
  tbl.glFinishFenceNV = error_glFinishFenceNV;
  tbl.glGenFencesNV = error_glGenFencesNV;
  tbl.glGetFenceivNV = error_glGetFenceivNV;
  tbl.glIsFenceNV = error_glIsFenceNV;
  tbl.glSetFenceNV = error_glSetFenceNV;
  tbl.glTestFenceNV = error_glTestFenceNV;

  // GL_NV_fragment_program

  tbl.glGetProgramNamedParameterdvNV = error_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = error_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = error_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = error_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = error_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = error_glProgramNamedParameter4fvNV;

  // GL_NV_framebuffer_blit

  tbl.glBlitFramebufferNV = error_glBlitFramebufferNV;

  // GL_NV_framebuffer_multisample_coverage

  tbl.glRenderbufferStorageMultisampleCoverageNV = error_glRenderbufferStorageMultisampleCoverageNV;

  // GL_NV_geometry_program4

  tbl.glProgramVertexLimitNV = error_glProgramVertexLimitNV;

  // GL_NV_gpu_program4

  tbl.glGetProgramEnvParameterIivNV = error_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = error_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = error_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = error_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = error_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = error_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = error_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = error_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = error_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = error_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = error_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = error_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = error_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = error_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = error_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = error_glProgramLocalParametersI4uivNV;

  // GL_NV_gpu_shader5

  tbl.glGetUniformi64vNV = error_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = error_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = error_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = error_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = error_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = error_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = error_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = error_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = error_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = error_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = error_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = error_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = error_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = error_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = error_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = error_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = error_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = error_glUniform1i64NV;
  tbl.glUniform1i64vNV = error_glUniform1i64vNV;
  tbl.glUniform1ui64NV = error_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = error_glUniform1ui64vNV;
  tbl.glUniform2i64NV = error_glUniform2i64NV;
  tbl.glUniform2i64vNV = error_glUniform2i64vNV;
  tbl.glUniform2ui64NV = error_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = error_glUniform2ui64vNV;
  tbl.glUniform3i64NV = error_glUniform3i64NV;
  tbl.glUniform3i64vNV = error_glUniform3i64vNV;
  tbl.glUniform3ui64NV = error_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = error_glUniform3ui64vNV;
  tbl.glUniform4i64NV = error_glUniform4i64NV;
  tbl.glUniform4i64vNV = error_glUniform4i64vNV;
  tbl.glUniform4ui64NV = error_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = error_glUniform4ui64vNV;

  // GL_NV_half_float

  tbl.glColor3hNV = error_glColor3hNV;
  tbl.glColor3hvNV = error_glColor3hvNV;
  tbl.glColor4hNV = error_glColor4hNV;
  tbl.glColor4hvNV = error_glColor4hvNV;
  tbl.glFogCoordhNV = error_glFogCoordhNV;
  tbl.glFogCoordhvNV = error_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = error_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = error_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = error_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = error_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = error_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = error_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = error_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = error_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = error_glNormal3hNV;
  tbl.glNormal3hvNV = error_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = error_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = error_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = error_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = error_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = error_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = error_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = error_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = error_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = error_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = error_glTexCoord4hvNV;
  tbl.glVertex2hNV = error_glVertex2hNV;
  tbl.glVertex2hvNV = error_glVertex2hvNV;
  tbl.glVertex3hNV = error_glVertex3hNV;
  tbl.glVertex3hvNV = error_glVertex3hvNV;
  tbl.glVertex4hNV = error_glVertex4hNV;
  tbl.glVertex4hvNV = error_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = error_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = error_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = error_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = error_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = error_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = error_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = error_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = error_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = error_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = error_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = error_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = error_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = error_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = error_glVertexWeighthvNV;

  // GL_NV_non_square_matrices

  tbl.glUniformMatrix2x3fvNV = error_glUniformMatrix2x3fvNV;
  tbl.glUniformMatrix2x4fvNV = error_glUniformMatrix2x4fvNV;
  tbl.glUniformMatrix3x2fvNV = error_glUniformMatrix3x2fvNV;
  tbl.glUniformMatrix3x4fvNV = error_glUniformMatrix3x4fvNV;
  tbl.glUniformMatrix4x2fvNV = error_glUniformMatrix4x2fvNV;
  tbl.glUniformMatrix4x3fvNV = error_glUniformMatrix4x3fvNV;

  // GL_NV_occlusion_query

  tbl.glBeginOcclusionQueryNV = error_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = error_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = error_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = error_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = error_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = error_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = error_glIsOcclusionQueryNV;

  // GL_NV_parameter_buffer_object

  tbl.glProgramBufferParametersIivNV = error_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = error_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = error_glProgramBufferParametersfvNV;

  // GL_NV_path_rendering

  tbl.glCopyPathNV = error_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = error_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = error_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = error_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = error_glCoverStrokePathNV;
  tbl.glDeletePathsNV = error_glDeletePathsNV;
  tbl.glGenPathsNV = error_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = error_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = error_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = error_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = error_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = error_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = error_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = error_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = error_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = error_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = error_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = error_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = error_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = error_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = error_glInterpolatePathsNV;
  tbl.glIsPathNV = error_glIsPathNV;
  tbl.glIsPointInFillPathNV = error_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = error_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = error_glPathColorGenNV;
  tbl.glPathCommandsNV = error_glPathCommandsNV;
  tbl.glPathCoordsNV = error_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = error_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = error_glPathDashArrayNV;
  tbl.glPathFogGenNV = error_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = error_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = error_glPathGlyphsNV;
  tbl.glPathParameterfNV = error_glPathParameterfNV;
  tbl.glPathParameterfvNV = error_glPathParameterfvNV;
  tbl.glPathParameteriNV = error_glPathParameteriNV;
  tbl.glPathParameterivNV = error_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = error_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = error_glPathStencilFuncNV;
  tbl.glPathStringNV = error_glPathStringNV;
  tbl.glPathSubCommandsNV = error_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = error_glPathSubCoordsNV;
  tbl.glPathTexGenNV = error_glPathTexGenNV;
  tbl.glPointAlongPathNV = error_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = error_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = error_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = error_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = error_glStencilStrokePathNV;
  tbl.glTransformPathNV = error_glTransformPathNV;
  tbl.glWeightPathsNV = error_glWeightPathsNV;

  // GL_NV_pixel_data_range

  tbl.glFlushPixelDataRangeNV = error_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = error_glPixelDataRangeNV;

  // GL_NV_point_sprite

  tbl.glPointParameteriNV = error_glPointParameteriNV;
  tbl.glPointParameterivNV = error_glPointParameterivNV;

  // GL_NV_present_video

  tbl.glGetVideoi64vNV = error_glGetVideoi64vNV;
  tbl.glGetVideoivNV = error_glGetVideoivNV;
  tbl.glGetVideoui64vNV = error_glGetVideoui64vNV;
  tbl.glGetVideouivNV = error_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = error_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = error_glPresentFrameKeyedNV;

  // GL_NV_primitive_restart

  tbl.glPrimitiveRestartIndexNV = error_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = error_glPrimitiveRestartNV;

  // GL_NV_read_buffer

  tbl.glReadBufferNV = error_glReadBufferNV;

  // GL_NV_register_combiners

  tbl.glCombinerInputNV = error_glCombinerInputNV;
  tbl.glCombinerOutputNV = error_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = error_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = error_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = error_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = error_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = error_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = error_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = error_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = error_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = error_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = error_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = error_glGetFinalCombinerInputParameterivNV;

  // GL_NV_register_combiners2

  tbl.glCombinerStageParameterfvNV = error_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = error_glGetCombinerStageParameterfvNV;

  // GL_NV_shader_buffer_load

  tbl.glGetBufferParameterui64vNV = error_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = error_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = error_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = error_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = error_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = error_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = error_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = error_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = error_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = error_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = error_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = error_glProgramUniformui64vNV;
  tbl.glUniformui64NV = error_glUniformui64NV;
  tbl.glUniformui64vNV = error_glUniformui64vNV;

  // GL_NV_texture_barrier

  tbl.glTextureBarrierNV = error_glTextureBarrierNV;

  // GL_NV_texture_multisample

  tbl.glTexImage2DMultisampleCoverageNV = error_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = error_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = error_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = error_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = error_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = error_glTextureImage3DMultisampleNV;

  // GL_NV_transform_feedback

  tbl.glActiveVaryingNV = error_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = error_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = error_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = error_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = error_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = error_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = error_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = error_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = error_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = error_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = error_glTransformFeedbackVaryingsNV;

  // GL_NV_transform_feedback2

  tbl.glBindTransformFeedbackNV = error_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = error_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = error_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = error_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = error_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = error_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = error_glResumeTransformFeedbackNV;

  // GL_NV_vdpau_interop

  tbl.glVDPAUFiniNV = error_glVDPAUFiniNV;
  tbl.glVDPAUGetSurfaceivNV = error_glVDPAUGetSurfaceivNV;
  tbl.glVDPAUInitNV = error_glVDPAUInitNV;
  tbl.glVDPAUIsSurfaceNV = error_glVDPAUIsSurfaceNV;
  tbl.glVDPAUMapSurfacesNV = error_glVDPAUMapSurfacesNV;
  tbl.glVDPAURegisterOutputSurfaceNV = error_glVDPAURegisterOutputSurfaceNV;
  tbl.glVDPAURegisterVideoSurfaceNV = error_glVDPAURegisterVideoSurfaceNV;
  tbl.glVDPAUSurfaceAccessNV = error_glVDPAUSurfaceAccessNV;
  tbl.glVDPAUUnmapSurfacesNV = error_glVDPAUUnmapSurfacesNV;
  tbl.glVDPAUUnregisterSurfaceNV = error_glVDPAUUnregisterSurfaceNV;

  // GL_NV_vertex_array_range

  tbl.glFlushVertexArrayRangeNV = error_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = error_glVertexArrayRangeNV;

  // GL_NV_vertex_attrib_integer_64bit

  tbl.glGetVertexAttribLi64vNV = error_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = error_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = error_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = error_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = error_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = error_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = error_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = error_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = error_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = error_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = error_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = error_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = error_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = error_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = error_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = error_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = error_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = error_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = error_glVertexAttribLFormatNV;

  // GL_NV_vertex_buffer_unified_memory

  tbl.glBufferAddressRangeNV = error_glBufferAddressRangeNV;
  tbl.glColorFormatNV = error_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = error_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = error_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = error_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = error_glIndexFormatNV;
  tbl.glNormalFormatNV = error_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = error_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = error_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = error_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = error_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = error_glVertexFormatNV;

  // GL_NV_vertex_program

  tbl.glAreProgramsResidentNV = error_glAreProgramsResidentNV;
  tbl.glBindProgramNV = error_glBindProgramNV;
  tbl.glDeleteProgramsNV = error_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = error_glExecuteProgramNV;
  tbl.glGenProgramsNV = error_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = error_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = error_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = error_glGetProgramStringNV;
  tbl.glGetProgramivNV = error_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = error_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = error_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = error_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = error_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = error_glGetVertexAttribivNV;
  tbl.glIsProgramNV = error_glIsProgramNV;
  tbl.glLoadProgramNV = error_glLoadProgramNV;
  tbl.glProgramParameter4dNV = error_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = error_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = error_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = error_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = error_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = error_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = error_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = error_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = error_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = error_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = error_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = error_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = error_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = error_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = error_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = error_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = error_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = error_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = error_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = error_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = error_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = error_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = error_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = error_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = error_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = error_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = error_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = error_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = error_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = error_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = error_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = error_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = error_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = error_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = error_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = error_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = error_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = error_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = error_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = error_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = error_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = error_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = error_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = error_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = error_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = error_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = error_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = error_glVertexAttribs4ubvNV;

  // GL_NV_video_capture

  tbl.glBeginVideoCaptureNV = error_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = error_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = error_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = error_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = error_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = error_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = error_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = error_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = error_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = error_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = error_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = error_glVideoCaptureStreamParameterivNV;

  // GL_OES_blend_equation_separate

  tbl.glBlendEquationSeparateOES = error_glBlendEquationSeparateOES;

  // GL_OES_blend_func_separate

  tbl.glBlendFuncSeparateOES = error_glBlendFuncSeparateOES;

  // GL_OES_blend_subtract

  tbl.glBlendEquationOES = error_glBlendEquationOES;

  // GL_OES_framebuffer_object

  tbl.glBindFramebufferOES = error_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = error_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = error_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = error_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = error_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = error_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = error_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = error_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = error_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = error_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = error_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = error_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = error_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = error_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = error_glRenderbufferStorageOES;

  // GL_OES_get_program_binary

  tbl.glGetProgramBinaryOES = error_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = error_glProgramBinaryOES;

  // GL_OES_mapbuffer

  tbl.glGetBufferPointervOES = error_glGetBufferPointervOES;
  tbl.glMapBufferOES = error_glMapBufferOES;
  tbl.glUnmapBufferOES = error_glUnmapBufferOES;

  // GL_OES_matrix_palette

  tbl.glCurrentPaletteMatrixOES = error_glCurrentPaletteMatrixOES;
  tbl.glMatrixIndexPointerOES = error_glMatrixIndexPointerOES;
  tbl.glWeightPointerOES = error_glWeightPointerOES;

  // GL_OES_single_precision

  tbl.glClearDepthfOES = error_glClearDepthfOES;
  tbl.glClipPlanefOES = error_glClipPlanefOES;
  tbl.glDepthRangefOES = error_glDepthRangefOES;
  tbl.glFrustumfOES = error_glFrustumfOES;
  tbl.glGetClipPlanefOES = error_glGetClipPlanefOES;
  tbl.glOrthofOES = error_glOrthofOES;

  // GL_OES_texture_3D

  tbl.glCompressedTexImage3DOES = error_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = error_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = error_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = error_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = error_glTexImage3DOES;
  tbl.glTexSubImage3DOES = error_glTexSubImage3DOES;

  // GL_OES_texture_cube_map

  tbl.glGetTexGenfvOES = error_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = error_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = error_glGetTexGenxvOES;
  tbl.glTexGenfOES = error_glTexGenfOES;
  tbl.glTexGenfvOES = error_glTexGenfvOES;
  tbl.glTexGeniOES = error_glTexGeniOES;
  tbl.glTexGenivOES = error_glTexGenivOES;
  tbl.glTexGenxOES = error_glTexGenxOES;
  tbl.glTexGenxvOES = error_glTexGenxvOES;

  // GL_OES_vertex_array_object

  tbl.glBindVertexArrayOES = error_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = error_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = error_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = error_glIsVertexArrayOES;

  // GL_PGI_misc_hints

  tbl.glHintPGI = error_glHintPGI;

  // GL_QCOM_alpha_test

  tbl.glAlphaFuncQCOM = error_glAlphaFuncQCOM;

  // GL_QCOM_driver_control

  tbl.glDisableDriverControlQCOM = error_glDisableDriverControlQCOM;
  tbl.glEnableDriverControlQCOM = error_glEnableDriverControlQCOM;
  tbl.glGetDriverControlStringQCOM = error_glGetDriverControlStringQCOM;
  tbl.glGetDriverControlsQCOM = error_glGetDriverControlsQCOM;

  // GL_QCOM_extended_get

  tbl.glExtGetBufferPointervQCOM = error_glExtGetBufferPointervQCOM;
  tbl.glExtGetBuffersQCOM = error_glExtGetBuffersQCOM;
  tbl.glExtGetFramebuffersQCOM = error_glExtGetFramebuffersQCOM;
  tbl.glExtGetRenderbuffersQCOM = error_glExtGetRenderbuffersQCOM;
  tbl.glExtGetTexLevelParameterivQCOM = error_glExtGetTexLevelParameterivQCOM;
  tbl.glExtGetTexSubImageQCOM = error_glExtGetTexSubImageQCOM;
  tbl.glExtGetTexturesQCOM = error_glExtGetTexturesQCOM;
  tbl.glExtTexObjectStateOverrideiQCOM = error_glExtTexObjectStateOverrideiQCOM;

  // GL_QCOM_extended_get2

  tbl.glExtGetProgramBinarySourceQCOM = error_glExtGetProgramBinarySourceQCOM;
  tbl.glExtGetProgramsQCOM = error_glExtGetProgramsQCOM;
  tbl.glExtGetShadersQCOM = error_glExtGetShadersQCOM;
  tbl.glExtIsProgramBinaryQCOM = error_glExtIsProgramBinaryQCOM;

  // GL_QCOM_tiled_rendering

  tbl.glEndTilingQCOM = error_glEndTilingQCOM;
  tbl.glStartTilingQCOM = error_glStartTilingQCOM;

  // GL_REGAL_ES1_0_compatibility

  tbl.glAlphaFuncx = error_glAlphaFuncx;
  tbl.glClearColorx = error_glClearColorx;
  tbl.glClearDepthx = error_glClearDepthx;
  tbl.glColor4x = error_glColor4x;
  tbl.glDepthRangex = error_glDepthRangex;
  tbl.glFogx = error_glFogx;
  tbl.glFogxv = error_glFogxv;
  tbl.glFrustumf = error_glFrustumf;
  tbl.glFrustumx = error_glFrustumx;
  tbl.glLightModelx = error_glLightModelx;
  tbl.glLightModelxv = error_glLightModelxv;
  tbl.glLightx = error_glLightx;
  tbl.glLightxv = error_glLightxv;
  tbl.glLineWidthx = error_glLineWidthx;
  tbl.glLoadMatrixx = error_glLoadMatrixx;
  tbl.glMaterialx = error_glMaterialx;
  tbl.glMaterialxv = error_glMaterialxv;
  tbl.glMultMatrixx = error_glMultMatrixx;
  tbl.glMultiTexCoord4x = error_glMultiTexCoord4x;
  tbl.glNormal3x = error_glNormal3x;
  tbl.glOrthof = error_glOrthof;
  tbl.glOrthox = error_glOrthox;
  tbl.glPointSizex = error_glPointSizex;
  tbl.glPolygonOffsetx = error_glPolygonOffsetx;
  tbl.glRotatex = error_glRotatex;
  tbl.glSampleCoveragex = error_glSampleCoveragex;
  tbl.glScalex = error_glScalex;
  tbl.glTexEnvx = error_glTexEnvx;
  tbl.glTexEnvxv = error_glTexEnvxv;
  tbl.glTexParameterx = error_glTexParameterx;
  tbl.glTranslatex = error_glTranslatex;

  // GL_REGAL_ES1_1_compatibility

  tbl.glClipPlanef = error_glClipPlanef;
  tbl.glClipPlanex = error_glClipPlanex;
  tbl.glGetClipPlanef = error_glGetClipPlanef;
  tbl.glGetClipPlanex = error_glGetClipPlanex;
  tbl.glGetFixedv = error_glGetFixedv;
  tbl.glGetLightxv = error_glGetLightxv;
  tbl.glGetMaterialxv = error_glGetMaterialxv;
  tbl.glGetTexEnvxv = error_glGetTexEnvxv;
  tbl.glGetTexParameterxv = error_glGetTexParameterxv;
  tbl.glPointParameterx = error_glPointParameterx;
  tbl.glPointParameterxv = error_glPointParameterxv;
  tbl.glPointSizePointerOES = error_glPointSizePointerOES;
  tbl.glTexParameterxv = error_glTexParameterxv;

  // GL_REGAL_log

  tbl.glLogMessageCallbackREGAL = error_glLogMessageCallbackREGAL;

  // GL_SGIS_detail_texture

  tbl.glDetailTexFuncSGIS = error_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = error_glGetDetailTexFuncSGIS;

  // GL_SGIS_fog_function

  tbl.glFogFuncSGIS = error_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = error_glGetFogFuncSGIS;

  // GL_SGIS_multisample

  tbl.glSampleMaskSGIS = error_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = error_glSamplePatternSGIS;

  // GL_SGIS_pixel_texture

  tbl.glGetPixelTexGenParameterfvSGIS = error_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = error_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = error_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = error_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = error_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = error_glPixelTexGenParameterivSGIS;

  // GL_SGIS_point_parameters

  tbl.glPointParameterfSGIS = error_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = error_glPointParameterfvSGIS;

  // GL_SGIS_sharpen_texture

  tbl.glGetSharpenTexFuncSGIS = error_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = error_glSharpenTexFuncSGIS;

  // GL_SGIS_texture4D

  tbl.glTexImage4DSGIS = error_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = error_glTexSubImage4DSGIS;

  // GL_SGIS_texture_color_mask

  tbl.glTextureColorMaskSGIS = error_glTextureColorMaskSGIS;

  // GL_SGIS_texture_filter4

  tbl.glGetTexFilterFuncSGIS = error_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = error_glTexFilterFuncSGIS;

  // GL_SGIX_async

  tbl.glAsyncMarkerSGIX = error_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = error_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = error_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = error_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = error_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = error_glPollAsyncSGIX;

  // GL_SGIX_flush_raster

  tbl.glFlushRasterSGIX = error_glFlushRasterSGIX;

  // GL_SGIX_fog_texture

  tbl.glTextureFogSGIX = error_glTextureFogSGIX;

  // GL_SGIX_fragment_lighting

  tbl.glFragmentColorMaterialSGIX = error_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = error_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = error_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = error_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = error_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = error_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = error_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = error_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = error_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = error_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = error_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = error_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = error_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = error_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = error_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = error_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = error_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = error_glLightEnviSGIX;

  // GL_SGIX_framezoom

  tbl.glFrameZoomSGIX = error_glFrameZoomSGIX;

  // GL_SGIX_igloo_interface

  tbl.glIglooInterfaceSGIX = error_glIglooInterfaceSGIX;

  // GL_SGIX_instruments

  tbl.glGetInstrumentsSGIX = error_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = error_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = error_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = error_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = error_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = error_glStopInstrumentsSGIX;

  // GL_SGIX_list_priority

  tbl.glGetListParameterfvSGIX = error_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = error_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = error_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = error_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = error_glListParameteriSGIX;
  tbl.glListParameterivSGIX = error_glListParameterivSGIX;

  // GL_SGIX_pixel_texture

  tbl.glPixelTexGenSGIX = error_glPixelTexGenSGIX;

  // GL_SGIX_polynomial_ffd

  tbl.glDeformSGIX = error_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = error_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = error_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = error_glLoadIdentityDeformationMapSGIX;

  // GL_SGIX_reference_plane

  tbl.glReferencePlaneSGIX = error_glReferencePlaneSGIX;

  // GL_SGIX_sprite

  tbl.glSpriteParameterfSGIX = error_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = error_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = error_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = error_glSpriteParameterivSGIX;

  // GL_SGIX_tag_sample_buffer

  tbl.glTagSampleBufferSGIX = error_glTagSampleBufferSGIX;

  // GL_SGI_color_table

  tbl.glColorTableParameterfvSGI = error_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = error_glColorTableParameterivSGI;
  tbl.glColorTableSGI = error_glColorTableSGI;
  tbl.glCopyColorTableSGI = error_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = error_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = error_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = error_glGetColorTableSGI;

  // GL_SUNX_constant_data

  tbl.glFinishTextureSUNX = error_glFinishTextureSUNX;

  // GL_SUN_global_alpha

  tbl.glGlobalAlphaFactorbSUN = error_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = error_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = error_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = error_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = error_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = error_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = error_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = error_glGlobalAlphaFactorusSUN;

  // GL_SUN_mesh_array

  tbl.glDrawMeshArraysSUN = error_glDrawMeshArraysSUN;

  // GL_SUN_read_video_pixels

  tbl.glReadVideoPixelsSUN = error_glReadVideoPixelsSUN;

  // GL_SUN_triangle_list

  tbl.glReplacementCodePointerSUN = error_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = error_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = error_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = error_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = error_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = error_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = error_glReplacementCodeusvSUN;

  // GL_SUN_vertex

  tbl.glColor3fVertex3fSUN = error_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = error_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = error_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = error_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = error_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = error_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = error_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = error_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = error_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = error_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = error_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = error_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = error_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = error_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = error_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = error_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = error_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = error_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = error_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = error_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = error_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = error_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = error_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = error_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = error_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = error_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = error_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = error_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = error_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = error_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = error_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = error_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = error_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = error_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = error_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = error_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = error_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = error_glTexCoord4fVertex4fvSUN;

  // GL_WIN_swap_hint

  tbl.glAddSwapHintRectWIN = error_glAddSwapHintRectWIN;

}

REGAL_NAMESPACE_END

#endif
