/* NOTE: Do not edit this file, it is generated by a script:
   H.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if ! REGAL_NO_HTTP

REGAL_GLOBAL_BEGIN

#include "RegalLog.h"
#include "Http.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalContext.h"
#include "RegalDispatch.h"

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

extern "C" Regal::Layer * createHttp( Regal::RegalContext * ctx ) {
  return new Regal::Http( ctx );
}

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

static Dispatch::Global nextGlobal;

void InitDispatchHttp( Layer * layer, Dispatch::GL & );
void InitDispatchHttp( Layer * layer, Dispatch::Global & );

bool Http::Initialize( const std::string & instanceInfo ) {
  ResetInterception();
  return true;
}

void Http::ResetInterception() {
  RegalContext * ctx = GetContext();
  next = ctx->dispatchGL;
  InitDispatchHttp( this, ctx->dispatchGL );

  gl.Initialize( &next );

  nextGlobal = dispatchGlobal;
  InitDispatchHttp( this, dispatchGlobal );
}

// GL_VERSION_1_0

static void REGAL_CALL http_glAccum(Layer *_layer, GLenum op, GLfloat value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAccum","(", toString(op), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAccum(self->next, op, value);
}

static void REGAL_CALL http_glAlphaFunc(Layer *_layer, GLenum func, GLclampf ref)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAlphaFunc","(", toString(func), ", ", ref, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAlphaFunc(self->next, func, ref);
}

static void REGAL_CALL http_glBegin(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  self->callString = print_string("glBegin","(", GLmodeToString(mode), ")");
  self->count.draw++;
  self->inBeginEnd++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer();
  RglBegin(self->next, mode);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glBitmap(Layer *_layer, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBitmap","(", width, ", ", height, ", ", xorig, ", ", yorig, ", ", xmove, ", ", ymove, ", ", print_optional(bitmap,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBitmap(self->next, width, height, xorig, yorig, xmove, ymove, bitmap);
}

static void REGAL_CALL http_glBlendFunc(Layer *_layer, GLenum sfactor, GLenum dfactor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFunc","(", toString(sfactor), ", ", toString(dfactor), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFunc(self->next, sfactor, dfactor);
}

static void REGAL_CALL http_glCallList(Layer *_layer, GLuint list)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCallList","(", list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCallList(self->next, list);
}

static void REGAL_CALL http_glCallLists(Layer *_layer, GLsizei n, GLenum type, const GLvoid *lists)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCallLists","(", n, ", ", toString(type), ", ", print_array(reinterpret_cast<const GLubyte *>(lists),helper::size::callLists(n, type)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCallLists(self->next, n, type, lists);
}

static void REGAL_CALL http_glClear(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClear","(", GLclearToString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClear(self->next, mask);
}

static void REGAL_CALL http_glClearAccum(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearAccum","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearAccum(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glClearColor(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearColor","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearColor(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glClearDepth(Layer *_layer, GLclampd depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearDepth","(", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearDepth(self->next, depth);
}

static void REGAL_CALL http_glClearIndex(Layer *_layer, GLfloat c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearIndex","(", c, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearIndex(self->next, c);
}

static void REGAL_CALL http_glClearStencil(Layer *_layer, GLint s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearStencil","(", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearStencil(self->next, s);
}

static void REGAL_CALL http_glClipPlane(Layer *_layer, GLenum plane, const GLdouble *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClipPlane","(", toString(plane), ", ", print_array(equation,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClipPlane(self->next, plane, equation);
}

static void REGAL_CALL http_glColor3b(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3b","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3b(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3bv(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3bv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3bv(self->next, v);
}

static void REGAL_CALL http_glColor3d(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3d","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3d(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3dv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3dv(self->next, v);
}

static void REGAL_CALL http_glColor3f(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3f","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3f(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3fv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3fv(self->next, v);
}

static void REGAL_CALL http_glColor3i(Layer *_layer, GLint red, GLint green, GLint blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3i","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3i(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3iv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3iv(self->next, v);
}

static void REGAL_CALL http_glColor3s(Layer *_layer, GLshort red, GLshort green, GLshort blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3s","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3s(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3sv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3sv(self->next, v);
}

static void REGAL_CALL http_glColor3ub(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3ub","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3ub(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3ubv(Layer *_layer, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3ubv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3ubv(self->next, v);
}

static void REGAL_CALL http_glColor3ui(Layer *_layer, GLuint red, GLuint green, GLuint blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3ui","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3ui(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3uiv(Layer *_layer, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3uiv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3uiv(self->next, v);
}

static void REGAL_CALL http_glColor3us(Layer *_layer, GLushort red, GLushort green, GLushort blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3us","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3us(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3usv(Layer *_layer, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3usv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3usv(self->next, v);
}

static void REGAL_CALL http_glColor4b(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4b","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4b(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4bv(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4bv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4bv(self->next, v);
}

static void REGAL_CALL http_glColor4d(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4d","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4d(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4dv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4dv(self->next, v);
}

static void REGAL_CALL http_glColor4f(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4f","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4f(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4fv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4fv(self->next, v);
}

static void REGAL_CALL http_glColor4i(Layer *_layer, GLint red, GLint green, GLint blue, GLint alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4i","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4i(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4iv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4iv(self->next, v);
}

static void REGAL_CALL http_glColor4s(Layer *_layer, GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4s","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4s(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4sv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4sv(self->next, v);
}

static void REGAL_CALL http_glColor4ub(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ub","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ub(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4ubv(Layer *_layer, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ubv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ubv(self->next, v);
}

static void REGAL_CALL http_glColor4ui(Layer *_layer, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ui","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ui(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4uiv(Layer *_layer, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4uiv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4uiv(self->next, v);
}

static void REGAL_CALL http_glColor4us(Layer *_layer, GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4us","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4us(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4usv(Layer *_layer, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4usv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4usv(self->next, v);
}

static void REGAL_CALL http_glColorMask(Layer *_layer, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorMask","(", toString(red), ", ", toString(green), ", ", toString(blue), ", ", toString(alpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorMask(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColorMaterial(Layer *_layer, GLenum face, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorMaterial","(", toString(face), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorMaterial(self->next, face, mode);
}

static void REGAL_CALL http_glCopyPixels(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyPixels","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyPixels(self->next, x, y, width, height, type);
}

static void REGAL_CALL http_glCullFace(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCullFace","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCullFace(self->next, mode);
}

static void REGAL_CALL http_glDeleteLists(Layer *_layer, GLuint list, GLsizei range)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteLists","(", list, ", ", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteLists(self->next, list, range);
}

static void REGAL_CALL http_glDepthFunc(Layer *_layer, GLenum func)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthFunc","(", toString(func), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthFunc(self->next, func);
}

static void REGAL_CALL http_glDepthMask(Layer *_layer, GLboolean flag)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthMask","(", toString(flag), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthMask(self->next, flag);
}

static void REGAL_CALL http_glDepthRange(Layer *_layer, GLclampd zNear, GLclampd zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRange","(", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRange(self->next, zNear, zFar);
}

static void REGAL_CALL http_glDisable(Layer *_layer, GLenum cap)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisable","(", toString(cap), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisable(self->next, cap);
}

static void REGAL_CALL http_glDrawBuffer(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBuffer","(", toString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBuffer(self->next, mode);
}

static void REGAL_CALL http_glDrawPixels(Layer *_layer, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawPixels","(", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawPixels(self->next, width, height, format, type, pixels);
}

static void REGAL_CALL http_glEdgeFlag(Layer *_layer, GLboolean flag)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEdgeFlag","(", toString(flag), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEdgeFlag(self->next, flag);
}

static void REGAL_CALL http_glEdgeFlagv(Layer *_layer, const GLboolean *flag)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEdgeFlagv","(", print_array(flag,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEdgeFlagv(self->next, flag);
}

static void REGAL_CALL http_glEnable(Layer *_layer, GLenum cap)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnable","(", toString(cap), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnable(self->next, cap);
}

static void REGAL_CALL http_glEnd(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  self->callString = print_string("glEnd","()");
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer();
  RglEnd(self->next);
  self->inBeginEnd--;
  self->YieldToHttpServer( false /* no log update */ );
}

static void REGAL_CALL http_glEndList(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndList","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndList(self->next);
}

static void REGAL_CALL http_glEvalCoord1d(Layer *_layer, GLdouble u)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord1d","(", u, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord1d(self->next, u);
}

static void REGAL_CALL http_glEvalCoord1dv(Layer *_layer, const GLdouble *u)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord1dv","(", print_array(u,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord1dv(self->next, u);
}

static void REGAL_CALL http_glEvalCoord1f(Layer *_layer, GLfloat u)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord1f","(", u, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord1f(self->next, u);
}

static void REGAL_CALL http_glEvalCoord1fv(Layer *_layer, const GLfloat *u)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord1fv","(", print_array(u,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord1fv(self->next, u);
}

static void REGAL_CALL http_glEvalCoord2d(Layer *_layer, GLdouble u, GLdouble v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord2d","(", u, ", ", v, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord2d(self->next, u, v);
}

static void REGAL_CALL http_glEvalCoord2dv(Layer *_layer, const GLdouble *u)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord2dv","(", print_array(u,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord2dv(self->next, u);
}

static void REGAL_CALL http_glEvalCoord2f(Layer *_layer, GLfloat u, GLfloat v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord2f","(", u, ", ", v, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord2f(self->next, u, v);
}

static void REGAL_CALL http_glEvalCoord2fv(Layer *_layer, const GLfloat *u)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalCoord2fv","(", print_array(u,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalCoord2fv(self->next, u);
}

static void REGAL_CALL http_glEvalMesh1(Layer *_layer, GLenum mode, GLint i1, GLint i2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalMesh1","(", GLmodeToString(mode), ", ", i1, ", ", i2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalMesh1(self->next, mode, i1, i2);
}

static void REGAL_CALL http_glEvalMesh2(Layer *_layer, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalMesh2","(", GLmodeToString(mode), ", ", i1, ", ", i2, ", ", j1, ", ", j2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalMesh2(self->next, mode, i1, i2, j1, j2);
}

static void REGAL_CALL http_glEvalPoint1(Layer *_layer, GLint i)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalPoint1","(", i, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalPoint1(self->next, i);
}

static void REGAL_CALL http_glEvalPoint2(Layer *_layer, GLint i, GLint j)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalPoint2","(", i, ", ", j, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalPoint2(self->next, i, j);
}

static void REGAL_CALL http_glFeedbackBuffer(Layer *_layer, GLsizei size, GLenum type, GLfloat *buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFeedbackBuffer","(", size, ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFeedbackBuffer(self->next, size, type, buffer);
}

static void REGAL_CALL http_glFinish(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinish","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinish(self->next);
}

static void REGAL_CALL http_glFlush(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlush","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlush(self->next);
}

static void REGAL_CALL http_glFogf(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogf","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogf(self->next, pname, param);
}

static void REGAL_CALL http_glFogfv(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogfv","(", toString(pname), ", ", print_array(params,helper::size::fogv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogfv(self->next, pname, params);
}

static void REGAL_CALL http_glFogi(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogi","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogi(self->next, pname, param);
}

static void REGAL_CALL http_glFogiv(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogiv","(", toString(pname), ", ", print_array(params,helper::size::fogv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogiv(self->next, pname, params);
}

static void REGAL_CALL http_glFrontFace(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrontFace","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrontFace(self->next, mode);
}

static void REGAL_CALL http_glFrustum(Layer *_layer, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrustum","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrustum(self->next, left, right, bottom, top, zNear, zFar);
}

static GLuint REGAL_CALL http_glGenLists(Layer *_layer, GLsizei range)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenLists","(", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGenLists(self->next, range);
  return ret;
}

static void REGAL_CALL http_glGetBooleanv(Layer *_layer, GLenum pname, GLboolean *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBooleanv","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBooleanv(self->next, pname, params);
}

static void REGAL_CALL http_glGetClipPlane(Layer *_layer, GLenum plane, GLdouble *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetClipPlane","(", toString(plane), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetClipPlane(self->next, plane, equation);
}

static void REGAL_CALL http_glGetDoublev(Layer *_layer, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDoublev","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDoublev(self->next, pname, params);
}

static GLenum REGAL_CALL http_glGetError(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetError","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetError(self->next);
  return ret;
}

static void REGAL_CALL http_glGetFloatv(Layer *_layer, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFloatv","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFloatv(self->next, pname, params);
}

static void REGAL_CALL http_glGetIntegerv(Layer *_layer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetIntegerv","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetIntegerv(self->next, pname, params);
}

static void REGAL_CALL http_glGetLightfv(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetLightfv","(", toString(light), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetLightfv(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetLightiv(Layer *_layer, GLenum light, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetLightiv","(", toString(light), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetLightiv(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetMapdv(Layer *_layer, GLenum target, GLenum query, GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapdv","(", toString(target), ", ", toString(query), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapdv(self->next, target, query, v);
}

static void REGAL_CALL http_glGetMapfv(Layer *_layer, GLenum target, GLenum query, GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapfv","(", toString(target), ", ", toString(query), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapfv(self->next, target, query, v);
}

static void REGAL_CALL http_glGetMapiv(Layer *_layer, GLenum target, GLenum query, GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapiv","(", toString(target), ", ", toString(query), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapiv(self->next, target, query, v);
}

static void REGAL_CALL http_glGetMaterialfv(Layer *_layer, GLenum face, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMaterialfv","(", toString(face), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMaterialfv(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetMaterialiv(Layer *_layer, GLenum face, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMaterialiv","(", toString(face), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMaterialiv(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetPixelMapfv(Layer *_layer, GLenum map, GLfloat *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelMapfv","(", toString(map), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelMapfv(self->next, map, values);
}

static void REGAL_CALL http_glGetPixelMapuiv(Layer *_layer, GLenum map, GLuint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelMapuiv","(", toString(map), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelMapuiv(self->next, map, values);
}

static void REGAL_CALL http_glGetPixelMapusv(Layer *_layer, GLenum map, GLushort *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelMapusv","(", toString(map), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelMapusv(self->next, map, values);
}

static void REGAL_CALL http_glGetPolygonStipple(Layer *_layer, GLubyte *mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPolygonStipple","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPolygonStipple(self->next, mask);
}

static const GLubyte *REGAL_CALL http_glGetString(Layer *_layer, GLenum name)
{
  Http * self = static_cast<Http *>(_layer);
    const GLubyte * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetString","(", toString(name), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetString(self->next, name);
  return ret;
}

static void REGAL_CALL http_glGetTexEnvfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexEnvfv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexEnvfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetTexEnviv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexEnviv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexEnviv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetTexGendv(Layer *_layer, GLenum coord, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexGendv","(", toString(coord), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexGendv(self->next, coord, pname, params);
}

static void REGAL_CALL http_glGetTexGenfv(Layer *_layer, GLenum coord, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexGenfv","(", toString(coord), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexGenfv(self->next, coord, pname, params);
}

static void REGAL_CALL http_glGetTexGeniv(Layer *_layer, GLenum coord, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexGeniv","(", toString(coord), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexGeniv(self->next, coord, pname, params);
}

static void REGAL_CALL http_glGetTexImage(Layer *_layer, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexImage","(", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexImage(self->next, target, level, format, type, pixels);
}

static void REGAL_CALL http_glGetTexLevelParameterfv(Layer *_layer, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexLevelParameterfv","(", toString(target), ", ", level, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexLevelParameterfv(self->next, target, level, pname, params);
}

static void REGAL_CALL http_glGetTexLevelParameteriv(Layer *_layer, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexLevelParameteriv","(", toString(target), ", ", level, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexLevelParameteriv(self->next, target, level, pname, params);
}

static void REGAL_CALL http_glGetTexParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterfv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetTexParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glHint(Layer *_layer, GLenum target, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glHint","(", toString(target), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglHint(self->next, target, mode);
}

static void REGAL_CALL http_glIndexMask(Layer *_layer, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexMask","(", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexMask(self->next, mask);
}

static void REGAL_CALL http_glIndexd(Layer *_layer, GLdouble c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexd","(", c, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexd(self->next, c);
}

static void REGAL_CALL http_glIndexdv(Layer *_layer, const GLdouble *c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexdv","(", print_array(c,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexdv(self->next, c);
}

static void REGAL_CALL http_glIndexf(Layer *_layer, GLfloat c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexf","(", c, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexf(self->next, c);
}

static void REGAL_CALL http_glIndexfv(Layer *_layer, const GLfloat *c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexfv","(", print_array(c,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexfv(self->next, c);
}

static void REGAL_CALL http_glIndexi(Layer *_layer, GLint c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexi","(", c, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexi(self->next, c);
}

static void REGAL_CALL http_glIndexiv(Layer *_layer, const GLint *c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexiv","(", print_array(c,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexiv(self->next, c);
}

static void REGAL_CALL http_glIndexs(Layer *_layer, GLshort c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexs","(", c, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexs(self->next, c);
}

static void REGAL_CALL http_glIndexsv(Layer *_layer, const GLshort *c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexsv","(", print_array(c,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexsv(self->next, c);
}

static void REGAL_CALL http_glInitNames(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInitNames","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInitNames(self->next);
}

static GLboolean REGAL_CALL http_glIsEnabled(Layer *_layer, GLenum cap)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsEnabled","(", toString(cap), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsEnabled(self->next, cap);
  return ret;
}

static GLboolean REGAL_CALL http_glIsList(Layer *_layer, GLuint list)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsList","(", list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsList(self->next, list);
  return ret;
}

static void REGAL_CALL http_glLightModelf(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightModelf","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightModelf(self->next, pname, param);
}

static void REGAL_CALL http_glLightModelfv(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightModelfv","(", toString(pname), ", ", print_array(params,helper::size::lightModelv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightModelfv(self->next, pname, params);
}

static void REGAL_CALL http_glLightModeli(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightModeli","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightModeli(self->next, pname, param);
}

static void REGAL_CALL http_glLightModeliv(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightModeliv","(", toString(pname), ", ", print_array(params,helper::size::lightModelv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightModeliv(self->next, pname, params);
}

static void REGAL_CALL http_glLightf(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightf","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightf(self->next, light, pname, param);
}

static void REGAL_CALL http_glLightfv(Layer *_layer, GLenum light, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightfv","(", toString(light), ", ", toString(pname), ", ", print_array(params,helper::size::lightv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightfv(self->next, light, pname, params);
}

static void REGAL_CALL http_glLighti(Layer *_layer, GLenum light, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLighti","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLighti(self->next, light, pname, param);
}

static void REGAL_CALL http_glLightiv(Layer *_layer, GLenum light, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightiv","(", toString(light), ", ", toString(pname), ", ", print_array(params,helper::size::lightv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightiv(self->next, light, pname, params);
}

static void REGAL_CALL http_glLineStipple(Layer *_layer, GLint factor, GLushort pattern)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLineStipple","(", factor, ", ", pattern, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLineStipple(self->next, factor, pattern);
}

static void REGAL_CALL http_glLineWidth(Layer *_layer, GLfloat width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLineWidth","(", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLineWidth(self->next, width);
}

static void REGAL_CALL http_glListBase(Layer *_layer, GLuint base)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glListBase","(", base, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglListBase(self->next, base);
}

static void REGAL_CALL http_glLoadIdentity(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadIdentity","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadIdentity(self->next);
}

static void REGAL_CALL http_glLoadMatrixd(Layer *_layer, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadMatrixd","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadMatrixd(self->next, m);
}

static void REGAL_CALL http_glLoadMatrixf(Layer *_layer, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadMatrixf","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadMatrixf(self->next, m);
}

static void REGAL_CALL http_glLoadName(Layer *_layer, GLuint name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadName","(", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadName(self->next, name);
}

static void REGAL_CALL http_glLogicOp(Layer *_layer, GLenum opcode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLogicOp","(", toString(opcode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLogicOp(self->next, opcode);
}

static void REGAL_CALL http_glMap1d(Layer *_layer, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMap1d","(", toString(target), ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMap1d(self->next, target, u1, u2, stride, order, points);
}

static void REGAL_CALL http_glMap1f(Layer *_layer, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMap1f","(", toString(target), ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMap1f(self->next, target, u1, u2, stride, order, points);
}

static void REGAL_CALL http_glMap2d(Layer *_layer, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMap2d","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMap2d(self->next, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL http_glMap2f(Layer *_layer, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMap2f","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMap2f(self->next, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL http_glMapGrid1d(Layer *_layer, GLint un, GLdouble u1, GLdouble u2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapGrid1d","(", un, ", ", u1, ", ", u2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapGrid1d(self->next, un, u1, u2);
}

static void REGAL_CALL http_glMapGrid1f(Layer *_layer, GLint un, GLfloat u1, GLfloat u2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapGrid1f","(", un, ", ", u1, ", ", u2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapGrid1f(self->next, un, u1, u2);
}

static void REGAL_CALL http_glMapGrid2d(Layer *_layer, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapGrid2d","(", un, ", ", u1, ", ", u2, ", ", vn, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapGrid2d(self->next, un, u1, u2, vn, v1, v2);
}

static void REGAL_CALL http_glMapGrid2f(Layer *_layer, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapGrid2f","(", un, ", ", u1, ", ", u2, ", ", vn, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapGrid2f(self->next, un, u1, u2, vn, v1, v2);
}

static void REGAL_CALL http_glMaterialf(Layer *_layer, GLenum face, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMaterialf","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMaterialf(self->next, face, pname, param);
}

static void REGAL_CALL http_glMaterialfv(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMaterialfv","(", toString(face), ", ", toString(pname), ", ", print_array(params,helper::size::materialv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMaterialfv(self->next, face, pname, params);
}

static void REGAL_CALL http_glMateriali(Layer *_layer, GLenum face, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMateriali","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMateriali(self->next, face, pname, param);
}

static void REGAL_CALL http_glMaterialiv(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMaterialiv","(", toString(face), ", ", toString(pname), ", ", print_array(params,helper::size::materialv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMaterialiv(self->next, face, pname, params);
}

static void REGAL_CALL http_glMatrixMode(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixMode","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixMode(self->next, mode);
}

static void REGAL_CALL http_glMultMatrixd(Layer *_layer, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultMatrixd","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultMatrixd(self->next, m);
}

static void REGAL_CALL http_glMultMatrixf(Layer *_layer, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultMatrixf","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultMatrixf(self->next, m);
}

static void REGAL_CALL http_glNewList(Layer *_layer, GLuint list, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNewList","(", list, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNewList(self->next, list, mode);
}

static void REGAL_CALL http_glNormal3b(Layer *_layer, GLbyte nx, GLbyte ny, GLbyte nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3b","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3b(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glNormal3bv(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3bv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3bv(self->next, v);
}

static void REGAL_CALL http_glNormal3d(Layer *_layer, GLdouble nx, GLdouble ny, GLdouble nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3d","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3d(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glNormal3dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3dv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3dv(self->next, v);
}

static void REGAL_CALL http_glNormal3f(Layer *_layer, GLfloat nx, GLfloat ny, GLfloat nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3f","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3f(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glNormal3fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3fv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3fv(self->next, v);
}

static void REGAL_CALL http_glNormal3i(Layer *_layer, GLint nx, GLint ny, GLint nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3i","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3i(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glNormal3iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3iv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3iv(self->next, v);
}

static void REGAL_CALL http_glNormal3s(Layer *_layer, GLshort nx, GLshort ny, GLshort nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3s","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3s(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glNormal3sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3sv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3sv(self->next, v);
}

static void REGAL_CALL http_glOrtho(Layer *_layer, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glOrtho","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglOrtho(self->next, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glPassThrough(Layer *_layer, GLfloat token)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPassThrough","(", token, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPassThrough(self->next, token);
}

static void REGAL_CALL http_glPixelMapfv(Layer *_layer, GLenum map, GLsizei mapsize, const GLfloat *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelMapfv","(", toString(map), ", ", mapsize, ", ", print_array(values,mapsize), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelMapfv(self->next, map, mapsize, values);
}

static void REGAL_CALL http_glPixelMapuiv(Layer *_layer, GLenum map, GLsizei mapsize, const GLuint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelMapuiv","(", toString(map), ", ", mapsize, ", ", print_array(values,mapsize), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelMapuiv(self->next, map, mapsize, values);
}

static void REGAL_CALL http_glPixelMapusv(Layer *_layer, GLenum map, GLsizei mapsize, const GLushort *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelMapusv","(", toString(map), ", ", mapsize, ", ", print_array(values,mapsize), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelMapusv(self->next, map, mapsize, values);
}

static void REGAL_CALL http_glPixelStoref(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelStoref","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelStoref(self->next, pname, param);
}

static void REGAL_CALL http_glPixelStorei(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelStorei","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelStorei(self->next, pname, param);
}

static void REGAL_CALL http_glPixelTransferf(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTransferf","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTransferf(self->next, pname, param);
}

static void REGAL_CALL http_glPixelTransferi(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTransferi","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTransferi(self->next, pname, param);
}

static void REGAL_CALL http_glPixelZoom(Layer *_layer, GLfloat xfactor, GLfloat yfactor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelZoom","(", xfactor, ", ", yfactor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelZoom(self->next, xfactor, yfactor);
}

static void REGAL_CALL http_glPointSize(Layer *_layer, GLfloat size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointSize","(", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointSize(self->next, size);
}

static void REGAL_CALL http_glPolygonMode(Layer *_layer, GLenum face, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPolygonMode","(", toString(face), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPolygonMode(self->next, face, mode);
}

static void REGAL_CALL http_glPolygonStipple(Layer *_layer, const GLubyte *mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPolygonStipple","(", print_optional(mask,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPolygonStipple(self->next, mask);
}

static void REGAL_CALL http_glPopAttrib(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPopAttrib","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPopAttrib(self->next);
}

static void REGAL_CALL http_glPopMatrix(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPopMatrix","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPopMatrix(self->next);
}

static void REGAL_CALL http_glPopName(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPopName","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPopName(self->next);
}

static void REGAL_CALL http_glPushAttrib(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushAttrib","(", GLpushAttribToString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushAttrib(self->next, mask);
}

static void REGAL_CALL http_glPushMatrix(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushMatrix","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushMatrix(self->next);
}

static void REGAL_CALL http_glPushName(Layer *_layer, GLuint name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushName","(", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushName(self->next, name);
}

static void REGAL_CALL http_glRasterPos2d(Layer *_layer, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2d","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2d(self->next, x, y);
}

static void REGAL_CALL http_glRasterPos2dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2dv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2dv(self->next, v);
}

static void REGAL_CALL http_glRasterPos2f(Layer *_layer, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2f","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2f(self->next, x, y);
}

static void REGAL_CALL http_glRasterPos2fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2fv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2fv(self->next, v);
}

static void REGAL_CALL http_glRasterPos2i(Layer *_layer, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2i","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2i(self->next, x, y);
}

static void REGAL_CALL http_glRasterPos2iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2iv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2iv(self->next, v);
}

static void REGAL_CALL http_glRasterPos2s(Layer *_layer, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2s","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2s(self->next, x, y);
}

static void REGAL_CALL http_glRasterPos2sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos2sv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos2sv(self->next, v);
}

static void REGAL_CALL http_glRasterPos3d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3d","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3d(self->next, x, y, z);
}

static void REGAL_CALL http_glRasterPos3dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3dv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3dv(self->next, v);
}

static void REGAL_CALL http_glRasterPos3f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3f","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3f(self->next, x, y, z);
}

static void REGAL_CALL http_glRasterPos3fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3fv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3fv(self->next, v);
}

static void REGAL_CALL http_glRasterPos3i(Layer *_layer, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3i","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3i(self->next, x, y, z);
}

static void REGAL_CALL http_glRasterPos3iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3iv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3iv(self->next, v);
}

static void REGAL_CALL http_glRasterPos3s(Layer *_layer, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3s","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3s(self->next, x, y, z);
}

static void REGAL_CALL http_glRasterPos3sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos3sv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos3sv(self->next, v);
}

static void REGAL_CALL http_glRasterPos4d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4d","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4d(self->next, x, y, z, w);
}

static void REGAL_CALL http_glRasterPos4dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4dv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4dv(self->next, v);
}

static void REGAL_CALL http_glRasterPos4f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4f","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4f(self->next, x, y, z, w);
}

static void REGAL_CALL http_glRasterPos4fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4fv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4fv(self->next, v);
}

static void REGAL_CALL http_glRasterPos4i(Layer *_layer, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4i","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4i(self->next, x, y, z, w);
}

static void REGAL_CALL http_glRasterPos4iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4iv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4iv(self->next, v);
}

static void REGAL_CALL http_glRasterPos4s(Layer *_layer, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4s","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4s(self->next, x, y, z, w);
}

static void REGAL_CALL http_glRasterPos4sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRasterPos4sv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRasterPos4sv(self->next, v);
}

static void REGAL_CALL http_glReadBuffer(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadBuffer","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadBuffer(self->next, mode);
}

static void REGAL_CALL http_glReadPixels(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadPixels","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadPixels(self->next, x, y, width, height, format, type, pixels);
}

static void REGAL_CALL http_glRectd(Layer *_layer, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRectd","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRectd(self->next, x1, y1, x2, y2);
}

static void REGAL_CALL http_glRectdv(Layer *_layer, const GLdouble *v1, const GLdouble *v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRectdv","(", print_array(v1,2), ", ", print_array(v2,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRectdv(self->next, v1, v2);
}

static void REGAL_CALL http_glRectf(Layer *_layer, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRectf","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRectf(self->next, x1, y1, x2, y2);
}

static void REGAL_CALL http_glRectfv(Layer *_layer, const GLfloat *v1, const GLfloat *v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRectfv","(", print_array(v1,2), ", ", print_array(v2,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRectfv(self->next, v1, v2);
}

static void REGAL_CALL http_glRecti(Layer *_layer, GLint x1, GLint y1, GLint x2, GLint y2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRecti","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRecti(self->next, x1, y1, x2, y2);
}

static void REGAL_CALL http_glRectiv(Layer *_layer, const GLint *v1, const GLint *v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRectiv","(", print_array(v1,2), ", ", print_array(v2,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRectiv(self->next, v1, v2);
}

static void REGAL_CALL http_glRects(Layer *_layer, GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRects","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRects(self->next, x1, y1, x2, y2);
}

static void REGAL_CALL http_glRectsv(Layer *_layer, const GLshort *v1, const GLshort *v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRectsv","(", print_array(v1,2), ", ", print_array(v2,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRectsv(self->next, v1, v2);
}

static GLint REGAL_CALL http_glRenderMode(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderMode","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglRenderMode(self->next, mode);
  return ret;
}

static void REGAL_CALL http_glRotated(Layer *_layer, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRotated","(", angle, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRotated(self->next, angle, x, y, z);
}

static void REGAL_CALL http_glRotatef(Layer *_layer, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRotatef","(", angle, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRotatef(self->next, angle, x, y, z);
}

static void REGAL_CALL http_glScaled(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScaled","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScaled(self->next, x, y, z);
}

static void REGAL_CALL http_glScalef(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScalef","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScalef(self->next, x, y, z);
}

static void REGAL_CALL http_glScissor(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScissor","(", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScissor(self->next, x, y, width, height);
}

static void REGAL_CALL http_glSelectBuffer(Layer *_layer, GLsizei size, GLuint *buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSelectBuffer","(", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSelectBuffer(self->next, size, buffer);
}

static void REGAL_CALL http_glShadeModel(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShadeModel","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShadeModel(self->next, mode);
}

static void REGAL_CALL http_glStencilFunc(Layer *_layer, GLenum func, GLint ref, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilFunc","(", toString(func), ", ", print_hex(ref), ", ", print_hex(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilFunc(self->next, func, ref, mask);
}

static void REGAL_CALL http_glStencilMask(Layer *_layer, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilMask","(", print_hex(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilMask(self->next, mask);
}

static void REGAL_CALL http_glStencilOp(Layer *_layer, GLenum fail, GLenum zfail, GLenum zpass)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilOp","(", toString(fail), ", ", toString(zfail), ", ", toString(zpass), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilOp(self->next, fail, zfail, zpass);
}

static void REGAL_CALL http_glTexCoord1d(Layer *_layer, GLdouble s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1d","(", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1d(self->next, s);
}

static void REGAL_CALL http_glTexCoord1dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1dv","(", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1dv(self->next, v);
}

static void REGAL_CALL http_glTexCoord1f(Layer *_layer, GLfloat s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1f","(", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1f(self->next, s);
}

static void REGAL_CALL http_glTexCoord1fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1fv","(", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1fv(self->next, v);
}

static void REGAL_CALL http_glTexCoord1i(Layer *_layer, GLint s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1i","(", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1i(self->next, s);
}

static void REGAL_CALL http_glTexCoord1iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1iv","(", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1iv(self->next, v);
}

static void REGAL_CALL http_glTexCoord1s(Layer *_layer, GLshort s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1s","(", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1s(self->next, s);
}

static void REGAL_CALL http_glTexCoord1sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1sv","(", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1sv(self->next, v);
}

static void REGAL_CALL http_glTexCoord2d(Layer *_layer, GLdouble s, GLdouble t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2d","(", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2d(self->next, s, t);
}

static void REGAL_CALL http_glTexCoord2dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2dv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2dv(self->next, v);
}

static void REGAL_CALL http_glTexCoord2f(Layer *_layer, GLfloat s, GLfloat t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2f","(", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2f(self->next, s, t);
}

static void REGAL_CALL http_glTexCoord2fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fv(self->next, v);
}

static void REGAL_CALL http_glTexCoord2i(Layer *_layer, GLint s, GLint t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2i","(", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2i(self->next, s, t);
}

static void REGAL_CALL http_glTexCoord2iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2iv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2iv(self->next, v);
}

static void REGAL_CALL http_glTexCoord2s(Layer *_layer, GLshort s, GLshort t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2s","(", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2s(self->next, s, t);
}

static void REGAL_CALL http_glTexCoord2sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2sv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2sv(self->next, v);
}

static void REGAL_CALL http_glTexCoord3d(Layer *_layer, GLdouble s, GLdouble t, GLdouble r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3d","(", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3d(self->next, s, t, r);
}

static void REGAL_CALL http_glTexCoord3dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3dv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3dv(self->next, v);
}

static void REGAL_CALL http_glTexCoord3f(Layer *_layer, GLfloat s, GLfloat t, GLfloat r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3f","(", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3f(self->next, s, t, r);
}

static void REGAL_CALL http_glTexCoord3fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3fv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3fv(self->next, v);
}

static void REGAL_CALL http_glTexCoord3i(Layer *_layer, GLint s, GLint t, GLint r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3i","(", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3i(self->next, s, t, r);
}

static void REGAL_CALL http_glTexCoord3iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3iv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3iv(self->next, v);
}

static void REGAL_CALL http_glTexCoord3s(Layer *_layer, GLshort s, GLshort t, GLshort r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3s","(", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3s(self->next, s, t, r);
}

static void REGAL_CALL http_glTexCoord3sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3sv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3sv(self->next, v);
}

static void REGAL_CALL http_glTexCoord4d(Layer *_layer, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4d","(", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4d(self->next, s, t, r, q);
}

static void REGAL_CALL http_glTexCoord4dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4dv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4dv(self->next, v);
}

static void REGAL_CALL http_glTexCoord4f(Layer *_layer, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4f","(", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4f(self->next, s, t, r, q);
}

static void REGAL_CALL http_glTexCoord4fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4fv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4fv(self->next, v);
}

static void REGAL_CALL http_glTexCoord4i(Layer *_layer, GLint s, GLint t, GLint r, GLint q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4i","(", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4i(self->next, s, t, r, q);
}

static void REGAL_CALL http_glTexCoord4iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4iv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4iv(self->next, v);
}

static void REGAL_CALL http_glTexCoord4s(Layer *_layer, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4s","(", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4s(self->next, s, t, r, q);
}

static void REGAL_CALL http_glTexCoord4sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4sv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4sv(self->next, v);
}

static void REGAL_CALL http_glTexEnvf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexEnvf","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexEnvf(self->next, target, pname, param);
}

static void REGAL_CALL http_glTexEnvfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexEnvfv","(", toString(target), ", ", toString(pname), ", ", print_array(params,helper::size::texEnvv(target, pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexEnvfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexEnvi(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexEnvi","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexEnvi(self->next, target, pname, param);
}

static void REGAL_CALL http_glTexEnviv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexEnviv","(", toString(target), ", ", toString(pname), ", ", print_array(params,helper::size::texEnvv(target, pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexEnviv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexGend(Layer *_layer, GLenum coord, GLenum pname, GLdouble param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGend","(", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGend(self->next, coord, pname, param);
}

static void REGAL_CALL http_glTexGendv(Layer *_layer, GLenum coord, GLenum pname, const GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGendv","(", toString(coord), ", ", toString(pname), ", ", print_array(params,helper::size::texGenv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGendv(self->next, coord, pname, params);
}

static void REGAL_CALL http_glTexGenf(Layer *_layer, GLenum coord, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenf","(", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenf(self->next, coord, pname, param);
}

static void REGAL_CALL http_glTexGenfv(Layer *_layer, GLenum coord, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenfv","(", toString(coord), ", ", toString(pname), ", ", print_array(params,helper::size::texGenv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenfv(self->next, coord, pname, params);
}

static void REGAL_CALL http_glTexGeni(Layer *_layer, GLenum coord, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGeni","(", toString(coord), ", ", toString(pname), ", ", GLenumToString(static_cast<GLenum>(param)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGeni(self->next, coord, pname, param);
}

static void REGAL_CALL http_glTexGeniv(Layer *_layer, GLenum coord, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGeniv","(", toString(coord), ", ", toString(pname), ", ", print_array(params,helper::size::texGenv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGeniv(self->next, coord, pname, params);
}

static void REGAL_CALL http_glTexImage1D(Layer *_layer, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage1D","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage1D(self->next, target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL http_glTexImage2D(Layer *_layer, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage2D","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage2D(self->next, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL http_glTexParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterf","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterf(self->next, target, pname, param);
}

static void REGAL_CALL http_glTexParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterfv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexParameteri(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameteri","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameteri(self->next, target, pname, param);
}

static void REGAL_CALL http_glTexParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameteriv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTranslated(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTranslated","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTranslated(self->next, x, y, z);
}

static void REGAL_CALL http_glTranslatef(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTranslatef","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTranslatef(self->next, x, y, z);
}

static void REGAL_CALL http_glVertex2d(Layer *_layer, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2d","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2d(self->next, x, y);
}

static void REGAL_CALL http_glVertex2dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2dv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2dv(self->next, v);
}

static void REGAL_CALL http_glVertex2f(Layer *_layer, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2f","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2f(self->next, x, y);
}

static void REGAL_CALL http_glVertex2fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2fv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2fv(self->next, v);
}

static void REGAL_CALL http_glVertex2i(Layer *_layer, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2i","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2i(self->next, x, y);
}

static void REGAL_CALL http_glVertex2iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2iv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2iv(self->next, v);
}

static void REGAL_CALL http_glVertex2s(Layer *_layer, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2s","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2s(self->next, x, y);
}

static void REGAL_CALL http_glVertex2sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2sv","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2sv(self->next, v);
}

static void REGAL_CALL http_glVertex3d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3d","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3d(self->next, x, y, z);
}

static void REGAL_CALL http_glVertex3dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3dv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3dv(self->next, v);
}

static void REGAL_CALL http_glVertex3f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3f","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3f(self->next, x, y, z);
}

static void REGAL_CALL http_glVertex3fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3fv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3fv(self->next, v);
}

static void REGAL_CALL http_glVertex3i(Layer *_layer, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3i","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3i(self->next, x, y, z);
}

static void REGAL_CALL http_glVertex3iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3iv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3iv(self->next, v);
}

static void REGAL_CALL http_glVertex3s(Layer *_layer, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3s","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3s(self->next, x, y, z);
}

static void REGAL_CALL http_glVertex3sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3sv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3sv(self->next, v);
}

static void REGAL_CALL http_glVertex4d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4d","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4d(self->next, x, y, z, w);
}

static void REGAL_CALL http_glVertex4dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4dv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4dv(self->next, v);
}

static void REGAL_CALL http_glVertex4f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4f","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4f(self->next, x, y, z, w);
}

static void REGAL_CALL http_glVertex4fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4fv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4fv(self->next, v);
}

static void REGAL_CALL http_glVertex4i(Layer *_layer, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4i","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4i(self->next, x, y, z, w);
}

static void REGAL_CALL http_glVertex4iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4iv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4iv(self->next, v);
}

static void REGAL_CALL http_glVertex4s(Layer *_layer, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4s","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4s(self->next, x, y, z, w);
}

static void REGAL_CALL http_glVertex4sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4sv","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4sv(self->next, v);
}

static void REGAL_CALL http_glViewport(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glViewport","(", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglViewport(self->next, x, y, width, height);
}

// GL_VERSION_1_1

static GLboolean REGAL_CALL http_glAreTexturesResident(Layer *_layer, GLsizei n, const GLuint *textures, GLboolean *residences)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAreTexturesResident","(", n, ", ", print_array(textures,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglAreTexturesResident(self->next, n, textures, residences);
  return ret;
}

static void REGAL_CALL http_glArrayElement(Layer *_layer, GLint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glArrayElement","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglArrayElement(self->next, index);
}

static void REGAL_CALL http_glBindTexture(Layer *_layer, GLenum target, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTexture","(", toString(target), ", ", texture, ")");
  }
  if( texture != 0 ) {
    HttpTextureInfo & hti = self->texture[ texture ];
    RegalAssert( hti.name == 0 || hti.name == texture );
    if( hti.name == 0 ) {
      hti.name = texture;
      hti.target = target;
    }
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindTexture(self->next, target, texture);
}

static void REGAL_CALL http_glColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorPointer","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorPointer(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glCopyTexImage1D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexImage1D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexImage1D(self->next, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL http_glCopyTexImage2D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexImage2D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexImage2D(self->next, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL http_glCopyTexSubImage1D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage1D","(", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage1D(self->next, target, level, xoffset, x, y, width);
}

static void REGAL_CALL http_glCopyTexSubImage2D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage2D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage2D(self->next, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL http_glDeleteTextures(Layer *_layer, GLsizei n, const GLuint *textures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteTextures","(", n, ", ", print_array(textures,n), ")");
  }
  for( int i = 0; i < n; i++ ) {
    self->texture.erase( textures[i] );
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteTextures(self->next, n, textures);
}

static void REGAL_CALL http_glDisableClientState(Layer *_layer, GLenum cap)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableClientState","(", toString(cap), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableClientState(self->next, cap);
}

static void REGAL_CALL http_glDrawArrays(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArrays","(", GLmodeToString(mode), ", ", first, ", ", count, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArrays(self->next, mode, first, count);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElements(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElements","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(indices),Logging::pointers), ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElements(self->next, mode, count, type, indices);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glEdgeFlagPointer(Layer *_layer, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEdgeFlagPointer","(", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEdgeFlagPointer(self->next, stride, pointer);
}

static void REGAL_CALL http_glEnableClientState(Layer *_layer, GLenum cap)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableClientState","(", toString(cap), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableClientState(self->next, cap);
}

static void REGAL_CALL http_glGenTextures(Layer *_layer, GLsizei n, GLuint *textures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenTextures","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenTextures(self->next, n, textures);
}

static void REGAL_CALL http_glGetPointerv(Layer *_layer, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPointerv","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPointerv(self->next, pname, params);
}

static void REGAL_CALL http_glIndexPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexPointer","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexPointer(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glIndexub(Layer *_layer, GLubyte c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexub","(", c, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexub(self->next, c);
}

static void REGAL_CALL http_glIndexubv(Layer *_layer, const GLubyte *c)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexubv","(", print_array(c,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexubv(self->next, c);
}

static void REGAL_CALL http_glInterleavedArrays(Layer *_layer, GLenum format, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInterleavedArrays","(", toString(format), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInterleavedArrays(self->next, format, stride, pointer);
}

static GLboolean REGAL_CALL http_glIsTexture(Layer *_layer, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsTexture","(", texture, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsTexture(self->next, texture);
  return ret;
}

static void REGAL_CALL http_glNormalPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalPointer","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalPointer(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glPolygonOffset(Layer *_layer, GLfloat factor, GLfloat units)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPolygonOffset","(", factor, ", ", units, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPolygonOffset(self->next, factor, units);
}

static void REGAL_CALL http_glPopClientAttrib(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPopClientAttrib","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPopClientAttrib(self->next);
}

static void REGAL_CALL http_glPrioritizeTextures(Layer *_layer, GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPrioritizeTextures","(", n, ", ", print_array(textures,n), ", ", print_array(priorities,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPrioritizeTextures(self->next, n, textures, priorities);
}

static void REGAL_CALL http_glPushClientAttrib(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushClientAttrib","(", GLpushClientAttribToString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushClientAttrib(self->next, mask);
}

static void REGAL_CALL http_glTexCoordPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordPointer","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordPointer(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glTexSubImage1D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage1D","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage1D(self->next, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL http_glTexSubImage2D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage2D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage2D(self->next, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL http_glVertexPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexPointer","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexPointer(self->next, size, type, stride, pointer);
}

// GL_VERSION_1_2

static void REGAL_CALL http_glBlendColor(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendColor","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendColor(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glBlendEquation(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquation","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquation(self->next, mode);
}

static void REGAL_CALL http_glCopyTexSubImage3D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage3D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage3D(self->next, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL http_glDrawRangeElements(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawRangeElements","(", GLmodeToString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawRangeElements(self->next, mode, start, end, count, type, indices);
}

static void REGAL_CALL http_glTexImage3D(Layer *_layer, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage3D","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage3D(self->next, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL http_glTexSubImage3D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage3D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage3D(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_VERSION_1_3

static void REGAL_CALL http_glActiveTexture(Layer *_layer, GLenum texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glActiveTexture","(", toString(texture), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglActiveTexture(self->next, texture);
}

static void REGAL_CALL http_glClientActiveTexture(Layer *_layer, GLenum texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClientActiveTexture","(", toString(texture), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClientActiveTexture(self->next, texture);
}

static void REGAL_CALL http_glCompressedTexImage1D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage1D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage1D(self->next, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexImage2D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage2D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage2D(self->next, target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexImage3D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage3D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage3D(self->next, target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage1D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage1D","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage1D(self->next, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage2D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage2D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage2D(self->next, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage3D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage3D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage3D(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL http_glGetCompressedTexImage(Layer *_layer, GLenum target, GLint lod, GLvoid *img)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCompressedTexImage","(", toString(target), ", ", lod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCompressedTexImage(self->next, target, lod, img);
}

static void REGAL_CALL http_glLoadTransposeMatrixd(Layer *_layer, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadTransposeMatrixd","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadTransposeMatrixd(self->next, m);
}

static void REGAL_CALL http_glLoadTransposeMatrixf(Layer *_layer, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadTransposeMatrixf","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadTransposeMatrixf(self->next, m);
}

static void REGAL_CALL http_glMultTransposeMatrixd(Layer *_layer, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultTransposeMatrixd","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultTransposeMatrixd(self->next, m);
}

static void REGAL_CALL http_glMultTransposeMatrixf(Layer *_layer, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultTransposeMatrixf","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultTransposeMatrixf(self->next, m);
}

static void REGAL_CALL http_glMultiTexCoord1d(Layer *_layer, GLenum target, GLdouble s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1d","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1d(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1dv(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1dv","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1dv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord1f(Layer *_layer, GLenum target, GLfloat s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1f","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1f(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1fv(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1fv","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1fv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord1i(Layer *_layer, GLenum target, GLint s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1i","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1i(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1iv(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1iv","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1iv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord1s(Layer *_layer, GLenum target, GLshort s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1s","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1s(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1sv(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1sv","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1sv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2d(Layer *_layer, GLenum target, GLdouble s, GLdouble t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2d","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2d(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2dv(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2dv","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2dv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2f(Layer *_layer, GLenum target, GLfloat s, GLfloat t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2f","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2f(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2fv(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2fv","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2fv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2i(Layer *_layer, GLenum target, GLint s, GLint t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2i","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2i(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2iv(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2iv","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2iv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2s(Layer *_layer, GLenum target, GLshort s, GLshort t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2s","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2s(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2sv(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2sv","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2sv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3d(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3d","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3d(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3dv(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3dv","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3dv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3f(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3f","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3f(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3fv(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3fv","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3fv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3i(Layer *_layer, GLenum target, GLint s, GLint t, GLint r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3i","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3i(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3iv(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3iv","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3iv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3s(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3s","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3s(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3sv(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3sv","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3sv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4d(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4d","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4d(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4dv(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4dv","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4dv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4f(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4f","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4f(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4fv(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4fv","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4fv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4i(Layer *_layer, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4i","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4i(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4iv(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4iv","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4iv(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4s(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4s","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4s(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4sv(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4sv","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4sv(self->next, target, v);
}

static void REGAL_CALL http_glSampleCoverage(Layer *_layer, GLclampf value, GLboolean invert)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleCoverage","(", value, ", ", toString(invert), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleCoverage(self->next, value, invert);
}

// GL_VERSION_1_4

static void REGAL_CALL http_glBlendFuncSeparate(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparate","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparate(self->next, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

static void REGAL_CALL http_glFogCoordPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordPointer","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordPointer(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glFogCoordd(Layer *_layer, GLdouble coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordd","(", coord, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordd(self->next, coord);
}

static void REGAL_CALL http_glFogCoorddv(Layer *_layer, const GLdouble *coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoorddv","(", print_array(coord,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoorddv(self->next, coord);
}

static void REGAL_CALL http_glFogCoordf(Layer *_layer, GLfloat coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordf","(", coord, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordf(self->next, coord);
}

static void REGAL_CALL http_glFogCoordfv(Layer *_layer, const GLfloat *coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordfv","(", print_array(coord,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordfv(self->next, coord);
}

static void REGAL_CALL http_glMultiDrawArrays(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawArrays","(", GLmodeToString(mode), ", ", print_array(first,primcount), ", ", print_array(count,primcount), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawArrays(self->next, mode, first, count, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glMultiDrawElements(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElements","(", GLmodeToString(mode), ", ", print_array(count,primcount), ", ", toString(type), ", ", indices, ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElements(self->next, mode, count, type, indices, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glPointParameterf(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterf","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterf(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameterfv(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfv","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfv(self->next, pname, params);
}

static void REGAL_CALL http_glPointParameteri(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameteri","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameteri(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameteriv(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameteriv","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameteriv(self->next, pname, params);
}

static void REGAL_CALL http_glSecondaryColor3b(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3b","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3b(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3bv(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3bv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3bv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3d(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3d","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3d(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3dv(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3dv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3dv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3f(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3f","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3f(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3fv(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3fv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3fv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3i(Layer *_layer, GLint red, GLint green, GLint blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3i","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3i(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3iv(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3iv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3iv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3s(Layer *_layer, GLshort red, GLshort green, GLshort blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3s","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3s(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3sv(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3sv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3sv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3ub(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3ub","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3ub(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3ubv(Layer *_layer, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3ubv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3ubv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3ui(Layer *_layer, GLuint red, GLuint green, GLuint blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3ui","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3ui(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3uiv(Layer *_layer, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3uiv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3uiv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3us(Layer *_layer, GLushort red, GLushort green, GLushort blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3us","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3us(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3usv(Layer *_layer, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3usv","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3usv(self->next, v);
}

static void REGAL_CALL http_glSecondaryColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColorPointer","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColorPointer(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glWindowPos2d(Layer *_layer, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2d","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2d(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2dv(Layer *_layer, const GLdouble *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2dv","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2dv(self->next, p);
}

static void REGAL_CALL http_glWindowPos2f(Layer *_layer, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2f","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2f(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2fv(Layer *_layer, const GLfloat *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2fv","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2fv(self->next, p);
}

static void REGAL_CALL http_glWindowPos2i(Layer *_layer, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2i","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2i(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2iv(Layer *_layer, const GLint *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2iv","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2iv(self->next, p);
}

static void REGAL_CALL http_glWindowPos2s(Layer *_layer, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2s","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2s(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2sv(Layer *_layer, const GLshort *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2sv","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2sv(self->next, p);
}

static void REGAL_CALL http_glWindowPos3d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3d","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3d(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3dv(Layer *_layer, const GLdouble *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3dv","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3dv(self->next, p);
}

static void REGAL_CALL http_glWindowPos3f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3f","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3f(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3fv(Layer *_layer, const GLfloat *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3fv","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3fv(self->next, p);
}

static void REGAL_CALL http_glWindowPos3i(Layer *_layer, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3i","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3i(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3iv(Layer *_layer, const GLint *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3iv","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3iv(self->next, p);
}

static void REGAL_CALL http_glWindowPos3s(Layer *_layer, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3s","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3s(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3sv(Layer *_layer, const GLshort *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3sv","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3sv(self->next, p);
}

// GL_VERSION_1_5

static void REGAL_CALL http_glBeginQuery(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginQuery","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginQuery(self->next, target, id);
}

static void REGAL_CALL http_glBindBuffer(Layer *_layer, GLenum target, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBuffer","(", toString(target), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBuffer(self->next, target, buffer);
}

static void REGAL_CALL http_glBufferData(Layer *_layer, GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferData","(", toString(target), ", ", size, ", ", print_raw(data, data ? size : 0, Logging::rawLimit(data ? size : 0)), ", ", toString(usage), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferData(self->next, target, size, data, usage);
}

static void REGAL_CALL http_glBufferSubData(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferSubData","(", toString(target), ", ", offset, ", ", size, ", ", print_raw(data, data ? size : 0, Logging::rawLimit(data ? size : 0)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferSubData(self->next, target, offset, size, data);
}

static void REGAL_CALL http_glDeleteBuffers(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteBuffers","(", n, ", ", print_array(buffers,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteBuffers(self->next, n, buffers);
}

static void REGAL_CALL http_glDeleteQueries(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteQueries","(", n, ", ", print_array(ids,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteQueries(self->next, n, ids);
}

static void REGAL_CALL http_glEndQuery(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndQuery","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndQuery(self->next, target);
}

static void REGAL_CALL http_glGenBuffers(Layer *_layer, GLsizei n, GLuint *buffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenBuffers","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenBuffers(self->next, n, buffers);
}

static void REGAL_CALL http_glGenQueries(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenQueries","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenQueries(self->next, n, ids);
}

static void REGAL_CALL http_glGetBufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetBufferPointerv(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferPointerv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferPointerv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetBufferSubData(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferSubData","(", toString(target), ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferSubData(self->next, target, offset, size, data);
}

static void REGAL_CALL http_glGetQueryObjectiv(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectiv","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectiv(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectuiv(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectuiv","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectuiv(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryiv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryiv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryiv(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsBuffer(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsBuffer","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsBuffer(self->next, buffer);
  return ret;
}

static GLboolean REGAL_CALL http_glIsQuery(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsQuery","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsQuery(self->next, id);
  return ret;
}

static GLvoid *REGAL_CALL http_glMapBuffer(Layer *_layer, GLenum target, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapBuffer","(", toString(target), ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapBuffer(self->next, target, access);
  return ret;
}

static GLboolean REGAL_CALL http_glUnmapBuffer(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnmapBuffer","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglUnmapBuffer(self->next, target);
  return ret;
}

// GL_VERSION_2_0

static void REGAL_CALL http_glAttachShader(Layer *_layer, GLuint program, GLuint shader)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAttachShader","(", program, ", ", shader, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAttachShader(self->next, program, shader);
}

static void REGAL_CALL http_glBindAttribLocation(Layer *_layer, GLuint program, GLuint index, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindAttribLocation","(", program, ", ", index, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindAttribLocation(self->next, program, index, name);
}

static void REGAL_CALL http_glBlendEquationSeparate(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationSeparate","(", GLmodeToString(modeRGB), ", ", GLmodeToString(modeAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationSeparate(self->next, modeRGB, modeAlpha);
}

static void REGAL_CALL http_glCompileShader(Layer *_layer, GLuint shader)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompileShader","(", shader, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompileShader(self->next, shader);
}

static GLuint REGAL_CALL http_glCreateProgram(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateProgram","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateProgram(self->next);
  self->program.insert( ret );
  return ret;
}

static GLuint REGAL_CALL http_glCreateShader(Layer *_layer, GLenum type)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateShader","(", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateShader(self->next, type);
  self->shader.insert( ret );
  return ret;
}

static void REGAL_CALL http_glDeleteProgram(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteProgram","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteProgram(self->next, program);
  self->program.erase( program );
}

static void REGAL_CALL http_glDeleteShader(Layer *_layer, GLuint shader)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteShader","(", shader, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteShader(self->next, shader);
  self->shader.erase( shader );
}

static void REGAL_CALL http_glDetachShader(Layer *_layer, GLuint program, GLuint shader)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDetachShader","(", program, ", ", shader, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDetachShader(self->next, program, shader);
}

static void REGAL_CALL http_glDisableVertexAttribArray(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableVertexAttribArray","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableVertexAttribArray(self->next, index);
}

static void REGAL_CALL http_glDrawBuffers(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBuffers","(", n, ", ", print_array(bufs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBuffers(self->next, n, bufs);
}

static void REGAL_CALL http_glEnableVertexAttribArray(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableVertexAttribArray","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableVertexAttribArray(self->next, index);
}

static void REGAL_CALL http_glGetActiveAttrib(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveAttrib","(", program, ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveAttrib(self->next, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL http_glGetActiveUniform(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveUniform","(", program, ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveUniform(self->next, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL http_glGetAttachedShaders(Layer *_layer, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetAttachedShaders","(", program, ", ", maxCount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetAttachedShaders(self->next, program, maxCount, count, shaders);
}

static GLint REGAL_CALL http_glGetAttribLocation(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetAttribLocation","(", program, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetAttribLocation(self->next, program, name);
  return ret;
}

static void REGAL_CALL http_glGetProgramInfoLog(Layer *_layer, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramInfoLog","(", program, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramInfoLog(self->next, program, bufSize, length, infoLog);
}

static void REGAL_CALL http_glGetProgramiv(Layer *_layer, GLuint program, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramiv","(", program, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramiv(self->next, program, pname, params);
}

static void REGAL_CALL http_glGetShaderInfoLog(Layer *_layer, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetShaderInfoLog","(", shader, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetShaderInfoLog(self->next, shader, bufSize, length, infoLog);
}

static void REGAL_CALL http_glGetShaderSource(Layer *_layer, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetShaderSource","(", shader, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetShaderSource(self->next, shader, bufSize, length, source);
}

static void REGAL_CALL http_glGetShaderiv(Layer *_layer, GLuint shader, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetShaderiv","(", shader, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetShaderiv(self->next, shader, pname, params);
}

static GLint REGAL_CALL http_glGetUniformLocation(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformLocation","(", program, ", ", print_quote(reinterpret_cast<const char *>(name),'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetUniformLocation(self->next, program, name);
  return ret;
}

static void REGAL_CALL http_glGetUniformfv(Layer *_layer, GLuint program, GLint location, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformfv","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformfv(self->next, program, location, params);
}

static void REGAL_CALL http_glGetUniformiv(Layer *_layer, GLuint program, GLint location, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformiv","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformiv(self->next, program, location, params);
}

static void REGAL_CALL http_glGetVertexAttribPointerv(Layer *_layer, GLuint index, GLenum pname, GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribPointerv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribPointerv(self->next, index, pname, pointer);
}

static void REGAL_CALL http_glGetVertexAttribdv(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribdv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribdv(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribfv(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribfv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribfv(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribiv(Layer *_layer, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribiv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribiv(self->next, index, pname, params);
}

static GLboolean REGAL_CALL http_glIsProgram(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsProgram","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsProgram(self->next, program);
  return ret;
}

static GLboolean REGAL_CALL http_glIsShader(Layer *_layer, GLuint shader)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsShader","(", shader, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsShader(self->next, shader);
  return ret;
}

static void REGAL_CALL http_glLinkProgram(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLinkProgram","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLinkProgram(self->next, program);
}

static void REGAL_CALL http_glShaderSource(Layer *_layer, GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderSource","(", shader, ", ", count, ", ", print_array(reinterpret_cast<const char * const *>(string),string ? count : 0,"\""), ", ", print_array(length,length ? count : 0), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderSource(self->next, shader, count, string, length);
}

static void REGAL_CALL http_glStencilFuncSeparate(Layer *_layer, GLenum face, GLenum func, GLint ref, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilFuncSeparate","(", toString(face), ", ", toString(func), ", ", print_hex(ref), ", ", print_hex(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilFuncSeparate(self->next, face, func, ref, mask);
}

static void REGAL_CALL http_glStencilMaskSeparate(Layer *_layer, GLenum face, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilMaskSeparate","(", toString(face), ", ", print_hex(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilMaskSeparate(self->next, face, mask);
}

static void REGAL_CALL http_glStencilOpSeparate(Layer *_layer, GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilOpSeparate","(", toString(face), ", ", toString(fail), ", ", toString(zfail), ", ", toString(zpass), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilOpSeparate(self->next, face, fail, zfail, zpass);
}

static void REGAL_CALL http_glUniform1f(Layer *_layer, GLint location, GLfloat v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1f","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1f(self->next, location, v0);
}

static void REGAL_CALL http_glUniform1fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1fv","(", location, ", ", count, ", ", print_array(value,1 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1fv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform1i(Layer *_layer, GLint location, GLint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1i","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1i(self->next, location, v0);
}

static void REGAL_CALL http_glUniform1iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1iv","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1iv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2f","(", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2f(self->next, location, v0, v1);
}

static void REGAL_CALL http_glUniform2fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2fv","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2fv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2i(Layer *_layer, GLint location, GLint v0, GLint v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2i","(", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2i(self->next, location, v0, v1);
}

static void REGAL_CALL http_glUniform2iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2iv","(", location, ", ", count, ", ", print_array(value,2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2iv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3f","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3f(self->next, location, v0, v1, v2);
}

static void REGAL_CALL http_glUniform3fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3fv","(", location, ", ", count, ", ", print_array(value,3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3fv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3i(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3i","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3i(self->next, location, v0, v1, v2);
}

static void REGAL_CALL http_glUniform3iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3iv","(", location, ", ", count, ", ", print_array(value,3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3iv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4f","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4f(self->next, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glUniform4fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4fv","(", location, ", ", count, ", ", print_array(value,4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4fv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4i(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4i","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4i(self->next, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glUniform4iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4iv","(", location, ", ", count, ", ", print_array(value,4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4iv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniformMatrix2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUseProgram(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUseProgram","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUseProgram(self->next, program);
}

static void REGAL_CALL http_glValidateProgram(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glValidateProgram","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglValidateProgram(self->next, program);
}

static void REGAL_CALL http_glVertexAttrib1d(Layer *_layer, GLuint index, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1d","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1d(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1dv","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib1f(Layer *_layer, GLuint index, GLfloat x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1f","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1f(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1fv(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1fv","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1fv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib1s(Layer *_layer, GLuint index, GLshort x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1s","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1s(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1sv(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1sv","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1sv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2d(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2d","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2d(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2dv","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2f(Layer *_layer, GLuint index, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2f","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2f(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2fv(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2fv","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2fv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2s(Layer *_layer, GLuint index, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2s","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2s(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2sv(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2sv","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2sv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3d","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3d(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3dv","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3f(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3f","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3f(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3fv(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3fv","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3fv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3s(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3s","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3s(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3sv(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3sv","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3sv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4Nbv(Layer *_layer, GLuint index, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Nbv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Nbv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4Niv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Niv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Niv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4Nsv(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Nsv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Nsv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4Nub(Layer *_layer, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Nub","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Nub(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4Nubv(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Nubv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Nubv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4Nuiv(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Nuiv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Nuiv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4Nusv(Layer *_layer, GLuint index, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4Nusv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4Nusv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4bv(Layer *_layer, GLuint index, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4bv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4bv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4d","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4d(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4dv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4f(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4f","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4f(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4fv(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4fv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4fv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4iv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4iv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4iv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4s(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4s","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4s(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4sv(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4sv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4sv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4ubv(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4ubv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4ubv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4uiv(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4uiv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4uiv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4usv(Layer *_layer, GLuint index, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4usv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4usv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribPointer","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribPointer(self->next, index, size, type, normalized, stride, pointer);
}

// GL_VERSION_2_1

static void REGAL_CALL http_glUniformMatrix2x3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2x3fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2x3fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix2x4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2x4fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2x4fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3x2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3x2fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3x2fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3x4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3x4fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3x4fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4x2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4x2fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4x2fv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4x3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4x3fv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4x3fv(self->next, location, count, transpose, value);
}

// GL_VERSION_3_0

static void REGAL_CALL http_glBeginConditionalRender(Layer *_layer, GLuint id, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginConditionalRender","(", id, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginConditionalRender(self->next, id, mode);
}

static void REGAL_CALL http_glBeginTransformFeedback(Layer *_layer, GLenum primitiveMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginTransformFeedback","(", toString(primitiveMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginTransformFeedback(self->next, primitiveMode);
}

static void REGAL_CALL http_glBindFragDataLocation(Layer *_layer, GLuint program, GLuint color, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFragDataLocation","(", program, ", ", color, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFragDataLocation(self->next, program, color, name);
}

static void REGAL_CALL http_glClampColor(Layer *_layer, GLenum target, GLenum clamp)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClampColor","(", toString(target), ", ", toString(clamp), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClampColor(self->next, target, clamp);
}

static void REGAL_CALL http_glClearBufferfi(Layer *_layer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearBufferfi","(", toString(buffer), ", ", drawbuffer, ", ", depth, ", ", stencil, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearBufferfi(self->next, buffer, drawbuffer, depth, stencil);
}

static void REGAL_CALL http_glClearBufferfv(Layer *_layer, GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearBufferfv","(", toString(buffer), ", ", drawbuffer, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearBufferfv(self->next, buffer, drawbuffer, value);
}

static void REGAL_CALL http_glClearBufferiv(Layer *_layer, GLenum buffer, GLint drawbuffer, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearBufferiv","(", toString(buffer), ", ", drawbuffer, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearBufferiv(self->next, buffer, drawbuffer, value);
}

static void REGAL_CALL http_glClearBufferuiv(Layer *_layer, GLenum buffer, GLint drawbuffer, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearBufferuiv","(", toString(buffer), ", ", drawbuffer, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearBufferuiv(self->next, buffer, drawbuffer, value);
}

static void REGAL_CALL http_glColorMaski(Layer *_layer, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorMaski","(", index, ", ", toString(r), ", ", toString(g), ", ", toString(b), ", ", toString(a), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorMaski(self->next, index, r, g, b, a);
}

static void REGAL_CALL http_glDisablei(Layer *_layer, GLenum cap, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisablei","(", toString(cap), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisablei(self->next, cap, index);
}

static void REGAL_CALL http_glEnablei(Layer *_layer, GLenum cap, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnablei","(", toString(cap), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnablei(self->next, cap, index);
}

static void REGAL_CALL http_glEndConditionalRender(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndConditionalRender","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndConditionalRender(self->next);
}

static void REGAL_CALL http_glEndTransformFeedback(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndTransformFeedback","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndTransformFeedback(self->next);
}

static void REGAL_CALL http_glGetBooleani_v(Layer *_layer, GLenum target, GLuint index, GLboolean *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBooleani_v","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBooleani_v(self->next, target, index, data);
}

static GLint REGAL_CALL http_glGetFragDataLocation(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragDataLocation","(", program, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetFragDataLocation(self->next, program, name);
  return ret;
}

static const GLubyte *REGAL_CALL http_glGetStringi(Layer *_layer, GLenum name, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
    const GLubyte * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetStringi","(", toString(name), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetStringi(self->next, name, index);
  return ret;
}

static void REGAL_CALL http_glGetTexParameterIiv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterIiv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterIiv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetTexParameterIuiv(Layer *_layer, GLenum target, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterIuiv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterIuiv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetTransformFeedbackVarying(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTransformFeedbackVarying","(", program, ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTransformFeedbackVarying(self->next, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL http_glGetUniformuiv(Layer *_layer, GLuint program, GLint location, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformuiv","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformuiv(self->next, program, location, params);
}

static void REGAL_CALL http_glGetVertexAttribIiv(Layer *_layer, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribIiv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribIiv(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribIuiv(Layer *_layer, GLuint index, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribIuiv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribIuiv(self->next, index, pname, params);
}

static GLboolean REGAL_CALL http_glIsEnabledi(Layer *_layer, GLenum target, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsEnabledi","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsEnabledi(self->next, target, index);
  return ret;
}

static void REGAL_CALL http_glTexParameterIiv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterIiv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterIiv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexParameterIuiv(Layer *_layer, GLenum target, GLenum pname, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterIuiv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterIuiv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTransformFeedbackVaryings(Layer *_layer, GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTransformFeedbackVaryings","(", program, ", ", count, ", ", print_array(varyings,count,"\""), ", ", toString(bufferMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTransformFeedbackVaryings(self->next, program, count, varyings, bufferMode);
}

static void REGAL_CALL http_glUniform1ui(Layer *_layer, GLint location, GLuint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1ui","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1ui(self->next, location, v0);
}

static void REGAL_CALL http_glUniform1uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1uiv","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1uiv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2ui(Layer *_layer, GLint location, GLuint v0, GLuint v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2ui","(", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2ui(self->next, location, v0, v1);
}

static void REGAL_CALL http_glUniform2uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2uiv","(", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2uiv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3ui(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3ui","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3ui(self->next, location, v0, v1, v2);
}

static void REGAL_CALL http_glUniform3uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3uiv","(", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3uiv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4ui(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4ui","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4ui(self->next, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glUniform4uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4uiv","(", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4uiv(self->next, location, count, value);
}

static void REGAL_CALL http_glVertexAttribI1i(Layer *_layer, GLuint index, GLint x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1i","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1i(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribI1iv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1iv","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1iv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI1ui(Layer *_layer, GLuint index, GLuint x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1ui","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1ui(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribI1uiv(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1uiv","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1uiv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI2i(Layer *_layer, GLuint index, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2i","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2i(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribI2iv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2iv","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2iv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI2ui(Layer *_layer, GLuint index, GLuint x, GLuint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2ui","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2ui(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribI2uiv(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2uiv","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2uiv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI3i(Layer *_layer, GLuint index, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3i","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3i(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribI3iv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3iv","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3iv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI3ui(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3ui","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3ui(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribI3uiv(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3uiv","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3uiv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4bv(Layer *_layer, GLuint index, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4bv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4bv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4i(Layer *_layer, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4i","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4i(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribI4iv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4iv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4iv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4sv(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4sv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4sv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4ubv(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4ubv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4ubv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4ui(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4ui","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4ui(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribI4uiv(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4uiv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4uiv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4usv(Layer *_layer, GLuint index, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4usv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4usv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribIPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribIPointer","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribIPointer(self->next, index, size, type, stride, pointer);
}

// GL_VERSION_3_1

static void REGAL_CALL http_glDrawArraysInstanced(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysInstanced","(", GLmodeToString(mode), ", ", start, ", ", count, ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysInstanced(self->next, mode, start, count, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstanced(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstanced","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstanced(self->next, mode, count, type, indices, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glPrimitiveRestartIndex(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPrimitiveRestartIndex","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPrimitiveRestartIndex(self->next, index);
}

static void REGAL_CALL http_glTexBuffer(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexBuffer","(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexBuffer(self->next, target, internalformat, buffer);
}

// GL_VERSION_3_2

static void REGAL_CALL http_glFramebufferTexture(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture(self->next, target, attachment, texture, level);
}

static void REGAL_CALL http_glFramebufferTextureFace(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureFace","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureFace(self->next, target, attachment, texture, level, face);
}

static void REGAL_CALL http_glGetBufferParameteri64v(Layer *_layer, GLenum target, GLenum pname, GLint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferParameteri64v","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferParameteri64v(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetInteger64i_v(Layer *_layer, GLenum target, GLuint index, GLint64 *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInteger64i_v","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInteger64i_v(self->next, target, index, data);
}

// GL_VERSION_3_3

static void REGAL_CALL http_glVertexAttribDivisor(Layer *_layer, GLuint index, GLuint divisor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribDivisor","(", index, ", ", divisor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribDivisor(self->next, index, divisor);
}

// GL_VERSION_4_0

static void REGAL_CALL http_glBlendEquationSeparatei(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationSeparatei","(", buf, ", ", GLmodeToString(modeRGB), ", ", GLmodeToString(modeAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationSeparatei(self->next, buf, modeRGB, modeAlpha);
}

static void REGAL_CALL http_glBlendEquationi(Layer *_layer, GLuint buf, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationi","(", buf, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationi(self->next, buf, mode);
}

static void REGAL_CALL http_glBlendFuncSeparatei(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparatei","(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparatei(self->next, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void REGAL_CALL http_glBlendFunci(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFunci","(", buf, ", ", toString(src), ", ", toString(dst), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFunci(self->next, buf, src, dst);
}

// GL_3DFX_tbuffer

static void REGAL_CALL http_glTbufferMask3DFX(Layer *_layer, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTbufferMask3DFX","(", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTbufferMask3DFX(self->next, mask);
}

// GL_AMD_debug_output

static void REGAL_CALL http_glDebugMessageCallbackAMD(Layer *_layer, GLDEBUGPROCAMD callback, GLvoid *userParam)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageCallbackAMD","(", print_optional(userParam,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageCallbackAMD(self->next, callback, userParam);
}

static void REGAL_CALL http_glDebugMessageEnableAMD(Layer *_layer, GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageEnableAMD","(", toString(category), ", ", toString(severity), ", ", count, ", ", print_optional(ids,Logging::pointers), ", ", toString(enabled), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageEnableAMD(self->next, category, severity, count, ids, enabled);
}

static void REGAL_CALL http_glDebugMessageInsertAMD(Layer *_layer, GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageInsertAMD","(", toString(category), ", ", toString(severity), ", ", id, ", ", length, ", ", print_quote(buf,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageInsertAMD(self->next, category, severity, id, length, buf);
}

static GLuint REGAL_CALL http_glGetDebugMessageLogAMD(Layer *_layer, GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDebugMessageLogAMD","(", count, ", ", bufsize, ", ", print_optional(categories,Logging::pointers), ", ", print_optional(severities,Logging::pointers), ", ", print_optional(ids,Logging::pointers), ", ", print_optional(lengths,Logging::pointers), ", ", print_quote(message,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetDebugMessageLogAMD(self->next, count, bufsize, categories, severities, ids, lengths, message);
  return ret;
}

// GL_AMD_draw_buffers_blend

static void REGAL_CALL http_glBlendEquationIndexedAMD(Layer *_layer, GLuint buf, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationIndexedAMD","(", buf, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationIndexedAMD(self->next, buf, mode);
}

static void REGAL_CALL http_glBlendEquationSeparateIndexedAMD(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationSeparateIndexedAMD","(", buf, ", ", GLmodeToString(modeRGB), ", ", GLmodeToString(modeAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationSeparateIndexedAMD(self->next, buf, modeRGB, modeAlpha);
}

static void REGAL_CALL http_glBlendFuncIndexedAMD(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncIndexedAMD","(", buf, ", ", toString(src), ", ", toString(dst), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncIndexedAMD(self->next, buf, src, dst);
}

static void REGAL_CALL http_glBlendFuncSeparateIndexedAMD(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparateIndexedAMD","(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparateIndexedAMD(self->next, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

// GL_AMD_interleaved_elements

static void REGAL_CALL http_glVertexAttribParameteriAMD(Layer *_layer, GLuint index, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribParameteriAMD","(", index, ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribParameteriAMD(self->next, index, pname, param);
}

// GL_AMD_multi_draw_indirect

static void REGAL_CALL http_glMultiDrawArraysIndirectAMD(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawArraysIndirectAMD","(", GLmodeToString(mode), ", ", print_optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawArraysIndirectAMD(self->next, mode, indirect, primcount, stride);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glMultiDrawElementsIndirectAMD(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElementsIndirectAMD","(", GLmodeToString(mode), ", ", toString(type), ", ", print_optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElementsIndirectAMD(self->next, mode, type, indirect, primcount, stride);
  self->count.lastDraw = self->count.call;
}

// GL_AMD_name_gen_delete

static void REGAL_CALL http_glDeleteNamesAMD(Layer *_layer, GLenum identifier, GLuint num, const GLuint *names)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteNamesAMD","(", toString(identifier), ", ", num, ", ", print_optional(names,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteNamesAMD(self->next, identifier, num, names);
}

static void REGAL_CALL http_glGenNamesAMD(Layer *_layer, GLenum identifier, GLuint num, GLuint *names)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenNamesAMD","(", toString(identifier), ", ", num, ", ", print_optional(names,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenNamesAMD(self->next, identifier, num, names);
}

static GLboolean REGAL_CALL http_glIsNameAMD(Layer *_layer, GLenum identifier, GLuint name)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsNameAMD","(", toString(identifier), ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsNameAMD(self->next, identifier, name);
  return ret;
}

// GL_AMD_performance_monitor

static void REGAL_CALL http_glBeginPerfMonitorAMD(Layer *_layer, GLuint monitor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginPerfMonitorAMD","(", monitor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginPerfMonitorAMD(self->next, monitor);
}

static void REGAL_CALL http_glDeletePerfMonitorsAMD(Layer *_layer, GLsizei n, GLuint *monitors)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeletePerfMonitorsAMD","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeletePerfMonitorsAMD(self->next, n, monitors);
}

static void REGAL_CALL http_glEndPerfMonitorAMD(Layer *_layer, GLuint monitor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndPerfMonitorAMD","(", monitor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndPerfMonitorAMD(self->next, monitor);
}

static void REGAL_CALL http_glGenPerfMonitorsAMD(Layer *_layer, GLsizei n, GLuint *monitors)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenPerfMonitorsAMD","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenPerfMonitorsAMD(self->next, n, monitors);
}

static void REGAL_CALL http_glGetPerfMonitorCounterDataAMD(Layer *_layer, GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPerfMonitorCounterDataAMD","(", monitor, ", ", toString(pname), ", ", dataSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPerfMonitorCounterDataAMD(self->next, monitor, pname, dataSize, data, bytesWritten);
}

static void REGAL_CALL http_glGetPerfMonitorCounterInfoAMD(Layer *_layer, GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPerfMonitorCounterInfoAMD","(", group, ", ", counter, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPerfMonitorCounterInfoAMD(self->next, group, counter, pname, data);
}

static void REGAL_CALL http_glGetPerfMonitorCounterStringAMD(Layer *_layer, GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPerfMonitorCounterStringAMD","(", group, ", ", counter, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPerfMonitorCounterStringAMD(self->next, group, counter, bufSize, length, counterString);
}

static void REGAL_CALL http_glGetPerfMonitorCountersAMD(Layer *_layer, GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPerfMonitorCountersAMD","(", group, ", ", countersSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPerfMonitorCountersAMD(self->next, group, numCounters, maxActiveCounters, countersSize, counters);
}

static void REGAL_CALL http_glGetPerfMonitorGroupStringAMD(Layer *_layer, GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPerfMonitorGroupStringAMD","(", group, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPerfMonitorGroupStringAMD(self->next, group, bufSize, length, groupString);
}

static void REGAL_CALL http_glGetPerfMonitorGroupsAMD(Layer *_layer, GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPerfMonitorGroupsAMD","(", groupsSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPerfMonitorGroupsAMD(self->next, numGroups, groupsSize, groups);
}

static void REGAL_CALL http_glSelectPerfMonitorCountersAMD(Layer *_layer, GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSelectPerfMonitorCountersAMD","(", monitor, ", ", toString(enable), ", ", group, ", ", numCounters, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSelectPerfMonitorCountersAMD(self->next, monitor, enable, group, numCounters, counterList);
}

// GL_AMD_sample_positions

static void REGAL_CALL http_glSetMultisamplefvAMD(Layer *_layer, GLenum pname, GLuint index, const GLfloat *val)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSetMultisamplefvAMD","(", toString(pname), ", ", index, ", ", print_optional(val,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSetMultisamplefvAMD(self->next, pname, index, val);
}

// GL_AMD_sparse_texture

static void REGAL_CALL http_glTexStorageSparseAMD(Layer *_layer, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorageSparseAMD","(", toString(target), ", ", toString(internalFormat), ", ", width, ", ", height, ", ", depth, ", ", layers, ", ", GLtexStorageSparseAMDToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorageSparseAMD(self->next, target, internalFormat, width, height, depth, layers, flags);
}

static void REGAL_CALL http_glTextureStorageSparseAMD(Layer *_layer, GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureStorageSparseAMD","(", texture, ", ", toString(target), ", ", toString(internalFormat), ", ", width, ", ", height, ", ", depth, ", ", layers, ", ", GLtexStorageSparseAMDToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureStorageSparseAMD(self->next, texture, target, internalFormat, width, height, depth, layers, flags);
}

// GL_AMD_stencil_operation_extended

static void REGAL_CALL http_glStencilOpValueAMD(Layer *_layer, GLenum face, GLuint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilOpValueAMD","(", toString(face), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilOpValueAMD(self->next, face, value);
}

// GL_AMD_vertex_shader_tessellator

static void REGAL_CALL http_glTessellationFactorAMD(Layer *_layer, GLfloat factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTessellationFactorAMD","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTessellationFactorAMD(self->next, factor);
}

static void REGAL_CALL http_glTessellationModeAMD(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTessellationModeAMD","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTessellationModeAMD(self->next, mode);
}

// GL_ANGLE_framebuffer_blit

static void REGAL_CALL http_glBlitFramebufferANGLE(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlitFramebufferANGLE","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", GLblitFramebufferToString(mask), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlitFramebufferANGLE(self->next, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_ANGLE_framebuffer_multisample

static void REGAL_CALL http_glRenderbufferStorageMultisampleANGLE(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageMultisampleANGLE","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageMultisampleANGLE(self->next, target, samples, internalformat, width, height);
}

// GL_ANGLE_instanced_arrays

static void REGAL_CALL http_glDrawArraysInstancedANGLE(Layer *_layer, GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysInstancedANGLE","(", GLmodeToString(mode), ", ", first, ", ", count, ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysInstancedANGLE(self->next, mode, first, count, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstancedANGLE(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstancedANGLE","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstancedANGLE(self->next, mode, count, type, indices, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glVertexAttribDivisorANGLE(Layer *_layer, GLuint index, GLuint divisor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribDivisorANGLE","(", index, ", ", divisor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribDivisorANGLE(self->next, index, divisor);
}

// GL_ANGLE_timer_query

static void REGAL_CALL http_glBeginQueryANGLE(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginQueryANGLE","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginQueryANGLE(self->next, target, id);
}

static void REGAL_CALL http_glDeleteQueriesANGLE(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteQueriesANGLE","(", n, ", ", print_optional(ids,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteQueriesANGLE(self->next, n, ids);
}

static void REGAL_CALL http_glEndQueryANGLE(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndQueryANGLE","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndQueryANGLE(self->next, target);
}

static void REGAL_CALL http_glGenQueriesANGLE(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenQueriesANGLE","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenQueriesANGLE(self->next, n, ids);
}

static void REGAL_CALL http_glGetQueryObjecti64vANGLE(Layer *_layer, GLuint id, GLenum pname, GLint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjecti64vANGLE","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjecti64vANGLE(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectivANGLE(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectivANGLE","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectivANGLE(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectui64vANGLE(Layer *_layer, GLuint id, GLenum pname, GLuint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectui64vANGLE","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectui64vANGLE(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectuivANGLE(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectuivANGLE","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectuivANGLE(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryivANGLE(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryivANGLE","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryivANGLE(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsQueryANGLE(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsQueryANGLE","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsQueryANGLE(self->next, id);
  return ret;
}

static void REGAL_CALL http_glQueryCounterANGLE(Layer *_layer, GLuint id, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glQueryCounterANGLE","(", id, ", ", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglQueryCounterANGLE(self->next, id, target);
}

// GL_ANGLE_translated_shader_source

static void REGAL_CALL http_glGetTranslatedShaderSourceANGLE(Layer *_layer, GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTranslatedShaderSourceANGLE","(", shader, ", ", bufsize, ", ", print_optional(length,Logging::pointers), ", ", print_quote(source,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTranslatedShaderSourceANGLE(self->next, shader, bufsize, length, source);
}

// GL_APPLE_copy_texture_levels

static void REGAL_CALL http_glCopyTextureLevelsAPPLE(Layer *_layer, GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTextureLevelsAPPLE","(", destinationTexture, ", ", sourceTexture, ", ", sourceBaseLevel, ", ", sourceLevelCount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTextureLevelsAPPLE(self->next, destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}

// GL_APPLE_element_array

static void REGAL_CALL http_glDrawElementArrayAPPLE(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementArrayAPPLE","(", GLmodeToString(mode), ", ", first, ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementArrayAPPLE(self->next, mode, first, count);
}

static void REGAL_CALL http_glDrawRangeElementArrayAPPLE(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawRangeElementArrayAPPLE","(", GLmodeToString(mode), ", ", start, ", ", end, ", ", first, ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawRangeElementArrayAPPLE(self->next, mode, start, end, first, count);
}

static void REGAL_CALL http_glElementPointerAPPLE(Layer *_layer, GLenum type, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glElementPointerAPPLE","(", toString(type), ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglElementPointerAPPLE(self->next, type, pointer);
}

static void REGAL_CALL http_glMultiDrawElementArrayAPPLE(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElementArrayAPPLE","(", GLmodeToString(mode), ", ", print_optional(first,Logging::pointers), ", ", print_optional(count,Logging::pointers), ", ", primcount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElementArrayAPPLE(self->next, mode, first, count, primcount);
}

static void REGAL_CALL http_glMultiDrawRangeElementArrayAPPLE(Layer *_layer, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawRangeElementArrayAPPLE","(", GLmodeToString(mode), ", ", start, ", ", end, ", ", print_optional(first,Logging::pointers), ", ", print_optional(count,Logging::pointers), ", ", primcount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawRangeElementArrayAPPLE(self->next, mode, start, end, first, count, primcount);
}

// GL_APPLE_fence

static void REGAL_CALL http_glDeleteFencesAPPLE(Layer *_layer, GLsizei n, const GLuint *fences)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteFencesAPPLE","(", n, ", ", print_optional(fences,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteFencesAPPLE(self->next, n, fences);
}

static void REGAL_CALL http_glFinishFenceAPPLE(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinishFenceAPPLE","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinishFenceAPPLE(self->next, fence);
}

static void REGAL_CALL http_glFinishObjectAPPLE(Layer *_layer, GLenum object, GLint name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinishObjectAPPLE","(", toString(object), ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinishObjectAPPLE(self->next, object, name);
}

static void REGAL_CALL http_glGenFencesAPPLE(Layer *_layer, GLsizei n, GLuint *fences)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenFencesAPPLE","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenFencesAPPLE(self->next, n, fences);
}

static GLboolean REGAL_CALL http_glIsFenceAPPLE(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsFenceAPPLE","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsFenceAPPLE(self->next, fence);
  return ret;
}

static void REGAL_CALL http_glSetFenceAPPLE(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSetFenceAPPLE","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSetFenceAPPLE(self->next, fence);
}

static GLboolean REGAL_CALL http_glTestFenceAPPLE(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTestFenceAPPLE","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglTestFenceAPPLE(self->next, fence);
  return ret;
}

static GLboolean REGAL_CALL http_glTestObjectAPPLE(Layer *_layer, GLenum object, GLuint name)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTestObjectAPPLE","(", toString(object), ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglTestObjectAPPLE(self->next, object, name);
  return ret;
}

// GL_APPLE_flush_buffer_range

static void REGAL_CALL http_glBufferParameteriAPPLE(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferParameteriAPPLE","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferParameteriAPPLE(self->next, target, pname, param);
}

static void REGAL_CALL http_glFlushMappedBufferRangeAPPLE(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushMappedBufferRangeAPPLE","(", toString(target), ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushMappedBufferRangeAPPLE(self->next, target, offset, size);
}

// GL_APPLE_flush_render

static void REGAL_CALL http_glFinishRenderAPPLE(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinishRenderAPPLE","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinishRenderAPPLE(self->next);
}

static void REGAL_CALL http_glFlushRenderAPPLE(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushRenderAPPLE","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushRenderAPPLE(self->next);
}

static void REGAL_CALL http_glSwapAPPLE(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSwapAPPLE","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSwapAPPLE(self->next);
}

// GL_APPLE_framebuffer_multisample

static void REGAL_CALL http_glRenderbufferStorageMultisampleAPPLE(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageMultisampleAPPLE","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageMultisampleAPPLE(self->next, target, samples, internalformat, width, height);
}

static void REGAL_CALL http_glResolveMultisampleFramebufferAPPLE(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResolveMultisampleFramebufferAPPLE","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResolveMultisampleFramebufferAPPLE(self->next);
}

// GL_APPLE_object_purgeable

static void REGAL_CALL http_glGetObjectParameterivAPPLE(Layer *_layer, GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectParameterivAPPLE","(", toString(objectType), ", ", name, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectParameterivAPPLE(self->next, objectType, name, pname, params);
}

static GLenum REGAL_CALL http_glObjectPurgeableAPPLE(Layer *_layer, GLenum objectType, GLuint name, GLenum option)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glObjectPurgeableAPPLE","(", toString(objectType), ", ", name, ", ", toString(option), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglObjectPurgeableAPPLE(self->next, objectType, name, option);
  return ret;
}

static GLenum REGAL_CALL http_glObjectUnpurgeableAPPLE(Layer *_layer, GLenum objectType, GLuint name, GLenum option)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glObjectUnpurgeableAPPLE","(", toString(objectType), ", ", name, ", ", toString(option), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglObjectUnpurgeableAPPLE(self->next, objectType, name, option);
  return ret;
}

// GL_APPLE_sync

static GLenum REGAL_CALL http_glClientWaitSyncAPPLE(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClientWaitSyncAPPLE","(", sync, ", ", GLclientWaitSyncToString(flags), ", ", timeout, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglClientWaitSyncAPPLE(self->next, sync, flags, timeout);
  return ret;
}

static void REGAL_CALL http_glDeleteSyncAPPLE(Layer *_layer, GLsync sync)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteSyncAPPLE","(", sync, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteSyncAPPLE(self->next, sync);
}

static GLsync REGAL_CALL http_glFenceSyncAPPLE(Layer *_layer, GLenum condition, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
    GLsync  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFenceSyncAPPLE","(", toString(condition), ", ", GLfenceSyncToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglFenceSyncAPPLE(self->next, condition, flags);
  return ret;
}

static void REGAL_CALL http_glGetInteger64vAPPLE(Layer *_layer, GLenum pname, GLint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInteger64vAPPLE","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInteger64vAPPLE(self->next, pname, params);
}

static void REGAL_CALL http_glGetSyncivAPPLE(Layer *_layer, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSyncivAPPLE","(", sync, ", ", toString(pname), ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_optional(values,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSyncivAPPLE(self->next, sync, pname, bufSize, length, values);
}

static GLboolean REGAL_CALL http_glIsSyncAPPLE(Layer *_layer, GLsync sync)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsSyncAPPLE","(", sync, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsSyncAPPLE(self->next, sync);
  return ret;
}

static void REGAL_CALL http_glWaitSyncAPPLE(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWaitSyncAPPLE","(", sync, ", ", GLwaitSyncToString(flags), ", ", timeout, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWaitSyncAPPLE(self->next, sync, flags, timeout);
}

// GL_APPLE_texture_range

static void REGAL_CALL http_glGetTexParameterPointervAPPLE(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterPointervAPPLE","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterPointervAPPLE(self->next, target, pname, params);
}

static void REGAL_CALL http_glTextureRangeAPPLE(Layer *_layer, GLenum target, GLsizei length, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureRangeAPPLE","(", toString(target), ", ", length, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureRangeAPPLE(self->next, target, length, pointer);
}

// GL_APPLE_vertex_array_object

static void REGAL_CALL http_glBindVertexArrayAPPLE(Layer *_layer, GLuint array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVertexArrayAPPLE","(", array, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVertexArrayAPPLE(self->next, array);
}

static void REGAL_CALL http_glDeleteVertexArraysAPPLE(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteVertexArraysAPPLE","(", n, ", ", print_optional(arrays,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteVertexArraysAPPLE(self->next, n, arrays);
}

static void REGAL_CALL http_glGenVertexArraysAPPLE(Layer *_layer, GLsizei n, GLuint *arrays)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenVertexArraysAPPLE","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenVertexArraysAPPLE(self->next, n, arrays);
}

static GLboolean REGAL_CALL http_glIsVertexArrayAPPLE(Layer *_layer, GLuint array)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsVertexArrayAPPLE","(", array, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsVertexArrayAPPLE(self->next, array);
  return ret;
}

// GL_APPLE_vertex_array_range

static void REGAL_CALL http_glFlushVertexArrayRangeAPPLE(Layer *_layer, GLsizei length, GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushVertexArrayRangeAPPLE","(", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushVertexArrayRangeAPPLE(self->next, length, pointer);
}

static void REGAL_CALL http_glVertexArrayParameteriAPPLE(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayParameteriAPPLE","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayParameteriAPPLE(self->next, pname, param);
}

static void REGAL_CALL http_glVertexArrayRangeAPPLE(Layer *_layer, GLsizei length, GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayRangeAPPLE","(", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayRangeAPPLE(self->next, length, pointer);
}

// GL_APPLE_vertex_program_evaluators

static void REGAL_CALL http_glDisableVertexAttribAPPLE(Layer *_layer, GLuint index, GLenum pname)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableVertexAttribAPPLE","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableVertexAttribAPPLE(self->next, index, pname);
}

static void REGAL_CALL http_glEnableVertexAttribAPPLE(Layer *_layer, GLuint index, GLenum pname)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableVertexAttribAPPLE","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableVertexAttribAPPLE(self->next, index, pname);
}

static GLboolean REGAL_CALL http_glIsVertexAttribEnabledAPPLE(Layer *_layer, GLuint index, GLenum pname)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsVertexAttribEnabledAPPLE","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsVertexAttribEnabledAPPLE(self->next, index, pname);
  return ret;
}

static void REGAL_CALL http_glMapVertexAttrib1dAPPLE(Layer *_layer, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapVertexAttrib1dAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapVertexAttrib1dAPPLE(self->next, index, size, u1, u2, stride, order, points);
}

static void REGAL_CALL http_glMapVertexAttrib1fAPPLE(Layer *_layer, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapVertexAttrib1fAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapVertexAttrib1fAPPLE(self->next, index, size, u1, u2, stride, order, points);
}

static void REGAL_CALL http_glMapVertexAttrib2dAPPLE(Layer *_layer, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapVertexAttrib2dAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapVertexAttrib2dAPPLE(self->next, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL http_glMapVertexAttrib2fAPPLE(Layer *_layer, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapVertexAttrib2fAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapVertexAttrib2fAPPLE(self->next, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

// GL_ARB_ES2_compatibility

static void REGAL_CALL http_glClearDepthf(Layer *_layer, GLclampf d)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearDepthf","(", d, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearDepthf(self->next, d);
}

static void REGAL_CALL http_glDepthRangef(Layer *_layer, GLclampf n, GLclampf f)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRangef","(", n, ", ", f, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRangef(self->next, n, f);
}

static void REGAL_CALL http_glGetShaderPrecisionFormat(Layer *_layer, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetShaderPrecisionFormat","(", toString(shadertype), ", ", toString(precisiontype), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetShaderPrecisionFormat(self->next, shadertype, precisiontype, range, precision);
}

static void REGAL_CALL http_glReleaseShaderCompiler(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReleaseShaderCompiler","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReleaseShaderCompiler(self->next);
}

static void REGAL_CALL http_glShaderBinary(Layer *_layer, GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderBinary","(", count, ", ", print_array(shaders,count), ", ", toString(binaryformat), ", ", print_optional(binary,Logging::pointers), ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderBinary(self->next, count, shaders, binaryformat, binary, length);
}

// GL_ARB_base_instance

static void REGAL_CALL http_glDrawArraysInstancedBaseInstance(Layer *_layer, GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysInstancedBaseInstance","(", GLmodeToString(mode), ", ", first, ", ", count, ", ", primcount, ", ", baseinstance, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysInstancedBaseInstance(self->next, mode, first, count, primcount, baseinstance);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstancedBaseInstance(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstancedBaseInstance","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ", ", baseinstance, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstancedBaseInstance(self->next, mode, count, type, indices, primcount, baseinstance);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstancedBaseVertexBaseInstance(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstancedBaseVertexBaseInstance","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ", ", basevertex, ", ", baseinstance, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstancedBaseVertexBaseInstance(self->next, mode, count, type, indices, primcount, basevertex, baseinstance);
  self->count.lastDraw = self->count.call;
}

// GL_ARB_bindless_texture

static GLuint64 REGAL_CALL http_glGetImageHandleARB(Layer *_layer, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetImageHandleARB","(", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(format), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetImageHandleARB(self->next, texture, level, layered, layer, format);
  return ret;
}

static GLuint64 REGAL_CALL http_glGetTextureHandleARB(Layer *_layer, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureHandleARB","(", texture, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetTextureHandleARB(self->next, texture);
  return ret;
}

static GLuint64 REGAL_CALL http_glGetTextureSamplerHandleARB(Layer *_layer, GLuint texture, GLuint sampler)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureSamplerHandleARB","(", texture, ", ", sampler, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetTextureSamplerHandleARB(self->next, texture, sampler);
  return ret;
}

static void REGAL_CALL http_glGetVertexAttribLui64vARB(Layer *_layer, GLuint index, GLenum pname, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribLui64vARB","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribLui64vARB(self->next, index, pname, params);
}

static GLboolean REGAL_CALL http_glIsImageHandleResidentARB(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsImageHandleResidentARB","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsImageHandleResidentARB(self->next, handle);
  return ret;
}

static GLboolean REGAL_CALL http_glIsTextureHandleResidentARB(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsTextureHandleResidentARB","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsTextureHandleResidentARB(self->next, handle);
  return ret;
}

static void REGAL_CALL http_glMakeImageHandleNonResidentARB(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeImageHandleNonResidentARB","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeImageHandleNonResidentARB(self->next, handle);
}

static void REGAL_CALL http_glMakeImageHandleResidentARB(Layer *_layer, GLuint64 handle, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeImageHandleResidentARB","(", handle, ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeImageHandleResidentARB(self->next, handle, access);
}

static void REGAL_CALL http_glMakeTextureHandleNonResidentARB(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeTextureHandleNonResidentARB","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeTextureHandleNonResidentARB(self->next, handle);
}

static void REGAL_CALL http_glMakeTextureHandleResidentARB(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeTextureHandleResidentARB","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeTextureHandleResidentARB(self->next, handle);
}

static void REGAL_CALL http_glProgramUniformHandleui64ARB(Layer *_layer, GLuint program, GLint location, GLuint64 value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformHandleui64ARB","(", program, ", ", location, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformHandleui64ARB(self->next, program, location, value);
}

static void REGAL_CALL http_glProgramUniformHandleui64vARB(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformHandleui64vARB","(", program, ", ", location, ", ", count, ", ", print_optional(values,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformHandleui64vARB(self->next, program, location, count, values);
}

static void REGAL_CALL http_glUniformHandleui64ARB(Layer *_layer, GLint location, GLuint64 value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformHandleui64ARB","(", location, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformHandleui64ARB(self->next, location, value);
}

static void REGAL_CALL http_glUniformHandleui64vARB(Layer *_layer, GLint location, GLsizei count, const GLuint64 *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformHandleui64vARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformHandleui64vARB(self->next, location, count, value);
}

static void REGAL_CALL http_glVertexAttribL1ui64ARB(Layer *_layer, GLuint index, GLuint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1ui64ARB","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1ui64ARB(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribL1ui64vARB(Layer *_layer, GLuint index, const GLuint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1ui64vARB","(", index, ", ", print_optional(v,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1ui64vARB(self->next, index, v);
}

// GL_ARB_blend_func_extended

static void REGAL_CALL http_glBindFragDataLocationIndexed(Layer *_layer, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFragDataLocationIndexed","(", program, ", ", colorNumber, ", ", index, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFragDataLocationIndexed(self->next, program, colorNumber, index, name);
}

static GLint REGAL_CALL http_glGetFragDataIndex(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragDataIndex","(", program, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetFragDataIndex(self->next, program, name);
  return ret;
}

// GL_ARB_buffer_storage

static void REGAL_CALL http_glBufferStorage(Layer *_layer, GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferStorage","(", toString(target), ", ", size, ", ", print_optional(data,Logging::pointers), ", ", GLbufferStorageToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferStorage(self->next, target, size, data, flags);
}

static void REGAL_CALL http_glNamedBufferStorageEXT(Layer *_layer, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedBufferStorageEXT","(", buffer, ", ", size, ", ", print_optional(data,Logging::pointers), ", ", GLbufferStorageToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedBufferStorageEXT(self->next, buffer, size, data, flags);
}

// GL_ARB_cl_event

static GLsync REGAL_CALL http_glCreateSyncFromCLeventARB(Layer *_layer, cl_context context, cl_event event, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
    GLsync  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateSyncFromCLeventARB","(", context, ", ", event, ", ", GLcreateSyncFromCLeventARBToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateSyncFromCLeventARB(self->next, context, event, flags);
  return ret;
}

// GL_ARB_clear_buffer_object

static void REGAL_CALL http_glClearBufferData(Layer *_layer, GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearBufferData","(", toString(target), ", ", toString(internalformat), ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearBufferData(self->next, target, internalformat, format, type, data);
}

static void REGAL_CALL http_glClearBufferSubData(Layer *_layer, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearBufferSubData","(", toString(target), ", ", toString(internalformat), ", ", offset, ", ", size, ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearBufferSubData(self->next, target, internalformat, offset, size, format, type, data);
}

static void REGAL_CALL http_glClearNamedBufferDataEXT(Layer *_layer, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearNamedBufferDataEXT","(", buffer, ", ", toString(internalformat), ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearNamedBufferDataEXT(self->next, buffer, internalformat, format, type, data);
}

static void REGAL_CALL http_glClearNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearNamedBufferSubDataEXT","(", buffer, ", ", toString(internalformat), ", ", offset, ", ", size, ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearNamedBufferSubDataEXT(self->next, buffer, internalformat, offset, size, format, type, data);
}

// GL_ARB_clear_texture

static void REGAL_CALL http_glClearTexImage(Layer *_layer, GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearTexImage","(", texture, ", ", level, ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearTexImage(self->next, texture, level, format, type, data);
}

static void REGAL_CALL http_glClearTexSubImage(Layer *_layer, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearTexSubImage","(", texture, ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearTexSubImage(self->next, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

// GL_ARB_color_buffer_float

static void REGAL_CALL http_glClampColorARB(Layer *_layer, GLenum target, GLenum clamp)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClampColorARB","(", toString(target), ", ", toString(clamp), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClampColorARB(self->next, target, clamp);
}

// GL_ARB_compute_shader

static void REGAL_CALL http_glDispatchCompute(Layer *_layer, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDispatchCompute","(", num_groups_x, ", ", num_groups_y, ", ", num_groups_z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDispatchCompute(self->next, num_groups_x, num_groups_y, num_groups_z);
}

static void REGAL_CALL http_glDispatchComputeIndirect(Layer *_layer, GLintptr indirect)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDispatchComputeIndirect","(", indirect, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDispatchComputeIndirect(self->next, indirect);
}

// GL_ARB_compute_variable_group_size

static void REGAL_CALL http_glDispatchComputeGroupSizeARB(Layer *_layer, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDispatchComputeGroupSizeARB","(", num_groups_x, ", ", num_groups_y, ", ", num_groups_z, ", ", group_size_x, ", ", group_size_y, ", ", group_size_z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDispatchComputeGroupSizeARB(self->next, num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

// GL_ARB_copy_buffer

static void REGAL_CALL http_glCopyBufferSubData(Layer *_layer, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyBufferSubData","(", toString(readtarget), ", ", toString(writetarget), ", ", readoffset, ", ", writeoffset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyBufferSubData(self->next, readtarget, writetarget, readoffset, writeoffset, size);
}

// GL_ARB_copy_image

static void REGAL_CALL http_glCopyImageSubData(Layer *_layer, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyImageSubData","(", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ", ", dstX, ", ", dstY, ", ", dstZ, ", ", srcWidth, ", ", srcHeight, ", ", srcDepth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyImageSubData(self->next, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

// GL_ARB_debug_output

static void REGAL_CALL http_glDebugMessageCallbackARB(Layer *_layer, GLDEBUGPROCARB callback, const GLvoid *userParam)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageCallbackARB","(", print_optional(userParam,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageCallbackARB(self->next, callback, userParam);
}

static void REGAL_CALL http_glDebugMessageControlARB(Layer *_layer, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageControlARB","(", toString(source), ", ", toString(type), ", ", toString(severity), ", ", count, ", ", print_array(ids,count>0 && ids ? count : 0), ", ", toString(enabled), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageControlARB(self->next, source, type, severity, count, ids, enabled);
}

static void REGAL_CALL http_glDebugMessageInsertARB(Layer *_layer, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageInsertARB","(", toString(source), ", ", toString(type), ", ", id, ", ", toString(severity), ", ", length, ", ", print_quote(buf,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageInsertARB(self->next, source, type, id, severity, length, buf);
}

static GLuint REGAL_CALL http_glGetDebugMessageLogARB(Layer *_layer, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDebugMessageLogARB","(", count, ", ", bufsize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetDebugMessageLogARB(self->next, count, bufsize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}

// GL_ARB_draw_buffers

static void REGAL_CALL http_glDrawBuffersARB(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBuffersARB","(", n, ", ", print_array(bufs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBuffersARB(self->next, n, bufs);
}

// GL_ARB_draw_buffers_blend

static void REGAL_CALL http_glBlendEquationSeparateiARB(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationSeparateiARB","(", buf, ", ", GLmodeToString(modeRGB), ", ", GLmodeToString(modeAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationSeparateiARB(self->next, buf, modeRGB, modeAlpha);
}

static void REGAL_CALL http_glBlendEquationiARB(Layer *_layer, GLuint buf, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationiARB","(", buf, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationiARB(self->next, buf, mode);
}

static void REGAL_CALL http_glBlendFuncSeparateiARB(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparateiARB","(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparateiARB(self->next, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void REGAL_CALL http_glBlendFunciARB(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFunciARB","(", buf, ", ", toString(src), ", ", toString(dst), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFunciARB(self->next, buf, src, dst);
}

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL http_glDrawElementsBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsBaseVertex","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", basevertex, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsBaseVertex(self->next, mode, count, type, indices, basevertex);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstancedBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstancedBaseVertex","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ", ", basevertex, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstancedBaseVertex(self->next, mode, count, type, indices, primcount, basevertex);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawRangeElementsBaseVertex(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawRangeElementsBaseVertex","(", GLmodeToString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", basevertex, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawRangeElementsBaseVertex(self->next, mode, start, end, count, type, indices, basevertex);
}

static void REGAL_CALL http_glMultiDrawElementsBaseVertex(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElementsBaseVertex","(", GLmodeToString(mode), ", ", print_array(count,primcount), ", ", toString(type), ", ", indices, ", ", primcount, ", ", print_array(basevertex,primcount), ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElementsBaseVertex(self->next, mode, count, type, indices, primcount, basevertex);
  self->count.lastDraw = self->count.call;
}

// GL_ARB_draw_indirect

static void REGAL_CALL http_glDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysIndirect","(", GLmodeToString(mode), ", ", print_optional(indirect,Logging::pointers), ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysIndirect(self->next, mode, indirect);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsIndirect","(", GLmodeToString(mode), ", ", toString(type), ", ", print_optional(indirect,Logging::pointers), ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsIndirect(self->next, mode, type, indirect);
  self->count.lastDraw = self->count.call;
}

// GL_ARB_draw_instanced

static void REGAL_CALL http_glDrawArraysInstancedARB(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysInstancedARB","(", GLmodeToString(mode), ", ", start, ", ", count, ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysInstancedARB(self->next, mode, start, count, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstancedARB(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstancedARB","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstancedARB(self->next, mode, count, type, indices, primcount);
  self->count.lastDraw = self->count.call;
}

// GL_ARB_framebuffer_no_attachments

static void REGAL_CALL http_glFramebufferParameteri(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferParameteri","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferParameteri(self->next, target, pname, param);
}

static void REGAL_CALL http_glGetFramebufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFramebufferParameteriv","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFramebufferParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetNamedFramebufferParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedFramebufferParameterivEXT","(", framebuffer, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedFramebufferParameterivEXT(self->next, framebuffer, pname, params);
}

static void REGAL_CALL http_glNamedFramebufferParameteriEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferParameteriEXT","(", framebuffer, ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferParameteriEXT(self->next, framebuffer, pname, param);
}

// GL_ARB_framebuffer_object

static void REGAL_CALL http_glBindFramebuffer(Layer *_layer, GLenum target, GLuint framebuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFramebuffer","(", toString(target), ", ", framebuffer, ")");
  }
  self->fbo[ framebuffer ] = HttpFboInfo( framebuffer );
  self->count.fbo++;
  if( self->runState == RS_NextFbo ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFramebuffer(self->next, target, framebuffer);
  self->count.lastFbo = self->count.call;
}

static void REGAL_CALL http_glBindRenderbuffer(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindRenderbuffer","(", toString(target), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindRenderbuffer(self->next, target, renderbuffer);
}

static void REGAL_CALL http_glBlitFramebuffer(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlitFramebuffer","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", GLblitFramebufferToString(mask), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlitFramebuffer(self->next, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static GLenum REGAL_CALL http_glCheckFramebufferStatus(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCheckFramebufferStatus","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCheckFramebufferStatus(self->next, target);
  return ret;
}

static void REGAL_CALL http_glDeleteFramebuffers(Layer *_layer, GLsizei n, const GLuint *framebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteFramebuffers","(", n, ", ", print_array(framebuffers,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteFramebuffers(self->next, n, framebuffers);
}

static void REGAL_CALL http_glDeleteRenderbuffers(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteRenderbuffers","(", n, ", ", print_array(renderbuffers,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteRenderbuffers(self->next, n, renderbuffers);
}

static void REGAL_CALL http_glFramebufferRenderbuffer(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferRenderbuffer","(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferRenderbuffer(self->next, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL http_glFramebufferTexture1D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture1D","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture1D(self->next, target, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glFramebufferTexture2D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture2D","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture2D(self->next, target, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glFramebufferTexture3D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture3D","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", layer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture3D(self->next, target, attachment, textarget, texture, level, layer);
}

static void REGAL_CALL http_glFramebufferTextureLayer(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureLayer","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureLayer(self->next, target, attachment, texture, level, layer);
}

static void REGAL_CALL http_glGenFramebuffers(Layer *_layer, GLsizei n, GLuint *framebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenFramebuffers","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenFramebuffers(self->next, n, framebuffers);
}

static void REGAL_CALL http_glGenRenderbuffers(Layer *_layer, GLsizei n, GLuint *renderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenRenderbuffers","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenRenderbuffers(self->next, n, renderbuffers);
}

static void REGAL_CALL http_glGenerateMipmap(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenerateMipmap","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenerateMipmap(self->next, target);
}

static void REGAL_CALL http_glGetFramebufferAttachmentParameteriv(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFramebufferAttachmentParameteriv","(", toString(target), ", ", toString(attachment), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFramebufferAttachmentParameteriv(self->next, target, attachment, pname, params);
}

static void REGAL_CALL http_glGetRenderbufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetRenderbufferParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetRenderbufferParameteriv(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsFramebuffer(Layer *_layer, GLuint framebuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsFramebuffer","(", framebuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsFramebuffer(self->next, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL http_glIsRenderbuffer(Layer *_layer, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsRenderbuffer","(", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsRenderbuffer(self->next, renderbuffer);
  return ret;
}

static void REGAL_CALL http_glRenderbufferStorage(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorage","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorage(self->next, target, internalformat, width, height);
}

static void REGAL_CALL http_glRenderbufferStorageMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageMultisample","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageMultisample(self->next, target, samples, internalformat, width, height);
}

// GL_ARB_geometry_shader4

static void REGAL_CALL http_glFramebufferTextureARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureARB","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureARB(self->next, target, attachment, texture, level);
}

static void REGAL_CALL http_glFramebufferTextureFaceARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureFaceARB","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureFaceARB(self->next, target, attachment, texture, level, face);
}

static void REGAL_CALL http_glFramebufferTextureLayerARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureLayerARB","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureLayerARB(self->next, target, attachment, texture, level, layer);
}

static void REGAL_CALL http_glProgramParameteriARB(Layer *_layer, GLuint program, GLenum pname, GLint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameteriARB","(", program, ", ", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameteriARB(self->next, program, pname, value);
}

// GL_ARB_get_program_binary

static void REGAL_CALL http_glGetProgramBinary(Layer *_layer, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramBinary","(", program, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramBinary(self->next, program, bufSize, length, binaryFormat, binary);
}

static void REGAL_CALL http_glProgramBinary(Layer *_layer, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramBinary","(", program, ", ", toString(binaryFormat), ", ", print_optional(binary,Logging::pointers), ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramBinary(self->next, program, binaryFormat, binary, length);
}

static void REGAL_CALL http_glProgramParameteri(Layer *_layer, GLuint program, GLenum pname, GLint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameteri","(", program, ", ", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameteri(self->next, program, pname, value);
}

// GL_ARB_gpu_shader_fp64

static void REGAL_CALL http_glGetUniformdv(Layer *_layer, GLuint program, GLint location, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformdv","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformdv(self->next, program, location, params);
}

static void REGAL_CALL http_glUniform1d(Layer *_layer, GLint location, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1d","(", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1d(self->next, location, x);
}

static void REGAL_CALL http_glUniform1dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1dv","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1dv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2d(Layer *_layer, GLint location, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2d","(", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2d(self->next, location, x, y);
}

static void REGAL_CALL http_glUniform2dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2dv","(", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2dv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3d(Layer *_layer, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3d","(", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3d(self->next, location, x, y, z);
}

static void REGAL_CALL http_glUniform3dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3dv","(", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3dv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4d(Layer *_layer, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4d","(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4d(self->next, location, x, y, z, w);
}

static void REGAL_CALL http_glUniform4dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4dv","(", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4dv(self->next, location, count, value);
}

static void REGAL_CALL http_glUniformMatrix2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix2x3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2x3dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2x3dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix2x4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2x4dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2x4dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3x2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3x2dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3x2dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3x4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3x4dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3x4dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4x2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4x2dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4x2dv(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4x3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4x3dv","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4x3dv(self->next, location, count, transpose, value);
}

// GL_ARB_imaging

static void REGAL_CALL http_glColorSubTable(Layer *_layer, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorSubTable","(", toString(target), ", ", start, ", ", count, ", ", toString(format), ", ", toString(type), ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorSubTable(self->next, target, start, count, format, type, data);
}

static void REGAL_CALL http_glColorTable(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTable","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(table,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTable(self->next, target, internalformat, width, format, type, table);
}

static void REGAL_CALL http_glColorTableParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTableParameterfv","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTableParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glColorTableParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTableParameteriv","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTableParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glConvolutionFilter1D(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionFilter1D","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(image,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionFilter1D(self->next, target, internalformat, width, format, type, image);
}

static void REGAL_CALL http_glConvolutionFilter2D(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionFilter2D","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(image,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionFilter2D(self->next, target, internalformat, width, height, format, type, image);
}

static void REGAL_CALL http_glConvolutionParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameterf","(", toString(target), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameterf(self->next, target, pname, params);
}

static void REGAL_CALL http_glConvolutionParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameterfv","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glConvolutionParameteri(Layer *_layer, GLenum target, GLenum pname, GLint params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameteri","(", toString(target), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameteri(self->next, target, pname, params);
}

static void REGAL_CALL http_glConvolutionParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameteriv","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glCopyColorSubTable(Layer *_layer, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyColorSubTable","(", toString(target), ", ", start, ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyColorSubTable(self->next, target, start, x, y, width);
}

static void REGAL_CALL http_glCopyColorTable(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyColorTable","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyColorTable(self->next, target, internalformat, x, y, width);
}

static void REGAL_CALL http_glCopyConvolutionFilter1D(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyConvolutionFilter1D","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyConvolutionFilter1D(self->next, target, internalformat, x, y, width);
}

static void REGAL_CALL http_glCopyConvolutionFilter2D(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyConvolutionFilter2D","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyConvolutionFilter2D(self->next, target, internalformat, x, y, width, height);
}

static void REGAL_CALL http_glGetColorTable(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTable","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTable(self->next, target, format, type, table);
}

static void REGAL_CALL http_glGetColorTableParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableParameterfv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetColorTableParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetConvolutionFilter(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetConvolutionFilter","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetConvolutionFilter(self->next, target, format, type, image);
}

static void REGAL_CALL http_glGetConvolutionParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetConvolutionParameterfv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetConvolutionParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetConvolutionParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetConvolutionParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetConvolutionParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetHistogram(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHistogram","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetHistogram(self->next, target, reset, format, type, values);
}

static void REGAL_CALL http_glGetHistogramParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHistogramParameterfv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetHistogramParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetHistogramParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHistogramParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetHistogramParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetMinmax(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMinmax","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(types), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMinmax(self->next, target, reset, format, types, values);
}

static void REGAL_CALL http_glGetMinmaxParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMinmaxParameterfv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMinmaxParameterfv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetMinmaxParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMinmaxParameteriv","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMinmaxParameteriv(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetSeparableFilter(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSeparableFilter","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSeparableFilter(self->next, target, format, type, row, column, span);
}

static void REGAL_CALL http_glHistogram(Layer *_layer, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glHistogram","(", toString(target), ", ", width, ", ", toString(internalformat), ", ", toString(sink), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglHistogram(self->next, target, width, internalformat, sink);
}

static void REGAL_CALL http_glMinmax(Layer *_layer, GLenum target, GLenum internalformat, GLboolean sink)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMinmax","(", toString(target), ", ", toString(internalformat), ", ", toString(sink), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMinmax(self->next, target, internalformat, sink);
}

static void REGAL_CALL http_glResetHistogram(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResetHistogram","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResetHistogram(self->next, target);
}

static void REGAL_CALL http_glResetMinmax(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResetMinmax","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResetMinmax(self->next, target);
}

static void REGAL_CALL http_glSeparableFilter2D(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSeparableFilter2D","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(row,Logging::pointers), ", ", print_optional(column,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSeparableFilter2D(self->next, target, internalformat, width, height, format, type, row, column);
}

// GL_ARB_indirect_parameters

static void REGAL_CALL http_glMultiDrawArraysIndirectCountARB(Layer *_layer, GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawArraysIndirectCountARB","(", GLmodeToString(mode), ", ", print_optional(indirect,Logging::pointers), ", ", drawcount, ", ", maxdrawcount, ", ", stride, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawArraysIndirectCountARB(self->next, mode, indirect, drawcount, maxdrawcount, stride);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glMultiDrawElementsIndirectCountARB(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElementsIndirectCountARB","(", GLmodeToString(mode), ", ", toString(type), ", ", print_optional(indirect,Logging::pointers), ", ", drawcount, ", ", maxdrawcount, ", ", stride, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElementsIndirectCountARB(self->next, mode, type, indirect, drawcount, maxdrawcount, stride);
  self->count.lastDraw = self->count.call;
}

// GL_ARB_instanced_arrays

static void REGAL_CALL http_glVertexAttribDivisorARB(Layer *_layer, GLuint index, GLuint divisor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribDivisorARB","(", index, ", ", divisor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribDivisorARB(self->next, index, divisor);
}

// GL_ARB_internalformat_query

static void REGAL_CALL http_glGetInternalformativ(Layer *_layer, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInternalformativ","(", toString(target), ", ", toString(internalformat), ", ", toString(pname), ", ", bufSize, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInternalformativ(self->next, target, internalformat, pname, bufSize, params);
}

// GL_ARB_internalformat_query2

static void REGAL_CALL http_glGetInternalformati64v(Layer *_layer, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInternalformati64v","(", toString(target), ", ", toString(internalformat), ", ", toString(pname), ", ", bufSize, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInternalformati64v(self->next, target, internalformat, pname, bufSize, params);
}

// GL_ARB_invalidate_subdata

static void REGAL_CALL http_glInvalidateBufferData(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInvalidateBufferData","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInvalidateBufferData(self->next, buffer);
}

static void REGAL_CALL http_glInvalidateBufferSubData(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInvalidateBufferSubData","(", buffer, ", ", offset, ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInvalidateBufferSubData(self->next, buffer, offset, length);
}

static void REGAL_CALL http_glInvalidateFramebuffer(Layer *_layer, GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInvalidateFramebuffer","(", toString(target), ", ", numAttachments, ", ", attachments, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInvalidateFramebuffer(self->next, target, numAttachments, attachments);
}

static void REGAL_CALL http_glInvalidateSubFramebuffer(Layer *_layer, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInvalidateSubFramebuffer","(", toString(target), ", ", numAttachments, ", ", attachments, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInvalidateSubFramebuffer(self->next, target, numAttachments, attachments, x, y, width, height);
}

static void REGAL_CALL http_glInvalidateTexImage(Layer *_layer, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInvalidateTexImage","(", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInvalidateTexImage(self->next, texture, level);
}

static void REGAL_CALL http_glInvalidateTexSubImage(Layer *_layer, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInvalidateTexSubImage","(", texture, ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInvalidateTexSubImage(self->next, texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

// GL_ARB_map_buffer_range

static void REGAL_CALL http_glFlushMappedBufferRange(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushMappedBufferRange","(", toString(target), ", ", offset, ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushMappedBufferRange(self->next, target, offset, length);
}

static GLvoid *REGAL_CALL http_glMapBufferRange(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapBufferRange","(", toString(target), ", ", offset, ", ", length, ", ", GLmapBufferRangeToString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapBufferRange(self->next, target, offset, length, access);
  return ret;
}

// GL_ARB_matrix_palette

static void REGAL_CALL http_glCurrentPaletteMatrixARB(Layer *_layer, GLint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCurrentPaletteMatrixARB","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCurrentPaletteMatrixARB(self->next, index);
}

static void REGAL_CALL http_glMatrixIndexPointerARB(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixIndexPointerARB","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixIndexPointerARB(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glMatrixIndexubvARB(Layer *_layer, GLint size, const GLubyte *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixIndexubvARB","(", size, ", ", print_optional(indices,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixIndexubvARB(self->next, size, indices);
}

static void REGAL_CALL http_glMatrixIndexuivARB(Layer *_layer, GLint size, const GLuint *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixIndexuivARB","(", size, ", ", print_optional(indices,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixIndexuivARB(self->next, size, indices);
}

static void REGAL_CALL http_glMatrixIndexusvARB(Layer *_layer, GLint size, const GLushort *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixIndexusvARB","(", size, ", ", print_optional(indices,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixIndexusvARB(self->next, size, indices);
}

// GL_ARB_multi_bind

static void REGAL_CALL http_glBindBuffersBase(Layer *_layer, GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBuffersBase","(", toString(target), ", ", first, ", ", count, ", ", print_optional(buffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBuffersBase(self->next, target, first, count, buffers);
}

static void REGAL_CALL http_glBindBuffersRange(Layer *_layer, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBuffersRange","(", toString(target), ", ", first, ", ", count, ", ", print_optional(buffers,Logging::pointers), ", ", offsets, ", ", sizes, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBuffersRange(self->next, target, first, count, buffers, offsets, sizes);
}

static void REGAL_CALL http_glBindImageTextures(Layer *_layer, GLuint first, GLsizei count, const GLuint *textures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindImageTextures","(", first, ", ", count, ", ", print_optional(textures,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindImageTextures(self->next, first, count, textures);
}

static void REGAL_CALL http_glBindSamplers(Layer *_layer, GLuint first, GLsizei count, const GLuint *samplers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindSamplers","(", first, ", ", count, ", ", print_optional(samplers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindSamplers(self->next, first, count, samplers);
}

static void REGAL_CALL http_glBindTextures(Layer *_layer, GLuint first, GLsizei count, const GLuint *textures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTextures","(", first, ", ", count, ", ", print_optional(textures,Logging::pointers), ")");
  }
  if( textures != NULL ) {
    for( int i = 0; i < count; i++ ) {
      if( textures[i] != 0 ) {
        HttpTextureInfo & hti = self->texture[ textures[i] ];
        RegalAssert( hti.name == 0 || hti.name == textures[i] );
        if( hti.name == 0 ) {
          hti.name = textures[i];
          hti.target = first;
        }
      }
    }
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindTextures(self->next, first, count, textures);
}

static void REGAL_CALL http_glBindVertexBuffers(Layer *_layer, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVertexBuffers","(", first, ", ", count, ", ", print_optional(buffers,Logging::pointers), ", ", offsets, ", ", print_optional(strides,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVertexBuffers(self->next, first, count, buffers, offsets, strides);
}

// GL_ARB_multi_draw_indirect

static void REGAL_CALL http_glMultiDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawArraysIndirect","(", GLmodeToString(mode), ", ", print_optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawArraysIndirect(self->next, mode, indirect, primcount, stride);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glMultiDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElementsIndirect","(", GLmodeToString(mode), ", ", toString(type), ", ", print_optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElementsIndirect(self->next, mode, type, indirect, primcount, stride);
  self->count.lastDraw = self->count.call;
}

// GL_ARB_multisample

static void REGAL_CALL http_glSampleCoverageARB(Layer *_layer, GLclampf value, GLboolean invert)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleCoverageARB","(", value, ", ", toString(invert), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleCoverageARB(self->next, value, invert);
}

// GL_ARB_multitexture

static void REGAL_CALL http_glActiveTextureARB(Layer *_layer, GLenum texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glActiveTextureARB","(", toString(texture), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglActiveTextureARB(self->next, texture);
}

static void REGAL_CALL http_glClientActiveTextureARB(Layer *_layer, GLenum texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClientActiveTextureARB","(", toString(texture), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClientActiveTextureARB(self->next, texture);
}

static void REGAL_CALL http_glMultiTexCoord1dARB(Layer *_layer, GLenum target, GLdouble s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1dARB","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1dARB(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1dvARB(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1dvARB","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1dvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord1fARB(Layer *_layer, GLenum target, GLfloat s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1fARB","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1fARB(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1fvARB(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1fvARB","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1fvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord1iARB(Layer *_layer, GLenum target, GLint s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1iARB","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1iARB(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1ivARB(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1ivARB","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1ivARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord1sARB(Layer *_layer, GLenum target, GLshort s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1sARB","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1sARB(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1svARB(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1svARB","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1svARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2dARB(Layer *_layer, GLenum target, GLdouble s, GLdouble t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2dARB","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2dARB(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2dvARB(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2dvARB","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2dvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2fARB(Layer *_layer, GLenum target, GLfloat s, GLfloat t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2fARB","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2fARB(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2fvARB(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2fvARB","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2fvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2iARB(Layer *_layer, GLenum target, GLint s, GLint t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2iARB","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2iARB(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2ivARB(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2ivARB","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2ivARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2sARB(Layer *_layer, GLenum target, GLshort s, GLshort t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2sARB","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2sARB(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2svARB(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2svARB","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2svARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3dARB(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3dARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3dARB(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3dvARB(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3dvARB","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3dvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3fARB(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3fARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3fARB(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3fvARB(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3fvARB","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3fvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3iARB(Layer *_layer, GLenum target, GLint s, GLint t, GLint r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3iARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3iARB(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3ivARB(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3ivARB","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3ivARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3sARB(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3sARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3sARB(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3svARB(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3svARB","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3svARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4dARB(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4dARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4dARB(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4dvARB(Layer *_layer, GLenum target, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4dvARB","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4dvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4fARB(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4fARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4fARB(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4fvARB(Layer *_layer, GLenum target, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4fvARB","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4fvARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4iARB(Layer *_layer, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4iARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4iARB(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4ivARB(Layer *_layer, GLenum target, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4ivARB","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4ivARB(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4sARB(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4sARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4sARB(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4svARB(Layer *_layer, GLenum target, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4svARB","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4svARB(self->next, target, v);
}

// GL_ARB_occlusion_query

static void REGAL_CALL http_glBeginQueryARB(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginQueryARB","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginQueryARB(self->next, target, id);
}

static void REGAL_CALL http_glDeleteQueriesARB(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteQueriesARB","(", n, ", ", print_array(ids,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteQueriesARB(self->next, n, ids);
}

static void REGAL_CALL http_glEndQueryARB(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndQueryARB","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndQueryARB(self->next, target);
}

static void REGAL_CALL http_glGenQueriesARB(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenQueriesARB","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenQueriesARB(self->next, n, ids);
}

static void REGAL_CALL http_glGetQueryObjectivARB(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectivARB","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectivARB(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectuivARB(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectuivARB","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectuivARB(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryivARB(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryivARB","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryivARB(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsQueryARB(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsQueryARB","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsQueryARB(self->next, id);
  return ret;
}

// GL_ARB_point_parameters

static void REGAL_CALL http_glPointParameterfARB(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfARB","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfARB(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameterfvARB(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfvARB","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfvARB(self->next, pname, params);
}

// GL_ARB_program_interface_query

static void REGAL_CALL http_glGetProgramInterfaceiv(Layer *_layer, GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramInterfaceiv","(", program, ", ", toString(programInterface), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramInterfaceiv(self->next, program, programInterface, pname, params);
}

static GLuint REGAL_CALL http_glGetProgramResourceIndex(Layer *_layer, GLuint program, GLenum programInterface, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramResourceIndex","(", program, ", ", toString(programInterface), ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetProgramResourceIndex(self->next, program, programInterface, name);
  return ret;
}

static GLint REGAL_CALL http_glGetProgramResourceLocation(Layer *_layer, GLuint program, GLenum programInterface, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramResourceLocation","(", program, ", ", toString(programInterface), ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetProgramResourceLocation(self->next, program, programInterface, name);
  return ret;
}

static GLint REGAL_CALL http_glGetProgramResourceLocationIndex(Layer *_layer, GLuint program, GLenum programInterface, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramResourceLocationIndex","(", program, ", ", toString(programInterface), ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetProgramResourceLocationIndex(self->next, program, programInterface, name);
  return ret;
}

static void REGAL_CALL http_glGetProgramResourceName(Layer *_layer, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramResourceName","(", program, ", ", toString(programInterface), ", ", index, ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramResourceName(self->next, program, programInterface, index, bufSize, length, name);
}

static void REGAL_CALL http_glGetProgramResourceiv(Layer *_layer, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramResourceiv","(", program, ", ", toString(programInterface), ", ", index, ", ", propCount, ", ", props, ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramResourceiv(self->next, program, programInterface, index, propCount, props, bufSize, length, params);
}

// GL_ARB_provoking_vertex

static void REGAL_CALL http_glProvokingVertex(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProvokingVertex","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProvokingVertex(self->next, mode);
}

// GL_ARB_robustness

static GLenum REGAL_CALL http_glGetGraphicsResetStatusARB(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetGraphicsResetStatusARB","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetGraphicsResetStatusARB(self->next);
  return ret;
}

static void REGAL_CALL http_glGetnColorTableARB(Layer *_layer, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnColorTableARB","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnColorTableARB(self->next, target, format, type, bufSize, table);
}

static void REGAL_CALL http_glGetnCompressedTexImageARB(Layer *_layer, GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnCompressedTexImageARB","(", toString(target), ", ", lod, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnCompressedTexImageARB(self->next, target, lod, bufSize, img);
}

static void REGAL_CALL http_glGetnConvolutionFilterARB(Layer *_layer, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnConvolutionFilterARB","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnConvolutionFilterARB(self->next, target, format, type, bufSize, image);
}

static void REGAL_CALL http_glGetnHistogramARB(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnHistogramARB","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnHistogramARB(self->next, target, reset, format, type, bufSize, values);
}

static void REGAL_CALL http_glGetnMapdvARB(Layer *_layer, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnMapdvARB","(", toString(target), ", ", toString(query), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnMapdvARB(self->next, target, query, bufSize, v);
}

static void REGAL_CALL http_glGetnMapfvARB(Layer *_layer, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnMapfvARB","(", toString(target), ", ", toString(query), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnMapfvARB(self->next, target, query, bufSize, v);
}

static void REGAL_CALL http_glGetnMapivARB(Layer *_layer, GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnMapivARB","(", toString(target), ", ", toString(query), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnMapivARB(self->next, target, query, bufSize, v);
}

static void REGAL_CALL http_glGetnMinmaxARB(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnMinmaxARB","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnMinmaxARB(self->next, target, reset, format, type, bufSize, values);
}

static void REGAL_CALL http_glGetnPixelMapfvARB(Layer *_layer, GLenum map, GLsizei bufSize, GLfloat *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnPixelMapfvARB","(", toString(map), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnPixelMapfvARB(self->next, map, bufSize, values);
}

static void REGAL_CALL http_glGetnPixelMapuivARB(Layer *_layer, GLenum map, GLsizei bufSize, GLuint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnPixelMapuivARB","(", toString(map), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnPixelMapuivARB(self->next, map, bufSize, values);
}

static void REGAL_CALL http_glGetnPixelMapusvARB(Layer *_layer, GLenum map, GLsizei bufSize, GLushort *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnPixelMapusvARB","(", toString(map), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnPixelMapusvARB(self->next, map, bufSize, values);
}

static void REGAL_CALL http_glGetnPolygonStippleARB(Layer *_layer, GLsizei bufSize, GLubyte *pattern)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnPolygonStippleARB","(", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnPolygonStippleARB(self->next, bufSize, pattern);
}

static void REGAL_CALL http_glGetnSeparableFilterARB(Layer *_layer, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnSeparableFilterARB","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", rowBufSize, ", ", columnBufSize, ", ", print_optional(span,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnSeparableFilterARB(self->next, target, format, type, rowBufSize, row, columnBufSize, column, span);
}

static void REGAL_CALL http_glGetnTexImageARB(Layer *_layer, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnTexImageARB","(", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnTexImageARB(self->next, target, level, format, type, bufSize, img);
}

static void REGAL_CALL http_glGetnUniformdvARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnUniformdvARB","(", program, ", ", location, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnUniformdvARB(self->next, program, location, bufSize, params);
}

static void REGAL_CALL http_glGetnUniformfvARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnUniformfvARB","(", program, ", ", location, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnUniformfvARB(self->next, program, location, bufSize, params);
}

static void REGAL_CALL http_glGetnUniformivARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnUniformivARB","(", program, ", ", location, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnUniformivARB(self->next, program, location, bufSize, params);
}

static void REGAL_CALL http_glGetnUniformuivARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnUniformuivARB","(", program, ", ", location, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnUniformuivARB(self->next, program, location, bufSize, params);
}

static void REGAL_CALL http_glReadnPixelsARB(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadnPixelsARB","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadnPixelsARB(self->next, x, y, width, height, format, type, bufSize, data);
}

// GL_ARB_sample_shading

static void REGAL_CALL http_glMinSampleShading(Layer *_layer, GLclampf value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMinSampleShading","(", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMinSampleShading(self->next, value);
}

static void REGAL_CALL http_glMinSampleShadingARB(Layer *_layer, GLclampf value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMinSampleShadingARB","(", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMinSampleShadingARB(self->next, value);
}

// GL_ARB_sampler_objects

static void REGAL_CALL http_glBindSampler(Layer *_layer, GLuint unit, GLuint sampler)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindSampler","(", unit, ", ", sampler, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindSampler(self->next, unit, sampler);
}

static void REGAL_CALL http_glDeleteSamplers(Layer *_layer, GLsizei count, const GLuint *samplers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteSamplers","(", count, ", ", print_array(samplers,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteSamplers(self->next, count, samplers);
}

static void REGAL_CALL http_glGenSamplers(Layer *_layer, GLsizei count, GLuint *samplers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenSamplers","(", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenSamplers(self->next, count, samplers);
}

static void REGAL_CALL http_glGetSamplerParameterIiv(Layer *_layer, GLuint sampler, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSamplerParameterIiv","(", sampler, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSamplerParameterIiv(self->next, sampler, pname, params);
}

static void REGAL_CALL http_glGetSamplerParameterIuiv(Layer *_layer, GLuint sampler, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSamplerParameterIuiv","(", sampler, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSamplerParameterIuiv(self->next, sampler, pname, params);
}

static void REGAL_CALL http_glGetSamplerParameterfv(Layer *_layer, GLuint sampler, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSamplerParameterfv","(", sampler, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSamplerParameterfv(self->next, sampler, pname, params);
}

static void REGAL_CALL http_glGetSamplerParameteriv(Layer *_layer, GLuint sampler, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSamplerParameteriv","(", sampler, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSamplerParameteriv(self->next, sampler, pname, params);
}

static GLboolean REGAL_CALL http_glIsSampler(Layer *_layer, GLuint sampler)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsSampler","(", sampler, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsSampler(self->next, sampler);
  return ret;
}

static void REGAL_CALL http_glSamplerParameterIiv(Layer *_layer, GLuint sampler, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplerParameterIiv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplerParameterIiv(self->next, sampler, pname, params);
}

static void REGAL_CALL http_glSamplerParameterIuiv(Layer *_layer, GLuint sampler, GLenum pname, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplerParameterIuiv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplerParameterIuiv(self->next, sampler, pname, params);
}

static void REGAL_CALL http_glSamplerParameterf(Layer *_layer, GLuint sampler, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplerParameterf","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplerParameterf(self->next, sampler, pname, param);
}

static void REGAL_CALL http_glSamplerParameterfv(Layer *_layer, GLuint sampler, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplerParameterfv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplerParameterfv(self->next, sampler, pname, params);
}

static void REGAL_CALL http_glSamplerParameteri(Layer *_layer, GLuint sampler, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplerParameteri","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplerParameteri(self->next, sampler, pname, param);
}

static void REGAL_CALL http_glSamplerParameteriv(Layer *_layer, GLuint sampler, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplerParameteriv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplerParameteriv(self->next, sampler, pname, params);
}

// GL_ARB_separate_shader_objects

static void REGAL_CALL http_glActiveShaderProgram(Layer *_layer, GLuint pipeline, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glActiveShaderProgram","(", pipeline, ", ", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglActiveShaderProgram(self->next, pipeline, program);
}

static void REGAL_CALL http_glBindProgramPipeline(Layer *_layer, GLuint pipeline)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindProgramPipeline","(", pipeline, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindProgramPipeline(self->next, pipeline);
}

static GLuint REGAL_CALL http_glCreateShaderProgramv(Layer *_layer, GLenum type, GLsizei count, const GLchar * const *strings)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateShaderProgramv","(", toString(type), ", ", count, ", ", print_array(strings,count,"\""), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateShaderProgramv(self->next, type, count, strings);
  return ret;
}

static void REGAL_CALL http_glDeleteProgramPipelines(Layer *_layer, GLsizei n, const GLuint *pipelines)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteProgramPipelines","(", n, ", ", print_array(pipelines,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteProgramPipelines(self->next, n, pipelines);
}

static void REGAL_CALL http_glGenProgramPipelines(Layer *_layer, GLsizei n, GLuint *pipelines)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenProgramPipelines","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenProgramPipelines(self->next, n, pipelines);
}

static void REGAL_CALL http_glGetProgramPipelineInfoLog(Layer *_layer, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramPipelineInfoLog","(", pipeline, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramPipelineInfoLog(self->next, pipeline, bufSize, length, infoLog);
}

static void REGAL_CALL http_glGetProgramPipelineiv(Layer *_layer, GLuint pipeline, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramPipelineiv","(", pipeline, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramPipelineiv(self->next, pipeline, pname, params);
}

static GLboolean REGAL_CALL http_glIsProgramPipeline(Layer *_layer, GLuint pipeline)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsProgramPipeline","(", pipeline, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsProgramPipeline(self->next, pipeline);
  return ret;
}

static void REGAL_CALL http_glProgramUniform1d(Layer *_layer, GLuint program, GLint location, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1d","(", program, ", ", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1d(self->next, program, location, x);
}

static void REGAL_CALL http_glProgramUniform1dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1dv","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1dv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1f(Layer *_layer, GLuint program, GLint location, GLfloat x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1f","(", program, ", ", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1f(self->next, program, location, x);
}

static void REGAL_CALL http_glProgramUniform1fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1fv","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1fv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1i(Layer *_layer, GLuint program, GLint location, GLint x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1i","(", program, ", ", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1i(self->next, program, location, x);
}

static void REGAL_CALL http_glProgramUniform1iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1iv","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1iv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1ui(Layer *_layer, GLuint program, GLint location, GLuint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1ui","(", program, ", ", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1ui(self->next, program, location, v0);
}

static void REGAL_CALL http_glProgramUniform1uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1uiv","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1uiv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2d(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2d","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2d(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2dv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2dv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2f(Layer *_layer, GLuint program, GLint location, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2f","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2f(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2fv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2fv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2i(Layer *_layer, GLuint program, GLint location, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2i","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2i(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2iv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2iv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2ui(Layer *_layer, GLuint program, GLint location, GLuint x, GLuint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2ui","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2ui(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2uiv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2uiv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3d(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3d","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3d(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3dv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3dv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3f(Layer *_layer, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3f","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3f(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3fv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3fv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3i(Layer *_layer, GLuint program, GLint location, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3i","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3i(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3iv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3iv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3ui(Layer *_layer, GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3ui","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3ui(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3uiv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3uiv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4d(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4d","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4d(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4dv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4dv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4f(Layer *_layer, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4f","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4f(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4fv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4fv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4i(Layer *_layer, GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4i","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4i(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4iv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4iv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4ui(Layer *_layer, GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4ui","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4ui(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4uiv","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4uiv(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x3dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x3dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x3fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x3fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x4dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x4dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x4fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x4fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 9), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 9), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x2dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x2dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x2fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x2fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x4dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x4dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x4fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x4fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x2dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x2dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x2fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x2fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x3dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x3dv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x3fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x3fv(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glUseProgramStages(Layer *_layer, GLuint pipeline, GLbitfield stages, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUseProgramStages","(", pipeline, ", ", GLuseProgramStagesToString(stages), ", ", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUseProgramStages(self->next, pipeline, stages, program);
}

static void REGAL_CALL http_glValidateProgramPipeline(Layer *_layer, GLuint pipeline)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glValidateProgramPipeline","(", pipeline, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglValidateProgramPipeline(self->next, pipeline);
}

// GL_ARB_shader_atomic_counters

static void REGAL_CALL http_glGetActiveAtomicCounterBufferiv(Layer *_layer, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveAtomicCounterBufferiv","(", program, ", ", bufferIndex, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveAtomicCounterBufferiv(self->next, program, bufferIndex, pname, params);
}

// GL_ARB_shader_image_load_store

static void REGAL_CALL http_glBindImageTexture(Layer *_layer, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindImageTexture","(", unit, ", ", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(access), ", ", toString(format), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindImageTexture(self->next, unit, texture, level, layered, layer, access, format);
}

static void REGAL_CALL http_glMemoryBarrier(Layer *_layer, GLbitfield barriers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMemoryBarrier","(", GLmemoryBarrierToString(barriers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMemoryBarrier(self->next, barriers);
}

// GL_ARB_shader_objects

static void REGAL_CALL http_glAttachObjectARB(Layer *_layer, GLhandleARB containerObj, GLhandleARB obj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAttachObjectARB","(", containerObj, ", ", obj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAttachObjectARB(self->next, containerObj, obj);
}

static void REGAL_CALL http_glCompileShaderARB(Layer *_layer, GLhandleARB shaderObj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompileShaderARB","(", shaderObj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompileShaderARB(self->next, shaderObj);
}

static GLhandleARB REGAL_CALL http_glCreateProgramObjectARB(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLhandleARB  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateProgramObjectARB","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateProgramObjectARB(self->next);
  self->program.insert( ret );
  return ret;
}

static GLhandleARB REGAL_CALL http_glCreateShaderObjectARB(Layer *_layer, GLenum shaderType)
{
  Http * self = static_cast<Http *>(_layer);
    GLhandleARB  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateShaderObjectARB","(", toString(shaderType), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateShaderObjectARB(self->next, shaderType);
  self->shader.insert( ret );
  return ret;
}

static void REGAL_CALL http_glDeleteObjectARB(Layer *_layer, GLhandleARB obj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteObjectARB","(", obj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteObjectARB(self->next, obj);
}

static void REGAL_CALL http_glDetachObjectARB(Layer *_layer, GLhandleARB containerObj, GLhandleARB attachedObj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDetachObjectARB","(", containerObj, ", ", attachedObj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDetachObjectARB(self->next, containerObj, attachedObj);
}

static void REGAL_CALL http_glGetActiveUniformARB(Layer *_layer, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveUniformARB","(", programObj, ", ", index, ", ", maxLength, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveUniformARB(self->next, programObj, index, maxLength, length, size, type, name);
}

static void REGAL_CALL http_glGetAttachedObjectsARB(Layer *_layer, GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetAttachedObjectsARB","(", containerObj, ", ", maxCount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetAttachedObjectsARB(self->next, containerObj, maxCount, count, obj);
}

static GLhandleARB REGAL_CALL http_glGetHandleARB(Layer *_layer, GLenum pname)
{
  Http * self = static_cast<Http *>(_layer);
    GLhandleARB  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHandleARB","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetHandleARB(self->next, pname);
  return ret;
}

static void REGAL_CALL http_glGetInfoLogARB(Layer *_layer, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInfoLogARB","(", obj, ", ", maxLength, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInfoLogARB(self->next, obj, maxLength, length, infoLog);
}

static void REGAL_CALL http_glGetObjectParameterfvARB(Layer *_layer, GLhandleARB obj, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectParameterfvARB","(", obj, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectParameterfvARB(self->next, obj, pname, params);
}

static void REGAL_CALL http_glGetObjectParameterivARB(Layer *_layer, GLhandleARB obj, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectParameterivARB","(", obj, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectParameterivARB(self->next, obj, pname, params);
}

static void REGAL_CALL http_glGetShaderSourceARB(Layer *_layer, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetShaderSourceARB","(", obj, ", ", maxLength, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetShaderSourceARB(self->next, obj, maxLength, length, source);
}

static GLint REGAL_CALL http_glGetUniformLocationARB(Layer *_layer, GLhandleARB programObj, const GLcharARB *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformLocationARB","(", programObj, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetUniformLocationARB(self->next, programObj, name);
  return ret;
}

static void REGAL_CALL http_glGetUniformfvARB(Layer *_layer, GLhandleARB programObj, GLint location, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformfvARB","(", programObj, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformfvARB(self->next, programObj, location, params);
}

static void REGAL_CALL http_glGetUniformivARB(Layer *_layer, GLhandleARB programObj, GLint location, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformivARB","(", programObj, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformivARB(self->next, programObj, location, params);
}

static void REGAL_CALL http_glLinkProgramARB(Layer *_layer, GLhandleARB programObj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLinkProgramARB","(", programObj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLinkProgramARB(self->next, programObj);
}

static void REGAL_CALL http_glShaderSourceARB(Layer *_layer, GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderSourceARB","(", shaderObj, ", ", count, ", ", print_array(reinterpret_cast<const char ** const>(string),string ? count : 0), ", ", print_array(length,length ? count : 0), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderSourceARB(self->next, shaderObj, count, string, length);
}

static void REGAL_CALL http_glUniform1fARB(Layer *_layer, GLint location, GLfloat v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1fARB","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1fARB(self->next, location, v0);
}

static void REGAL_CALL http_glUniform1fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1fvARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1fvARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform1iARB(Layer *_layer, GLint location, GLint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1iARB","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1iARB(self->next, location, v0);
}

static void REGAL_CALL http_glUniform1ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1ivARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1ivARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2fARB(Layer *_layer, GLint location, GLfloat v0, GLfloat v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2fARB","(", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2fARB(self->next, location, v0, v1);
}

static void REGAL_CALL http_glUniform2fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2fvARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2fvARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2iARB(Layer *_layer, GLint location, GLint v0, GLint v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2iARB","(", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2iARB(self->next, location, v0, v1);
}

static void REGAL_CALL http_glUniform2ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2ivARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2ivARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3fARB(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3fARB","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3fARB(self->next, location, v0, v1, v2);
}

static void REGAL_CALL http_glUniform3fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3fvARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3fvARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3iARB(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3iARB","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3iARB(self->next, location, v0, v1, v2);
}

static void REGAL_CALL http_glUniform3ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3ivARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3ivARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4fARB(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4fARB","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4fARB(self->next, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glUniform4fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4fvARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4fvARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4iARB(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4iARB","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4iARB(self->next, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glUniform4ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4ivARB","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4ivARB(self->next, location, count, value);
}

static void REGAL_CALL http_glUniformMatrix2fvARB(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2fvARB","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,2 * 2 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2fvARB(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3fvARB(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3fvARB","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,3 * 3 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3fvARB(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4fvARB(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4fvARB","(", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,4 * 4 * count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4fvARB(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUseProgramObjectARB(Layer *_layer, GLhandleARB programObj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUseProgramObjectARB","(", programObj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUseProgramObjectARB(self->next, programObj);
}

static void REGAL_CALL http_glValidateProgramARB(Layer *_layer, GLhandleARB programObj)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glValidateProgramARB","(", programObj, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglValidateProgramARB(self->next, programObj);
}

// GL_ARB_shader_storage_buffer_object

static void REGAL_CALL http_glShaderStorageBlockBinding(Layer *_layer, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderStorageBlockBinding","(", program, ", ", storageBlockIndex, ", ", storageBlockBinding, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderStorageBlockBinding(self->next, program, storageBlockIndex, storageBlockBinding);
}

// GL_ARB_shader_subroutine

static void REGAL_CALL http_glGetActiveSubroutineName(Layer *_layer, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveSubroutineName","(", program, ", ", toString(shaderType), ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveSubroutineName(self->next, program, shaderType, index, bufSize, length, name);
}

static void REGAL_CALL http_glGetActiveSubroutineUniformName(Layer *_layer, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveSubroutineUniformName","(", program, ", ", toString(shaderType), ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveSubroutineUniformName(self->next, program, shaderType, index, bufSize, length, name);
}

static void REGAL_CALL http_glGetActiveSubroutineUniformiv(Layer *_layer, GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveSubroutineUniformiv","(", program, ", ", toString(shaderType), ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveSubroutineUniformiv(self->next, program, shaderType, index, pname, values);
}

static void REGAL_CALL http_glGetProgramStageiv(Layer *_layer, GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramStageiv","(", program, ", ", toString(shaderType), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramStageiv(self->next, program, shaderType, pname, values);
}

static void REGAL_CALL http_glGetProgramSubroutineParameteruivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramSubroutineParameteruivNV","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramSubroutineParameteruivNV(self->next, target, index, params);
}

static GLuint REGAL_CALL http_glGetSubroutineIndex(Layer *_layer, GLuint program, GLenum shaderType, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSubroutineIndex","(", program, ", ", toString(shaderType), ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetSubroutineIndex(self->next, program, shaderType, name);
  return ret;
}

static GLint REGAL_CALL http_glGetSubroutineUniformLocation(Layer *_layer, GLuint program, GLenum shaderType, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSubroutineUniformLocation","(", program, ", ", toString(shaderType), ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetSubroutineUniformLocation(self->next, program, shaderType, name);
  return ret;
}

static void REGAL_CALL http_glGetUniformSubroutineuiv(Layer *_layer, GLenum shaderType, GLint location, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformSubroutineuiv","(", toString(shaderType), ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformSubroutineuiv(self->next, shaderType, location, params);
}

static void REGAL_CALL http_glProgramSubroutineParametersuivNV(Layer *_layer, GLenum target, GLsizei count, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramSubroutineParametersuivNV","(", toString(target), ", ", count, ", ", print_array(params,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramSubroutineParametersuivNV(self->next, target, count, params);
}

static void REGAL_CALL http_glUniformSubroutinesuiv(Layer *_layer, GLenum shaderType, GLsizei count, const GLuint *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformSubroutinesuiv","(", toString(shaderType), ", ", count, ", ", print_array(indices,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformSubroutinesuiv(self->next, shaderType, count, indices);
}

// GL_ARB_shading_language_include

static void REGAL_CALL http_glCompileShaderIncludeARB(Layer *_layer, GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompileShaderIncludeARB","(", shader, ", ", count, ", ", print_array(path,count,"\""), ", ", print_array(length,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompileShaderIncludeARB(self->next, shader, count, path, length);
}

static void REGAL_CALL http_glDeleteNamedStringARB(Layer *_layer, GLint namelen, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteNamedStringARB","(", namelen, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteNamedStringARB(self->next, namelen, name);
}

static void REGAL_CALL http_glGetNamedStringARB(Layer *_layer, GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedStringARB","(", namelen, ", ", print_quote(name,'"'), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedStringARB(self->next, namelen, name, bufSize, stringlen, string);
}

static void REGAL_CALL http_glGetNamedStringivARB(Layer *_layer, GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedStringivARB","(", namelen, ", ", print_quote(name,'"'), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedStringivARB(self->next, namelen, name, pname, params);
}

static GLboolean REGAL_CALL http_glIsNamedStringARB(Layer *_layer, GLint namelen, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsNamedStringARB","(", namelen, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsNamedStringARB(self->next, namelen, name);
  return ret;
}

static void REGAL_CALL http_glNamedStringARB(Layer *_layer, GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedStringARB","(", toString(type), ", ", namelen, ", ", print_quote(name,'"'), ", ", stringlen, ", ", print_quote(string,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedStringARB(self->next, type, namelen, name, stringlen, string);
}

// GL_ARB_sparse_texture

static void REGAL_CALL http_glTexPageCommitmentARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexPageCommitmentARB","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(commit), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexPageCommitmentARB(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

static void REGAL_CALL http_glTexturePageCommitmentEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexturePageCommitmentEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(commit), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexturePageCommitmentEXT(self->next, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

// GL_ARB_sync

static GLenum REGAL_CALL http_glClientWaitSync(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClientWaitSync","(", print_optional(reinterpret_cast<void *>(sync),Logging::pointers), ", ", GLclientWaitSyncToString(flags), ", ", timeout, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglClientWaitSync(self->next, sync, flags, timeout);
  return ret;
}

static void REGAL_CALL http_glDeleteSync(Layer *_layer, GLsync sync)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteSync","(", print_optional(reinterpret_cast<void *>(sync),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteSync(self->next, sync);
}

static GLsync REGAL_CALL http_glFenceSync(Layer *_layer, GLenum condition, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
    GLsync  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFenceSync","(", toString(condition), ", ", GLfenceSyncToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglFenceSync(self->next, condition, flags);
  return ret;
}

static void REGAL_CALL http_glGetInteger64v(Layer *_layer, GLenum pname, GLint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInteger64v","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInteger64v(self->next, pname, params);
}

static void REGAL_CALL http_glGetSynciv(Layer *_layer, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSynciv","(", print_optional(reinterpret_cast<void *>(sync),Logging::pointers), ", ", toString(pname), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSynciv(self->next, sync, pname, bufSize, length, values);
}

static GLboolean REGAL_CALL http_glIsSync(Layer *_layer, GLsync sync)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsSync","(", print_optional(reinterpret_cast<void *>(sync),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsSync(self->next, sync);
  return ret;
}

static void REGAL_CALL http_glWaitSync(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWaitSync","(", print_optional(reinterpret_cast<void *>(sync),Logging::pointers), ", ", GLwaitSyncToString(flags), ", ", timeout, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWaitSync(self->next, sync, flags, timeout);
}

// GL_ARB_tessellation_shader

static void REGAL_CALL http_glPatchParameterfv(Layer *_layer, GLenum pname, const GLfloat *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPatchParameterfv","(", toString(pname), ", ", print_array(values,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPatchParameterfv(self->next, pname, values);
}

static void REGAL_CALL http_glPatchParameteri(Layer *_layer, GLenum pname, GLint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPatchParameteri","(", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPatchParameteri(self->next, pname, value);
}

// GL_ARB_texture_buffer_object

static void REGAL_CALL http_glTexBufferARB(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexBufferARB","(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexBufferARB(self->next, target, internalformat, buffer);
}

// GL_ARB_texture_buffer_range

static void REGAL_CALL http_glTexBufferRange(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexBufferRange","(", toString(target), ", ", toString(internalformat), ", ", buffer, ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexBufferRange(self->next, target, internalformat, buffer, offset, size);
}

static void REGAL_CALL http_glTextureBufferRangeEXT(Layer *_layer, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureBufferRangeEXT","(", texture, ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureBufferRangeEXT(self->next, texture, target, internalformat, buffer, offset, size);
}

// GL_ARB_texture_compression

static void REGAL_CALL http_glCompressedTexImage1DARB(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage1DARB","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage1DARB(self->next, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexImage2DARB(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage2DARB","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage2DARB(self->next, target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexImage3DARB(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage3DARB","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage3DARB(self->next, target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage1DARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage1DARB","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage1DARB(self->next, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage2DARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage2DARB","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage2DARB(self->next, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage3DARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage3DARB","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage3DARB(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL http_glGetCompressedTexImageARB(Layer *_layer, GLenum target, GLint lod, GLvoid *img)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCompressedTexImageARB","(", toString(target), ", ", lod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCompressedTexImageARB(self->next, target, lod, img);
}

// GL_ARB_texture_multisample

static void REGAL_CALL http_glGetMultisamplefv(Layer *_layer, GLenum pname, GLuint index, GLfloat *val)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultisamplefv","(", toString(pname), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultisamplefv(self->next, pname, index, val);
}

static void REGAL_CALL http_glSampleMaski(Layer *_layer, GLuint index, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleMaski","(", index, ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleMaski(self->next, index, mask);
}

static void REGAL_CALL http_glTexImage2DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage2DMultisample","(", toString(target), ", ", samples, ", ", internalformat, ", ", width, ", ", height, ", ", toString(fixedsamplelocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage2DMultisample(self->next, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL http_glTexImage3DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage3DMultisample","(", toString(target), ", ", samples, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedsamplelocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage3DMultisample(self->next, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_storage

static void REGAL_CALL http_glTexStorage1D(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage1D","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage1D(self->next, target, levels, internalformat, width);
}

static void REGAL_CALL http_glTexStorage2D(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage2D","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage2D(self->next, target, levels, internalformat, width, height);
}

static void REGAL_CALL http_glTexStorage3D(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage3D","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage3D(self->next, target, levels, internalformat, width, height, depth);
}

static void REGAL_CALL http_glTextureStorage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureStorage1DEXT","(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureStorage1DEXT(self->next, texture, target, levels, internalformat, width);
}

static void REGAL_CALL http_glTextureStorage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureStorage2DEXT","(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureStorage2DEXT(self->next, texture, target, levels, internalformat, width, height);
}

static void REGAL_CALL http_glTextureStorage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureStorage3DEXT","(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureStorage3DEXT(self->next, texture, target, levels, internalformat, width, height, depth);
}

// GL_ARB_texture_storage_multisample

static void REGAL_CALL http_glTexStorage2DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage2DMultisample","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(fixedsamplelocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage2DMultisample(self->next, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL http_glTexStorage3DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage3DMultisample","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", toString(fixedsamplelocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage3DMultisample(self->next, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

static void REGAL_CALL http_glTextureStorage2DMultisampleEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureStorage2DMultisampleEXT","(", texture, ", ", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(fixedsamplelocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureStorage2DMultisampleEXT(self->next, texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL http_glTextureStorage3DMultisampleEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureStorage3DMultisampleEXT","(", texture, ", ", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", toString(fixedsamplelocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureStorage3DMultisampleEXT(self->next, texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_view

static void REGAL_CALL http_glTextureView(Layer *_layer, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureView","(", texture, ", ", toString(target), ", ", origtexture, ", ", toString(internalformat), ", ", minlevel, ", ", numlevels, ", ", minlayer, ", ", numlayers, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureView(self->next, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

// GL_ARB_timer_query

static void REGAL_CALL http_glGetQueryObjecti64v(Layer *_layer, GLuint id, GLenum pname, GLint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjecti64v","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjecti64v(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectui64v(Layer *_layer, GLuint id, GLenum pname, GLuint64 *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectui64v","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectui64v(self->next, id, pname, params);
}

static void REGAL_CALL http_glQueryCounter(Layer *_layer, GLuint id, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glQueryCounter","(", id, ", ", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglQueryCounter(self->next, id, target);
}

// GL_ARB_transform_feedback2

static void REGAL_CALL http_glBindTransformFeedback(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTransformFeedback","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindTransformFeedback(self->next, target, id);
}

static void REGAL_CALL http_glDeleteTransformFeedbacks(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteTransformFeedbacks","(", n, ", ", print_array(ids,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteTransformFeedbacks(self->next, n, ids);
}

static void REGAL_CALL http_glDrawTransformFeedback(Layer *_layer, GLenum mode, GLuint name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawTransformFeedback","(", GLmodeToString(mode), ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawTransformFeedback(self->next, mode, name);
}

static void REGAL_CALL http_glGenTransformFeedbacks(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenTransformFeedbacks","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenTransformFeedbacks(self->next, n, ids);
}

static GLboolean REGAL_CALL http_glIsTransformFeedback(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsTransformFeedback","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsTransformFeedback(self->next, id);
  return ret;
}

static void REGAL_CALL http_glPauseTransformFeedback(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPauseTransformFeedback","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPauseTransformFeedback(self->next);
}

static void REGAL_CALL http_glResumeTransformFeedback(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResumeTransformFeedback","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResumeTransformFeedback(self->next);
}

// GL_ARB_transform_feedback3

static void REGAL_CALL http_glBeginQueryIndexed(Layer *_layer, GLenum target, GLuint index, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginQueryIndexed","(", toString(target), ", ", index, ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginQueryIndexed(self->next, target, index, id);
}

static void REGAL_CALL http_glDrawTransformFeedbackStream(Layer *_layer, GLenum mode, GLuint id, GLuint stream)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawTransformFeedbackStream","(", GLmodeToString(mode), ", ", id, ", ", stream, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawTransformFeedbackStream(self->next, mode, id, stream);
}

static void REGAL_CALL http_glEndQueryIndexed(Layer *_layer, GLenum target, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndQueryIndexed","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndQueryIndexed(self->next, target, index);
}

static void REGAL_CALL http_glGetQueryIndexediv(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryIndexediv","(", toString(target), ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryIndexediv(self->next, target, index, pname, params);
}

// GL_ARB_transform_feedback_instanced

static void REGAL_CALL http_glDrawTransformFeedbackInstanced(Layer *_layer, GLenum mode, GLuint id, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawTransformFeedbackInstanced","(", GLmodeToString(mode), ", ", id, ", ", primcount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawTransformFeedbackInstanced(self->next, mode, id, primcount);
}

static void REGAL_CALL http_glDrawTransformFeedbackStreamInstanced(Layer *_layer, GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawTransformFeedbackStreamInstanced","(", GLmodeToString(mode), ", ", id, ", ", stream, ", ", primcount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawTransformFeedbackStreamInstanced(self->next, mode, id, stream, primcount);
}

// GL_ARB_transpose_matrix

static void REGAL_CALL http_glLoadTransposeMatrixdARB(Layer *_layer, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadTransposeMatrixdARB","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadTransposeMatrixdARB(self->next, m);
}

static void REGAL_CALL http_glLoadTransposeMatrixfARB(Layer *_layer, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadTransposeMatrixfARB","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadTransposeMatrixfARB(self->next, m);
}

static void REGAL_CALL http_glMultTransposeMatrixdARB(Layer *_layer, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultTransposeMatrixdARB","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultTransposeMatrixdARB(self->next, m);
}

static void REGAL_CALL http_glMultTransposeMatrixfARB(Layer *_layer, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultTransposeMatrixfARB","(", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultTransposeMatrixfARB(self->next, m);
}

// GL_ARB_uniform_buffer_object

static void REGAL_CALL http_glBindBufferBase(Layer *_layer, GLenum target, GLuint index, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferBase","(", toString(target), ", ", index, ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferBase(self->next, target, index, buffer);
}

static void REGAL_CALL http_glBindBufferRange(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferRange","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferRange(self->next, target, index, buffer, offset, size);
}

static void REGAL_CALL http_glGetActiveUniformBlockName(Layer *_layer, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveUniformBlockName","(", program, ", ", uniformBlockIndex, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveUniformBlockName(self->next, program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

static void REGAL_CALL http_glGetActiveUniformBlockiv(Layer *_layer, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveUniformBlockiv","(", program, ", ", uniformBlockIndex, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveUniformBlockiv(self->next, program, uniformBlockIndex, pname, params);
}

static void REGAL_CALL http_glGetActiveUniformName(Layer *_layer, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveUniformName","(", program, ", ", uniformIndex, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveUniformName(self->next, program, uniformIndex, bufSize, length, uniformName);
}

static void REGAL_CALL http_glGetActiveUniformsiv(Layer *_layer, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveUniformsiv","(", program, ", ", uniformCount, ", ", print_optional(uniformIndices,Logging::pointers), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveUniformsiv(self->next, program, uniformCount, uniformIndices, pname, params);
}

static void REGAL_CALL http_glGetIntegeri_v(Layer *_layer, GLenum target, GLuint index, GLint *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetIntegeri_v","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetIntegeri_v(self->next, target, index, data);
}

static GLuint REGAL_CALL http_glGetUniformBlockIndex(Layer *_layer, GLuint program, const GLchar *uniformBlockName)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformBlockIndex","(", program, ", ", print_quote(uniformBlockName,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetUniformBlockIndex(self->next, program, uniformBlockName);
  return ret;
}

static void REGAL_CALL http_glGetUniformIndices(Layer *_layer, GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformIndices","(", program, ", ", uniformCount, ", ", uniformNames, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformIndices(self->next, program, uniformCount, uniformNames, uniformIndices);
}

static void REGAL_CALL http_glUniformBlockBinding(Layer *_layer, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformBlockBinding","(", program, ", ", uniformBlockIndex, ", ", uniformBlockBinding, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformBlockBinding(self->next, program, uniformBlockIndex, uniformBlockBinding);
}

// GL_ARB_vertex_array_object

static void REGAL_CALL http_glBindVertexArray(Layer *_layer, GLuint array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVertexArray","(", array, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVertexArray(self->next, array);
}

static void REGAL_CALL http_glDeleteVertexArrays(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteVertexArrays","(", n, ", ", print_array(arrays,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteVertexArrays(self->next, n, arrays);
}

static void REGAL_CALL http_glGenVertexArrays(Layer *_layer, GLsizei n, GLuint *arrays)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenVertexArrays","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenVertexArrays(self->next, n, arrays);
}

static GLboolean REGAL_CALL http_glIsVertexArray(Layer *_layer, GLuint array)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsVertexArray","(", array, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsVertexArray(self->next, array);
  return ret;
}

// GL_ARB_vertex_attrib_64bit

static void REGAL_CALL http_glGetVertexAttribLdv(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribLdv","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribLdv(self->next, index, pname, params);
}

static void REGAL_CALL http_glVertexAttribL1d(Layer *_layer, GLuint index, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1d","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1d(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribL1dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1dv","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL2d(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2d","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2d(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribL2dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2dv","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL3d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3d","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3d(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribL3dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3dv","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL4d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4d","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4d(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribL4dv(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4dv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4dv(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribLPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribLPointer","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribLPointer(self->next, index, size, type, stride, pointer);
}

// GL_ARB_vertex_attrib_binding

static void REGAL_CALL http_glBindVertexBuffer(Layer *_layer, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVertexBuffer","(", bindingindex, ", ", buffer, ", ", offset, ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVertexBuffer(self->next, bindingindex, buffer, offset, stride);
}

static void REGAL_CALL http_glVertexArrayBindVertexBufferEXT(Layer *_layer, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayBindVertexBufferEXT","(", vaobj, ", ", bindingindex, ", ", buffer, ", ", offset, ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayBindVertexBufferEXT(self->next, vaobj, bindingindex, buffer, offset, stride);
}

static void REGAL_CALL http_glVertexArrayVertexAttribBindingEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribBindingEXT","(", vaobj, ", ", attribindex, ", ", bindingindex, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribBindingEXT(self->next, vaobj, attribindex, bindingindex);
}

static void REGAL_CALL http_glVertexArrayVertexAttribFormatEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribFormatEXT","(", vaobj, ", ", attribindex, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", relativeoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribFormatEXT(self->next, vaobj, attribindex, size, type, normalized, relativeoffset);
}

static void REGAL_CALL http_glVertexArrayVertexAttribIFormatEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribIFormatEXT","(", vaobj, ", ", attribindex, ", ", size, ", ", toString(type), ", ", relativeoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribIFormatEXT(self->next, vaobj, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL http_glVertexArrayVertexAttribLFormatEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribLFormatEXT","(", vaobj, ", ", attribindex, ", ", size, ", ", toString(type), ", ", relativeoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribLFormatEXT(self->next, vaobj, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL http_glVertexArrayVertexBindingDivisorEXT(Layer *_layer, GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexBindingDivisorEXT","(", vaobj, ", ", bindingindex, ", ", divisor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexBindingDivisorEXT(self->next, vaobj, bindingindex, divisor);
}

static void REGAL_CALL http_glVertexAttribBinding(Layer *_layer, GLuint attribindex, GLuint bindingindex)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribBinding","(", attribindex, ", ", bindingindex, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribBinding(self->next, attribindex, bindingindex);
}

static void REGAL_CALL http_glVertexAttribFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribFormat","(", attribindex, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", relativeoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribFormat(self->next, attribindex, size, type, normalized, relativeoffset);
}

static void REGAL_CALL http_glVertexAttribIFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribIFormat","(", attribindex, ", ", size, ", ", toString(type), ", ", relativeoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribIFormat(self->next, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL http_glVertexAttribLFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribLFormat","(", attribindex, ", ", size, ", ", toString(type), ", ", relativeoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribLFormat(self->next, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL http_glVertexBindingDivisor(Layer *_layer, GLuint bindingindex, GLuint divisor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexBindingDivisor","(", bindingindex, ", ", divisor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexBindingDivisor(self->next, bindingindex, divisor);
}

// GL_ARB_vertex_blend

static void REGAL_CALL http_glVertexBlendARB(Layer *_layer, GLint count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexBlendARB","(", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexBlendARB(self->next, count);
}

static void REGAL_CALL http_glWeightPointerARB(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightPointerARB","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightPointerARB(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glWeightbvARB(Layer *_layer, GLint size, const GLbyte *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightbvARB","(", size, ", ", weights, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightbvARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightdvARB(Layer *_layer, GLint size, const GLdouble *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightdvARB","(", size, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightdvARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightfvARB(Layer *_layer, GLint size, const GLfloat *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightfvARB","(", size, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightfvARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightivARB(Layer *_layer, GLint size, const GLint *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightivARB","(", size, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightivARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightsvARB(Layer *_layer, GLint size, const GLshort *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightsvARB","(", size, ", ", weights, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightsvARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightubvARB(Layer *_layer, GLint size, const GLubyte *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightubvARB","(", size, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightubvARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightuivARB(Layer *_layer, GLint size, const GLuint *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightuivARB","(", size, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightuivARB(self->next, size, weights);
}

static void REGAL_CALL http_glWeightusvARB(Layer *_layer, GLint size, const GLushort *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightusvARB","(", size, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightusvARB(self->next, size, weights);
}

// GL_ARB_vertex_buffer_object

static void REGAL_CALL http_glBindBufferARB(Layer *_layer, GLenum target, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferARB","(", toString(target), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferARB(self->next, target, buffer);
}

static void REGAL_CALL http_glBufferDataARB(Layer *_layer, GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferDataARB","(", toString(target), ", ", size, ", ", print_raw(data, data ? size : 0, Logging::rawLimit(data ? size : 0)), ", ", toString(usage), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferDataARB(self->next, target, size, data, usage);
}

static void REGAL_CALL http_glBufferSubDataARB(Layer *_layer, GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferSubDataARB","(", toString(target), ", ", offset, ", ", size, ", ", print_raw(data, data ? size : 0, Logging::rawLimit(data ? size : 0)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferSubDataARB(self->next, target, offset, size, data);
}

static void REGAL_CALL http_glDeleteBuffersARB(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteBuffersARB","(", n, ", ", print_array(buffers,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteBuffersARB(self->next, n, buffers);
}

static void REGAL_CALL http_glGenBuffersARB(Layer *_layer, GLsizei n, GLuint *buffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenBuffersARB","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenBuffersARB(self->next, n, buffers);
}

static void REGAL_CALL http_glGetBufferParameterivARB(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferParameterivARB","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferParameterivARB(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetBufferPointervARB(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferPointervARB","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferPointervARB(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetBufferSubDataARB(Layer *_layer, GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferSubDataARB","(", toString(target), ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferSubDataARB(self->next, target, offset, size, data);
}

static GLboolean REGAL_CALL http_glIsBufferARB(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsBufferARB","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsBufferARB(self->next, buffer);
  return ret;
}

static GLvoid *REGAL_CALL http_glMapBufferARB(Layer *_layer, GLenum target, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapBufferARB","(", toString(target), ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapBufferARB(self->next, target, access);
  return ret;
}

static GLboolean REGAL_CALL http_glUnmapBufferARB(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnmapBufferARB","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglUnmapBufferARB(self->next, target);
  return ret;
}

// GL_ARB_vertex_program

static void REGAL_CALL http_glBindProgramARB(Layer *_layer, GLenum target, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindProgramARB","(", toString(target), ", ", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindProgramARB(self->next, target, program);
}

static void REGAL_CALL http_glDeleteProgramsARB(Layer *_layer, GLsizei n, const GLuint *programs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteProgramsARB","(", n, ", ", print_array(programs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteProgramsARB(self->next, n, programs);
}

static void REGAL_CALL http_glDisableVertexAttribArrayARB(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableVertexAttribArrayARB","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableVertexAttribArrayARB(self->next, index);
}

static void REGAL_CALL http_glEnableVertexAttribArrayARB(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableVertexAttribArrayARB","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableVertexAttribArrayARB(self->next, index);
}

static void REGAL_CALL http_glGenProgramsARB(Layer *_layer, GLsizei n, GLuint *programs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenProgramsARB","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenProgramsARB(self->next, n, programs);
}

static void REGAL_CALL http_glGetProgramEnvParameterdvARB(Layer *_layer, GLenum target, GLuint index, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramEnvParameterdvARB","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramEnvParameterdvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramEnvParameterfvARB(Layer *_layer, GLenum target, GLuint index, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramEnvParameterfvARB","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramEnvParameterfvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramLocalParameterdvARB(Layer *_layer, GLenum target, GLuint index, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramLocalParameterdvARB","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramLocalParameterdvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramLocalParameterfvARB(Layer *_layer, GLenum target, GLuint index, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramLocalParameterfvARB","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramLocalParameterfvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramStringARB(Layer *_layer, GLenum target, GLenum pname, GLvoid *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramStringARB","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramStringARB(self->next, target, pname, string);
}

static void REGAL_CALL http_glGetProgramivARB(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramivARB","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramivARB(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribPointervARB(Layer *_layer, GLuint index, GLenum pname, GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribPointervARB","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribPointervARB(self->next, index, pname, pointer);
}

static void REGAL_CALL http_glGetVertexAttribdvARB(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribdvARB","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribdvARB(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribfvARB(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribfvARB","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribfvARB(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribivARB(Layer *_layer, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribivARB","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribivARB(self->next, index, pname, params);
}

static GLboolean REGAL_CALL http_glIsProgramARB(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsProgramARB","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsProgramARB(self->next, program);
  return ret;
}

static void REGAL_CALL http_glProgramEnvParameter4dARB(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameter4dARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameter4dARB(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramEnvParameter4dvARB(Layer *_layer, GLenum target, GLuint index, const GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameter4dvARB","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameter4dvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramEnvParameter4fARB(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameter4fARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameter4fARB(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramEnvParameter4fvARB(Layer *_layer, GLenum target, GLuint index, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameter4fvARB","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameter4fvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramLocalParameter4dARB(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameter4dARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameter4dARB(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramLocalParameter4dvARB(Layer *_layer, GLenum target, GLuint index, const GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameter4dvARB","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameter4dvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramLocalParameter4fARB(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameter4fARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameter4fARB(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramLocalParameter4fvARB(Layer *_layer, GLenum target, GLuint index, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameter4fvARB","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameter4fvARB(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramStringARB(Layer *_layer, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramStringARB","(", toString(target), ", ", toString(format), ", ", len, ", ", print_quote(reinterpret_cast<const char *>(string),'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramStringARB(self->next, target, format, len, string);
}

static void REGAL_CALL http_glVertexAttrib1dARB(Layer *_layer, GLuint index, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1dARB","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1dARB(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1dvARB(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1dvARB","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1dvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib1fARB(Layer *_layer, GLuint index, GLfloat x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1fARB","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1fARB(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1fvARB(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1fvARB","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1fvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib1sARB(Layer *_layer, GLuint index, GLshort x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1sARB","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1sARB(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1svARB(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1svARB","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1svARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2dARB(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2dARB","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2dARB(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2dvARB(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2dvARB","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2dvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2fARB(Layer *_layer, GLuint index, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2fARB","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2fARB(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2fvARB(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2fvARB","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2fvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2sARB(Layer *_layer, GLuint index, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2sARB","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2sARB(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2svARB(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2svARB","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2svARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3dARB(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3dARB","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3dARB(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3dvARB(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3dvARB","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3dvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3fARB(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3fARB","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3fARB(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3fvARB(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3fvARB","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3fvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3sARB(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3sARB","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3sARB(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3svARB(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3svARB","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3svARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4NbvARB(Layer *_layer, GLuint index, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NbvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NbvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4NivARB(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NivARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NivARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4NsvARB(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NsvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NsvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4NubARB(Layer *_layer, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NubARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NubARB(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4NubvARB(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NubvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NubvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4NuivARB(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NuivARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NuivARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4NusvARB(Layer *_layer, GLuint index, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4NusvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4NusvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4bvARB(Layer *_layer, GLuint index, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4bvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4bvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4dARB(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4dARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4dARB(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4dvARB(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4dvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4dvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4fARB(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4fARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4fARB(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4fvARB(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4fvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4fvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4ivARB(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4ivARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4ivARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4sARB(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4sARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4sARB(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4svARB(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4svARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4svARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4ubvARB(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4ubvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4ubvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4uivARB(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4uivARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4uivARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4usvARB(Layer *_layer, GLuint index, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4usvARB","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4usvARB(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribPointerARB(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribPointerARB","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribPointerARB(self->next, index, size, type, normalized, stride, pointer);
}

// GL_ARB_vertex_shader

static void REGAL_CALL http_glBindAttribLocationARB(Layer *_layer, GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindAttribLocationARB","(", programObj, ", ", index, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindAttribLocationARB(self->next, programObj, index, name);
}

static void REGAL_CALL http_glGetActiveAttribARB(Layer *_layer, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveAttribARB","(", programObj, ", ", index, ", ", maxLength, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveAttribARB(self->next, programObj, index, maxLength, length, size, type, name);
}

static GLint REGAL_CALL http_glGetAttribLocationARB(Layer *_layer, GLhandleARB programObj, const GLcharARB *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetAttribLocationARB","(", programObj, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetAttribLocationARB(self->next, programObj, name);
  return ret;
}

// GL_ARB_vertex_type_2_10_10_10_rev

static void REGAL_CALL http_glColorP3ui(Layer *_layer, GLenum type, GLuint color)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorP3ui","(", toString(type), ", ", color, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorP3ui(self->next, type, color);
}

static void REGAL_CALL http_glColorP3uiv(Layer *_layer, GLenum type, const GLuint *color)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorP3uiv","(", toString(type), ", ", print_array(color,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorP3uiv(self->next, type, color);
}

static void REGAL_CALL http_glColorP4ui(Layer *_layer, GLenum type, GLuint color)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorP4ui","(", toString(type), ", ", color, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorP4ui(self->next, type, color);
}

static void REGAL_CALL http_glColorP4uiv(Layer *_layer, GLenum type, const GLuint *color)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorP4uiv","(", toString(type), ", ", print_array(color,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorP4uiv(self->next, type, color);
}

static void REGAL_CALL http_glMultiTexCoordP1ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP1ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP1ui(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP1uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP1uiv","(", toString(texture), ", ", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP1uiv(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP2ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP2ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP2ui(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP2uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP2uiv","(", toString(texture), ", ", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP2uiv(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP3ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP3ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP3ui(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP3uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP3uiv","(", toString(texture), ", ", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP3uiv(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP4ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP4ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP4ui(self->next, texture, type, coords);
}

static void REGAL_CALL http_glMultiTexCoordP4uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordP4uiv","(", toString(texture), ", ", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordP4uiv(self->next, texture, type, coords);
}

static void REGAL_CALL http_glNormalP3ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalP3ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalP3ui(self->next, type, coords);
}

static void REGAL_CALL http_glNormalP3uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalP3uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalP3uiv(self->next, type, coords);
}

static void REGAL_CALL http_glSecondaryColorP3ui(Layer *_layer, GLenum type, GLuint color)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColorP3ui","(", toString(type), ", ", color, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColorP3ui(self->next, type, color);
}

static void REGAL_CALL http_glSecondaryColorP3uiv(Layer *_layer, GLenum type, const GLuint *color)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColorP3uiv","(", toString(type), ", ", print_array(color,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColorP3uiv(self->next, type, color);
}

static void REGAL_CALL http_glTexCoordP1ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP1ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP1ui(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP1uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP1uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP1uiv(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP2ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP2ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP2ui(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP2uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP2uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP2uiv(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP3ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP3ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP3ui(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP3uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP3uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP3uiv(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP4ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP4ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP4ui(self->next, type, coords);
}

static void REGAL_CALL http_glTexCoordP4uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordP4uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordP4uiv(self->next, type, coords);
}

static void REGAL_CALL http_glVertexAttribP1ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP1ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP1ui(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP1uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP1uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", print_array(value,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP1uiv(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP2ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP2ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP2ui(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP2uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP2uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", print_array(value,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP2uiv(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP3ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP3ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP3ui(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP3uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP3uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", print_array(value,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP3uiv(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP4ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP4ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP4ui(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexAttribP4uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribP4uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", print_array(value,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribP4uiv(self->next, index, type, normalized, value);
}

static void REGAL_CALL http_glVertexP2ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexP2ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexP2ui(self->next, type, coords);
}

static void REGAL_CALL http_glVertexP2uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexP2uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexP2uiv(self->next, type, coords);
}

static void REGAL_CALL http_glVertexP3ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexP3ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexP3ui(self->next, type, coords);
}

static void REGAL_CALL http_glVertexP3uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexP3uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexP3uiv(self->next, type, coords);
}

static void REGAL_CALL http_glVertexP4ui(Layer *_layer, GLenum type, GLuint coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexP4ui","(", toString(type), ", ", coords, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexP4ui(self->next, type, coords);
}

static void REGAL_CALL http_glVertexP4uiv(Layer *_layer, GLenum type, const GLuint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexP4uiv","(", toString(type), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexP4uiv(self->next, type, coords);
}

// GL_ARB_viewport_array

static void REGAL_CALL http_glDepthRangeArrayv(Layer *_layer, GLuint first, GLsizei count, const GLclampd *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRangeArrayv","(", first, ", ", count, ", ", print_array(v,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRangeArrayv(self->next, first, count, v);
}

static void REGAL_CALL http_glDepthRangeIndexed(Layer *_layer, GLuint index, GLclampd n, GLclampd f)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRangeIndexed","(", index, ", ", n, ", ", f, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRangeIndexed(self->next, index, n, f);
}

static void REGAL_CALL http_glGetDoublei_v(Layer *_layer, GLenum target, GLuint index, GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDoublei_v","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDoublei_v(self->next, target, index, v);
}

static void REGAL_CALL http_glGetFloati_v(Layer *_layer, GLenum target, GLuint index, GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFloati_v","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFloati_v(self->next, target, index, v);
}

static void REGAL_CALL http_glScissorArrayv(Layer *_layer, GLuint first, GLsizei count, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScissorArrayv","(", first, ", ", count, ", ", print_array(v,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScissorArrayv(self->next, first, count, v);
}

static void REGAL_CALL http_glScissorIndexed(Layer *_layer, GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScissorIndexed","(", index, ", ", left, ", ", bottom, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScissorIndexed(self->next, index, left, bottom, width, height);
}

static void REGAL_CALL http_glScissorIndexedv(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScissorIndexedv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScissorIndexedv(self->next, index, v);
}

static void REGAL_CALL http_glViewportArrayv(Layer *_layer, GLuint first, GLsizei count, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glViewportArrayv","(", first, ", ", count, ", ", print_array(v,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglViewportArrayv(self->next, first, count, v);
}

static void REGAL_CALL http_glViewportIndexedf(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glViewportIndexedf","(", index, ", ", x, ", ", y, ", ", w, ", ", h, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglViewportIndexedf(self->next, index, x, y, w, h);
}

static void REGAL_CALL http_glViewportIndexedfv(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glViewportIndexedfv","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglViewportIndexedfv(self->next, index, v);
}

// GL_ARB_window_pos

static void REGAL_CALL http_glWindowPos2dARB(Layer *_layer, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2dARB","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2dARB(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2dvARB(Layer *_layer, const GLdouble *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2dvARB","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2dvARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos2fARB(Layer *_layer, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2fARB","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2fARB(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2fvARB(Layer *_layer, const GLfloat *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2fvARB","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2fvARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos2iARB(Layer *_layer, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2iARB","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2iARB(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2ivARB(Layer *_layer, const GLint *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2ivARB","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2ivARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos2sARB(Layer *_layer, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2sARB","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2sARB(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2svARB(Layer *_layer, const GLshort *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2svARB","(", print_array(p,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2svARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos3dARB(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3dARB","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3dARB(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3dvARB(Layer *_layer, const GLdouble *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3dvARB","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3dvARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos3fARB(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3fARB","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3fARB(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3fvARB(Layer *_layer, const GLfloat *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3fvARB","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3fvARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos3iARB(Layer *_layer, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3iARB","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3iARB(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3ivARB(Layer *_layer, const GLint *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3ivARB","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3ivARB(self->next, p);
}

static void REGAL_CALL http_glWindowPos3sARB(Layer *_layer, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3sARB","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3sARB(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3svARB(Layer *_layer, const GLshort *p)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3svARB","(", print_array(p,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3svARB(self->next, p);
}

// GL_ATI_draw_buffers

static void REGAL_CALL http_glDrawBuffersATI(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBuffersATI","(", n, ", ", print_array(bufs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBuffersATI(self->next, n, bufs);
}

// GL_ATI_element_array

static void REGAL_CALL http_glDrawElementArrayATI(Layer *_layer, GLenum mode, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementArrayATI","(", GLmodeToString(mode), ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementArrayATI(self->next, mode, count);
}

static void REGAL_CALL http_glDrawRangeElementArrayATI(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawRangeElementArrayATI","(", GLmodeToString(mode), ", ", start, ", ", end, ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawRangeElementArrayATI(self->next, mode, start, end, count);
}

static void REGAL_CALL http_glElementPointerATI(Layer *_layer, GLenum type, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glElementPointerATI","(", toString(type), ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglElementPointerATI(self->next, type, pointer);
}

// GL_ATI_envmap_bumpmap

static void REGAL_CALL http_glGetTexBumpParameterfvATI(Layer *_layer, GLenum pname, GLfloat *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexBumpParameterfvATI","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexBumpParameterfvATI(self->next, pname, param);
}

static void REGAL_CALL http_glGetTexBumpParameterivATI(Layer *_layer, GLenum pname, GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexBumpParameterivATI","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexBumpParameterivATI(self->next, pname, param);
}

static void REGAL_CALL http_glTexBumpParameterfvATI(Layer *_layer, GLenum pname, const GLfloat *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexBumpParameterfvATI","(", toString(pname), ", ", print_optional(param,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexBumpParameterfvATI(self->next, pname, param);
}

static void REGAL_CALL http_glTexBumpParameterivATI(Layer *_layer, GLenum pname, const GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexBumpParameterivATI","(", toString(pname), ", ", print_optional(param,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexBumpParameterivATI(self->next, pname, param);
}

// GL_ATI_fragment_shader

static void REGAL_CALL http_glAlphaFragmentOp1ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAlphaFragmentOp1ATI","(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAlphaFragmentOp1ATI(self->next, op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

static void REGAL_CALL http_glAlphaFragmentOp2ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAlphaFragmentOp2ATI","(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAlphaFragmentOp2ATI(self->next, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

static void REGAL_CALL http_glAlphaFragmentOp3ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAlphaFragmentOp3ATI","(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ", ", arg3, ", ", arg3Rep, ", ", arg3Mod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAlphaFragmentOp3ATI(self->next, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

static void REGAL_CALL http_glBeginFragmentShaderATI(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginFragmentShaderATI","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginFragmentShaderATI(self->next);
}

static void REGAL_CALL http_glBindFragmentShaderATI(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFragmentShaderATI","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFragmentShaderATI(self->next, id);
}

static void REGAL_CALL http_glColorFragmentOp1ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorFragmentOp1ATI","(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorFragmentOp1ATI(self->next, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

static void REGAL_CALL http_glColorFragmentOp2ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorFragmentOp2ATI","(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorFragmentOp2ATI(self->next, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

static void REGAL_CALL http_glColorFragmentOp3ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorFragmentOp3ATI","(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ", ", arg3, ", ", arg3Rep, ", ", arg3Mod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorFragmentOp3ATI(self->next, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

static void REGAL_CALL http_glDeleteFragmentShaderATI(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteFragmentShaderATI","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteFragmentShaderATI(self->next, id);
}

static void REGAL_CALL http_glEndFragmentShaderATI(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndFragmentShaderATI","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndFragmentShaderATI(self->next);
}

static GLuint REGAL_CALL http_glGenFragmentShadersATI(Layer *_layer, GLuint range)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenFragmentShadersATI","(", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGenFragmentShadersATI(self->next, range);
  return ret;
}

static void REGAL_CALL http_glPassTexCoordATI(Layer *_layer, GLuint dst, GLuint coord, GLenum swizzle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPassTexCoordATI","(", dst, ", ", coord, ", ", toString(swizzle), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPassTexCoordATI(self->next, dst, coord, swizzle);
}

static void REGAL_CALL http_glSampleMapATI(Layer *_layer, GLuint dst, GLuint interp, GLenum swizzle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleMapATI","(", dst, ", ", interp, ", ", toString(swizzle), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleMapATI(self->next, dst, interp, swizzle);
}

static void REGAL_CALL http_glSetFragmentShaderConstantATI(Layer *_layer, GLuint dst, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSetFragmentShaderConstantATI","(", dst, ", ", print_array(value,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSetFragmentShaderConstantATI(self->next, dst, value);
}

// GL_ATI_map_object_buffer

static GLvoid *REGAL_CALL http_glMapObjectBufferATI(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapObjectBufferATI","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapObjectBufferATI(self->next, buffer);
  return ret;
}

static void REGAL_CALL http_glUnmapObjectBufferATI(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnmapObjectBufferATI","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUnmapObjectBufferATI(self->next, buffer);
}

// GL_ATI_pn_triangles

static void REGAL_CALL http_glPNTrianglesfATI(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPNTrianglesfATI","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPNTrianglesfATI(self->next, pname, param);
}

static void REGAL_CALL http_glPNTrianglesiATI(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPNTrianglesiATI","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPNTrianglesiATI(self->next, pname, param);
}

// GL_ATI_separate_stencil

static void REGAL_CALL http_glStencilFuncSeparateATI(Layer *_layer, GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilFuncSeparateATI","(", toString(frontfunc), ", ", toString(backfunc), ", ", print_hex(ref), ", ", print_hex(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilFuncSeparateATI(self->next, frontfunc, backfunc, ref, mask);
}

static void REGAL_CALL http_glStencilOpSeparateATI(Layer *_layer, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilOpSeparateATI","(", toString(face), ", ", toString(sfail), ", ", toString(dpfail), ", ", toString(dppass), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilOpSeparateATI(self->next, face, sfail, dpfail, dppass);
}

// GL_ATI_vertex_array_object

static void REGAL_CALL http_glArrayObjectATI(Layer *_layer, GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glArrayObjectATI","(", toString(array), ", ", size, ", ", toString(type), ", ", stride, ", ", buffer, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglArrayObjectATI(self->next, array, size, type, stride, buffer, offset);
}

static void REGAL_CALL http_glFreeObjectBufferATI(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFreeObjectBufferATI","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFreeObjectBufferATI(self->next, buffer);
}

static void REGAL_CALL http_glGetArrayObjectfvATI(Layer *_layer, GLenum array, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetArrayObjectfvATI","(", toString(array), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetArrayObjectfvATI(self->next, array, pname, params);
}

static void REGAL_CALL http_glGetArrayObjectivATI(Layer *_layer, GLenum array, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetArrayObjectivATI","(", toString(array), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetArrayObjectivATI(self->next, array, pname, params);
}

static void REGAL_CALL http_glGetObjectBufferfvATI(Layer *_layer, GLuint buffer, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectBufferfvATI","(", buffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectBufferfvATI(self->next, buffer, pname, params);
}

static void REGAL_CALL http_glGetObjectBufferivATI(Layer *_layer, GLuint buffer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectBufferivATI","(", buffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectBufferivATI(self->next, buffer, pname, params);
}

static void REGAL_CALL http_glGetVariantArrayObjectfvATI(Layer *_layer, GLuint id, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVariantArrayObjectfvATI","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVariantArrayObjectfvATI(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetVariantArrayObjectivATI(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVariantArrayObjectivATI","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVariantArrayObjectivATI(self->next, id, pname, params);
}

static GLboolean REGAL_CALL http_glIsObjectBufferATI(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsObjectBufferATI","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsObjectBufferATI(self->next, buffer);
  return ret;
}

static GLuint REGAL_CALL http_glNewObjectBufferATI(Layer *_layer, GLsizei size, const GLvoid *pointer, GLenum usage)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNewObjectBufferATI","(", size, ", ", print_optional(pointer,Logging::pointers), ", ", toString(usage), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglNewObjectBufferATI(self->next, size, pointer, usage);
  return ret;
}

static void REGAL_CALL http_glUpdateObjectBufferATI(Layer *_layer, GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUpdateObjectBufferATI","(", buffer, ", ", offset, ", ", size, ", ", print_optional(pointer,Logging::pointers), ", ", toString(preserve), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUpdateObjectBufferATI(self->next, buffer, offset, size, pointer, preserve);
}

static void REGAL_CALL http_glVariantArrayObjectATI(Layer *_layer, GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantArrayObjectATI","(", id, ", ", toString(type), ", ", stride, ", ", buffer, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantArrayObjectATI(self->next, id, type, stride, buffer, offset);
}

// GL_ATI_vertex_attrib_array_object

static void REGAL_CALL http_glGetVertexAttribArrayObjectfvATI(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribArrayObjectfvATI","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribArrayObjectfvATI(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribArrayObjectivATI(Layer *_layer, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribArrayObjectivATI","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribArrayObjectivATI(self->next, index, pname, params);
}

static void REGAL_CALL http_glVertexAttribArrayObjectATI(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribArrayObjectATI","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", buffer, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribArrayObjectATI(self->next, index, size, type, normalized, stride, buffer, offset);
}

// GL_ATI_vertex_streams

static void REGAL_CALL http_glClientActiveVertexStreamATI(Layer *_layer, GLenum stream)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClientActiveVertexStreamATI","(", toString(stream), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClientActiveVertexStreamATI(self->next, stream);
}

static void REGAL_CALL http_glNormalStream3bATI(Layer *_layer, GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3bATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3bATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glNormalStream3bvATI(Layer *_layer, GLenum stream, const GLbyte *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3bvATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3bvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glNormalStream3dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3dATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3dATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glNormalStream3dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3dvATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3dvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glNormalStream3fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3fATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3fATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glNormalStream3fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3fvATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3fvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glNormalStream3iATI(Layer *_layer, GLenum stream, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3iATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3iATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glNormalStream3ivATI(Layer *_layer, GLenum stream, const GLint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3ivATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3ivATI(self->next, stream, coords);
}

static void REGAL_CALL http_glNormalStream3sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3sATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3sATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glNormalStream3svATI(Layer *_layer, GLenum stream, const GLshort *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalStream3svATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalStream3svATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexBlendEnvfATI(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexBlendEnvfATI","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexBlendEnvfATI(self->next, pname, param);
}

static void REGAL_CALL http_glVertexBlendEnviATI(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexBlendEnviATI","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexBlendEnviATI(self->next, pname, param);
}

static void REGAL_CALL http_glVertexStream1dATI(Layer *_layer, GLenum stream, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1dATI","(", toString(stream), ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1dATI(self->next, stream, x);
}

static void REGAL_CALL http_glVertexStream1dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1dvATI","(", toString(stream), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1dvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream1fATI(Layer *_layer, GLenum stream, GLfloat x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1fATI","(", toString(stream), ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1fATI(self->next, stream, x);
}

static void REGAL_CALL http_glVertexStream1fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1fvATI","(", toString(stream), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1fvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream1iATI(Layer *_layer, GLenum stream, GLint x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1iATI","(", toString(stream), ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1iATI(self->next, stream, x);
}

static void REGAL_CALL http_glVertexStream1ivATI(Layer *_layer, GLenum stream, const GLint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1ivATI","(", toString(stream), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1ivATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream1sATI(Layer *_layer, GLenum stream, GLshort x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1sATI","(", toString(stream), ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1sATI(self->next, stream, x);
}

static void REGAL_CALL http_glVertexStream1svATI(Layer *_layer, GLenum stream, const GLshort *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream1svATI","(", toString(stream), ", ", print_array(coords,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream1svATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream2dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2dATI","(", toString(stream), ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2dATI(self->next, stream, x, y);
}

static void REGAL_CALL http_glVertexStream2dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2dvATI","(", toString(stream), ", ", print_array(coords,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2dvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream2fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2fATI","(", toString(stream), ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2fATI(self->next, stream, x, y);
}

static void REGAL_CALL http_glVertexStream2fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2fvATI","(", toString(stream), ", ", print_array(coords,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2fvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream2iATI(Layer *_layer, GLenum stream, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2iATI","(", toString(stream), ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2iATI(self->next, stream, x, y);
}

static void REGAL_CALL http_glVertexStream2ivATI(Layer *_layer, GLenum stream, const GLint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2ivATI","(", toString(stream), ", ", print_array(coords,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2ivATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream2sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2sATI","(", toString(stream), ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2sATI(self->next, stream, x, y);
}

static void REGAL_CALL http_glVertexStream2svATI(Layer *_layer, GLenum stream, const GLshort *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream2svATI","(", toString(stream), ", ", print_array(coords,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream2svATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream3dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3dATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3dATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glVertexStream3dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3dvATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3dvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream3fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3fATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3fATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glVertexStream3fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3fvATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3fvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream3iATI(Layer *_layer, GLenum stream, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3iATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3iATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glVertexStream3ivATI(Layer *_layer, GLenum stream, const GLint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3ivATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3ivATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream3sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3sATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3sATI(self->next, stream, x, y, z);
}

static void REGAL_CALL http_glVertexStream3svATI(Layer *_layer, GLenum stream, const GLshort *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream3svATI","(", toString(stream), ", ", print_array(coords,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream3svATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream4dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4dATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4dATI(self->next, stream, x, y, z, w);
}

static void REGAL_CALL http_glVertexStream4dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4dvATI","(", toString(stream), ", ", print_array(coords,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4dvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream4fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4fATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4fATI(self->next, stream, x, y, z, w);
}

static void REGAL_CALL http_glVertexStream4fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4fvATI","(", toString(stream), ", ", print_array(coords,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4fvATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream4iATI(Layer *_layer, GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4iATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4iATI(self->next, stream, x, y, z, w);
}

static void REGAL_CALL http_glVertexStream4ivATI(Layer *_layer, GLenum stream, const GLint *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4ivATI","(", toString(stream), ", ", print_array(coords,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4ivATI(self->next, stream, coords);
}

static void REGAL_CALL http_glVertexStream4sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4sATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4sATI(self->next, stream, x, y, z, w);
}

static void REGAL_CALL http_glVertexStream4svATI(Layer *_layer, GLenum stream, const GLshort *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexStream4svATI","(", toString(stream), ", ", print_array(coords,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexStream4svATI(self->next, stream, coords);
}

// GL_EXT_bindable_uniform

static GLint REGAL_CALL http_glGetUniformBufferSizeEXT(Layer *_layer, GLuint program, GLint location)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformBufferSizeEXT","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetUniformBufferSizeEXT(self->next, program, location);
  return ret;
}

static GLintptr REGAL_CALL http_glGetUniformOffsetEXT(Layer *_layer, GLuint program, GLint location)
{
  Http * self = static_cast<Http *>(_layer);
    GLintptr  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformOffsetEXT","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetUniformOffsetEXT(self->next, program, location);
  return ret;
}

static void REGAL_CALL http_glUniformBufferEXT(Layer *_layer, GLuint program, GLint location, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformBufferEXT","(", program, ", ", location, ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformBufferEXT(self->next, program, location, buffer);
}

// GL_EXT_blend_color

static void REGAL_CALL http_glBlendColorEXT(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendColorEXT","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendColorEXT(self->next, red, green, blue, alpha);
}

// GL_EXT_blend_equation_separate

static void REGAL_CALL http_glBlendEquationSeparateEXT(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationSeparateEXT","(", GLmodeToString(modeRGB), ", ", GLmodeToString(modeAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationSeparateEXT(self->next, modeRGB, modeAlpha);
}

// GL_EXT_blend_func_separate

static void REGAL_CALL http_glBlendFuncSeparateEXT(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparateEXT","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparateEXT(self->next, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_EXT_blend_minmax

static void REGAL_CALL http_glBlendEquationEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationEXT(self->next, mode);
}

// GL_EXT_color_subtable

static void REGAL_CALL http_glColorSubTableEXT(Layer *_layer, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorSubTableEXT","(", toString(target), ", ", start, ", ", count, ", ", toString(format), ", ", toString(type), ", ", print_optional(table,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorSubTableEXT(self->next, target, start, count, format, type, table);
}

static void REGAL_CALL http_glCopyColorSubTableEXT(Layer *_layer, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyColorSubTableEXT","(", toString(target), ", ", start, ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyColorSubTableEXT(self->next, target, start, x, y, width);
}

// GL_EXT_compiled_vertex_array

static void REGAL_CALL http_glLockArraysEXT(Layer *_layer, GLint first, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLockArraysEXT","(", first, ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLockArraysEXT(self->next, first, count);
}

static void REGAL_CALL http_glUnlockArraysEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnlockArraysEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUnlockArraysEXT(self->next);
}

// GL_EXT_convolution

static void REGAL_CALL http_glConvolutionFilter1DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionFilter1DEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(image,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionFilter1DEXT(self->next, target, internalformat, width, format, type, image);
}

static void REGAL_CALL http_glConvolutionFilter2DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionFilter2DEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(image,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionFilter2DEXT(self->next, target, internalformat, width, height, format, type, image);
}

static void REGAL_CALL http_glConvolutionParameterfEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameterfEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameterfEXT(self->next, target, pname, param);
}

static void REGAL_CALL http_glConvolutionParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glConvolutionParameteriEXT(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameteriEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameteriEXT(self->next, target, pname, param);
}

static void REGAL_CALL http_glConvolutionParameterivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glConvolutionParameterivEXT","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglConvolutionParameterivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glCopyConvolutionFilter1DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyConvolutionFilter1DEXT","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyConvolutionFilter1DEXT(self->next, target, internalformat, x, y, width);
}

static void REGAL_CALL http_glCopyConvolutionFilter2DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyConvolutionFilter2DEXT","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyConvolutionFilter2DEXT(self->next, target, internalformat, x, y, width, height);
}

static void REGAL_CALL http_glGetConvolutionFilterEXT(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetConvolutionFilterEXT","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetConvolutionFilterEXT(self->next, target, format, type, image);
}

static void REGAL_CALL http_glGetConvolutionParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetConvolutionParameterfvEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetConvolutionParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetConvolutionParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetConvolutionParameterivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetConvolutionParameterivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetSeparableFilterEXT(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSeparableFilterEXT","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSeparableFilterEXT(self->next, target, format, type, row, column, span);
}

static void REGAL_CALL http_glSeparableFilter2DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSeparableFilter2DEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(row,Logging::pointers), ", ", print_optional(column,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSeparableFilter2DEXT(self->next, target, internalformat, width, height, format, type, row, column);
}

// GL_EXT_coordinate_frame

static void REGAL_CALL http_glBinormal3bEXT(Layer *_layer, GLbyte bx, GLbyte by, GLbyte bz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3bEXT","(", bx, ", ", by, ", ", bz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3bEXT(self->next, bx, by, bz);
}

static void REGAL_CALL http_glBinormal3bvEXT(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3bvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3bvEXT(self->next, v);
}

static void REGAL_CALL http_glBinormal3dEXT(Layer *_layer, GLdouble bx, GLdouble by, GLdouble bz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3dEXT","(", bx, ", ", by, ", ", bz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3dEXT(self->next, bx, by, bz);
}

static void REGAL_CALL http_glBinormal3dvEXT(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3dvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3dvEXT(self->next, v);
}

static void REGAL_CALL http_glBinormal3fEXT(Layer *_layer, GLfloat bx, GLfloat by, GLfloat bz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3fEXT","(", bx, ", ", by, ", ", bz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3fEXT(self->next, bx, by, bz);
}

static void REGAL_CALL http_glBinormal3fvEXT(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3fvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3fvEXT(self->next, v);
}

static void REGAL_CALL http_glBinormal3iEXT(Layer *_layer, GLint bx, GLint by, GLint bz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3iEXT","(", bx, ", ", by, ", ", bz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3iEXT(self->next, bx, by, bz);
}

static void REGAL_CALL http_glBinormal3ivEXT(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3ivEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3ivEXT(self->next, v);
}

static void REGAL_CALL http_glBinormal3sEXT(Layer *_layer, GLshort bx, GLshort by, GLshort bz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3sEXT","(", bx, ", ", by, ", ", bz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3sEXT(self->next, bx, by, bz);
}

static void REGAL_CALL http_glBinormal3svEXT(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormal3svEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormal3svEXT(self->next, v);
}

static void REGAL_CALL http_glBinormalPointerEXT(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBinormalPointerEXT","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBinormalPointerEXT(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glTangent3bEXT(Layer *_layer, GLbyte tx, GLbyte ty, GLbyte tz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3bEXT","(", tx, ", ", ty, ", ", tz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3bEXT(self->next, tx, ty, tz);
}

static void REGAL_CALL http_glTangent3bvEXT(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3bvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3bvEXT(self->next, v);
}

static void REGAL_CALL http_glTangent3dEXT(Layer *_layer, GLdouble tx, GLdouble ty, GLdouble tz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3dEXT","(", tx, ", ", ty, ", ", tz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3dEXT(self->next, tx, ty, tz);
}

static void REGAL_CALL http_glTangent3dvEXT(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3dvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3dvEXT(self->next, v);
}

static void REGAL_CALL http_glTangent3fEXT(Layer *_layer, GLfloat tx, GLfloat ty, GLfloat tz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3fEXT","(", tx, ", ", ty, ", ", tz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3fEXT(self->next, tx, ty, tz);
}

static void REGAL_CALL http_glTangent3fvEXT(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3fvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3fvEXT(self->next, v);
}

static void REGAL_CALL http_glTangent3iEXT(Layer *_layer, GLint tx, GLint ty, GLint tz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3iEXT","(", tx, ", ", ty, ", ", tz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3iEXT(self->next, tx, ty, tz);
}

static void REGAL_CALL http_glTangent3ivEXT(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3ivEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3ivEXT(self->next, v);
}

static void REGAL_CALL http_glTangent3sEXT(Layer *_layer, GLshort tx, GLshort ty, GLshort tz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3sEXT","(", tx, ", ", ty, ", ", tz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3sEXT(self->next, tx, ty, tz);
}

static void REGAL_CALL http_glTangent3svEXT(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangent3svEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangent3svEXT(self->next, v);
}

static void REGAL_CALL http_glTangentPointerEXT(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTangentPointerEXT","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTangentPointerEXT(self->next, type, stride, pointer);
}

// GL_EXT_copy_texture

static void REGAL_CALL http_glCopyTexImage1DEXT(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexImage1DEXT","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexImage1DEXT(self->next, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL http_glCopyTexImage2DEXT(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexImage2DEXT","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexImage2DEXT(self->next, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL http_glCopyTexSubImage1DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage1DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage1DEXT(self->next, target, level, xoffset, x, y, width);
}

static void REGAL_CALL http_glCopyTexSubImage2DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage2DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage2DEXT(self->next, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL http_glCopyTexSubImage3DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage3DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage3DEXT(self->next, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

// GL_EXT_cull_vertex

static void REGAL_CALL http_glCullParameterdvEXT(Layer *_layer, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCullParameterdvEXT","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCullParameterdvEXT(self->next, pname, params);
}

static void REGAL_CALL http_glCullParameterfvEXT(Layer *_layer, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCullParameterfvEXT","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCullParameterfvEXT(self->next, pname, params);
}

// GL_EXT_debug_label

static void REGAL_CALL http_glGetObjectLabelEXT(Layer *_layer, GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectLabelEXT","(", toString(type), ", ", object, ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_quote(label,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectLabelEXT(self->next, type, object, bufSize, length, label);
}

static void REGAL_CALL http_glLabelObjectEXT(Layer *_layer, GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLabelObjectEXT","(", toString(type), ", ", object, ", ", length, ", ", print_quote(label,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLabelObjectEXT(self->next, type, object, length, label);
}

// GL_EXT_debug_marker

static void REGAL_CALL http_glInsertEventMarkerEXT(Layer *_layer, GLsizei length, const GLchar *marker)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInsertEventMarkerEXT","(", length, ", ", print_quote(marker,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInsertEventMarkerEXT(self->next, length, marker);
}

static void REGAL_CALL http_glPopGroupMarkerEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPopGroupMarkerEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPopGroupMarkerEXT(self->next);
  if( self->runState == RS_StepOutOfGroup || self->runState == RS_NextGroup ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_StepOverGroup && self->debugGroupStackDepth == self->stepOverGroupDepth ) {
    self->runState = RS_Pause;
  }
  self->debugGroupStackDepth--;
}

static void REGAL_CALL http_glPushGroupMarkerEXT(Layer *_layer, GLsizei length, const GLchar *marker)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushGroupMarkerEXT","(", length, ", ", print_quote(marker,'"'), ")");
  }
  self->count.group++;
  if( self->runState == RS_NextGroup ) {
    self->runState = RS_Pause;
  }
  self->debugGroupStackDepth++;
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushGroupMarkerEXT(self->next, length, marker);
  self->count.lastGroup = self->count.call;
}

// GL_EXT_depth_bounds_test

static void REGAL_CALL http_glDepthBoundsEXT(Layer *_layer, GLclampd zmin, GLclampd zmax)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthBoundsEXT","(", zmin, ", ", zmax, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthBoundsEXT(self->next, zmin, zmax);
}

// GL_EXT_direct_state_access

static void REGAL_CALL http_glBindMultiTextureEXT(Layer *_layer, GLenum texunit, GLenum target, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindMultiTextureEXT","(", toString(texunit), ", ", toString(target), ", ", texture, ")");
  }
  if( texture != 0 ) {
    HttpTextureInfo & hti = self->texture[ texture ];
    RegalAssert( hti.name == 0 || hti.name == texture );
    if( hti.name == 0 ) {
      hti.name = texture;
      hti.target = target;
    }
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindMultiTextureEXT(self->next, texunit, target, texture);
}

static GLenum REGAL_CALL http_glCheckNamedFramebufferStatusEXT(Layer *_layer, GLuint framebuffer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCheckNamedFramebufferStatusEXT","(", framebuffer, ", ", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCheckNamedFramebufferStatusEXT(self->next, framebuffer, target);
  return ret;
}

static void REGAL_CALL http_glClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClientAttribDefaultEXT","(", GLpushClientAttribToString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClientAttribDefaultEXT(self->next, mask);
}

static void REGAL_CALL http_glCompressedMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedMultiTexImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedMultiTexImage1DEXT(self->next, texunit, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedMultiTexImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedMultiTexImage2DEXT(self->next, texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

static void REGAL_CALL http_glCompressedMultiTexImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedMultiTexImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedMultiTexImage3DEXT(self->next, texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

static void REGAL_CALL http_glCompressedMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedMultiTexSubImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedMultiTexSubImage1DEXT(self->next, texunit, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedMultiTexSubImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedMultiTexSubImage2DEXT(self->next, texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedMultiTexSubImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedMultiTexSubImage3DEXT(self->next, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL http_glCompressedTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTextureImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTextureImage1DEXT(self->next, texture, target, level, internalformat, width, border, imageSize, bits);
}

static void REGAL_CALL http_glCompressedTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTextureImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTextureImage2DEXT(self->next, texture, target, level, internalformat, width, height, border, imageSize, bits);
}

static void REGAL_CALL http_glCompressedTextureImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTextureImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTextureImage3DEXT(self->next, texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

static void REGAL_CALL http_glCompressedTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTextureSubImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTextureSubImage1DEXT(self->next, texture, target, level, xoffset, width, format, imageSize, bits);
}

static void REGAL_CALL http_glCompressedTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTextureSubImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTextureSubImage2DEXT(self->next, texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

static void REGAL_CALL http_glCompressedTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTextureSubImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", imageSize, ", ", print_optional(bits,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTextureSubImage3DEXT(self->next, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

static void REGAL_CALL http_glCopyMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyMultiTexImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyMultiTexImage1DEXT(self->next, texunit, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL http_glCopyMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyMultiTexImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyMultiTexImage2DEXT(self->next, texunit, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL http_glCopyMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyMultiTexSubImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyMultiTexSubImage1DEXT(self->next, texunit, target, level, xoffset, x, y, width);
}

static void REGAL_CALL http_glCopyMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyMultiTexSubImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyMultiTexSubImage2DEXT(self->next, texunit, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL http_glCopyMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyMultiTexSubImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyMultiTexSubImage3DEXT(self->next, texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL http_glCopyTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTextureImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTextureImage1DEXT(self->next, texture, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL http_glCopyTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTextureImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTextureImage2DEXT(self->next, texture, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL http_glCopyTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTextureSubImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTextureSubImage1DEXT(self->next, texture, target, level, xoffset, x, y, width);
}

static void REGAL_CALL http_glCopyTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTextureSubImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTextureSubImage2DEXT(self->next, texture, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL http_glCopyTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTextureSubImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTextureSubImage3DEXT(self->next, texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL http_glDisableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableClientStateIndexedEXT","(", toString(array), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableClientStateIndexedEXT(self->next, array, index);
}

static void REGAL_CALL http_glDisableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableClientStateiEXT","(", toString(array), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableClientStateiEXT(self->next, array, index);
}

static void REGAL_CALL http_glDisableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableVertexArrayAttribEXT","(", vaobj, ", ", toString(array), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableVertexArrayAttribEXT(self->next, vaobj, array);
}

static void REGAL_CALL http_glDisableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableVertexArrayEXT","(", vaobj, ", ", toString(array), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableVertexArrayEXT(self->next, vaobj, array);
}

static void REGAL_CALL http_glEnableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableClientStateIndexedEXT","(", toString(array), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableClientStateIndexedEXT(self->next, array, index);
}

static void REGAL_CALL http_glEnableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableClientStateiEXT","(", toString(array), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableClientStateiEXT(self->next, array, index);
}

static void REGAL_CALL http_glEnableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableVertexArrayAttribEXT","(", vaobj, ", ", toString(array), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableVertexArrayAttribEXT(self->next, vaobj, array);
}

static void REGAL_CALL http_glEnableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableVertexArrayEXT","(", vaobj, ", ", toString(array), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableVertexArrayEXT(self->next, vaobj, array);
}

static void REGAL_CALL http_glFlushMappedNamedBufferRangeEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushMappedNamedBufferRangeEXT","(", buffer, ", ", offset, ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushMappedNamedBufferRangeEXT(self->next, buffer, offset, length);
}

static void REGAL_CALL http_glFramebufferDrawBufferEXT(Layer *_layer, GLuint framebuffer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferDrawBufferEXT","(", framebuffer, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferDrawBufferEXT(self->next, framebuffer, mode);
}

static void REGAL_CALL http_glFramebufferDrawBuffersEXT(Layer *_layer, GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferDrawBuffersEXT","(", framebuffer, ", ", n, ", ", print_array(bufs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferDrawBuffersEXT(self->next, framebuffer, n, bufs);
}

static void REGAL_CALL http_glFramebufferReadBufferEXT(Layer *_layer, GLuint framebuffer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferReadBufferEXT","(", framebuffer, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferReadBufferEXT(self->next, framebuffer, mode);
}

static void REGAL_CALL http_glGenerateMultiTexMipmapEXT(Layer *_layer, GLenum texunit, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenerateMultiTexMipmapEXT","(", toString(texunit), ", ", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenerateMultiTexMipmapEXT(self->next, texunit, target);
}

static void REGAL_CALL http_glGenerateTextureMipmapEXT(Layer *_layer, GLuint texture, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenerateTextureMipmapEXT","(", texture, ", ", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenerateTextureMipmapEXT(self->next, texture, target);
}

static void REGAL_CALL http_glGetCompressedMultiTexImageEXT(Layer *_layer, GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCompressedMultiTexImageEXT","(", toString(texunit), ", ", toString(target), ", ", lod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCompressedMultiTexImageEXT(self->next, texunit, target, lod, img);
}

static void REGAL_CALL http_glGetCompressedTextureImageEXT(Layer *_layer, GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCompressedTextureImageEXT","(", texture, ", ", toString(target), ", ", lod, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCompressedTextureImageEXT(self->next, texture, target, lod, img);
}

static void REGAL_CALL http_glGetDoubleIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDoubleIndexedvEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDoubleIndexedvEXT(self->next, target, index, data);
}

static void REGAL_CALL http_glGetDoublei_vEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDoublei_vEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDoublei_vEXT(self->next, target, index, data);
}

static void REGAL_CALL http_glGetFloatIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFloatIndexedvEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFloatIndexedvEXT(self->next, target, index, data);
}

static void REGAL_CALL http_glGetFloati_vEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFloati_vEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFloati_vEXT(self->next, target, index, data);
}

static void REGAL_CALL http_glGetFramebufferParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFramebufferParameterivEXT","(", framebuffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFramebufferParameterivEXT(self->next, framebuffer, pname, params);
}

static void REGAL_CALL http_glGetMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexEnvfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexEnvfvEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glGetMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexEnvivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexEnvivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glGetMultiTexGendvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexGendvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexGendvEXT(self->next, texunit, coord, pname, params);
}

static void REGAL_CALL http_glGetMultiTexGenfvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexGenfvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexGenfvEXT(self->next, texunit, coord, pname, params);
}

static void REGAL_CALL http_glGetMultiTexGenivEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexGenivEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexGenivEXT(self->next, texunit, coord, pname, params);
}

static void REGAL_CALL http_glGetMultiTexImageEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexImageEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexImageEXT(self->next, texunit, target, level, format, type, pixels);
}

static void REGAL_CALL http_glGetMultiTexLevelParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexLevelParameterfvEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexLevelParameterfvEXT(self->next, texunit, target, level, pname, params);
}

static void REGAL_CALL http_glGetMultiTexLevelParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexLevelParameterivEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexLevelParameterivEXT(self->next, texunit, target, level, pname, params);
}

static void REGAL_CALL http_glGetMultiTexParameterIivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexParameterIivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexParameterIivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glGetMultiTexParameterIuivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexParameterIuivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexParameterIuivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glGetMultiTexParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexParameterfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexParameterfvEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glGetMultiTexParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultiTexParameterivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultiTexParameterivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glGetNamedBufferParameterivEXT(Layer *_layer, GLuint buffer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedBufferParameterivEXT","(", buffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedBufferParameterivEXT(self->next, buffer, pname, params);
}

static void REGAL_CALL http_glGetNamedBufferPointervEXT(Layer *_layer, GLuint buffer, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedBufferPointervEXT","(", buffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedBufferPointervEXT(self->next, buffer, pname, params);
}

static void REGAL_CALL http_glGetNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedBufferSubDataEXT","(", buffer, ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedBufferSubDataEXT(self->next, buffer, offset, size, data);
}

static void REGAL_CALL http_glGetNamedFramebufferAttachmentParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedFramebufferAttachmentParameterivEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedFramebufferAttachmentParameterivEXT(self->next, framebuffer, attachment, pname, params);
}

static void REGAL_CALL http_glGetNamedProgramLocalParameterIivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedProgramLocalParameterIivEXT","(", program, ", ", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedProgramLocalParameterIivEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glGetNamedProgramLocalParameterIuivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedProgramLocalParameterIuivEXT","(", program, ", ", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedProgramLocalParameterIuivEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glGetNamedProgramLocalParameterdvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedProgramLocalParameterdvEXT","(", program, ", ", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedProgramLocalParameterdvEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glGetNamedProgramLocalParameterfvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedProgramLocalParameterfvEXT","(", program, ", ", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedProgramLocalParameterfvEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glGetNamedProgramStringEXT(Layer *_layer, GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedProgramStringEXT","(", program, ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedProgramStringEXT(self->next, program, target, pname, string);
}

static void REGAL_CALL http_glGetNamedProgramivEXT(Layer *_layer, GLuint program, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedProgramivEXT","(", program, ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedProgramivEXT(self->next, program, target, pname, params);
}

static void REGAL_CALL http_glGetNamedRenderbufferParameterivEXT(Layer *_layer, GLuint renderbuffer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedRenderbufferParameterivEXT","(", renderbuffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedRenderbufferParameterivEXT(self->next, renderbuffer, pname, params);
}

static void REGAL_CALL http_glGetPointerIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLvoid **data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPointerIndexedvEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPointerIndexedvEXT(self->next, target, index, data);
}

static void REGAL_CALL http_glGetPointeri_vEXT(Layer *_layer, GLenum pname, GLuint index, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPointeri_vEXT","(", toString(pname), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPointeri_vEXT(self->next, pname, index, params);
}

static void REGAL_CALL http_glGetTextureImageEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureImageEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureImageEXT(self->next, texture, target, level, format, type, pixels);
}

static void REGAL_CALL http_glGetTextureLevelParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureLevelParameterfvEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureLevelParameterfvEXT(self->next, texture, target, level, pname, params);
}

static void REGAL_CALL http_glGetTextureLevelParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureLevelParameterivEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureLevelParameterivEXT(self->next, texture, target, level, pname, params);
}

static void REGAL_CALL http_glGetTextureParameterIivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureParameterIivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureParameterIivEXT(self->next, texture, target, pname, params);
}

static void REGAL_CALL http_glGetTextureParameterIuivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureParameterIuivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureParameterIuivEXT(self->next, texture, target, pname, params);
}

static void REGAL_CALL http_glGetTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureParameterfvEXT","(", texture, ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureParameterfvEXT(self->next, texture, target, pname, params);
}

static void REGAL_CALL http_glGetTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureParameterivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTextureParameterivEXT(self->next, texture, target, pname, params);
}

static void REGAL_CALL http_glGetVertexArrayIntegeri_vEXT(Layer *_layer, GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexArrayIntegeri_vEXT","(", vaobj, ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexArrayIntegeri_vEXT(self->next, vaobj, index, pname, param);
}

static void REGAL_CALL http_glGetVertexArrayIntegervEXT(Layer *_layer, GLuint vaobj, GLenum pname, GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexArrayIntegervEXT","(", vaobj, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexArrayIntegervEXT(self->next, vaobj, pname, param);
}

static void REGAL_CALL http_glGetVertexArrayPointeri_vEXT(Layer *_layer, GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexArrayPointeri_vEXT","(", vaobj, ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexArrayPointeri_vEXT(self->next, vaobj, index, pname, param);
}

static void REGAL_CALL http_glGetVertexArrayPointervEXT(Layer *_layer, GLuint vaobj, GLenum pname, GLvoid **param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexArrayPointervEXT","(", vaobj, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexArrayPointervEXT(self->next, vaobj, pname, param);
}

static GLvoid *REGAL_CALL http_glMapNamedBufferEXT(Layer *_layer, GLuint buffer, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapNamedBufferEXT","(", buffer, ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapNamedBufferEXT(self->next, buffer, access);
  return ret;
}

static GLvoid *REGAL_CALL http_glMapNamedBufferRangeEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapNamedBufferRangeEXT","(", buffer, ", ", offset, ", ", length, ", ", GLmapBufferRangeToString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapNamedBufferRangeEXT(self->next, buffer, offset, length, access);
  return ret;
}

static void REGAL_CALL http_glMatrixFrustumEXT(Layer *_layer, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixFrustumEXT","(", GLmodeToString(mode), ", ", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixFrustumEXT(self->next, mode, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glMatrixLoadIdentityEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixLoadIdentityEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixLoadIdentityEXT(self->next, mode);
}

static void REGAL_CALL http_glMatrixLoadTransposedEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixLoadTransposedEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixLoadTransposedEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixLoadTransposefEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixLoadTransposefEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixLoadTransposefEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixLoaddEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixLoaddEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixLoaddEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixLoadfEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixLoadfEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixLoadfEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixMultTransposedEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixMultTransposedEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixMultTransposedEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixMultTransposefEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixMultTransposefEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixMultTransposefEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixMultdEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixMultdEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixMultdEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixMultfEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixMultfEXT","(", GLmodeToString(mode), ", ", print_array(m,16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixMultfEXT(self->next, mode, m);
}

static void REGAL_CALL http_glMatrixOrthoEXT(Layer *_layer, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixOrthoEXT","(", GLmodeToString(mode), ", ", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixOrthoEXT(self->next, mode, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glMatrixPopEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixPopEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixPopEXT(self->next, mode);
}

static void REGAL_CALL http_glMatrixPushEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixPushEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixPushEXT(self->next, mode);
}

static void REGAL_CALL http_glMatrixRotatedEXT(Layer *_layer, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixRotatedEXT","(", GLmodeToString(mode), ", ", angle, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixRotatedEXT(self->next, mode, angle, x, y, z);
}

static void REGAL_CALL http_glMatrixRotatefEXT(Layer *_layer, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixRotatefEXT","(", GLmodeToString(mode), ", ", angle, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixRotatefEXT(self->next, mode, angle, x, y, z);
}

static void REGAL_CALL http_glMatrixScaledEXT(Layer *_layer, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixScaledEXT","(", GLmodeToString(mode), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixScaledEXT(self->next, mode, x, y, z);
}

static void REGAL_CALL http_glMatrixScalefEXT(Layer *_layer, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixScalefEXT","(", GLmodeToString(mode), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixScalefEXT(self->next, mode, x, y, z);
}

static void REGAL_CALL http_glMatrixTranslatedEXT(Layer *_layer, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixTranslatedEXT","(", GLmodeToString(mode), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixTranslatedEXT(self->next, mode, x, y, z);
}

static void REGAL_CALL http_glMatrixTranslatefEXT(Layer *_layer, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixTranslatefEXT","(", GLmodeToString(mode), ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixTranslatefEXT(self->next, mode, x, y, z);
}

static void REGAL_CALL http_glMultiTexBufferEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexBufferEXT","(", toString(texunit), ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexBufferEXT(self->next, texunit, target, internalformat, buffer);
}

static void REGAL_CALL http_glMultiTexCoordPointerEXT(Layer *_layer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoordPointerEXT","(", toString(texunit), ", ", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoordPointerEXT(self->next, texunit, size, type, stride, pointer);
}

static void REGAL_CALL http_glMultiTexEnvfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexEnvfEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexEnvfEXT(self->next, texunit, target, pname, param);
}

static void REGAL_CALL http_glMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexEnvfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexEnvfvEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glMultiTexEnviEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexEnviEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexEnviEXT(self->next, texunit, target, pname, param);
}

static void REGAL_CALL http_glMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexEnvivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexEnvivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glMultiTexGendEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexGendEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexGendEXT(self->next, texunit, coord, pname, param);
}

static void REGAL_CALL http_glMultiTexGendvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexGendvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexGendvEXT(self->next, texunit, coord, pname, params);
}

static void REGAL_CALL http_glMultiTexGenfEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexGenfEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexGenfEXT(self->next, texunit, coord, pname, param);
}

static void REGAL_CALL http_glMultiTexGenfvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexGenfvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexGenfvEXT(self->next, texunit, coord, pname, params);
}

static void REGAL_CALL http_glMultiTexGeniEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexGeniEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexGeniEXT(self->next, texunit, coord, pname, param);
}

static void REGAL_CALL http_glMultiTexGenivEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexGenivEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexGenivEXT(self->next, texunit, coord, pname, params);
}

static void REGAL_CALL http_glMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexImage1DEXT(self->next, texunit, target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL http_glMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexImage2DEXT(self->next, texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL http_glMultiTexImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexImage3DEXT(self->next, texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL http_glMultiTexParameterIivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexParameterIivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexParameterIivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glMultiTexParameterIuivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexParameterIuivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexParameterIuivEXT(self->next, texunit, target, pname, params);
}

static void REGAL_CALL http_glMultiTexParameterfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexParameterfEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexParameterfEXT(self->next, texunit, target, pname, param);
}

static void REGAL_CALL http_glMultiTexParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexParameterfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", print_array(param,helper::size::texParameterv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexParameterfvEXT(self->next, texunit, target, pname, param);
}

static void REGAL_CALL http_glMultiTexParameteriEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexParameteriEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexParameteriEXT(self->next, texunit, target, pname, param);
}

static void REGAL_CALL http_glMultiTexParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexParameterivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", print_array(param,helper::size::texParameterv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexParameterivEXT(self->next, texunit, target, pname, param);
}

static void REGAL_CALL http_glMultiTexRenderbufferEXT(Layer *_layer, GLenum texunit, GLenum target, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexRenderbufferEXT","(", toString(texunit), ", ", toString(target), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexRenderbufferEXT(self->next, texunit, target, renderbuffer);
}

static void REGAL_CALL http_glMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexSubImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexSubImage1DEXT(self->next, texunit, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL http_glMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexSubImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexSubImage2DEXT(self->next, texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL http_glMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexSubImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexSubImage3DEXT(self->next, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static void REGAL_CALL http_glNamedBufferDataEXT(Layer *_layer, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedBufferDataEXT","(", buffer, ", ", size, ", ", print_optional(data,Logging::pointers), ", ", toString(usage), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedBufferDataEXT(self->next, buffer, size, data, usage);
}

static void REGAL_CALL http_glNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedBufferSubDataEXT","(", buffer, ", ", offset, ", ", size, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedBufferSubDataEXT(self->next, buffer, offset, size, data);
}

static void REGAL_CALL http_glNamedCopyBufferSubDataEXT(Layer *_layer, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedCopyBufferSubDataEXT","(", readBuffer, ", ", writeBuffer, ", ", readOffset, ", ", writeOffset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedCopyBufferSubDataEXT(self->next, readBuffer, writeBuffer, readOffset, writeOffset, size);
}

static void REGAL_CALL http_glNamedFramebufferRenderbufferEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferRenderbufferEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferRenderbufferEXT(self->next, framebuffer, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL http_glNamedFramebufferTexture1DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferTexture1DEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferTexture1DEXT(self->next, framebuffer, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glNamedFramebufferTexture2DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferTexture2DEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferTexture2DEXT(self->next, framebuffer, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glNamedFramebufferTexture3DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferTexture3DEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferTexture3DEXT(self->next, framebuffer, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL http_glNamedFramebufferTextureEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferTextureEXT","(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferTextureEXT(self->next, framebuffer, attachment, texture, level);
}

static void REGAL_CALL http_glNamedFramebufferTextureFaceEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferTextureFaceEXT","(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferTextureFaceEXT(self->next, framebuffer, attachment, texture, level, face);
}

static void REGAL_CALL http_glNamedFramebufferTextureLayerEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedFramebufferTextureLayerEXT","(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedFramebufferTextureLayerEXT(self->next, framebuffer, attachment, texture, level, layer);
}

static void REGAL_CALL http_glNamedProgramLocalParameter4dEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameter4dEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameter4dEXT(self->next, program, target, index, x, y, z, w);
}

static void REGAL_CALL http_glNamedProgramLocalParameter4dvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameter4dvEXT","(", program, ", ", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameter4dvEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glNamedProgramLocalParameter4fEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameter4fEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameter4fEXT(self->next, program, target, index, x, y, z, w);
}

static void REGAL_CALL http_glNamedProgramLocalParameter4fvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameter4fvEXT","(", program, ", ", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameter4fvEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glNamedProgramLocalParameterI4iEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameterI4iEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameterI4iEXT(self->next, program, target, index, x, y, z, w);
}

static void REGAL_CALL http_glNamedProgramLocalParameterI4ivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameterI4ivEXT","(", program, ", ", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameterI4ivEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glNamedProgramLocalParameterI4uiEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameterI4uiEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameterI4uiEXT(self->next, program, target, index, x, y, z, w);
}

static void REGAL_CALL http_glNamedProgramLocalParameterI4uivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameterI4uivEXT","(", program, ", ", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameterI4uivEXT(self->next, program, target, index, params);
}

static void REGAL_CALL http_glNamedProgramLocalParameters4fvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParameters4fvEXT","(", program, ", ", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParameters4fvEXT(self->next, program, target, index, count, params);
}

static void REGAL_CALL http_glNamedProgramLocalParametersI4ivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParametersI4ivEXT","(", program, ", ", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParametersI4ivEXT(self->next, program, target, index, count, params);
}

static void REGAL_CALL http_glNamedProgramLocalParametersI4uivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramLocalParametersI4uivEXT","(", program, ", ", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramLocalParametersI4uivEXT(self->next, program, target, index, count, params);
}

static void REGAL_CALL http_glNamedProgramStringEXT(Layer *_layer, GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedProgramStringEXT","(", program, ", ", toString(target), ", ", toString(format), ", ", len, ", ", print_quote(reinterpret_cast<const char *>(string),'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedProgramStringEXT(self->next, program, target, format, len, string);
}

static void REGAL_CALL http_glNamedRenderbufferStorageEXT(Layer *_layer, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedRenderbufferStorageEXT","(", renderbuffer, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedRenderbufferStorageEXT(self->next, renderbuffer, internalformat, width, height);
}

static void REGAL_CALL http_glNamedRenderbufferStorageMultisampleCoverageEXT(Layer *_layer, GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedRenderbufferStorageMultisampleCoverageEXT","(", renderbuffer, ", ", coverageSamples, ", ", colorSamples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedRenderbufferStorageMultisampleCoverageEXT(self->next, renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

static void REGAL_CALL http_glNamedRenderbufferStorageMultisampleEXT(Layer *_layer, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNamedRenderbufferStorageMultisampleEXT","(", renderbuffer, ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNamedRenderbufferStorageMultisampleEXT(self->next, renderbuffer, samples, internalformat, width, height);
}

static void REGAL_CALL http_glProgramUniform1dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1dEXT","(", program, ", ", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1dEXT(self->next, program, location, x);
}

static void REGAL_CALL http_glProgramUniform1dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1dvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1dvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1fEXT","(", program, ", ", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1fEXT(self->next, program, location, v0);
}

static void REGAL_CALL http_glProgramUniform1fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1fvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1fvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1iEXT(Layer *_layer, GLuint program, GLint location, GLint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1iEXT","(", program, ", ", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1iEXT(self->next, program, location, v0);
}

static void REGAL_CALL http_glProgramUniform1ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1ivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1ivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1uiEXT","(", program, ", ", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1uiEXT(self->next, program, location, v0);
}

static void REGAL_CALL http_glProgramUniform1uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1uivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1uivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2dEXT","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2dEXT(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2dvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2dvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2fEXT","(", program, ", ", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2fEXT(self->next, program, location, v0, v1);
}

static void REGAL_CALL http_glProgramUniform2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2fvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2fvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2iEXT","(", program, ", ", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2iEXT(self->next, program, location, v0, v1);
}

static void REGAL_CALL http_glProgramUniform2ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2ivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2ivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2uiEXT","(", program, ", ", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2uiEXT(self->next, program, location, v0, v1);
}

static void REGAL_CALL http_glProgramUniform2uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2uivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2uivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3dEXT","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3dEXT(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3dvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3dvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3fEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3fEXT(self->next, program, location, v0, v1, v2);
}

static void REGAL_CALL http_glProgramUniform3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3fvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3fvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3iEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3iEXT(self->next, program, location, v0, v1, v2);
}

static void REGAL_CALL http_glProgramUniform3ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3ivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3ivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3uiEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3uiEXT(self->next, program, location, v0, v1, v2);
}

static void REGAL_CALL http_glProgramUniform3uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3uivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3uivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4dEXT","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4dEXT(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4dvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4dvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4fEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4fEXT(self->next, program, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glProgramUniform4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4fvEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4fvEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4iEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4iEXT(self->next, program, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glProgramUniform4ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4ivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4ivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4uiEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4uiEXT(self->next, program, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glProgramUniform4uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4uivEXT","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4uivEXT(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x3dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x3dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x3fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x3fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x4dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x4dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix2x4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix2x4fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix2x4fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 9), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 9), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x2dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x2dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x2fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 6), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x2fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x4dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x4dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix3x4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix3x4fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix3x4fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 16), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x2dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x2dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x2fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 8), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x2fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x3dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x3dvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glProgramUniformMatrix4x3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformMatrix4x3fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", print_array(value,count * 12), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformMatrix4x3fvEXT(self->next, program, location, count, transpose, value);
}

static void REGAL_CALL http_glPushClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushClientAttribDefaultEXT","(", GLpushClientAttribToString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushClientAttribDefaultEXT(self->next, mask);
}

static void REGAL_CALL http_glTextureBufferEXT(Layer *_layer, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureBufferEXT","(", texture, ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureBufferEXT(self->next, texture, target, internalformat, buffer);
}

static void REGAL_CALL http_glTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage1DEXT(self->next, texture, target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL http_glTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage2DEXT(self->next, texture, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL http_glTextureImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage3DEXT(self->next, texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL http_glTextureParameterIivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureParameterIivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureParameterIivEXT(self->next, texture, target, pname, params);
}

static void REGAL_CALL http_glTextureParameterIuivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureParameterIuivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureParameterIuivEXT(self->next, texture, target, pname, params);
}

static void REGAL_CALL http_glTextureParameterfEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureParameterfEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureParameterfEXT(self->next, texture, target, pname, param);
}

static void REGAL_CALL http_glTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureParameterfvEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", print_array(param,helper::size::texParameterv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureParameterfvEXT(self->next, texture, target, pname, param);
}

static void REGAL_CALL http_glTextureParameteriEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureParameteriEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureParameteriEXT(self->next, texture, target, pname, param);
}

static void REGAL_CALL http_glTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureParameterivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", print_array(param,helper::size::texParameterv(pname)), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureParameterivEXT(self->next, texture, target, pname, param);
}

static void REGAL_CALL http_glTextureRenderbufferEXT(Layer *_layer, GLuint texture, GLenum target, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureRenderbufferEXT","(", texture, ", ", toString(target), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureRenderbufferEXT(self->next, texture, target, renderbuffer);
}

static void REGAL_CALL http_glTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureSubImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureSubImage1DEXT(self->next, texture, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL http_glTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureSubImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureSubImage2DEXT(self->next, texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL http_glTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureSubImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureSubImage3DEXT(self->next, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static GLboolean REGAL_CALL http_glUnmapNamedBufferEXT(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnmapNamedBufferEXT","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglUnmapNamedBufferEXT(self->next, buffer);
  return ret;
}

static void REGAL_CALL http_glVertexArrayColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayColorOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayColorOffsetEXT(self->next, vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayEdgeFlagOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayEdgeFlagOffsetEXT","(", vaobj, ", ", buffer, ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayEdgeFlagOffsetEXT(self->next, vaobj, buffer, stride, offset);
}

static void REGAL_CALL http_glVertexArrayFogCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayFogCoordOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayFogCoordOffsetEXT(self->next, vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayIndexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayIndexOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayIndexOffsetEXT(self->next, vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayMultiTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayMultiTexCoordOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(texunit), ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayMultiTexCoordOffsetEXT(self->next, vaobj, buffer, texunit, size, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayNormalOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayNormalOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayNormalOffsetEXT(self->next, vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL http_glVertexArraySecondaryColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArraySecondaryColorOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArraySecondaryColorOffsetEXT(self->next, vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayTexCoordOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayTexCoordOffsetEXT(self->next, vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayVertexAttribIOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribIOffsetEXT","(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribIOffsetEXT(self->next, vaobj, buffer, index, size, type, stride, offset);
}

static void REGAL_CALL http_glVertexArrayVertexAttribOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribOffsetEXT","(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribOffsetEXT(self->next, vaobj, buffer, index, size, type, normalized, stride, offset);
}

static void REGAL_CALL http_glVertexArrayVertexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexOffsetEXT(self->next, vaobj, buffer, size, type, stride, offset);
}

// GL_EXT_discard_framebuffer

static void REGAL_CALL http_glDiscardFramebufferEXT(Layer *_layer, GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDiscardFramebufferEXT","(", toString(target), ", ", numAttachments, ", ", attachments, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDiscardFramebufferEXT(self->next, target, numAttachments, attachments);
}

// GL_EXT_disjoint_timer_query

static void REGAL_CALL http_glGetQueryObjectivEXT(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectivEXT","(", id, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectivEXT(self->next, id, pname, params);
}

static void REGAL_CALL http_glQueryCounterEXT(Layer *_layer, GLuint id, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glQueryCounterEXT","(", id, ", ", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglQueryCounterEXT(self->next, id, target);
}

// GL_EXT_draw_buffers2

static void REGAL_CALL http_glColorMaskIndexedEXT(Layer *_layer, GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorMaskIndexedEXT","(", buf, ", ", toString(r), ", ", toString(g), ", ", toString(b), ", ", toString(a), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorMaskIndexedEXT(self->next, buf, r, g, b, a);
}

static void REGAL_CALL http_glDisableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableIndexedEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableIndexedEXT(self->next, target, index);
}

static void REGAL_CALL http_glEnableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableIndexedEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableIndexedEXT(self->next, target, index);
}

static void REGAL_CALL http_glGetBooleanIndexedvEXT(Layer *_layer, GLenum value, GLuint index, GLboolean *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBooleanIndexedvEXT","(", toString(value), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBooleanIndexedvEXT(self->next, value, index, data);
}

static void REGAL_CALL http_glGetIntegerIndexedvEXT(Layer *_layer, GLenum value, GLuint index, GLint *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetIntegerIndexedvEXT","(", toString(value), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetIntegerIndexedvEXT(self->next, value, index, data);
}

static GLboolean REGAL_CALL http_glIsEnabledIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsEnabledIndexedEXT","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsEnabledIndexedEXT(self->next, target, index);
  return ret;
}

// GL_EXT_draw_instanced

static void REGAL_CALL http_glDrawArraysInstancedEXT(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysInstancedEXT","(", GLmodeToString(mode), ", ", start, ", ", count, ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysInstancedEXT(self->next, mode, start, count, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glDrawElementsInstancedEXT(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawElementsInstancedEXT","(", GLmodeToString(mode), ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawElementsInstancedEXT(self->next, mode, count, type, indices, primcount);
  self->count.lastDraw = self->count.call;
}

// GL_EXT_draw_range_elements

static void REGAL_CALL http_glDrawRangeElementsEXT(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawRangeElementsEXT","(", GLmodeToString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawRangeElementsEXT(self->next, mode, start, end, count, type, indices);
}

// GL_EXT_fog_coord

static void REGAL_CALL http_glFogCoordPointerEXT(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordPointerEXT","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordPointerEXT(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glFogCoorddEXT(Layer *_layer, GLdouble coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoorddEXT","(", coord, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoorddEXT(self->next, coord);
}

static void REGAL_CALL http_glFogCoorddvEXT(Layer *_layer, const GLdouble *coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoorddvEXT","(", print_array(coord,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoorddvEXT(self->next, coord);
}

static void REGAL_CALL http_glFogCoordfEXT(Layer *_layer, GLfloat coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordfEXT","(", coord, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordfEXT(self->next, coord);
}

static void REGAL_CALL http_glFogCoordfvEXT(Layer *_layer, const GLfloat *coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordfvEXT","(", print_array(coord,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordfvEXT(self->next, coord);
}

// GL_EXT_fragment_lighting

static void REGAL_CALL http_glFragmentColorMaterialEXT(Layer *_layer, GLenum face, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentColorMaterialEXT","(", toString(face), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentColorMaterialEXT(self->next, face, mode);
}

static void REGAL_CALL http_glFragmentLightModelfEXT(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModelfEXT","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModelfEXT(self->next, pname, param);
}

static void REGAL_CALL http_glFragmentLightModelfvEXT(Layer *_layer, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModelfvEXT","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModelfvEXT(self->next, pname, params);
}

static void REGAL_CALL http_glFragmentLightModeliEXT(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModeliEXT","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModeliEXT(self->next, pname, param);
}

static void REGAL_CALL http_glFragmentLightModelivEXT(Layer *_layer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModelivEXT","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModelivEXT(self->next, pname, params);
}

static void REGAL_CALL http_glFragmentLightfEXT(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightfEXT","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightfEXT(self->next, light, pname, param);
}

static void REGAL_CALL http_glFragmentLightfvEXT(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightfvEXT","(", toString(light), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightfvEXT(self->next, light, pname, params);
}

static void REGAL_CALL http_glFragmentLightiEXT(Layer *_layer, GLenum light, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightiEXT","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightiEXT(self->next, light, pname, param);
}

static void REGAL_CALL http_glFragmentLightivEXT(Layer *_layer, GLenum light, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightivEXT","(", toString(light), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightivEXT(self->next, light, pname, params);
}

static void REGAL_CALL http_glFragmentMaterialfEXT(Layer *_layer, GLenum face, GLenum pname, const GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialfEXT","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialfEXT(self->next, face, pname, param);
}

static void REGAL_CALL http_glFragmentMaterialfvEXT(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialfvEXT","(", toString(face), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialfvEXT(self->next, face, pname, params);
}

static void REGAL_CALL http_glFragmentMaterialiEXT(Layer *_layer, GLenum face, GLenum pname, const GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialiEXT","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialiEXT(self->next, face, pname, param);
}

static void REGAL_CALL http_glFragmentMaterialivEXT(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialivEXT","(", toString(face), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialivEXT(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetFragmentLightfvEXT(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentLightfvEXT","(", toString(light), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentLightfvEXT(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetFragmentLightivEXT(Layer *_layer, GLenum light, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentLightivEXT","(", toString(light), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentLightivEXT(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetFragmentMaterialfvEXT(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentMaterialfvEXT","(", toString(face), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentMaterialfvEXT(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetFragmentMaterialivEXT(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentMaterialivEXT","(", toString(face), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentMaterialivEXT(self->next, face, pname, params);
}

static void REGAL_CALL http_glLightEnviEXT(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightEnviEXT","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightEnviEXT(self->next, pname, param);
}

// GL_EXT_framebuffer_blit

static void REGAL_CALL http_glBlitFramebufferEXT(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlitFramebufferEXT","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", GLblitFramebufferToString(mask), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlitFramebufferEXT(self->next, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_EXT_framebuffer_multisample

static void REGAL_CALL http_glRenderbufferStorageMultisampleEXT(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageMultisampleEXT","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageMultisampleEXT(self->next, target, samples, internalformat, width, height);
}

// GL_EXT_framebuffer_object

static void REGAL_CALL http_glBindFramebufferEXT(Layer *_layer, GLenum target, GLuint framebuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFramebufferEXT","(", toString(target), ", ", framebuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFramebufferEXT(self->next, target, framebuffer);
}

static void REGAL_CALL http_glBindRenderbufferEXT(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindRenderbufferEXT","(", toString(target), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindRenderbufferEXT(self->next, target, renderbuffer);
}

static GLenum REGAL_CALL http_glCheckFramebufferStatusEXT(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCheckFramebufferStatusEXT","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCheckFramebufferStatusEXT(self->next, target);
  return ret;
}

static void REGAL_CALL http_glDeleteFramebuffersEXT(Layer *_layer, GLsizei n, const GLuint *framebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteFramebuffersEXT","(", n, ", ", print_array(framebuffers,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteFramebuffersEXT(self->next, n, framebuffers);
}

static void REGAL_CALL http_glDeleteRenderbuffersEXT(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteRenderbuffersEXT","(", n, ", ", print_array(renderbuffers,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteRenderbuffersEXT(self->next, n, renderbuffers);
}

static void REGAL_CALL http_glFramebufferRenderbufferEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferRenderbufferEXT","(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferRenderbufferEXT(self->next, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL http_glFramebufferTexture1DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture1DEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture1DEXT(self->next, target, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glFramebufferTexture2DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture2DEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture2DEXT(self->next, target, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glFramebufferTexture3DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture3DEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture3DEXT(self->next, target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL http_glGenFramebuffersEXT(Layer *_layer, GLsizei n, GLuint *framebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenFramebuffersEXT","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenFramebuffersEXT(self->next, n, framebuffers);
}

static void REGAL_CALL http_glGenRenderbuffersEXT(Layer *_layer, GLsizei n, GLuint *renderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenRenderbuffersEXT","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenRenderbuffersEXT(self->next, n, renderbuffers);
}

static void REGAL_CALL http_glGenerateMipmapEXT(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenerateMipmapEXT","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenerateMipmapEXT(self->next, target);
}

static void REGAL_CALL http_glGetFramebufferAttachmentParameterivEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFramebufferAttachmentParameterivEXT","(", toString(target), ", ", toString(attachment), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFramebufferAttachmentParameterivEXT(self->next, target, attachment, pname, params);
}

static void REGAL_CALL http_glGetRenderbufferParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetRenderbufferParameterivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetRenderbufferParameterivEXT(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsFramebufferEXT(Layer *_layer, GLuint framebuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsFramebufferEXT","(", framebuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsFramebufferEXT(self->next, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL http_glIsRenderbufferEXT(Layer *_layer, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsRenderbufferEXT","(", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsRenderbufferEXT(self->next, renderbuffer);
  return ret;
}

static void REGAL_CALL http_glRenderbufferStorageEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageEXT(self->next, target, internalformat, width, height);
}

// GL_EXT_geometry_shader4

static void REGAL_CALL http_glFramebufferTextureEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureEXT","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureEXT(self->next, target, attachment, texture, level);
}

static void REGAL_CALL http_glFramebufferTextureFaceEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureFaceEXT","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureFaceEXT(self->next, target, attachment, texture, level, face);
}

static void REGAL_CALL http_glProgramParameteriEXT(Layer *_layer, GLuint program, GLenum pname, GLint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameteriEXT","(", program, ", ", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameteriEXT(self->next, program, pname, value);
}

// GL_EXT_gpu_program_parameters

static void REGAL_CALL http_glProgramEnvParameters4fvEXT(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameters4fvEXT","(", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameters4fvEXT(self->next, target, index, count, params);
}

static void REGAL_CALL http_glProgramLocalParameters4fvEXT(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameters4fvEXT","(", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameters4fvEXT(self->next, target, index, count, params);
}

// GL_EXT_gpu_shader4

static void REGAL_CALL http_glBindFragDataLocationEXT(Layer *_layer, GLuint program, GLuint color, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFragDataLocationEXT","(", program, ", ", color, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFragDataLocationEXT(self->next, program, color, name);
}

static GLint REGAL_CALL http_glGetFragDataLocationEXT(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragDataLocationEXT","(", program, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetFragDataLocationEXT(self->next, program, name);
  return ret;
}

static void REGAL_CALL http_glGetUniformuivEXT(Layer *_layer, GLuint program, GLint location, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformuivEXT","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformuivEXT(self->next, program, location, params);
}

static void REGAL_CALL http_glGetVertexAttribIivEXT(Layer *_layer, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribIivEXT","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribIivEXT(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribIuivEXT(Layer *_layer, GLuint index, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribIuivEXT","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribIuivEXT(self->next, index, pname, params);
}

static void REGAL_CALL http_glUniform1uiEXT(Layer *_layer, GLint location, GLuint v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1uiEXT","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1uiEXT(self->next, location, v0);
}

static void REGAL_CALL http_glUniform1uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1uivEXT","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1uivEXT(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2uiEXT(Layer *_layer, GLint location, GLuint v0, GLuint v1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2uiEXT","(", location, ", ", v0, ", ", v1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2uiEXT(self->next, location, v0, v1);
}

static void REGAL_CALL http_glUniform2uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2uivEXT","(", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2uivEXT(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3uiEXT(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3uiEXT","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3uiEXT(self->next, location, v0, v1, v2);
}

static void REGAL_CALL http_glUniform3uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3uivEXT","(", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3uivEXT(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4uiEXT(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4uiEXT","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4uiEXT(self->next, location, v0, v1, v2, v3);
}

static void REGAL_CALL http_glUniform4uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4uivEXT","(", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4uivEXT(self->next, location, count, value);
}

static void REGAL_CALL http_glVertexAttribI1iEXT(Layer *_layer, GLuint index, GLint x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1iEXT","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1iEXT(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribI1ivEXT(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1ivEXT","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1ivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI1uiEXT(Layer *_layer, GLuint index, GLuint x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1uiEXT","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1uiEXT(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribI1uivEXT(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI1uivEXT","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI1uivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI2iEXT(Layer *_layer, GLuint index, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2iEXT","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2iEXT(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribI2ivEXT(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2ivEXT","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2ivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI2uiEXT(Layer *_layer, GLuint index, GLuint x, GLuint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2uiEXT","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2uiEXT(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribI2uivEXT(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI2uivEXT","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI2uivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI3iEXT(Layer *_layer, GLuint index, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3iEXT","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3iEXT(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribI3ivEXT(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3ivEXT","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3ivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI3uiEXT(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3uiEXT","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3uiEXT(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribI3uivEXT(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI3uivEXT","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI3uivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4bvEXT(Layer *_layer, GLuint index, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4bvEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4bvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4iEXT(Layer *_layer, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4iEXT","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4iEXT(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribI4ivEXT(Layer *_layer, GLuint index, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4ivEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4ivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4svEXT(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4svEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4svEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4ubvEXT(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4ubvEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4ubvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4uiEXT(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4uiEXT","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4uiEXT(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribI4uivEXT(Layer *_layer, GLuint index, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4uivEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4uivEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribI4usvEXT(Layer *_layer, GLuint index, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribI4usvEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribI4usvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribIPointerEXT(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribIPointerEXT","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribIPointerEXT(self->next, index, size, type, stride, pointer);
}

// GL_EXT_histogram

static void REGAL_CALL http_glGetHistogramEXT(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHistogramEXT","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetHistogramEXT(self->next, target, reset, format, type, values);
}

static void REGAL_CALL http_glGetHistogramParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHistogramParameterfvEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetHistogramParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetHistogramParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetHistogramParameterivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetHistogramParameterivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetMinmaxEXT(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMinmaxEXT","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMinmaxEXT(self->next, target, reset, format, type, values);
}

static void REGAL_CALL http_glGetMinmaxParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMinmaxParameterfvEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMinmaxParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetMinmaxParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMinmaxParameterivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMinmaxParameterivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glHistogramEXT(Layer *_layer, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glHistogramEXT","(", toString(target), ", ", width, ", ", toString(internalformat), ", ", toString(sink), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglHistogramEXT(self->next, target, width, internalformat, sink);
}

static void REGAL_CALL http_glMinmaxEXT(Layer *_layer, GLenum target, GLenum internalformat, GLboolean sink)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMinmaxEXT","(", toString(target), ", ", toString(internalformat), ", ", toString(sink), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMinmaxEXT(self->next, target, internalformat, sink);
}

static void REGAL_CALL http_glResetHistogramEXT(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResetHistogramEXT","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResetHistogramEXT(self->next, target);
}

static void REGAL_CALL http_glResetMinmaxEXT(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResetMinmaxEXT","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResetMinmaxEXT(self->next, target);
}

// GL_EXT_index_func

static void REGAL_CALL http_glIndexFuncEXT(Layer *_layer, GLenum func, GLfloat ref)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexFuncEXT","(", toString(func), ", ", ref, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexFuncEXT(self->next, func, ref);
}

// GL_EXT_index_material

static void REGAL_CALL http_glIndexMaterialEXT(Layer *_layer, GLenum face, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexMaterialEXT","(", toString(face), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexMaterialEXT(self->next, face, mode);
}

// GL_EXT_light_texture

static void REGAL_CALL http_glApplyTextureEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glApplyTextureEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglApplyTextureEXT(self->next, mode);
}

static void REGAL_CALL http_glTextureLightEXT(Layer *_layer, GLenum pname)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureLightEXT","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureLightEXT(self->next, pname);
}

static void REGAL_CALL http_glTextureMaterialEXT(Layer *_layer, GLenum face, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureMaterialEXT","(", toString(face), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureMaterialEXT(self->next, face, mode);
}

// GL_EXT_map_buffer_range

static void REGAL_CALL http_glFlushMappedBufferRangeEXT(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushMappedBufferRangeEXT","(", toString(target), ", ", offset, ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushMappedBufferRangeEXT(self->next, target, offset, length);
}

static GLvoid *REGAL_CALL http_glMapBufferRangeEXT(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapBufferRangeEXT","(", toString(target), ", ", offset, ", ", length, ", ", GLmapBufferRangeToString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapBufferRangeEXT(self->next, target, offset, length, access);
  return ret;
}

// GL_EXT_multi_draw_arrays

static void REGAL_CALL http_glMultiDrawArraysEXT(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawArraysEXT","(", GLmodeToString(mode), ", ", print_array(first,primcount), ", ", print_array(count,primcount), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawArraysEXT(self->next, mode, first, count, primcount);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glMultiDrawElementsEXT(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiDrawElementsEXT","(", GLmodeToString(mode), ", ", print_array(count,primcount), ", ", toString(type), ", ", print_optional(indices,Logging::pointers), ", ", primcount, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiDrawElementsEXT(self->next, mode, count, type, indices, primcount);
  self->count.lastDraw = self->count.call;
}

// GL_EXT_multisample

static void REGAL_CALL http_glSampleMaskEXT(Layer *_layer, GLclampf value, GLboolean invert)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleMaskEXT","(", value, ", ", toString(invert), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleMaskEXT(self->next, value, invert);
}

static void REGAL_CALL http_glSamplePatternEXT(Layer *_layer, GLenum pattern)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplePatternEXT","(", toString(pattern), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplePatternEXT(self->next, pattern);
}

// GL_EXT_multisampled_render_to_texture

static void REGAL_CALL http_glFramebufferTexture2DMultisampleEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture2DMultisampleEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", samples, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture2DMultisampleEXT(self->next, target, attachment, textarget, texture, level, samples);
}

// GL_EXT_multiview_draw_buffers

static void REGAL_CALL http_glDrawBuffersIndexedEXT(Layer *_layer, GLint n, const GLenum *location, const GLint *indices)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBuffersIndexedEXT","(", n, ", ", location, ", ", print_optional(indices,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBuffersIndexedEXT(self->next, n, location, indices);
}

static void REGAL_CALL http_glGetIntegeri_vEXT(Layer *_layer, GLenum target, GLuint index, GLint *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetIntegeri_vEXT","(", toString(target), ", ", index, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetIntegeri_vEXT(self->next, target, index, data);
}

static void REGAL_CALL http_glReadBufferIndexedEXT(Layer *_layer, GLenum src, GLint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadBufferIndexedEXT","(", toString(src), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadBufferIndexedEXT(self->next, src, index);
}

// GL_EXT_occlusion_query_boolean

static void REGAL_CALL http_glBeginQueryEXT(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginQueryEXT","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginQueryEXT(self->next, target, id);
}

static void REGAL_CALL http_glDeleteQueriesEXT(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteQueriesEXT","(", n, ", ", print_optional(ids,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteQueriesEXT(self->next, n, ids);
}

static void REGAL_CALL http_glEndQueryEXT(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndQueryEXT","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndQueryEXT(self->next, target);
}

static void REGAL_CALL http_glGenQueriesEXT(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenQueriesEXT","(", n, ", ", print_optional(ids,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenQueriesEXT(self->next, n, ids);
}

static void REGAL_CALL http_glGetQueryObjectuivEXT(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectuivEXT","(", id, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectuivEXT(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryivEXT","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryivEXT(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsQueryEXT(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsQueryEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsQueryEXT(self->next, id);
  return ret;
}

// GL_EXT_paletted_texture

static void REGAL_CALL http_glColorTableEXT(Layer *_layer, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTableEXT","(", toString(target), ", ", toString(internalFormat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(table,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTableEXT(self->next, target, internalFormat, width, format, type, table);
}

static void REGAL_CALL http_glGetColorTableEXT(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableEXT","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableEXT(self->next, target, format, type, data);
}

static void REGAL_CALL http_glGetColorTableParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableParameterfvEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetColorTableParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableParameterivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableParameterivEXT(self->next, target, pname, params);
}

// GL_EXT_pixel_transform

static void REGAL_CALL http_glGetPixelTransformParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelTransformParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelTransformParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetPixelTransformParameterivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelTransformParameterivEXT","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelTransformParameterivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glPixelTransformParameterfEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTransformParameterfEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTransformParameterfEXT(self->next, target, pname, param);
}

static void REGAL_CALL http_glPixelTransformParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTransformParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", print_array(params,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTransformParameterfvEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glPixelTransformParameteriEXT(Layer *_layer, GLenum target, GLenum pname, const GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTransformParameteriEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTransformParameteriEXT(self->next, target, pname, param);
}

static void REGAL_CALL http_glPixelTransformParameterivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTransformParameterivEXT","(", toString(target), ", ", toString(pname), ", ", print_array(params,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTransformParameterivEXT(self->next, target, pname, params);
}

// GL_EXT_point_parameters

static void REGAL_CALL http_glPointParameterfEXT(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfEXT","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfEXT(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameterfvEXT(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfvEXT","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfvEXT(self->next, pname, params);
}

// GL_EXT_polygon_offset

static void REGAL_CALL http_glPolygonOffsetEXT(Layer *_layer, GLfloat factor, GLfloat bias)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPolygonOffsetEXT","(", factor, ", ", bias, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPolygonOffsetEXT(self->next, factor, bias);
}

// GL_EXT_provoking_vertex

static void REGAL_CALL http_glProvokingVertexEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProvokingVertexEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProvokingVertexEXT(self->next, mode);
}

// GL_EXT_robustness

static void REGAL_CALL http_glGetnUniformfvEXT(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnUniformfvEXT","(", program, ", ", location, ", ", bufSize, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnUniformfvEXT(self->next, program, location, bufSize, params);
}

static void REGAL_CALL http_glGetnUniformivEXT(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetnUniformivEXT","(", program, ", ", location, ", ", bufSize, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetnUniformivEXT(self->next, program, location, bufSize, params);
}

static void REGAL_CALL http_glReadnPixelsEXT(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadnPixelsEXT","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadnPixelsEXT(self->next, x, y, width, height, format, type, bufSize, data);
}

// GL_EXT_scene_marker

static void REGAL_CALL http_glBeginSceneEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginSceneEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginSceneEXT(self->next);
}

static void REGAL_CALL http_glEndSceneEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndSceneEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndSceneEXT(self->next);
}

// GL_EXT_secondary_color

static void REGAL_CALL http_glSecondaryColor3bEXT(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3bEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3bEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3bvEXT(Layer *_layer, const GLbyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3bvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3bvEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3dEXT(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3dEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3dEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3dvEXT(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3dvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3dvEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3fEXT(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3fEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3fEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3fvEXT(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3fvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3fvEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3iEXT(Layer *_layer, GLint red, GLint green, GLint blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3iEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3iEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3ivEXT(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3ivEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3ivEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3sEXT(Layer *_layer, GLshort red, GLshort green, GLshort blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3sEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3sEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3svEXT(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3svEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3svEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3ubEXT(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3ubEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3ubEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3ubvEXT(Layer *_layer, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3ubvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3ubvEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3uiEXT(Layer *_layer, GLuint red, GLuint green, GLuint blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3uiEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3uiEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3uivEXT(Layer *_layer, const GLuint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3uivEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3uivEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3usEXT(Layer *_layer, GLushort red, GLushort green, GLushort blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3usEXT","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3usEXT(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3usvEXT(Layer *_layer, const GLushort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3usvEXT","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3usvEXT(self->next, v);
}

static void REGAL_CALL http_glSecondaryColorPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColorPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColorPointerEXT(self->next, size, type, stride, pointer);
}

// GL_EXT_separate_shader_objects

static void REGAL_CALL http_glActiveProgramEXT(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glActiveProgramEXT","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglActiveProgramEXT(self->next, program);
}

static GLuint REGAL_CALL http_glCreateShaderProgramEXT(Layer *_layer, GLenum type, const GLchar *string)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCreateShaderProgramEXT","(", toString(type), ", ", print_quote(string,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCreateShaderProgramEXT(self->next, type, string);
  return ret;
}

static void REGAL_CALL http_glUseShaderProgramEXT(Layer *_layer, GLenum type, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUseShaderProgramEXT","(", toString(type), ", ", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUseShaderProgramEXT(self->next, type, program);
}

// GL_EXT_shader_image_load_store

static void REGAL_CALL http_glBindImageTextureEXT(Layer *_layer, GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindImageTextureEXT","(", index, ", ", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(access), ", ", format, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindImageTextureEXT(self->next, index, texture, level, layered, layer, access, format);
}

static void REGAL_CALL http_glMemoryBarrierEXT(Layer *_layer, GLbitfield barriers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMemoryBarrierEXT","(", GLmemoryBarrierToString(barriers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMemoryBarrierEXT(self->next, barriers);
}

// GL_EXT_stencil_clear_tag

static void REGAL_CALL http_glStencilClearTagEXT(Layer *_layer, GLsizei stencilTagBits, GLuint stencilClearTag)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilClearTagEXT","(", stencilTagBits, ", ", stencilClearTag, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilClearTagEXT(self->next, stencilTagBits, stencilClearTag);
}

// GL_EXT_stencil_two_side

static void REGAL_CALL http_glActiveStencilFaceEXT(Layer *_layer, GLenum face)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glActiveStencilFaceEXT","(", toString(face), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglActiveStencilFaceEXT(self->next, face);
}

// GL_EXT_subtexture

static void REGAL_CALL http_glTexSubImage1DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage1DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage1DEXT(self->next, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL http_glTexSubImage2DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage2DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage2DEXT(self->next, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL http_glTexSubImage3DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage3DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage3DEXT(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_EXT_texture3D

static void REGAL_CALL http_glTexImage3DEXT(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage3DEXT","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage3DEXT(self->next, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

// GL_EXT_texture_array

static void REGAL_CALL http_glFramebufferTextureLayerEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTextureLayerEXT","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTextureLayerEXT(self->next, target, attachment, texture, level, layer);
}

// GL_EXT_texture_buffer_object

static void REGAL_CALL http_glTexBufferEXT(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexBufferEXT","(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexBufferEXT(self->next, target, internalformat, buffer);
}

// GL_EXT_texture_integer

static void REGAL_CALL http_glClearColorIiEXT(Layer *_layer, GLint red, GLint green, GLint blue, GLint alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearColorIiEXT","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearColorIiEXT(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glClearColorIuiEXT(Layer *_layer, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearColorIuiEXT","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearColorIuiEXT(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glGetTexParameterIivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterIivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterIivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetTexParameterIuivEXT(Layer *_layer, GLenum target, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterIuivEXT","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterIuivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexParameterIivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterIivEXT","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterIivEXT(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexParameterIuivEXT(Layer *_layer, GLenum target, GLenum pname, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterIuivEXT","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterIuivEXT(self->next, target, pname, params);
}

// GL_EXT_texture_object

static GLboolean REGAL_CALL http_glAreTexturesResidentEXT(Layer *_layer, GLsizei n, const GLuint *textures, GLboolean *residences)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAreTexturesResidentEXT","(", n, ", ", print_array(textures,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglAreTexturesResidentEXT(self->next, n, textures, residences);
  return ret;
}

static void REGAL_CALL http_glBindTextureEXT(Layer *_layer, GLenum target, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTextureEXT","(", toString(target), ", ", texture, ")");
  }
  if( texture != 0 ) {
    HttpTextureInfo & hti = self->texture[ texture ];
    RegalAssert( hti.name == 0 || hti.name == texture );
    if( hti.name == 0 ) {
      hti.name = texture;
      hti.target = target;
    }
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindTextureEXT(self->next, target, texture);
}

static void REGAL_CALL http_glDeleteTexturesEXT(Layer *_layer, GLsizei n, const GLuint *textures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteTexturesEXT","(", n, ", ", print_array(textures,n), ")");
  }
  for( int i = 0; i < n; i++ ) {
    self->texture.erase( textures[i] );
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteTexturesEXT(self->next, n, textures);
}

static void REGAL_CALL http_glGenTexturesEXT(Layer *_layer, GLsizei n, GLuint *textures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenTexturesEXT","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenTexturesEXT(self->next, n, textures);
}

static GLboolean REGAL_CALL http_glIsTextureEXT(Layer *_layer, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsTextureEXT","(", texture, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsTextureEXT(self->next, texture);
  return ret;
}

static void REGAL_CALL http_glPrioritizeTexturesEXT(Layer *_layer, GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPrioritizeTexturesEXT","(", n, ", ", print_array(textures,n), ", ", print_array(priorities,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPrioritizeTexturesEXT(self->next, n, textures, priorities);
}

// GL_EXT_texture_perturb_normal

static void REGAL_CALL http_glTextureNormalEXT(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureNormalEXT","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureNormalEXT(self->next, mode);
}

// GL_EXT_texture_storage

static void REGAL_CALL http_glTexStorage1DEXT(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage1DEXT","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage1DEXT(self->next, target, levels, internalformat, width);
}

static void REGAL_CALL http_glTexStorage2DEXT(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage2DEXT","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage2DEXT(self->next, target, levels, internalformat, width, height);
}

static void REGAL_CALL http_glTexStorage3DEXT(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexStorage3DEXT","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexStorage3DEXT(self->next, target, levels, internalformat, width, height, depth);
}

// GL_EXT_timer_query

static void REGAL_CALL http_glGetQueryObjecti64vEXT(Layer *_layer, GLuint id, GLenum pname, GLint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjecti64vEXT","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjecti64vEXT(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetQueryObjectui64vEXT(Layer *_layer, GLuint id, GLenum pname, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetQueryObjectui64vEXT","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetQueryObjectui64vEXT(self->next, id, pname, params);
}

// GL_EXT_transform_feedback

static void REGAL_CALL http_glBeginTransformFeedbackEXT(Layer *_layer, GLenum primitiveMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginTransformFeedbackEXT","(", toString(primitiveMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginTransformFeedbackEXT(self->next, primitiveMode);
}

static void REGAL_CALL http_glBindBufferBaseEXT(Layer *_layer, GLenum target, GLuint index, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferBaseEXT","(", toString(target), ", ", index, ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferBaseEXT(self->next, target, index, buffer);
}

static void REGAL_CALL http_glBindBufferOffsetEXT(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferOffsetEXT","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferOffsetEXT(self->next, target, index, buffer, offset);
}

static void REGAL_CALL http_glBindBufferRangeEXT(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferRangeEXT","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferRangeEXT(self->next, target, index, buffer, offset, size);
}

static void REGAL_CALL http_glEndTransformFeedbackEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndTransformFeedbackEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndTransformFeedbackEXT(self->next);
}

static void REGAL_CALL http_glGetTransformFeedbackVaryingEXT(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTransformFeedbackVaryingEXT","(", program, ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTransformFeedbackVaryingEXT(self->next, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL http_glTransformFeedbackVaryingsEXT(Layer *_layer, GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTransformFeedbackVaryingsEXT","(", program, ", ", count, ", ", print_array(varyings,count), ", ", toString(bufferMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTransformFeedbackVaryingsEXT(self->next, program, count, varyings, bufferMode);
}

// GL_EXT_vertex_array

static void REGAL_CALL http_glArrayElementEXT(Layer *_layer, GLint i)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glArrayElementEXT","(", i, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglArrayElementEXT(self->next, i);
}

static void REGAL_CALL http_glColorPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorPointerEXT(self->next, size, type, stride, count, pointer);
}

static void REGAL_CALL http_glDrawArraysEXT(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawArraysEXT","(", toString(mode), ", ", GLmodeToString(mode), ", ", count, ")");
  }
  self->count.draw++;
  if( self->runState == RS_NextDraw ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawArraysEXT(self->next, mode, first, count);
  self->count.lastDraw = self->count.call;
}

static void REGAL_CALL http_glEdgeFlagPointerEXT(Layer *_layer, GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEdgeFlagPointerEXT","(", stride, ", ", count, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEdgeFlagPointerEXT(self->next, stride, count, pointer);
}

static void REGAL_CALL http_glGetPointervEXT(Layer *_layer, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPointervEXT","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPointervEXT(self->next, pname, params);
}

static void REGAL_CALL http_glIndexPointerEXT(Layer *_layer, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexPointerEXT","(", toString(type), ", ", stride, ", ", count, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexPointerEXT(self->next, type, stride, count, pointer);
}

static void REGAL_CALL http_glNormalPointerEXT(Layer *_layer, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalPointerEXT","(", toString(type), ", ", stride, ", ", count, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalPointerEXT(self->next, type, stride, count, pointer);
}

static void REGAL_CALL http_glTexCoordPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordPointerEXT(self->next, size, type, stride, count, pointer);
}

static void REGAL_CALL http_glVertexPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexPointerEXT(self->next, size, type, stride, count, pointer);
}

// GL_EXT_vertex_attrib_64bit

static void REGAL_CALL http_glGetVertexAttribLdvEXT(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribLdvEXT","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribLdvEXT(self->next, index, pname, params);
}

static void REGAL_CALL http_glVertexArrayVertexAttribLOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayVertexAttribLOffsetEXT","(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayVertexAttribLOffsetEXT(self->next, vaobj, buffer, index, size, type, stride, offset);
}

static void REGAL_CALL http_glVertexAttribL1dEXT(Layer *_layer, GLuint index, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1dEXT","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1dEXT(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribL1dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1dvEXT","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1dvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL2dEXT(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2dEXT","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2dEXT(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribL2dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2dvEXT","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2dvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL3dEXT(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3dEXT","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3dEXT(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribL3dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3dvEXT","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3dvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL4dEXT(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4dEXT","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4dEXT(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribL4dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4dvEXT","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4dvEXT(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribLPointerEXT(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribLPointerEXT","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribLPointerEXT(self->next, index, size, type, stride, pointer);
}

// GL_EXT_vertex_shader

static void REGAL_CALL http_glBeginVertexShaderEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginVertexShaderEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginVertexShaderEXT(self->next);
}

static GLuint REGAL_CALL http_glBindLightParameterEXT(Layer *_layer, GLenum light, GLenum value)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindLightParameterEXT","(", toString(light), ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglBindLightParameterEXT(self->next, light, value);
  return ret;
}

static GLuint REGAL_CALL http_glBindMaterialParameterEXT(Layer *_layer, GLenum face, GLenum value)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindMaterialParameterEXT","(", toString(face), ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglBindMaterialParameterEXT(self->next, face, value);
  return ret;
}

static GLuint REGAL_CALL http_glBindParameterEXT(Layer *_layer, GLenum value)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindParameterEXT","(", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglBindParameterEXT(self->next, value);
  return ret;
}

static GLuint REGAL_CALL http_glBindTexGenParameterEXT(Layer *_layer, GLenum unit, GLenum coord, GLenum value)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTexGenParameterEXT","(", toString(unit), ", ", toString(coord), ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglBindTexGenParameterEXT(self->next, unit, coord, value);
  return ret;
}

static GLuint REGAL_CALL http_glBindTextureUnitParameterEXT(Layer *_layer, GLenum unit, GLenum value)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTextureUnitParameterEXT","(", toString(unit), ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglBindTextureUnitParameterEXT(self->next, unit, value);
  return ret;
}

static void REGAL_CALL http_glBindVertexShaderEXT(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVertexShaderEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVertexShaderEXT(self->next, id);
}

static void REGAL_CALL http_glDeleteVertexShaderEXT(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteVertexShaderEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteVertexShaderEXT(self->next, id);
}

static void REGAL_CALL http_glDisableVariantClientStateEXT(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableVariantClientStateEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableVariantClientStateEXT(self->next, id);
}

static void REGAL_CALL http_glEnableVariantClientStateEXT(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableVariantClientStateEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableVariantClientStateEXT(self->next, id);
}

static void REGAL_CALL http_glEndVertexShaderEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndVertexShaderEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndVertexShaderEXT(self->next);
}

static void REGAL_CALL http_glExtractComponentEXT(Layer *_layer, GLuint res, GLuint src, GLuint num)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtractComponentEXT","(", res, ", ", src, ", ", num, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtractComponentEXT(self->next, res, src, num);
}

static GLuint REGAL_CALL http_glGenSymbolsEXT(Layer *_layer, GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenSymbolsEXT","(", toString(datatype), ", ", toString(storagetype), ", ", toString(range), ", ", components, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGenSymbolsEXT(self->next, datatype, storagetype, range, components);
  return ret;
}

static GLuint REGAL_CALL http_glGenVertexShadersEXT(Layer *_layer, GLuint range)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenVertexShadersEXT","(", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGenVertexShadersEXT(self->next, range);
  return ret;
}

static void REGAL_CALL http_glGetInvariantBooleanvEXT(Layer *_layer, GLuint id, GLenum value, GLboolean *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInvariantBooleanvEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInvariantBooleanvEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetInvariantFloatvEXT(Layer *_layer, GLuint id, GLenum value, GLfloat *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInvariantFloatvEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInvariantFloatvEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetInvariantIntegervEXT(Layer *_layer, GLuint id, GLenum value, GLint *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInvariantIntegervEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetInvariantIntegervEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetLocalConstantBooleanvEXT(Layer *_layer, GLuint id, GLenum value, GLboolean *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetLocalConstantBooleanvEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetLocalConstantBooleanvEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetLocalConstantFloatvEXT(Layer *_layer, GLuint id, GLenum value, GLfloat *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetLocalConstantFloatvEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetLocalConstantFloatvEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetLocalConstantIntegervEXT(Layer *_layer, GLuint id, GLenum value, GLint *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetLocalConstantIntegervEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetLocalConstantIntegervEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetVariantBooleanvEXT(Layer *_layer, GLuint id, GLenum value, GLboolean *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVariantBooleanvEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVariantBooleanvEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetVariantFloatvEXT(Layer *_layer, GLuint id, GLenum value, GLfloat *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVariantFloatvEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVariantFloatvEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetVariantIntegervEXT(Layer *_layer, GLuint id, GLenum value, GLint *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVariantIntegervEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVariantIntegervEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glGetVariantPointervEXT(Layer *_layer, GLuint id, GLenum value, GLvoid **data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVariantPointervEXT","(", id, ", ", toString(value), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVariantPointervEXT(self->next, id, value, data);
}

static void REGAL_CALL http_glInsertComponentEXT(Layer *_layer, GLuint res, GLuint src, GLuint num)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInsertComponentEXT","(", res, ", ", src, ", ", num, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInsertComponentEXT(self->next, res, src, num);
}

static GLboolean REGAL_CALL http_glIsVariantEnabledEXT(Layer *_layer, GLuint id, GLenum cap)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsVariantEnabledEXT","(", id, ", ", toString(cap), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsVariantEnabledEXT(self->next, id, cap);
  return ret;
}

static void REGAL_CALL http_glSetInvariantEXT(Layer *_layer, GLuint id, GLenum type, const GLvoid *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSetInvariantEXT","(", id, ", ", toString(type), ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSetInvariantEXT(self->next, id, type, addr);
}

static void REGAL_CALL http_glSetLocalConstantEXT(Layer *_layer, GLuint id, GLenum type, const GLvoid *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSetLocalConstantEXT","(", id, ", ", toString(type), ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSetLocalConstantEXT(self->next, id, type, addr);
}

static void REGAL_CALL http_glShaderOp1EXT(Layer *_layer, GLenum op, GLuint res, GLuint arg1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderOp1EXT","(", toString(op), ", ", res, ", ", arg1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderOp1EXT(self->next, op, res, arg1);
}

static void REGAL_CALL http_glShaderOp2EXT(Layer *_layer, GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderOp2EXT","(", toString(op), ", ", res, ", ", arg1, ", ", arg2, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderOp2EXT(self->next, op, res, arg1, arg2);
}

static void REGAL_CALL http_glShaderOp3EXT(Layer *_layer, GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glShaderOp3EXT","(", toString(op), ", ", res, ", ", arg1, ", ", arg2, ", ", arg3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglShaderOp3EXT(self->next, op, res, arg1, arg2, arg3);
}

static void REGAL_CALL http_glSwizzleEXT(Layer *_layer, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSwizzleEXT","(", res, ", ", in, ", ", toString(outX), ", ", toString(outY), ", ", toString(outZ), ", ", toString(outW), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSwizzleEXT(self->next, res, in, outX, outY, outZ, outW);
}

static void REGAL_CALL http_glVariantPointerEXT(Layer *_layer, GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantPointerEXT","(", id, ", ", toString(type), ", ", stride, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantPointerEXT(self->next, id, type, stride, addr);
}

static void REGAL_CALL http_glVariantbvEXT(Layer *_layer, GLuint id, const GLbyte *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantbvEXT","(", id, ", ", addr, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantbvEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantdvEXT(Layer *_layer, GLuint id, const GLdouble *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantdvEXT","(", id, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantdvEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantfvEXT(Layer *_layer, GLuint id, const GLfloat *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantfvEXT","(", id, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantfvEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantivEXT(Layer *_layer, GLuint id, const GLint *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantivEXT","(", id, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantivEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantsvEXT(Layer *_layer, GLuint id, const GLshort *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantsvEXT","(", id, ", ", addr, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantsvEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantubvEXT(Layer *_layer, GLuint id, const GLubyte *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantubvEXT","(", id, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantubvEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantuivEXT(Layer *_layer, GLuint id, const GLuint *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantuivEXT","(", id, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantuivEXT(self->next, id, addr);
}

static void REGAL_CALL http_glVariantusvEXT(Layer *_layer, GLuint id, const GLushort *addr)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVariantusvEXT","(", id, ", ", print_optional(addr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVariantusvEXT(self->next, id, addr);
}

static void REGAL_CALL http_glWriteMaskEXT(Layer *_layer, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWriteMaskEXT","(", res, ", ", in, ", ", toString(outX), ", ", toString(outY), ", ", toString(outZ), ", ", toString(outW), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWriteMaskEXT(self->next, res, in, outX, outY, outZ, outW);
}

// GL_EXT_vertex_weighting

static void REGAL_CALL http_glVertexWeightPointerEXT(Layer *_layer, GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexWeightPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexWeightPointerEXT(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glVertexWeightfEXT(Layer *_layer, GLfloat weight)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexWeightfEXT","(", weight, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexWeightfEXT(self->next, weight);
}

static void REGAL_CALL http_glVertexWeightfvEXT(Layer *_layer, const GLfloat *weight)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexWeightfvEXT","(", print_array(weight,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexWeightfvEXT(self->next, weight);
}

// GL_EXT_x11_sync_object

static GLsync REGAL_CALL http_glImportSyncEXT(Layer *_layer, GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  Http * self = static_cast<Http *>(_layer);
    GLsync  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glImportSyncEXT","(", toString(external_sync_type), ", ", external_sync, ", ", GLimportSyncEXTToString(flags), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglImportSyncEXT(self->next, external_sync_type, external_sync, flags);
  return ret;
}

// GL_GREMEDY_frame_terminator

static void REGAL_CALL http_glFrameTerminatorGREMEDY(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrameTerminatorGREMEDY","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrameTerminatorGREMEDY(self->next);
}

// GL_GREMEDY_string_marker

static void REGAL_CALL http_glStringMarkerGREMEDY(Layer *_layer, GLsizei len, const GLvoid *string)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStringMarkerGREMEDY","(", len, ", ", print_optional(string,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStringMarkerGREMEDY(self->next, len, string);
}

// GL_HP_image_transform

static void REGAL_CALL http_glGetImageTransformParameterfvHP(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetImageTransformParameterfvHP","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetImageTransformParameterfvHP(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetImageTransformParameterivHP(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetImageTransformParameterivHP","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetImageTransformParameterivHP(self->next, target, pname, params);
}

static void REGAL_CALL http_glImageTransformParameterfHP(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glImageTransformParameterfHP","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglImageTransformParameterfHP(self->next, target, pname, param);
}

static void REGAL_CALL http_glImageTransformParameterfvHP(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glImageTransformParameterfvHP","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglImageTransformParameterfvHP(self->next, target, pname, params);
}

static void REGAL_CALL http_glImageTransformParameteriHP(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glImageTransformParameteriHP","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglImageTransformParameteriHP(self->next, target, pname, param);
}

static void REGAL_CALL http_glImageTransformParameterivHP(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glImageTransformParameterivHP","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglImageTransformParameterivHP(self->next, target, pname, params);
}

// GL_IBM_multimode_draw_arrays

static void REGAL_CALL http_glMultiModeDrawArraysIBM(Layer *_layer, const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiModeDrawArraysIBM","(", mode, ", ", print_optional(first,Logging::pointers), ", ", print_optional(count,Logging::pointers), ", ", primcount, ", ", modestride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiModeDrawArraysIBM(self->next, mode, first, count, primcount, modestride);
}

static void REGAL_CALL http_glMultiModeDrawElementsIBM(Layer *_layer, const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiModeDrawElementsIBM","(", mode, ", ", print_optional(count,Logging::pointers), ", ", toString(type), ", ", indices, ", ", primcount, ", ", modestride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiModeDrawElementsIBM(self->next, mode, count, type, indices, primcount, modestride);
}

// GL_IBM_vertex_array_lists

static void REGAL_CALL http_glColorPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorPointerListIBM(self->next, size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glEdgeFlagPointerListIBM(Layer *_layer, GLint stride, const GLboolean **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEdgeFlagPointerListIBM","(", stride, ", ", pointer, ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEdgeFlagPointerListIBM(self->next, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glFogCoordPointerListIBM(Layer *_layer, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordPointerListIBM","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordPointerListIBM(self->next, type, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glIndexPointerListIBM(Layer *_layer, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexPointerListIBM","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexPointerListIBM(self->next, type, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glNormalPointerListIBM(Layer *_layer, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalPointerListIBM","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalPointerListIBM(self->next, type, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glSecondaryColorPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColorPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColorPointerListIBM(self->next, size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glTexCoordPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordPointerListIBM(self->next, size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL http_glVertexPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ", ", ptrstride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexPointerListIBM(self->next, size, type, stride, pointer, ptrstride);
}

// GL_IMG_multisampled_render_to_texture

static void REGAL_CALL http_glFramebufferTexture2DMultisampleIMG(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture2DMultisampleIMG","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", samples, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture2DMultisampleIMG(self->next, target, attachment, textarget, texture, level, samples);
}

static void REGAL_CALL http_glRenderbufferStorageMultisampleIMG(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageMultisampleIMG","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageMultisampleIMG(self->next, target, samples, internalformat, width, height);
}

// GL_INGR_blend_func_separate

static void REGAL_CALL http_glBlendFuncSeparateINGR(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparateINGR","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparateINGR(self->next, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_INTEL_map_texture

static GLvoid *REGAL_CALL http_glMapTexture2DINTEL(Layer *_layer, GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapTexture2DINTEL","(", texture, ", ", level, ", ", GLmapTexture2DINTELToString(access), ", ", print_optional(stride,Logging::pointers), ", ", print_optional(layout,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapTexture2DINTEL(self->next, texture, level, access, stride, layout);
  return ret;
}

static void REGAL_CALL http_glSyncTextureINTEL(Layer *_layer, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSyncTextureINTEL","(", texture, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSyncTextureINTEL(self->next, texture);
}

static void REGAL_CALL http_glUnmapTexture2DINTEL(Layer *_layer, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnmapTexture2DINTEL","(", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUnmapTexture2DINTEL(self->next, texture, level);
}

// GL_INTEL_parallel_arrays

static void REGAL_CALL http_glColorPointervINTEL(Layer *_layer, GLint size, GLenum type, const GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorPointervINTEL","(", size, ", ", toString(type), ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorPointervINTEL(self->next, size, type, pointer);
}

static void REGAL_CALL http_glNormalPointervINTEL(Layer *_layer, GLenum type, const GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalPointervINTEL","(", toString(type), ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalPointervINTEL(self->next, type, pointer);
}

static void REGAL_CALL http_glTexCoordPointervINTEL(Layer *_layer, GLint size, GLenum type, const GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordPointervINTEL","(", size, ", ", toString(type), ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordPointervINTEL(self->next, size, type, pointer);
}

static void REGAL_CALL http_glVertexPointervINTEL(Layer *_layer, GLint size, GLenum type, const GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexPointervINTEL","(", size, ", ", toString(type), ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexPointervINTEL(self->next, size, type, pointer);
}

// GL_INTEL_texture_scissor

static void REGAL_CALL http_glTexScissorFuncINTEL(Layer *_layer, GLenum target, GLenum lfunc, GLenum hfunc)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexScissorFuncINTEL","(", toString(target), ", ", toString(lfunc), ", ", toString(hfunc), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexScissorFuncINTEL(self->next, target, lfunc, hfunc);
}

static void REGAL_CALL http_glTexScissorINTEL(Layer *_layer, GLenum target, GLclampf tlow, GLclampf thigh)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexScissorINTEL","(", toString(target), ", ", tlow, ", ", thigh, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexScissorINTEL(self->next, target, tlow, thigh);
}

// GL_KHR_debug

static void REGAL_CALL http_glDebugMessageCallback(Layer *_layer, GLDEBUGPROC callback, const GLvoid *userParam)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageCallback","(", print_optional(userParam,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageCallback(self->next, callback, userParam);
}

static void REGAL_CALL http_glDebugMessageControl(Layer *_layer, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageControl","(", toString(source), ", ", toString(type), ", ", toString(severity), ", ", count, ", ", print_optional(ids,Logging::pointers), ", ", toString(enabled), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageControl(self->next, source, type, severity, count, ids, enabled);
}

static void REGAL_CALL http_glDebugMessageInsert(Layer *_layer, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDebugMessageInsert","(", toString(source), ", ", toString(type), ", ", id, ", ", toString(severity), ", ", length, ", ", print_quote(buf,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDebugMessageInsert(self->next, source, type, id, severity, length, buf);
}

static GLuint REGAL_CALL http_glGetDebugMessageLog(Layer *_layer, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDebugMessageLog","(", count, ", ", bufsize, ", ", print_optional(sources,Logging::pointers), ", ", print_optional(types,Logging::pointers), ", ", print_optional(ids,Logging::pointers), ", ", print_optional(severities,Logging::pointers), ", ", print_optional(lengths,Logging::pointers), ", ", print_quote(messageLog,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetDebugMessageLog(self->next, count, bufsize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}

static void REGAL_CALL http_glGetObjectLabel(Layer *_layer, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectLabel","(", toString(identifier), ", ", name, ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_quote(label,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectLabel(self->next, identifier, name, bufSize, length, label);
}

static void REGAL_CALL http_glGetObjectPtrLabel(Layer *_layer, const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetObjectPtrLabel","(", print_optional(ptr,Logging::pointers), ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_quote(label,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetObjectPtrLabel(self->next, ptr, bufSize, length, label);
}

static void REGAL_CALL http_glObjectLabel(Layer *_layer, GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glObjectLabel","(", toString(identifier), ", ", name, ", ", length, ", ", print_quote(label,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglObjectLabel(self->next, identifier, name, length, label);
}

static void REGAL_CALL http_glObjectPtrLabel(Layer *_layer, const GLvoid *ptr, GLsizei length, const GLchar *label)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glObjectPtrLabel","(", print_optional(ptr,Logging::pointers), ", ", length, ", ", print_quote(label,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglObjectPtrLabel(self->next, ptr, length, label);
}

static void REGAL_CALL http_glPopDebugGroup(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPopDebugGroup","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPopDebugGroup(self->next);
  if( self->runState == RS_StepOutOfGroup || self->runState == RS_NextGroup ) {
    self->runState = RS_Pause;
  }
  if( self->runState == RS_StepOverGroup && self->debugGroupStackDepth == self->stepOverGroupDepth ) {
    self->runState = RS_Pause;
  }
  self->debugGroupStackDepth--;
}

static void REGAL_CALL http_glPushDebugGroup(Layer *_layer, GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPushDebugGroup","(", toString(source), ", ", id, ", ", length, ", ", print_quote(message,'"'), ")");
  }
  self->count.group++;
  if( self->runState == RS_NextGroup ) {
    self->runState = RS_Pause;
  }
  self->debugGroupStackDepth++;
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPushDebugGroup(self->next, source, id, length, message);
  self->count.lastGroup = self->count.call;
}

// GL_KTX_buffer_region

static GLuint REGAL_CALL http_glBufferRegionEnabled(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferRegionEnabled","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglBufferRegionEnabled(self->next);
  return ret;
}

static void REGAL_CALL http_glDeleteBufferRegion(Layer *_layer, GLenum region)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteBufferRegion","(", toString(region), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteBufferRegion(self->next, region);
}

static void REGAL_CALL http_glDrawBufferRegion(Layer *_layer, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBufferRegion","(", region, ", ", x, ", ", y, ", ", width, ", ", height, ", ", xDest, ", ", yDest, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBufferRegion(self->next, region, x, y, width, height, xDest, yDest);
}

static GLuint REGAL_CALL http_glNewBufferRegion(Layer *_layer, GLenum region)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNewBufferRegion","(", toString(region), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglNewBufferRegion(self->next, region);
  return ret;
}

static void REGAL_CALL http_glReadBufferRegion(Layer *_layer, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadBufferRegion","(", region, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadBufferRegion(self->next, region, x, y, width, height);
}

// GL_MESA_resize_buffers

static void REGAL_CALL http_glResizeBuffersMESA(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResizeBuffersMESA","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResizeBuffersMESA(self->next);
}

// GL_MESA_window_pos

static void REGAL_CALL http_glWindowPos2dMESA(Layer *_layer, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2dMESA","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2dMESA(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2dvMESA(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2dvMESA","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2dvMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos2fMESA(Layer *_layer, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2fMESA","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2fMESA(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2fvMESA(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2fvMESA","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2fvMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos2iMESA(Layer *_layer, GLint x, GLint y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2iMESA","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2iMESA(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2ivMESA(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2ivMESA","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2ivMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos2sMESA(Layer *_layer, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2sMESA","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2sMESA(self->next, x, y);
}

static void REGAL_CALL http_glWindowPos2svMESA(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos2svMESA","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos2svMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos3dMESA(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3dMESA","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3dMESA(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3dvMESA(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3dvMESA","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3dvMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos3fMESA(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3fMESA","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3fMESA(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3fvMESA(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3fvMESA","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3fvMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos3iMESA(Layer *_layer, GLint x, GLint y, GLint z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3iMESA","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3iMESA(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3ivMESA(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3ivMESA","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3ivMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos3sMESA(Layer *_layer, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3sMESA","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3sMESA(self->next, x, y, z);
}

static void REGAL_CALL http_glWindowPos3svMESA(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos3svMESA","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos3svMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos4dMESA(Layer *_layer, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4dMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4dMESA(self->next, x, y, z, w);
}

static void REGAL_CALL http_glWindowPos4dvMESA(Layer *_layer, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4dvMESA","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4dvMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos4fMESA(Layer *_layer, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4fMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4fMESA(self->next, x, y, z, w);
}

static void REGAL_CALL http_glWindowPos4fvMESA(Layer *_layer, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4fvMESA","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4fvMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos4iMESA(Layer *_layer, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4iMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4iMESA(self->next, x, y, z, w);
}

static void REGAL_CALL http_glWindowPos4ivMESA(Layer *_layer, const GLint *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4ivMESA","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4ivMESA(self->next, v);
}

static void REGAL_CALL http_glWindowPos4sMESA(Layer *_layer, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4sMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4sMESA(self->next, x, y, z, w);
}

static void REGAL_CALL http_glWindowPos4svMESA(Layer *_layer, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWindowPos4svMESA","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWindowPos4svMESA(self->next, v);
}

// GL_NVX_conditional_render

static void REGAL_CALL http_glBeginConditionalRenderNVX(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginConditionalRenderNVX","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginConditionalRenderNVX(self->next, id);
}

static void REGAL_CALL http_glEndConditionalRenderNVX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndConditionalRenderNVX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndConditionalRenderNVX(self->next);
}

// GL_NV_bindless_texture

static GLuint64 REGAL_CALL http_glGetImageHandleNV(Layer *_layer, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetImageHandleNV","(", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(format), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetImageHandleNV(self->next, texture, level, layered, layer, format);
  return ret;
}

static GLuint64 REGAL_CALL http_glGetTextureHandleNV(Layer *_layer, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureHandleNV","(", texture, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetTextureHandleNV(self->next, texture);
  return ret;
}

static GLuint64 REGAL_CALL http_glGetTextureSamplerHandleNV(Layer *_layer, GLuint texture, GLuint sampler)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTextureSamplerHandleNV","(", texture, ", ", sampler, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetTextureSamplerHandleNV(self->next, texture, sampler);
  return ret;
}

static GLboolean REGAL_CALL http_glIsImageHandleResidentNV(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsImageHandleResidentNV","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsImageHandleResidentNV(self->next, handle);
  return ret;
}

static GLboolean REGAL_CALL http_glIsTextureHandleResidentNV(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsTextureHandleResidentNV","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsTextureHandleResidentNV(self->next, handle);
  return ret;
}

static void REGAL_CALL http_glMakeImageHandleNonResidentNV(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeImageHandleNonResidentNV","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeImageHandleNonResidentNV(self->next, handle);
}

static void REGAL_CALL http_glMakeImageHandleResidentNV(Layer *_layer, GLuint64 handle, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeImageHandleResidentNV","(", handle, ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeImageHandleResidentNV(self->next, handle, access);
}

static void REGAL_CALL http_glMakeTextureHandleNonResidentNV(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeTextureHandleNonResidentNV","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeTextureHandleNonResidentNV(self->next, handle);
}

static void REGAL_CALL http_glMakeTextureHandleResidentNV(Layer *_layer, GLuint64 handle)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeTextureHandleResidentNV","(", handle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeTextureHandleResidentNV(self->next, handle);
}

static void REGAL_CALL http_glProgramUniformHandleui64NV(Layer *_layer, GLuint program, GLint location, GLuint64 value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformHandleui64NV","(", program, ", ", location, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformHandleui64NV(self->next, program, location, value);
}

static void REGAL_CALL http_glProgramUniformHandleui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformHandleui64vNV","(", program, ", ", location, ", ", count, ", ", print_optional(values,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformHandleui64vNV(self->next, program, location, count, values);
}

static void REGAL_CALL http_glUniformHandleui64NV(Layer *_layer, GLint location, GLuint64 value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformHandleui64NV","(", location, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformHandleui64NV(self->next, location, value);
}

static void REGAL_CALL http_glUniformHandleui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64 *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformHandleui64vNV","(", location, ", ", count, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformHandleui64vNV(self->next, location, count, value);
}

// GL_NV_blend_equation_advanced

static void REGAL_CALL http_glBlendBarrierNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendBarrierNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendBarrierNV(self->next);
}

static void REGAL_CALL http_glBlendParameteriNV(Layer *_layer, GLenum pname, GLint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendParameteriNV","(", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendParameteriNV(self->next, pname, value);
}

// GL_NV_conditional_render

static void REGAL_CALL http_glBeginConditionalRenderNV(Layer *_layer, GLuint id, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginConditionalRenderNV","(", id, ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginConditionalRenderNV(self->next, id, mode);
}

static void REGAL_CALL http_glEndConditionalRenderNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndConditionalRenderNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndConditionalRenderNV(self->next);
}

// GL_NV_copy_buffer

static void REGAL_CALL http_glCopyBufferSubDataNV(Layer *_layer, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyBufferSubDataNV","(", toString(readtarget), ", ", toString(writetarget), ", ", readoffset, ", ", writeoffset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyBufferSubDataNV(self->next, readtarget, writetarget, readoffset, writeoffset, size);
}

// GL_NV_copy_image

static void REGAL_CALL http_glCopyImageSubDataNV(Layer *_layer, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyImageSubDataNV","(", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ", ", dstX, ", ", dstY, ", ", dstZ, ", ", width, ", ", height, ", ", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyImageSubDataNV(self->next, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

// GL_NV_coverage_sample

static void REGAL_CALL http_glCoverageMaskNV(Layer *_layer, GLboolean mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCoverageMaskNV","(", toString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCoverageMaskNV(self->next, mask);
}

static void REGAL_CALL http_glCoverageOperationNV(Layer *_layer, GLenum operation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCoverageOperationNV","(", toString(operation), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCoverageOperationNV(self->next, operation);
}

// GL_NV_depth_buffer_float

static void REGAL_CALL http_glClearDepthdNV(Layer *_layer, GLdouble depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearDepthdNV","(", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearDepthdNV(self->next, depth);
}

static void REGAL_CALL http_glDepthBoundsdNV(Layer *_layer, GLdouble zmin, GLdouble zmax)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthBoundsdNV","(", zmin, ", ", zmax, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthBoundsdNV(self->next, zmin, zmax);
}

static void REGAL_CALL http_glDepthRangedNV(Layer *_layer, GLdouble zNear, GLdouble zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRangedNV","(", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRangedNV(self->next, zNear, zFar);
}

// GL_NV_draw_buffers

static void REGAL_CALL http_glDrawBuffersNV(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawBuffersNV","(", n, ", ", bufs, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawBuffersNV(self->next, n, bufs);
}

// GL_NV_draw_texture

static void REGAL_CALL http_glDrawTextureNV(Layer *_layer, GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawTextureNV","(", texture, ", ", sampler, ", ", x0, ", ", y0, ", ", x1, ", ", y1, ", ", z, ", ", s0, ", ", t0, ", ", s1, ", ", t1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawTextureNV(self->next, texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

// GL_NV_evaluators

static void REGAL_CALL http_glEvalMapsNV(Layer *_layer, GLenum target, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEvalMapsNV","(", toString(target), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEvalMapsNV(self->next, target, mode);
}

static void REGAL_CALL http_glGetMapAttribParameterfvNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapAttribParameterfvNV","(", toString(target), ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapAttribParameterfvNV(self->next, target, index, pname, params);
}

static void REGAL_CALL http_glGetMapAttribParameterivNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapAttribParameterivNV","(", toString(target), ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapAttribParameterivNV(self->next, target, index, pname, params);
}

static void REGAL_CALL http_glGetMapControlPointsNV(Layer *_layer, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapControlPointsNV","(", toString(target), ", ", index, ", ", toString(type), ", ", ustride, ", ", vstride, ", ", toString(packed), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapControlPointsNV(self->next, target, index, type, ustride, vstride, packed, points);
}

static void REGAL_CALL http_glGetMapParameterfvNV(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapParameterfvNV","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapParameterfvNV(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetMapParameterivNV(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMapParameterivNV","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMapParameterivNV(self->next, target, pname, params);
}

static void REGAL_CALL http_glMapControlPointsNV(Layer *_layer, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapControlPointsNV","(", toString(target), ", ", index, ", ", toString(type), ", ", ustride, ", ", vstride, ", ", uorder, ", ", vorder, ", ", toString(packed), ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapControlPointsNV(self->next, target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

static void REGAL_CALL http_glMapParameterfvNV(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapParameterfvNV","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapParameterfvNV(self->next, target, pname, params);
}

static void REGAL_CALL http_glMapParameterivNV(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapParameterivNV","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMapParameterivNV(self->next, target, pname, params);
}

// GL_NV_explicit_multisample

static void REGAL_CALL http_glGetMultisamplefvNV(Layer *_layer, GLenum pname, GLuint index, GLfloat *val)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMultisamplefvNV","(", toString(pname), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMultisamplefvNV(self->next, pname, index, val);
}

static void REGAL_CALL http_glSampleMaskIndexedNV(Layer *_layer, GLuint index, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleMaskIndexedNV","(", index, ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleMaskIndexedNV(self->next, index, mask);
}

static void REGAL_CALL http_glTexRenderbufferNV(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexRenderbufferNV","(", toString(target), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexRenderbufferNV(self->next, target, renderbuffer);
}

// GL_NV_fence

static void REGAL_CALL http_glDeleteFencesNV(Layer *_layer, GLsizei n, const GLuint *fences)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteFencesNV","(", n, ", ", print_array(fences,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteFencesNV(self->next, n, fences);
}

static void REGAL_CALL http_glFinishFenceNV(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinishFenceNV","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinishFenceNV(self->next, fence);
}

static void REGAL_CALL http_glGenFencesNV(Layer *_layer, GLsizei n, GLuint *fences)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenFencesNV","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenFencesNV(self->next, n, fences);
}

static void REGAL_CALL http_glGetFenceivNV(Layer *_layer, GLuint fence, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFenceivNV","(", fence, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFenceivNV(self->next, fence, pname, params);
}

static GLboolean REGAL_CALL http_glIsFenceNV(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsFenceNV","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsFenceNV(self->next, fence);
  return ret;
}

static void REGAL_CALL http_glSetFenceNV(Layer *_layer, GLuint fence, GLenum condition)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSetFenceNV","(", fence, ", ", toString(condition), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSetFenceNV(self->next, fence, condition);
}

static GLboolean REGAL_CALL http_glTestFenceNV(Layer *_layer, GLuint fence)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTestFenceNV","(", fence, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglTestFenceNV(self->next, fence);
  return ret;
}

// GL_NV_fragment_program

static void REGAL_CALL http_glGetProgramNamedParameterdvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramNamedParameterdvNV","(", id, ", ", len, ", ", print_array(name,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramNamedParameterdvNV(self->next, id, len, name, params);
}

static void REGAL_CALL http_glGetProgramNamedParameterfvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramNamedParameterfvNV","(", id, ", ", len, ", ", print_array(name,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramNamedParameterfvNV(self->next, id, len, name, params);
}

static void REGAL_CALL http_glProgramNamedParameter4dNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramNamedParameter4dNV","(", id, ", ", len, ", ", print_array(name,1), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramNamedParameter4dNV(self->next, id, len, name, x, y, z, w);
}

static void REGAL_CALL http_glProgramNamedParameter4dvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramNamedParameter4dvNV","(", id, ", ", len, ", ", print_array(name,1), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramNamedParameter4dvNV(self->next, id, len, name, v);
}

static void REGAL_CALL http_glProgramNamedParameter4fNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramNamedParameter4fNV","(", id, ", ", len, ", ", print_array(name,1), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramNamedParameter4fNV(self->next, id, len, name, x, y, z, w);
}

static void REGAL_CALL http_glProgramNamedParameter4fvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramNamedParameter4fvNV","(", id, ", ", len, ", ", print_array(name,1), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramNamedParameter4fvNV(self->next, id, len, name, v);
}

// GL_NV_framebuffer_blit

static void REGAL_CALL http_glBlitFramebufferNV(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlitFramebufferNV","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", GLblitFramebufferToString(mask), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlitFramebufferNV(self->next, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL http_glRenderbufferStorageMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageMultisampleCoverageNV","(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageMultisampleCoverageNV(self->next, target, coverageSamples, colorSamples, internalformat, width, height);
}

// GL_NV_geometry_program4

static void REGAL_CALL http_glProgramVertexLimitNV(Layer *_layer, GLenum target, GLint limit)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramVertexLimitNV","(", toString(target), ", ", limit, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramVertexLimitNV(self->next, target, limit);
}

// GL_NV_gpu_program4

static void REGAL_CALL http_glGetProgramEnvParameterIivNV(Layer *_layer, GLenum target, GLuint index, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramEnvParameterIivNV","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramEnvParameterIivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramEnvParameterIuivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramEnvParameterIuivNV","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramEnvParameterIuivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramLocalParameterIivNV(Layer *_layer, GLenum target, GLuint index, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramLocalParameterIivNV","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramLocalParameterIivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glGetProgramLocalParameterIuivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramLocalParameterIuivNV","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramLocalParameterIuivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramEnvParameterI4iNV(Layer *_layer, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameterI4iNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameterI4iNV(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramEnvParameterI4ivNV(Layer *_layer, GLenum target, GLuint index, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameterI4ivNV","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameterI4ivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramEnvParameterI4uiNV(Layer *_layer, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameterI4uiNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameterI4uiNV(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramEnvParameterI4uivNV(Layer *_layer, GLenum target, GLuint index, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParameterI4uivNV","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParameterI4uivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramEnvParametersI4ivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParametersI4ivNV","(", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParametersI4ivNV(self->next, target, index, count, params);
}

static void REGAL_CALL http_glProgramEnvParametersI4uivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramEnvParametersI4uivNV","(", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramEnvParametersI4uivNV(self->next, target, index, count, params);
}

static void REGAL_CALL http_glProgramLocalParameterI4iNV(Layer *_layer, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameterI4iNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameterI4iNV(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramLocalParameterI4ivNV(Layer *_layer, GLenum target, GLuint index, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameterI4ivNV","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameterI4ivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramLocalParameterI4uiNV(Layer *_layer, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameterI4uiNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameterI4uiNV(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramLocalParameterI4uivNV(Layer *_layer, GLenum target, GLuint index, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParameterI4uivNV","(", toString(target), ", ", index, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParameterI4uivNV(self->next, target, index, params);
}

static void REGAL_CALL http_glProgramLocalParametersI4ivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParametersI4ivNV","(", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParametersI4ivNV(self->next, target, index, count, params);
}

static void REGAL_CALL http_glProgramLocalParametersI4uivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramLocalParametersI4uivNV","(", toString(target), ", ", index, ", ", count, ", ", print_array(params,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramLocalParametersI4uivNV(self->next, target, index, count, params);
}

// GL_NV_gpu_shader5

static void REGAL_CALL http_glGetUniformi64vNV(Layer *_layer, GLuint program, GLint location, GLint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformi64vNV","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformi64vNV(self->next, program, location, params);
}

static void REGAL_CALL http_glProgramUniform1i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1i64NV","(", program, ", ", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1i64NV(self->next, program, location, x);
}

static void REGAL_CALL http_glProgramUniform1i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1i64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1i64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform1ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1ui64NV","(", program, ", ", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1ui64NV(self->next, program, location, x);
}

static void REGAL_CALL http_glProgramUniform1ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform1ui64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform1ui64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2i64NV","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2i64NV(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2i64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2i64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform2ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2ui64NV","(", program, ", ", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2ui64NV(self->next, program, location, x, y);
}

static void REGAL_CALL http_glProgramUniform2ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform2ui64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform2ui64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3i64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3i64NV(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3i64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3i64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform3ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3ui64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3ui64NV(self->next, program, location, x, y, z);
}

static void REGAL_CALL http_glProgramUniform3ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform3ui64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform3ui64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4i64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4i64NV(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4i64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4i64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glProgramUniform4ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4ui64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4ui64NV(self->next, program, location, x, y, z, w);
}

static void REGAL_CALL http_glProgramUniform4ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniform4ui64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniform4ui64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glUniform1i64NV(Layer *_layer, GLint location, GLint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1i64NV","(", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1i64NV(self->next, location, x);
}

static void REGAL_CALL http_glUniform1i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1i64vNV","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1i64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform1ui64NV(Layer *_layer, GLint location, GLuint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1ui64NV","(", location, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1ui64NV(self->next, location, x);
}

static void REGAL_CALL http_glUniform1ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform1ui64vNV","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform1ui64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2i64NV(Layer *_layer, GLint location, GLint64EXT x, GLint64EXT y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2i64NV","(", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2i64NV(self->next, location, x, y);
}

static void REGAL_CALL http_glUniform2i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2i64vNV","(", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2i64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform2ui64NV(Layer *_layer, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2ui64NV","(", location, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2ui64NV(self->next, location, x, y);
}

static void REGAL_CALL http_glUniform2ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform2ui64vNV","(", location, ", ", count, ", ", print_array(value,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform2ui64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3i64NV(Layer *_layer, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3i64NV","(", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3i64NV(self->next, location, x, y, z);
}

static void REGAL_CALL http_glUniform3i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3i64vNV","(", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3i64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform3ui64NV(Layer *_layer, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3ui64NV","(", location, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3ui64NV(self->next, location, x, y, z);
}

static void REGAL_CALL http_glUniform3ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform3ui64vNV","(", location, ", ", count, ", ", print_array(value,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform3ui64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4i64NV(Layer *_layer, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4i64NV","(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4i64NV(self->next, location, x, y, z, w);
}

static void REGAL_CALL http_glUniform4i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4i64vNV","(", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4i64vNV(self->next, location, count, value);
}

static void REGAL_CALL http_glUniform4ui64NV(Layer *_layer, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4ui64NV","(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4ui64NV(self->next, location, x, y, z, w);
}

static void REGAL_CALL http_glUniform4ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniform4ui64vNV","(", location, ", ", count, ", ", print_array(value,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniform4ui64vNV(self->next, location, count, value);
}

// GL_NV_half_float

static void REGAL_CALL http_glColor3hNV(Layer *_layer, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3hNV","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3hNV(self->next, red, green, blue);
}

static void REGAL_CALL http_glColor3hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3hvNV","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3hvNV(self->next, v);
}

static void REGAL_CALL http_glColor4hNV(Layer *_layer, GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4hNV","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4hNV(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glColor4hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4hvNV","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4hvNV(self->next, v);
}

static void REGAL_CALL http_glFogCoordhNV(Layer *_layer, GLhalfNV coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordhNV","(", coord, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordhNV(self->next, coord);
}

static void REGAL_CALL http_glFogCoordhvNV(Layer *_layer, const GLhalfNV *coord)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordhvNV","(", print_array(coord,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordhvNV(self->next, coord);
}

static void REGAL_CALL http_glMultiTexCoord1hNV(Layer *_layer, GLenum target, GLhalfNV s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1hNV","(", toString(target), ", ", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1hNV(self->next, target, s);
}

static void REGAL_CALL http_glMultiTexCoord1hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord1hvNV","(", toString(target), ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord1hvNV(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord2hNV(Layer *_layer, GLenum target, GLhalfNV s, GLhalfNV t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2hNV","(", toString(target), ", ", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2hNV(self->next, target, s, t);
}

static void REGAL_CALL http_glMultiTexCoord2hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord2hvNV","(", toString(target), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord2hvNV(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord3hNV(Layer *_layer, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3hNV","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3hNV(self->next, target, s, t, r);
}

static void REGAL_CALL http_glMultiTexCoord3hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord3hvNV","(", toString(target), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord3hvNV(self->next, target, v);
}

static void REGAL_CALL http_glMultiTexCoord4hNV(Layer *_layer, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4hNV","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4hNV(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glMultiTexCoord4hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4hvNV","(", toString(target), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4hvNV(self->next, target, v);
}

static void REGAL_CALL http_glNormal3hNV(Layer *_layer, GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3hNV","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3hNV(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glNormal3hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3hvNV","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3hvNV(self->next, v);
}

static void REGAL_CALL http_glSecondaryColor3hNV(Layer *_layer, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3hNV","(", red, ", ", green, ", ", blue, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3hNV(self->next, red, green, blue);
}

static void REGAL_CALL http_glSecondaryColor3hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColor3hvNV","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColor3hvNV(self->next, v);
}

static void REGAL_CALL http_glTexCoord1hNV(Layer *_layer, GLhalfNV s)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1hNV","(", s, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1hNV(self->next, s);
}

static void REGAL_CALL http_glTexCoord1hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord1hvNV","(", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord1hvNV(self->next, v);
}

static void REGAL_CALL http_glTexCoord2hNV(Layer *_layer, GLhalfNV s, GLhalfNV t)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2hNV","(", s, ", ", t, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2hNV(self->next, s, t);
}

static void REGAL_CALL http_glTexCoord2hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2hvNV","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2hvNV(self->next, v);
}

static void REGAL_CALL http_glTexCoord3hNV(Layer *_layer, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3hNV","(", s, ", ", t, ", ", r, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3hNV(self->next, s, t, r);
}

static void REGAL_CALL http_glTexCoord3hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord3hvNV","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord3hvNV(self->next, v);
}

static void REGAL_CALL http_glTexCoord4hNV(Layer *_layer, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4hNV","(", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4hNV(self->next, s, t, r, q);
}

static void REGAL_CALL http_glTexCoord4hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4hvNV","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4hvNV(self->next, v);
}

static void REGAL_CALL http_glVertex2hNV(Layer *_layer, GLhalfNV x, GLhalfNV y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2hNV","(", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2hNV(self->next, x, y);
}

static void REGAL_CALL http_glVertex2hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex2hvNV","(", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex2hvNV(self->next, v);
}

static void REGAL_CALL http_glVertex3hNV(Layer *_layer, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3hNV","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3hNV(self->next, x, y, z);
}

static void REGAL_CALL http_glVertex3hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex3hvNV","(", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex3hvNV(self->next, v);
}

static void REGAL_CALL http_glVertex4hNV(Layer *_layer, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4hNV","(", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4hNV(self->next, x, y, z, w);
}

static void REGAL_CALL http_glVertex4hvNV(Layer *_layer, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertex4hvNV","(", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertex4hvNV(self->next, v);
}

static void REGAL_CALL http_glVertexAttrib1hNV(Layer *_layer, GLuint index, GLhalfNV x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1hNV","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1hNV(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1hvNV","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1hvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2hNV(Layer *_layer, GLuint index, GLhalfNV x, GLhalfNV y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2hNV","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2hNV(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2hvNV","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2hvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3hNV(Layer *_layer, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3hNV","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3hNV(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3hvNV","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3hvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4hNV(Layer *_layer, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4hNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4hNV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4hvNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4hvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribs1hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs1hvNV","(", index, ", ", count, ", ", print_array(v,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs1hvNV(self->next, index, count, v);
}

static void REGAL_CALL http_glVertexAttribs2hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs2hvNV","(", index, ", ", count, ", ", print_array(v,count * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs2hvNV(self->next, index, count, v);
}

static void REGAL_CALL http_glVertexAttribs3hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs3hvNV","(", index, ", ", count, ", ", print_array(v,count * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs3hvNV(self->next, index, count, v);
}

static void REGAL_CALL http_glVertexAttribs4hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs4hvNV","(", index, ", ", count, ", ", print_array(v,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs4hvNV(self->next, index, count, v);
}

static void REGAL_CALL http_glVertexWeighthNV(Layer *_layer, GLhalfNV weight)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexWeighthNV","(", weight, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexWeighthNV(self->next, weight);
}

static void REGAL_CALL http_glVertexWeighthvNV(Layer *_layer, const GLhalfNV *weight)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexWeighthvNV","(", print_array(weight,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexWeighthvNV(self->next, weight);
}

// GL_NV_non_square_matrices

static void REGAL_CALL http_glUniformMatrix2x3fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2x3fvNV","(", location, ", ", count, ", ", toString(transpose), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2x3fvNV(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix2x4fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix2x4fvNV","(", location, ", ", count, ", ", toString(transpose), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix2x4fvNV(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3x2fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3x2fvNV","(", location, ", ", count, ", ", toString(transpose), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3x2fvNV(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix3x4fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix3x4fvNV","(", location, ", ", count, ", ", toString(transpose), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix3x4fvNV(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4x2fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4x2fvNV","(", location, ", ", count, ", ", toString(transpose), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4x2fvNV(self->next, location, count, transpose, value);
}

static void REGAL_CALL http_glUniformMatrix4x3fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformMatrix4x3fvNV","(", location, ", ", count, ", ", toString(transpose), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformMatrix4x3fvNV(self->next, location, count, transpose, value);
}

// GL_NV_occlusion_query

static void REGAL_CALL http_glBeginOcclusionQueryNV(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginOcclusionQueryNV","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginOcclusionQueryNV(self->next, id);
}

static void REGAL_CALL http_glDeleteOcclusionQueriesNV(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteOcclusionQueriesNV","(", n, ", ", print_array(ids,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteOcclusionQueriesNV(self->next, n, ids);
}

static void REGAL_CALL http_glEndOcclusionQueryNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndOcclusionQueryNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndOcclusionQueryNV(self->next);
}

static void REGAL_CALL http_glGenOcclusionQueriesNV(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenOcclusionQueriesNV","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenOcclusionQueriesNV(self->next, n, ids);
}

static void REGAL_CALL http_glGetOcclusionQueryivNV(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetOcclusionQueryivNV","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetOcclusionQueryivNV(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetOcclusionQueryuivNV(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetOcclusionQueryuivNV","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetOcclusionQueryuivNV(self->next, id, pname, params);
}

static GLboolean REGAL_CALL http_glIsOcclusionQueryNV(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsOcclusionQueryNV","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsOcclusionQueryNV(self->next, id);
  return ret;
}

// GL_NV_parameter_buffer_object

static void REGAL_CALL http_glProgramBufferParametersIivNV(Layer *_layer, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramBufferParametersIivNV","(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", print_array(params,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramBufferParametersIivNV(self->next, target, buffer, index, count, params);
}

static void REGAL_CALL http_glProgramBufferParametersIuivNV(Layer *_layer, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramBufferParametersIuivNV","(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", print_array(params,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramBufferParametersIuivNV(self->next, target, buffer, index, count, params);
}

static void REGAL_CALL http_glProgramBufferParametersfvNV(Layer *_layer, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramBufferParametersfvNV","(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", print_array(params,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramBufferParametersfvNV(self->next, target, buffer, index, count, params);
}

// GL_NV_path_rendering

static void REGAL_CALL http_glCopyPathNV(Layer *_layer, GLuint resultPath, GLuint srcPath)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyPathNV","(", resultPath, ", ", srcPath, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyPathNV(self->next, resultPath, srcPath);
}

static void REGAL_CALL http_glCoverFillPathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCoverFillPathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", print_optional(paths,Logging::pointers), ", ", pathBase, ", ", toString(coverMode), ", ", toString(transformType), ", ", print_optional(transformValues,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCoverFillPathInstancedNV(self->next, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

static void REGAL_CALL http_glCoverFillPathNV(Layer *_layer, GLuint path, GLenum coverMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCoverFillPathNV","(", path, ", ", toString(coverMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCoverFillPathNV(self->next, path, coverMode);
}

static void REGAL_CALL http_glCoverStrokePathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCoverStrokePathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", print_optional(paths,Logging::pointers), ", ", pathBase, ", ", toString(coverMode), ", ", toString(transformType), ", ", print_optional(transformValues,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCoverStrokePathInstancedNV(self->next, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

static void REGAL_CALL http_glCoverStrokePathNV(Layer *_layer, GLuint name, GLenum coverMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCoverStrokePathNV","(", name, ", ", toString(coverMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCoverStrokePathNV(self->next, name, coverMode);
}

static void REGAL_CALL http_glDeletePathsNV(Layer *_layer, GLuint path, GLsizei range)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeletePathsNV","(", path, ", ", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeletePathsNV(self->next, path, range);
}

static GLuint REGAL_CALL http_glGenPathsNV(Layer *_layer, GLsizei range)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenPathsNV","(", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGenPathsNV(self->next, range);
  return ret;
}

static void REGAL_CALL http_glGetPathColorGenfvNV(Layer *_layer, GLenum color, GLenum pname, GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathColorGenfvNV","(", toString(color), ", ", toString(pname), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathColorGenfvNV(self->next, color, pname, value);
}

static void REGAL_CALL http_glGetPathColorGenivNV(Layer *_layer, GLenum color, GLenum pname, GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathColorGenivNV","(", toString(color), ", ", toString(pname), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathColorGenivNV(self->next, color, pname, value);
}

static void REGAL_CALL http_glGetPathCommandsNV(Layer *_layer, GLuint name, GLubyte *commands)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathCommandsNV","(", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathCommandsNV(self->next, name, commands);
}

static void REGAL_CALL http_glGetPathCoordsNV(Layer *_layer, GLuint name, GLfloat *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathCoordsNV","(", name, ", ", print_optional(coords,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathCoordsNV(self->next, name, coords);
}

static void REGAL_CALL http_glGetPathDashArrayNV(Layer *_layer, GLuint name, GLfloat *dashArray)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathDashArrayNV","(", name, ", ", print_optional(dashArray,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathDashArrayNV(self->next, name, dashArray);
}

static GLfloat REGAL_CALL http_glGetPathLengthNV(Layer *_layer, GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  Http * self = static_cast<Http *>(_layer);
    GLfloat  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathLengthNV","(", path, ", ", startSegment, ", ", numSegments, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetPathLengthNV(self->next, path, startSegment, numSegments);
  return ret;
}

static void REGAL_CALL http_glGetPathMetricRangeNV(Layer *_layer, GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathMetricRangeNV","(", GLgetPathMetricsNVToString(metricQueryMask), ", ", fistPathName, ", ", numPaths, ", ", stride, ", ", print_optional(metrics,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathMetricRangeNV(self->next, metricQueryMask, fistPathName, numPaths, stride, metrics);
}

static void REGAL_CALL http_glGetPathMetricsNV(Layer *_layer, GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathMetricsNV","(", GLgetPathMetricsNVToString(metricQueryMask), ", ", numPaths, ", ", toString(pathNameType), ", ", print_optional(paths,Logging::pointers), ", ", pathBase, ", ", stride, ", ", print_optional(metrics,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathMetricsNV(self->next, metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

static void REGAL_CALL http_glGetPathParameterfvNV(Layer *_layer, GLuint name, GLenum param, GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathParameterfvNV","(", name, ", ", toString(param), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathParameterfvNV(self->next, name, param, value);
}

static void REGAL_CALL http_glGetPathParameterivNV(Layer *_layer, GLuint name, GLenum param, GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathParameterivNV","(", name, ", ", toString(param), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathParameterivNV(self->next, name, param, value);
}

static void REGAL_CALL http_glGetPathSpacingNV(Layer *_layer, GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathSpacingNV","(", toString(pathListMode), ", ", numPaths, ", ", toString(pathNameType), ", ", print_optional(paths,Logging::pointers), ", ", pathBase, ", ", advanceScale, ", ", kerningScale, ", ", toString(transformType), ", ", print_optional(returnedSpacing,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathSpacingNV(self->next, pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

static void REGAL_CALL http_glGetPathTexGenfvNV(Layer *_layer, GLenum texCoordSet, GLenum pname, GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathTexGenfvNV","(", toString(texCoordSet), ", ", toString(pname), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathTexGenfvNV(self->next, texCoordSet, pname, value);
}

static void REGAL_CALL http_glGetPathTexGenivNV(Layer *_layer, GLenum texCoordSet, GLenum pname, GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPathTexGenivNV","(", toString(texCoordSet), ", ", toString(pname), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPathTexGenivNV(self->next, texCoordSet, pname, value);
}

static void REGAL_CALL http_glInterpolatePathsNV(Layer *_layer, GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInterpolatePathsNV","(", resultPath, ", ", pathA, ", ", pathB, ", ", weight, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInterpolatePathsNV(self->next, resultPath, pathA, pathB, weight);
}

static GLboolean REGAL_CALL http_glIsPathNV(Layer *_layer, GLuint path)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsPathNV","(", path, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsPathNV(self->next, path);
  return ret;
}

static GLboolean REGAL_CALL http_glIsPointInFillPathNV(Layer *_layer, GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsPointInFillPathNV","(", path, ", ", mask, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsPointInFillPathNV(self->next, path, mask, x, y);
  return ret;
}

static GLboolean REGAL_CALL http_glIsPointInStrokePathNV(Layer *_layer, GLuint path, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsPointInStrokePathNV","(", path, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsPointInStrokePathNV(self->next, path, x, y);
  return ret;
}

static void REGAL_CALL http_glPathColorGenNV(Layer *_layer, GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathColorGenNV","(", toString(color), ", ", toString(genMode), ", ", toString(colorFormat), ", ", print_optional(coeffs,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathColorGenNV(self->next, color, genMode, colorFormat, coeffs);
}

static void REGAL_CALL http_glPathCommandsNV(Layer *_layer, GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathCommandsNV","(", path, ", ", numCommands, ", ", print_optional(commands,Logging::pointers), ", ", numCoords, ", ", toString(coordType), ", ", print_optional(coords,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathCommandsNV(self->next, path, numCommands, commands, numCoords, coordType, coords);
}

static void REGAL_CALL http_glPathCoordsNV(Layer *_layer, GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathCoordsNV","(", path, ", ", numCoords, ", ", toString(coordType), ", ", print_optional(coords,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathCoordsNV(self->next, path, numCoords, coordType, coords);
}

static void REGAL_CALL http_glPathCoverDepthFuncNV(Layer *_layer, GLenum zfunc)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathCoverDepthFuncNV","(", toString(zfunc), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathCoverDepthFuncNV(self->next, zfunc);
}

static void REGAL_CALL http_glPathDashArrayNV(Layer *_layer, GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathDashArrayNV","(", path, ", ", dashCount, ", ", print_optional(dashArray,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathDashArrayNV(self->next, path, dashCount, dashArray);
}

static void REGAL_CALL http_glPathFogGenNV(Layer *_layer, GLenum genMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathFogGenNV","(", toString(genMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathFogGenNV(self->next, genMode);
}

static void REGAL_CALL http_glPathGlyphRangeNV(Layer *_layer, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathGlyphRangeNV","(", firstPathName, ", ", toString(fontTarget), ", ", print_quote(reinterpret_cast<const char *>(fontName),'"'), ", ", GLpathGlyphsNVToString(fontStyle), ", ", firstGlyph, ", ", numGlyphs, ", ", toString(handleMissingGlyphs), ", ", pathParameterTemplate, ", ", emScale, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathGlyphRangeNV(self->next, firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

static void REGAL_CALL http_glPathGlyphsNV(Layer *_layer, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathGlyphsNV","(", firstPathName, ", ", toString(fontTarget), ", ", print_quote(reinterpret_cast<const char *>(fontName),'"'), ", ", GLpathGlyphsNVToString(fontStyle), ", ", numGlyphs, ", ", toString(type), ", ", print_optional(charcodes,Logging::pointers), ", ", toString(handleMissingGlyphs), ", ", pathParameterTemplate, ", ", emScale, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathGlyphsNV(self->next, firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

static void REGAL_CALL http_glPathParameterfNV(Layer *_layer, GLuint path, GLenum pname, GLfloat value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathParameterfNV","(", path, ", ", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathParameterfNV(self->next, path, pname, value);
}

static void REGAL_CALL http_glPathParameterfvNV(Layer *_layer, GLuint path, GLenum pname, const GLfloat *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathParameterfvNV","(", path, ", ", toString(pname), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathParameterfvNV(self->next, path, pname, value);
}

static void REGAL_CALL http_glPathParameteriNV(Layer *_layer, GLuint path, GLenum pname, GLint value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathParameteriNV","(", path, ", ", toString(pname), ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathParameteriNV(self->next, path, pname, value);
}

static void REGAL_CALL http_glPathParameterivNV(Layer *_layer, GLuint path, GLenum pname, const GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathParameterivNV","(", path, ", ", toString(pname), ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathParameterivNV(self->next, path, pname, value);
}

static void REGAL_CALL http_glPathStencilDepthOffsetNV(Layer *_layer, GLfloat factor, GLfloat units)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathStencilDepthOffsetNV","(", factor, ", ", units, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathStencilDepthOffsetNV(self->next, factor, units);
}

static void REGAL_CALL http_glPathStencilFuncNV(Layer *_layer, GLenum func, GLint ref, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathStencilFuncNV","(", toString(func), ", ", print_hex(ref), ", ", print_hex(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathStencilFuncNV(self->next, func, ref, mask);
}

static void REGAL_CALL http_glPathStringNV(Layer *_layer, GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathStringNV","(", path, ", ", toString(format), ", ", length, ", ", print_optional(pathString,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathStringNV(self->next, path, format, length, pathString);
}

static void REGAL_CALL http_glPathSubCommandsNV(Layer *_layer, GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathSubCommandsNV","(", path, ", ", commandStart, ", ", commandsToDelete, ", ", numCommands, ", ", print_optional(commands,Logging::pointers), ", ", numCoords, ", ", toString(coordType), ", ", print_optional(coords,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathSubCommandsNV(self->next, path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

static void REGAL_CALL http_glPathSubCoordsNV(Layer *_layer, GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathSubCoordsNV","(", path, ", ", coordStart, ", ", numCoords, ", ", toString(coordType), ", ", print_optional(coords,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathSubCoordsNV(self->next, path, coordStart, numCoords, coordType, coords);
}

static void REGAL_CALL http_glPathTexGenNV(Layer *_layer, GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPathTexGenNV","(", toString(texCoordSet), ", ", toString(genMode), ", ", components, ", ", print_optional(coeffs,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPathTexGenNV(self->next, texCoordSet, genMode, components, coeffs);
}

static GLboolean REGAL_CALL http_glPointAlongPathNV(Layer *_layer, GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointAlongPathNV","(", path, ", ", startSegment, ", ", numSegments, ", ", distance, ", ", print_optional(x,Logging::pointers), ", ", print_optional(y,Logging::pointers), ", ", print_optional(tangentX,Logging::pointers), ", ", print_optional(tangentY,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglPointAlongPathNV(self->next, path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  return ret;
}

static void REGAL_CALL http_glStencilFillPathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilFillPathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", print_optional(paths,Logging::pointers), ", ", pathBase, ", ", toString(fillMode), ", ", mask, ", ", toString(transformType), ", ", print_optional(transformValues,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilFillPathInstancedNV(self->next, numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

static void REGAL_CALL http_glStencilFillPathNV(Layer *_layer, GLuint path, GLenum fillMode, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilFillPathNV","(", path, ", ", toString(fillMode), ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilFillPathNV(self->next, path, fillMode, mask);
}

static void REGAL_CALL http_glStencilStrokePathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilStrokePathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", print_optional(paths,Logging::pointers), ", ", pathBase, ", ", reference, ", ", mask, ", ", toString(transformType), ", ", print_optional(transformValues,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilStrokePathInstancedNV(self->next, numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

static void REGAL_CALL http_glStencilStrokePathNV(Layer *_layer, GLuint path, GLint reference, GLuint mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStencilStrokePathNV","(", path, ", ", reference, ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStencilStrokePathNV(self->next, path, reference, mask);
}

static void REGAL_CALL http_glTransformPathNV(Layer *_layer, GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTransformPathNV","(", resultPath, ", ", srcPath, ", ", toString(transformType), ", ", print_optional(transformValues,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTransformPathNV(self->next, resultPath, srcPath, transformType, transformValues);
}

static void REGAL_CALL http_glWeightPathsNV(Layer *_layer, GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightPathsNV","(", resultPath, ", ", numPaths, ", ", print_optional(paths,Logging::pointers), ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightPathsNV(self->next, resultPath, numPaths, paths, weights);
}

// GL_NV_pixel_data_range

static void REGAL_CALL http_glFlushPixelDataRangeNV(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushPixelDataRangeNV","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushPixelDataRangeNV(self->next, target);
}

static void REGAL_CALL http_glPixelDataRangeNV(Layer *_layer, GLenum target, GLsizei size, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelDataRangeNV","(", toString(target), ", ", size, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelDataRangeNV(self->next, target, size, pointer);
}

// GL_NV_point_sprite

static void REGAL_CALL http_glPointParameteriNV(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameteriNV","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameteriNV(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameterivNV(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterivNV","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterivNV(self->next, pname, params);
}

// GL_NV_present_video

static void REGAL_CALL http_glGetVideoi64vNV(Layer *_layer, GLuint video_slot, GLenum pname, GLint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoi64vNV","(", video_slot, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoi64vNV(self->next, video_slot, pname, params);
}

static void REGAL_CALL http_glGetVideoivNV(Layer *_layer, GLuint video_slot, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoivNV","(", video_slot, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoivNV(self->next, video_slot, pname, params);
}

static void REGAL_CALL http_glGetVideoui64vNV(Layer *_layer, GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoui64vNV","(", video_slot, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoui64vNV(self->next, video_slot, pname, params);
}

static void REGAL_CALL http_glGetVideouivNV(Layer *_layer, GLuint video_slot, GLenum pname, GLuint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideouivNV","(", video_slot, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideouivNV(self->next, video_slot, pname, params);
}

static void REGAL_CALL http_glPresentFrameDualFillNV(Layer *_layer, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPresentFrameDualFillNV","(", video_slot, ", ", minPresentTime, ", ", beginPresentTimeId, ", ", presentDurationId, ", ", toString(type), ", ", toString(target0), ", ", fill0, ", ", toString(target1), ", ", fill1, ", ", toString(target2), ", ", fill2, ", ", toString(target3), ", ", fill3, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPresentFrameDualFillNV(self->next, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

static void REGAL_CALL http_glPresentFrameKeyedNV(Layer *_layer, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPresentFrameKeyedNV","(", video_slot, ", ", minPresentTime, ", ", beginPresentTimeId, ", ", presentDurationId, ", ", toString(type), ", ", toString(target0), ", ", fill0, ", ", key0, ", ", toString(target1), ", ", fill1, ", ", key1, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPresentFrameKeyedNV(self->next, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

// GL_NV_primitive_restart

static void REGAL_CALL http_glPrimitiveRestartIndexNV(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPrimitiveRestartIndexNV","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPrimitiveRestartIndexNV(self->next, index);
}

static void REGAL_CALL http_glPrimitiveRestartNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPrimitiveRestartNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPrimitiveRestartNV(self->next);
}

// GL_NV_read_buffer

static void REGAL_CALL http_glReadBufferNV(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadBufferNV","(", toString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadBufferNV(self->next, mode);
}

// GL_NV_register_combiners

static void REGAL_CALL http_glCombinerInputNV(Layer *_layer, GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerInputNV","(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(input), ", ", toString(mapping), ", ", toString(componentUsage), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerInputNV(self->next, stage, portion, variable, input, mapping, componentUsage);
}

static void REGAL_CALL http_glCombinerOutputNV(Layer *_layer, GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerOutputNV","(", toString(stage), ", ", toString(portion), ", ", toString(abOutput), ", ", toString(cdOutput), ", ", toString(sumOutput), ", ", toString(scale), ", ", toString(bias), ", ", toString(abDotProduct), ", ", toString(cdDotProduct), ", ", toString(muxSum), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerOutputNV(self->next, stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

static void REGAL_CALL http_glCombinerParameterfNV(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerParameterfNV","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerParameterfNV(self->next, pname, param);
}

static void REGAL_CALL http_glCombinerParameterfvNV(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerParameterfvNV","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerParameterfvNV(self->next, pname, params);
}

static void REGAL_CALL http_glCombinerParameteriNV(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerParameteriNV","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerParameteriNV(self->next, pname, param);
}

static void REGAL_CALL http_glCombinerParameterivNV(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerParameterivNV","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerParameterivNV(self->next, pname, params);
}

static void REGAL_CALL http_glFinalCombinerInputNV(Layer *_layer, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinalCombinerInputNV","(", toString(variable), ", ", toString(input), ", ", toString(mapping), ", ", toString(componentUsage), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinalCombinerInputNV(self->next, variable, input, mapping, componentUsage);
}

static void REGAL_CALL http_glGetCombinerInputParameterfvNV(Layer *_layer, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCombinerInputParameterfvNV","(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCombinerInputParameterfvNV(self->next, stage, portion, variable, pname, params);
}

static void REGAL_CALL http_glGetCombinerInputParameterivNV(Layer *_layer, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCombinerInputParameterivNV","(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCombinerInputParameterivNV(self->next, stage, portion, variable, pname, params);
}

static void REGAL_CALL http_glGetCombinerOutputParameterfvNV(Layer *_layer, GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCombinerOutputParameterfvNV","(", toString(stage), ", ", toString(portion), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCombinerOutputParameterfvNV(self->next, stage, portion, pname, params);
}

static void REGAL_CALL http_glGetCombinerOutputParameterivNV(Layer *_layer, GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCombinerOutputParameterivNV","(", toString(stage), ", ", toString(portion), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCombinerOutputParameterivNV(self->next, stage, portion, pname, params);
}

static void REGAL_CALL http_glGetFinalCombinerInputParameterfvNV(Layer *_layer, GLenum variable, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFinalCombinerInputParameterfvNV","(", toString(variable), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFinalCombinerInputParameterfvNV(self->next, variable, pname, params);
}

static void REGAL_CALL http_glGetFinalCombinerInputParameterivNV(Layer *_layer, GLenum variable, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFinalCombinerInputParameterivNV","(", toString(variable), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFinalCombinerInputParameterivNV(self->next, variable, pname, params);
}

// GL_NV_register_combiners2

static void REGAL_CALL http_glCombinerStageParameterfvNV(Layer *_layer, GLenum stage, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCombinerStageParameterfvNV","(", toString(stage), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCombinerStageParameterfvNV(self->next, stage, pname, params);
}

static void REGAL_CALL http_glGetCombinerStageParameterfvNV(Layer *_layer, GLenum stage, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetCombinerStageParameterfvNV","(", toString(stage), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetCombinerStageParameterfvNV(self->next, stage, pname, params);
}

// GL_NV_shader_buffer_load

static void REGAL_CALL http_glGetBufferParameterui64vNV(Layer *_layer, GLenum target, GLenum pname, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferParameterui64vNV","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferParameterui64vNV(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetIntegerui64vNV(Layer *_layer, GLenum target, GLuint64EXT *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetIntegerui64vNV","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetIntegerui64vNV(self->next, target, data);
}

static void REGAL_CALL http_glGetNamedBufferParameterui64vNV(Layer *_layer, GLuint buffer, GLenum pname, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetNamedBufferParameterui64vNV","(", buffer, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetNamedBufferParameterui64vNV(self->next, buffer, pname, params);
}

static void REGAL_CALL http_glGetUniformui64vNV(Layer *_layer, GLuint program, GLint location, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetUniformui64vNV","(", program, ", ", location, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetUniformui64vNV(self->next, program, location, params);
}

static GLboolean REGAL_CALL http_glIsBufferResidentNV(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsBufferResidentNV","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsBufferResidentNV(self->next, target);
  return ret;
}

static GLboolean REGAL_CALL http_glIsNamedBufferResidentNV(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsNamedBufferResidentNV","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsNamedBufferResidentNV(self->next, buffer);
  return ret;
}

static void REGAL_CALL http_glMakeBufferNonResidentNV(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeBufferNonResidentNV","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeBufferNonResidentNV(self->next, target);
}

static void REGAL_CALL http_glMakeBufferResidentNV(Layer *_layer, GLenum target, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeBufferResidentNV","(", toString(target), ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeBufferResidentNV(self->next, target, access);
}

static void REGAL_CALL http_glMakeNamedBufferNonResidentNV(Layer *_layer, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeNamedBufferNonResidentNV","(", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeNamedBufferNonResidentNV(self->next, buffer);
}

static void REGAL_CALL http_glMakeNamedBufferResidentNV(Layer *_layer, GLuint buffer, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMakeNamedBufferResidentNV","(", buffer, ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMakeNamedBufferResidentNV(self->next, buffer, access);
}

static void REGAL_CALL http_glProgramUniformui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformui64NV","(", program, ", ", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformui64NV(self->next, program, location, v0);
}

static void REGAL_CALL http_glProgramUniformui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramUniformui64vNV","(", program, ", ", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramUniformui64vNV(self->next, program, location, count, value);
}

static void REGAL_CALL http_glUniformui64NV(Layer *_layer, GLint location, GLuint64EXT v0)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformui64NV","(", location, ", ", v0, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformui64NV(self->next, location, v0);
}

static void REGAL_CALL http_glUniformui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUniformui64vNV","(", location, ", ", count, ", ", print_array(value,count), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglUniformui64vNV(self->next, location, count, value);
}

// GL_NV_texture_barrier

static void REGAL_CALL http_glTextureBarrierNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureBarrierNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureBarrierNV(self->next);
}

// GL_NV_texture_multisample

static void REGAL_CALL http_glTexImage2DMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage2DMultisampleCoverageNV","(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", toString(fixedSampleLocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage2DMultisampleCoverageNV(self->next, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL http_glTexImage3DMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage3DMultisampleCoverageNV","(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedSampleLocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage3DMultisampleCoverageNV(self->next, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

static void REGAL_CALL http_glTextureImage2DMultisampleCoverageNV(Layer *_layer, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage2DMultisampleCoverageNV","(", texture, ", ", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", toString(fixedSampleLocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage2DMultisampleCoverageNV(self->next, texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL http_glTextureImage2DMultisampleNV(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage2DMultisampleNV","(", texture, ", ", toString(target), ", ", samples, ", ", internalFormat, ", ", width, ", ", height, ", ", toString(fixedSampleLocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage2DMultisampleNV(self->next, texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL http_glTextureImage3DMultisampleCoverageNV(Layer *_layer, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage3DMultisampleCoverageNV","(", texture, ", ", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedSampleLocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage3DMultisampleCoverageNV(self->next, texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

static void REGAL_CALL http_glTextureImage3DMultisampleNV(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureImage3DMultisampleNV","(", texture, ", ", toString(target), ", ", samples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedSampleLocations), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureImage3DMultisampleNV(self->next, texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

// GL_NV_transform_feedback

static void REGAL_CALL http_glActiveVaryingNV(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glActiveVaryingNV","(", program, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglActiveVaryingNV(self->next, program, name);
}

static void REGAL_CALL http_glBeginTransformFeedbackNV(Layer *_layer, GLenum primitiveMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginTransformFeedbackNV","(", toString(primitiveMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginTransformFeedbackNV(self->next, primitiveMode);
}

static void REGAL_CALL http_glBindBufferBaseNV(Layer *_layer, GLenum target, GLuint index, GLuint buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferBaseNV","(", toString(target), ", ", index, ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferBaseNV(self->next, target, index, buffer);
}

static void REGAL_CALL http_glBindBufferOffsetNV(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferOffsetNV","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferOffsetNV(self->next, target, index, buffer, offset);
}

static void REGAL_CALL http_glBindBufferRangeNV(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindBufferRangeNV","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindBufferRangeNV(self->next, target, index, buffer, offset, size);
}

static void REGAL_CALL http_glEndTransformFeedbackNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndTransformFeedbackNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndTransformFeedbackNV(self->next);
}

static void REGAL_CALL http_glGetActiveVaryingNV(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetActiveVaryingNV","(", program, ", ", index, ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetActiveVaryingNV(self->next, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL http_glGetTransformFeedbackVaryingNV(Layer *_layer, GLuint program, GLuint index, GLint *location)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTransformFeedbackVaryingNV","(", program, ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTransformFeedbackVaryingNV(self->next, program, index, location);
}

static GLint REGAL_CALL http_glGetVaryingLocationNV(Layer *_layer, GLuint program, const GLchar *name)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVaryingLocationNV","(", program, ", ", print_quote(name,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetVaryingLocationNV(self->next, program, name);
  return ret;
}

static void REGAL_CALL http_glTransformFeedbackAttribsNV(Layer *_layer, GLuint count, const GLint *attribs, GLenum bufferMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTransformFeedbackAttribsNV","(", count, ", ", print_optional(attribs,Logging::pointers), ", ", toString(bufferMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTransformFeedbackAttribsNV(self->next, count, attribs, bufferMode);
}

static void REGAL_CALL http_glTransformFeedbackVaryingsNV(Layer *_layer, GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTransformFeedbackVaryingsNV","(", program, ", ", count, ", ", print_array(locations,count), ", ", toString(bufferMode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTransformFeedbackVaryingsNV(self->next, program, count, locations, bufferMode);
}

// GL_NV_transform_feedback2

static void REGAL_CALL http_glBindTransformFeedbackNV(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindTransformFeedbackNV","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindTransformFeedbackNV(self->next, target, id);
}

static void REGAL_CALL http_glDeleteTransformFeedbacksNV(Layer *_layer, GLsizei n, const GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteTransformFeedbacksNV","(", n, ", ", print_array(ids,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteTransformFeedbacksNV(self->next, n, ids);
}

static void REGAL_CALL http_glDrawTransformFeedbackNV(Layer *_layer, GLenum mode, GLuint name)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawTransformFeedbackNV","(", GLmodeToString(mode), ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawTransformFeedbackNV(self->next, mode, name);
}

static void REGAL_CALL http_glGenTransformFeedbacksNV(Layer *_layer, GLsizei n, GLuint *ids)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenTransformFeedbacksNV","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenTransformFeedbacksNV(self->next, n, ids);
}

static GLboolean REGAL_CALL http_glIsTransformFeedbackNV(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsTransformFeedbackNV","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsTransformFeedbackNV(self->next, id);
  return ret;
}

static void REGAL_CALL http_glPauseTransformFeedbackNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPauseTransformFeedbackNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPauseTransformFeedbackNV(self->next);
}

static void REGAL_CALL http_glResumeTransformFeedbackNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glResumeTransformFeedbackNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglResumeTransformFeedbackNV(self->next);
}

// GL_NV_vdpau_interop

static void REGAL_CALL http_glVDPAUFiniNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUFiniNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUFiniNV(self->next);
}

static void REGAL_CALL http_glVDPAUGetSurfaceivNV(Layer *_layer, GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUGetSurfaceivNV","(", surface, ", ", toString(pname), ", ", bufSize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUGetSurfaceivNV(self->next, surface, pname, bufSize, length, values);
}

static void REGAL_CALL http_glVDPAUInitNV(Layer *_layer, const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUInitNV","(", print_optional(vdpDevice,Logging::pointers), ", ", print_optional(getProcAddress,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUInitNV(self->next, vdpDevice, getProcAddress);
}

static GLboolean REGAL_CALL http_glVDPAUIsSurfaceNV(Layer *_layer, GLvdpauSurfaceNV surface)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUIsSurfaceNV","(", surface, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglVDPAUIsSurfaceNV(self->next, surface);
  return ret;
}

static void REGAL_CALL http_glVDPAUMapSurfacesNV(Layer *_layer, GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUMapSurfacesNV","(", numSurfaces, ", ", print_array(surfaces,numSurfaces), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUMapSurfacesNV(self->next, numSurfaces, surfaces);
}

static GLvdpauSurfaceNV REGAL_CALL http_glVDPAURegisterOutputSurfaceNV(Layer *_layer, const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  Http * self = static_cast<Http *>(_layer);
    GLvdpauSurfaceNV  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAURegisterOutputSurfaceNV","(", print_optional(vdpSurface,Logging::pointers), ", ", toString(target), ", ", numTextureNames, ", ", print_array(textureNames,numTextureNames), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglVDPAURegisterOutputSurfaceNV(self->next, vdpSurface, target, numTextureNames, textureNames);
  return ret;
}

static GLvdpauSurfaceNV REGAL_CALL http_glVDPAURegisterVideoSurfaceNV(Layer *_layer, const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  Http * self = static_cast<Http *>(_layer);
    GLvdpauSurfaceNV  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAURegisterVideoSurfaceNV","(", print_optional(vdpSurface,Logging::pointers), ", ", toString(target), ", ", numTextureNames, ", ", print_array(textureNames,numTextureNames), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglVDPAURegisterVideoSurfaceNV(self->next, vdpSurface, target, numTextureNames, textureNames);
  return ret;
}

static void REGAL_CALL http_glVDPAUSurfaceAccessNV(Layer *_layer, GLvdpauSurfaceNV surface, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUSurfaceAccessNV","(", surface, ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUSurfaceAccessNV(self->next, surface, access);
}

static void REGAL_CALL http_glVDPAUUnmapSurfacesNV(Layer *_layer, GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUUnmapSurfacesNV","(", numSurfaces, ", ", print_array(surfaces,numSurfaces), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUUnmapSurfacesNV(self->next, numSurfaces, surfaces);
}

static void REGAL_CALL http_glVDPAUUnregisterSurfaceNV(Layer *_layer, GLvdpauSurfaceNV surface)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVDPAUUnregisterSurfaceNV","(", surface, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVDPAUUnregisterSurfaceNV(self->next, surface);
}

// GL_NV_vertex_array_range

static void REGAL_CALL http_glFlushVertexArrayRangeNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushVertexArrayRangeNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushVertexArrayRangeNV(self->next);
}

static void REGAL_CALL http_glVertexArrayRangeNV(Layer *_layer, GLsizei size, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexArrayRangeNV","(", size, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexArrayRangeNV(self->next, size, pointer);
}

// GL_NV_vertex_attrib_integer_64bit

static void REGAL_CALL http_glGetVertexAttribLi64vNV(Layer *_layer, GLuint index, GLenum pname, GLint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribLi64vNV","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribLi64vNV(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribLui64vNV(Layer *_layer, GLuint index, GLenum pname, GLuint64EXT *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribLui64vNV","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribLui64vNV(self->next, index, pname, params);
}

static void REGAL_CALL http_glVertexAttribL1i64NV(Layer *_layer, GLuint index, GLint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1i64NV","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1i64NV(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribL1i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1i64vNV","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1i64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL1ui64NV(Layer *_layer, GLuint index, GLuint64EXT x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1ui64NV","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1ui64NV(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttribL1ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL1ui64vNV","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL1ui64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL2i64NV(Layer *_layer, GLuint index, GLint64EXT x, GLint64EXT y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2i64NV","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2i64NV(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribL2i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2i64vNV","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2i64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL2ui64NV(Layer *_layer, GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2ui64NV","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2ui64NV(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttribL2ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL2ui64vNV","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL2ui64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL3i64NV(Layer *_layer, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3i64NV","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3i64NV(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribL3i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3i64vNV","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3i64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL3ui64NV(Layer *_layer, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3ui64NV","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3ui64NV(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttribL3ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL3ui64vNV","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL3ui64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL4i64NV(Layer *_layer, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4i64NV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4i64NV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribL4i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4i64vNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4i64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribL4ui64NV(Layer *_layer, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4ui64NV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4ui64NV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttribL4ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribL4ui64vNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribL4ui64vNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribLFormatNV(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribLFormatNV","(", index, ", ", size, ", ", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribLFormatNV(self->next, index, size, type, stride);
}

// GL_NV_vertex_buffer_unified_memory

static void REGAL_CALL http_glBufferAddressRangeNV(Layer *_layer, GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBufferAddressRangeNV","(", toString(pname), ", ", index, ", ", address, ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBufferAddressRangeNV(self->next, pname, index, address, length);
}

static void REGAL_CALL http_glColorFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorFormatNV(self->next, size, type, stride);
}

static void REGAL_CALL http_glEdgeFlagFormatNV(Layer *_layer, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEdgeFlagFormatNV","(", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEdgeFlagFormatNV(self->next, stride);
}

static void REGAL_CALL http_glFogCoordFormatNV(Layer *_layer, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogCoordFormatNV","(", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogCoordFormatNV(self->next, type, stride);
}

static void REGAL_CALL http_glGetIntegerui64i_vNV(Layer *_layer, GLenum target, GLuint index, GLuint64EXT *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetIntegerui64i_vNV","(", toString(target), ", ", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetIntegerui64i_vNV(self->next, target, index, data);
}

static void REGAL_CALL http_glIndexFormatNV(Layer *_layer, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIndexFormatNV","(", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIndexFormatNV(self->next, type, stride);
}

static void REGAL_CALL http_glNormalFormatNV(Layer *_layer, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormalFormatNV","(", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormalFormatNV(self->next, type, stride);
}

static void REGAL_CALL http_glSecondaryColorFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSecondaryColorFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSecondaryColorFormatNV(self->next, size, type, stride);
}

static void REGAL_CALL http_glTexCoordFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoordFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoordFormatNV(self->next, size, type, stride);
}

static void REGAL_CALL http_glVertexAttribFormatNV(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribFormatNV","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribFormatNV(self->next, index, size, type, normalized, stride);
}

static void REGAL_CALL http_glVertexAttribIFormatNV(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribIFormatNV","(", index, ", ", size, ", ", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribIFormatNV(self->next, index, size, type, stride);
}

static void REGAL_CALL http_glVertexFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexFormatNV(self->next, size, type, stride);
}

// GL_NV_vertex_program

static GLboolean REGAL_CALL http_glAreProgramsResidentNV(Layer *_layer, GLsizei n, const GLuint *programs, GLboolean *residences)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAreProgramsResidentNV","(", n, ", ", print_array(programs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglAreProgramsResidentNV(self->next, n, programs, residences);
  return ret;
}

static void REGAL_CALL http_glBindProgramNV(Layer *_layer, GLenum target, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindProgramNV","(", toString(target), ", ", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindProgramNV(self->next, target, id);
}

static void REGAL_CALL http_glDeleteProgramsNV(Layer *_layer, GLsizei n, const GLuint *programs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteProgramsNV","(", n, ", ", print_array(programs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteProgramsNV(self->next, n, programs);
}

static void REGAL_CALL http_glExecuteProgramNV(Layer *_layer, GLenum target, GLuint id, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExecuteProgramNV","(", toString(target), ", ", id, ", ", print_array(params,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExecuteProgramNV(self->next, target, id, params);
}

static void REGAL_CALL http_glGenProgramsNV(Layer *_layer, GLsizei n, GLuint *programs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenProgramsNV","(", n, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenProgramsNV(self->next, n, programs);
}

static void REGAL_CALL http_glGetProgramParameterdvNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramParameterdvNV","(", toString(target), ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramParameterdvNV(self->next, target, index, pname, params);
}

static void REGAL_CALL http_glGetProgramParameterfvNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramParameterfvNV","(", toString(target), ", ", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramParameterfvNV(self->next, target, index, pname, params);
}

static void REGAL_CALL http_glGetProgramStringNV(Layer *_layer, GLuint id, GLenum pname, GLubyte *program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramStringNV","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramStringNV(self->next, id, pname, program);
}

static void REGAL_CALL http_glGetProgramivNV(Layer *_layer, GLuint id, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramivNV","(", id, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramivNV(self->next, id, pname, params);
}

static void REGAL_CALL http_glGetTrackMatrixivNV(Layer *_layer, GLenum target, GLuint address, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTrackMatrixivNV","(", toString(target), ", ", address, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTrackMatrixivNV(self->next, target, address, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribPointervNV(Layer *_layer, GLuint index, GLenum pname, GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribPointervNV","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribPointervNV(self->next, index, pname, pointer);
}

static void REGAL_CALL http_glGetVertexAttribdvNV(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribdvNV","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribdvNV(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribfvNV(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribfvNV","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribfvNV(self->next, index, pname, params);
}

static void REGAL_CALL http_glGetVertexAttribivNV(Layer *_layer, GLuint index, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVertexAttribivNV","(", index, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVertexAttribivNV(self->next, index, pname, params);
}

static GLboolean REGAL_CALL http_glIsProgramNV(Layer *_layer, GLuint id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsProgramNV","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsProgramNV(self->next, id);
  return ret;
}

static void REGAL_CALL http_glLoadProgramNV(Layer *_layer, GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadProgramNV","(", toString(target), ", ", id, ", ", len, ", ", print_array(program,len), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadProgramNV(self->next, target, id, len, program);
}

static void REGAL_CALL http_glProgramParameter4dNV(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameter4dNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameter4dNV(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramParameter4dvNV(Layer *_layer, GLenum target, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameter4dvNV","(", toString(target), ", ", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameter4dvNV(self->next, target, index, v);
}

static void REGAL_CALL http_glProgramParameter4fNV(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameter4fNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameter4fNV(self->next, target, index, x, y, z, w);
}

static void REGAL_CALL http_glProgramParameter4fvNV(Layer *_layer, GLenum target, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameter4fvNV","(", toString(target), ", ", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameter4fvNV(self->next, target, index, v);
}

static void REGAL_CALL http_glProgramParameters4dvNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameters4dvNV","(", toString(target), ", ", index, ", ", count, ", ", print_array(v,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameters4dvNV(self->next, target, index, count, v);
}

static void REGAL_CALL http_glProgramParameters4fvNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramParameters4fvNV","(", toString(target), ", ", index, ", ", count, ", ", print_array(v,count * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramParameters4fvNV(self->next, target, index, count, v);
}

static void REGAL_CALL http_glRequestResidentProgramsNV(Layer *_layer, GLsizei n, const GLuint *programs)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRequestResidentProgramsNV","(", n, ", ", print_array(programs,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRequestResidentProgramsNV(self->next, n, programs);
}

static void REGAL_CALL http_glTrackMatrixNV(Layer *_layer, GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTrackMatrixNV","(", toString(target), ", ", address, ", ", toString(matrix), ", ", toString(transform), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTrackMatrixNV(self->next, target, address, matrix, transform);
}

static void REGAL_CALL http_glVertexAttrib1dNV(Layer *_layer, GLuint index, GLdouble x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1dNV","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1dNV(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1dvNV(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1dvNV","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1dvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib1fNV(Layer *_layer, GLuint index, GLfloat x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1fNV","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1fNV(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1fvNV(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1fvNV","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1fvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib1sNV(Layer *_layer, GLuint index, GLshort x)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1sNV","(", index, ", ", x, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1sNV(self->next, index, x);
}

static void REGAL_CALL http_glVertexAttrib1svNV(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib1svNV","(", index, ", ", print_array(v,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib1svNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2dNV(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2dNV","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2dNV(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2dvNV(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2dvNV","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2dvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2fNV(Layer *_layer, GLuint index, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2fNV","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2fNV(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2fvNV(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2fvNV","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2fvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib2sNV(Layer *_layer, GLuint index, GLshort x, GLshort y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2sNV","(", index, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2sNV(self->next, index, x, y);
}

static void REGAL_CALL http_glVertexAttrib2svNV(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib2svNV","(", index, ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib2svNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3dNV(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3dNV","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3dNV(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3dvNV(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3dvNV","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3dvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3fNV(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3fNV","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3fNV(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3fvNV(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3fvNV","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3fvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib3sNV(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3sNV","(", index, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3sNV(self->next, index, x, y, z);
}

static void REGAL_CALL http_glVertexAttrib3svNV(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib3svNV","(", index, ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib3svNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4dNV(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4dNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4dNV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4dvNV(Layer *_layer, GLuint index, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4dvNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4dvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4fNV(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4fNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4fNV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4fvNV(Layer *_layer, GLuint index, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4fvNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4fvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4sNV(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4sNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4sNV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4svNV(Layer *_layer, GLuint index, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4svNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4svNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttrib4ubNV(Layer *_layer, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4ubNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4ubNV(self->next, index, x, y, z, w);
}

static void REGAL_CALL http_glVertexAttrib4ubvNV(Layer *_layer, GLuint index, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttrib4ubvNV","(", index, ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttrib4ubvNV(self->next, index, v);
}

static void REGAL_CALL http_glVertexAttribPointerNV(Layer *_layer, GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribPointerNV","(", index, ", ", fsize, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribPointerNV(self->next, index, fsize, type, stride, pointer);
}

static void REGAL_CALL http_glVertexAttribs1dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs1dvNV","(", index, ", ", n, ", ", print_array(v,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs1dvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs1fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs1fvNV","(", index, ", ", n, ", ", print_array(v,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs1fvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs1svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs1svNV","(", index, ", ", n, ", ", print_array(v,n), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs1svNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs2dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs2dvNV","(", index, ", ", n, ", ", print_array(v,n * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs2dvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs2fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs2fvNV","(", index, ", ", n, ", ", print_array(v,n * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs2fvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs2svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs2svNV","(", index, ", ", n, ", ", print_array(v,n * 2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs2svNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs3dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs3dvNV","(", index, ", ", n, ", ", print_array(v,n * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs3dvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs3fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs3fvNV","(", index, ", ", n, ", ", print_array(v,n * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs3fvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs3svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs3svNV","(", index, ", ", n, ", ", print_array(v,n * 3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs3svNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs4dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs4dvNV","(", index, ", ", n, ", ", print_array(v,n * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs4dvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs4fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs4fvNV","(", index, ", ", n, ", ", print_array(v,n * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs4fvNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs4svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs4svNV","(", index, ", ", n, ", ", print_array(v,n * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs4svNV(self->next, index, n, v);
}

static void REGAL_CALL http_glVertexAttribs4ubvNV(Layer *_layer, GLuint index, GLsizei n, const GLubyte *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVertexAttribs4ubvNV","(", index, ", ", n, ", ", print_array(v,n * 4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVertexAttribs4ubvNV(self->next, index, n, v);
}

// GL_NV_video_capture

static void REGAL_CALL http_glBeginVideoCaptureNV(Layer *_layer, GLuint video_capture_slot)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBeginVideoCaptureNV","(", video_capture_slot, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBeginVideoCaptureNV(self->next, video_capture_slot);
}

static void REGAL_CALL http_glBindVideoCaptureStreamBufferNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVideoCaptureStreamBufferNV","(", video_capture_slot, ", ", stream, ", ", toString(frame_region), ", ", offset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVideoCaptureStreamBufferNV(self->next, video_capture_slot, stream, frame_region, offset);
}

static void REGAL_CALL http_glBindVideoCaptureStreamTextureNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVideoCaptureStreamTextureNV","(", video_capture_slot, ", ", stream, ", ", toString(frame_region), ", ", toString(target), ", ", texture, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVideoCaptureStreamTextureNV(self->next, video_capture_slot, stream, frame_region, target, texture);
}

static void REGAL_CALL http_glEndVideoCaptureNV(Layer *_layer, GLuint video_capture_slot)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndVideoCaptureNV","(", video_capture_slot, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndVideoCaptureNV(self->next, video_capture_slot);
}

static void REGAL_CALL http_glGetVideoCaptureStreamdvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoCaptureStreamdvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoCaptureStreamdvNV(self->next, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL http_glGetVideoCaptureStreamfvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoCaptureStreamfvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoCaptureStreamfvNV(self->next, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL http_glGetVideoCaptureStreamivNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoCaptureStreamivNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoCaptureStreamivNV(self->next, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL http_glGetVideoCaptureivNV(Layer *_layer, GLuint video_capture_slot, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetVideoCaptureivNV","(", video_capture_slot, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetVideoCaptureivNV(self->next, video_capture_slot, pname, params);
}

static GLenum REGAL_CALL http_glVideoCaptureNV(Layer *_layer, GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVideoCaptureNV","(", video_capture_slot, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglVideoCaptureNV(self->next, video_capture_slot, sequence_num, capture_time);
  return ret;
}

static void REGAL_CALL http_glVideoCaptureStreamParameterdvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVideoCaptureStreamParameterdvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVideoCaptureStreamParameterdvNV(self->next, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL http_glVideoCaptureStreamParameterfvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVideoCaptureStreamParameterfvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVideoCaptureStreamParameterfvNV(self->next, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL http_glVideoCaptureStreamParameterivNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glVideoCaptureStreamParameterivNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglVideoCaptureStreamParameterivNV(self->next, video_capture_slot, stream, pname, params);
}

// GL_OES_blend_equation_separate

static void REGAL_CALL http_glBlendEquationSeparateOES(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationSeparateOES","(", GLmodeToString(modeRGB), ", ", GLmodeToString(modeAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationSeparateOES(self->next, modeRGB, modeAlpha);
}

// GL_OES_blend_func_separate

static void REGAL_CALL http_glBlendFuncSeparateOES(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendFuncSeparateOES","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendFuncSeparateOES(self->next, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_OES_blend_subtract

static void REGAL_CALL http_glBlendEquationOES(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBlendEquationOES","(", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBlendEquationOES(self->next, mode);
}

// GL_OES_framebuffer_object

static void REGAL_CALL http_glBindFramebufferOES(Layer *_layer, GLenum target, GLuint framebuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindFramebufferOES","(", toString(target), ", ", framebuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindFramebufferOES(self->next, target, framebuffer);
}

static void REGAL_CALL http_glBindRenderbufferOES(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindRenderbufferOES","(", toString(target), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindRenderbufferOES(self->next, target, renderbuffer);
}

static GLenum REGAL_CALL http_glCheckFramebufferStatusOES(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCheckFramebufferStatusOES","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglCheckFramebufferStatusOES(self->next, target);
  return ret;
}

static void REGAL_CALL http_glDeleteFramebuffersOES(Layer *_layer, GLsizei n, const GLuint *framebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteFramebuffersOES","(", n, ", ", print_optional(framebuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteFramebuffersOES(self->next, n, framebuffers);
}

static void REGAL_CALL http_glDeleteRenderbuffersOES(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteRenderbuffersOES","(", n, ", ", print_optional(renderbuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteRenderbuffersOES(self->next, n, renderbuffers);
}

static void REGAL_CALL http_glFramebufferRenderbufferOES(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferRenderbufferOES","(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferRenderbufferOES(self->next, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL http_glFramebufferTexture2DOES(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture2DOES","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture2DOES(self->next, target, attachment, textarget, texture, level);
}

static void REGAL_CALL http_glGenFramebuffersOES(Layer *_layer, GLsizei n, GLuint *framebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenFramebuffersOES","(", n, ", ", print_optional(framebuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenFramebuffersOES(self->next, n, framebuffers);
}

static void REGAL_CALL http_glGenRenderbuffersOES(Layer *_layer, GLsizei n, GLuint *renderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenRenderbuffersOES","(", n, ", ", print_optional(renderbuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenRenderbuffersOES(self->next, n, renderbuffers);
}

static void REGAL_CALL http_glGenerateMipmapOES(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenerateMipmapOES","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenerateMipmapOES(self->next, target);
}

static void REGAL_CALL http_glGetFramebufferAttachmentParameterivOES(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFramebufferAttachmentParameterivOES","(", toString(target), ", ", toString(attachment), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFramebufferAttachmentParameterivOES(self->next, target, attachment, pname, params);
}

static void REGAL_CALL http_glGetRenderbufferParameterivOES(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetRenderbufferParameterivOES","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetRenderbufferParameterivOES(self->next, target, pname, params);
}

static GLboolean REGAL_CALL http_glIsFramebufferOES(Layer *_layer, GLuint framebuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsFramebufferOES","(", framebuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsFramebufferOES(self->next, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL http_glIsRenderbufferOES(Layer *_layer, GLuint renderbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsRenderbufferOES","(", renderbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsRenderbufferOES(self->next, renderbuffer);
  return ret;
}

static void REGAL_CALL http_glRenderbufferStorageOES(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRenderbufferStorageOES","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRenderbufferStorageOES(self->next, target, internalformat, width, height);
}

// GL_OES_get_program_binary

static void REGAL_CALL http_glGetProgramBinaryOES(Layer *_layer, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetProgramBinaryOES","(", program, ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_optional(binaryFormat,Logging::pointers), ", ", print_optional(binary,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetProgramBinaryOES(self->next, program, bufSize, length, binaryFormat, binary);
}

static void REGAL_CALL http_glProgramBinaryOES(Layer *_layer, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glProgramBinaryOES","(", program, ", ", toString(binaryFormat), ", ", print_optional(binary,Logging::pointers), ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglProgramBinaryOES(self->next, program, binaryFormat, binary, length);
}

// GL_OES_mapbuffer

static void REGAL_CALL http_glGetBufferPointervOES(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetBufferPointervOES","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetBufferPointervOES(self->next, target, pname, params);
}

static GLvoid *REGAL_CALL http_glMapBufferOES(Layer *_layer, GLenum target, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
    GLvoid * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMapBufferOES","(", toString(target), ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglMapBufferOES(self->next, target, access);
  return ret;
}

static GLboolean REGAL_CALL http_glUnmapBufferOES(Layer *_layer, GLenum target)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glUnmapBufferOES","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglUnmapBufferOES(self->next, target);
  return ret;
}

// GL_OES_matrix_palette

static void REGAL_CALL http_glCurrentPaletteMatrixOES(Layer *_layer, GLuint index)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCurrentPaletteMatrixOES","(", index, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCurrentPaletteMatrixOES(self->next, index);
}

static void REGAL_CALL http_glMatrixIndexPointerOES(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMatrixIndexPointerOES","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMatrixIndexPointerOES(self->next, size, type, stride, pointer);
}

static void REGAL_CALL http_glWeightPointerOES(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glWeightPointerOES","(", size, ", ", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglWeightPointerOES(self->next, size, type, stride, pointer);
}

// GL_OES_single_precision

static void REGAL_CALL http_glClearDepthfOES(Layer *_layer, GLclampd depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearDepthfOES","(", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearDepthfOES(self->next, depth);
}

static void REGAL_CALL http_glClipPlanefOES(Layer *_layer, GLenum plane, const GLfloat *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClipPlanefOES","(", toString(plane), ", ", print_optional(equation,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClipPlanefOES(self->next, plane, equation);
}

static void REGAL_CALL http_glDepthRangefOES(Layer *_layer, GLclampf n, GLclampf f)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRangefOES","(", n, ", ", f, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRangefOES(self->next, n, f);
}

static void REGAL_CALL http_glFrustumfOES(Layer *_layer, GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrustumfOES","(", l, ", ", r, ", ", b, ", ", t, ", ", n, ", ", f, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrustumfOES(self->next, l, r, b, t, n, f);
}

static void REGAL_CALL http_glGetClipPlanefOES(Layer *_layer, GLenum plane, GLfloat *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetClipPlanefOES","(", toString(plane), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetClipPlanefOES(self->next, plane, equation);
}

static void REGAL_CALL http_glOrthofOES(Layer *_layer, GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glOrthofOES","(", l, ", ", r, ", ", b, ", ", t, ", ", n, ", ", f, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglOrthofOES(self->next, l, r, b, t, n, f);
}

// GL_OES_texture_3D

static void REGAL_CALL http_glCompressedTexImage3DOES(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexImage3DOES","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexImage3DOES(self->next, target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL http_glCompressedTexSubImage3DOES(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCompressedTexSubImage3DOES","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", imageSize, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCompressedTexSubImage3DOES(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL http_glCopyTexSubImage3DOES(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyTexSubImage3DOES","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyTexSubImage3DOES(self->next, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL http_glFramebufferTexture3DOES(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFramebufferTexture3DOES","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFramebufferTexture3DOES(self->next, target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL http_glTexImage3DOES(Layer *_layer, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage3DOES","(", toString(target), ", ", level, ", ", toString(internalFormat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage3DOES(self->next, target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL http_glTexSubImage3DOES(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage3DOES","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage3DOES(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_OES_texture_cube_map

static void REGAL_CALL http_glGetTexGenfvOES(Layer *_layer, GLenum coord, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexGenfvOES","(", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexGenfvOES(self->next, coord, pname, params);
}

static void REGAL_CALL http_glGetTexGenivOES(Layer *_layer, GLenum coord, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexGenivOES","(", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexGenivOES(self->next, coord, pname, params);
}

static void REGAL_CALL http_glGetTexGenxvOES(Layer *_layer, GLenum coord, GLenum pname, GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexGenxvOES","(", toString(coord), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexGenxvOES(self->next, coord, pname, params);
}

static void REGAL_CALL http_glTexGenfOES(Layer *_layer, GLenum coord, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenfOES","(", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenfOES(self->next, coord, pname, param);
}

static void REGAL_CALL http_glTexGenfvOES(Layer *_layer, GLenum coord, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenfvOES","(", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenfvOES(self->next, coord, pname, params);
}

static void REGAL_CALL http_glTexGeniOES(Layer *_layer, GLenum coord, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGeniOES","(", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGeniOES(self->next, coord, pname, param);
}

static void REGAL_CALL http_glTexGenivOES(Layer *_layer, GLenum coord, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenivOES","(", toString(coord), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenivOES(self->next, coord, pname, params);
}

static void REGAL_CALL http_glTexGenxOES(Layer *_layer, GLenum coord, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenxOES","(", toString(coord), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenxOES(self->next, coord, pname, param);
}

static void REGAL_CALL http_glTexGenxvOES(Layer *_layer, GLenum coord, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexGenxvOES","(", toString(coord), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexGenxvOES(self->next, coord, pname, params);
}

// GL_OES_vertex_array_object

static void REGAL_CALL http_glBindVertexArrayOES(Layer *_layer, GLuint array)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glBindVertexArrayOES","(", array, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglBindVertexArrayOES(self->next, array);
}

static void REGAL_CALL http_glDeleteVertexArraysOES(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteVertexArraysOES","(", n, ", ", print_optional(arrays,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteVertexArraysOES(self->next, n, arrays);
}

static void REGAL_CALL http_glGenVertexArraysOES(Layer *_layer, GLsizei n, GLuint *arrays)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenVertexArraysOES","(", n, ", ", print_optional(arrays,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGenVertexArraysOES(self->next, n, arrays);
}

static GLboolean REGAL_CALL http_glIsVertexArrayOES(Layer *_layer, GLuint array)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsVertexArrayOES","(", array, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsVertexArrayOES(self->next, array);
  return ret;
}

// GL_PGI_misc_hints

static void REGAL_CALL http_glHintPGI(Layer *_layer, GLenum target, GLint mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glHintPGI","(", toString(target), ", ", mode, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglHintPGI(self->next, target, mode);
}

// GL_QCOM_alpha_test

static void REGAL_CALL http_glAlphaFuncQCOM(Layer *_layer, GLenum func, GLclampf ref)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAlphaFuncQCOM","(", toString(func), ", ", ref, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAlphaFuncQCOM(self->next, func, ref);
}

// GL_QCOM_driver_control

static void REGAL_CALL http_glDisableDriverControlQCOM(Layer *_layer, GLuint driverControl)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDisableDriverControlQCOM","(", driverControl, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDisableDriverControlQCOM(self->next, driverControl);
}

static void REGAL_CALL http_glEnableDriverControlQCOM(Layer *_layer, GLuint driverControl)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEnableDriverControlQCOM","(", driverControl, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEnableDriverControlQCOM(self->next, driverControl);
}

static void REGAL_CALL http_glGetDriverControlStringQCOM(Layer *_layer, GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDriverControlStringQCOM","(", driverControl, ", ", bufSize, ", ", print_optional(length,Logging::pointers), ", ", print_quote(driverControlString,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDriverControlStringQCOM(self->next, driverControl, bufSize, length, driverControlString);
}

static void REGAL_CALL http_glGetDriverControlsQCOM(Layer *_layer, GLint *num, GLsizei size, GLuint *driverControls)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDriverControlsQCOM","(", print_optional(num,Logging::pointers), ", ", size, ", ", print_optional(driverControls,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDriverControlsQCOM(self->next, num, size, driverControls);
}

// GL_QCOM_extended_get

static void REGAL_CALL http_glExtGetBufferPointervQCOM(Layer *_layer, GLenum target, GLvoid **params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetBufferPointervQCOM","(", toString(target), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetBufferPointervQCOM(self->next, target, params);
}

static void REGAL_CALL http_glExtGetBuffersQCOM(Layer *_layer, GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetBuffersQCOM","(", print_optional(buffers,Logging::pointers), ", ", maxBuffers, ", ", print_optional(numBuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetBuffersQCOM(self->next, buffers, maxBuffers, numBuffers);
}

static void REGAL_CALL http_glExtGetFramebuffersQCOM(Layer *_layer, GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetFramebuffersQCOM","(", print_optional(framebuffers,Logging::pointers), ", ", maxFramebuffers, ", ", print_optional(numFramebuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetFramebuffersQCOM(self->next, framebuffers, maxFramebuffers, numFramebuffers);
}

static void REGAL_CALL http_glExtGetRenderbuffersQCOM(Layer *_layer, GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetRenderbuffersQCOM","(", print_optional(renderbuffers,Logging::pointers), ", ", maxRenderbuffers, ", ", print_optional(numRenderbuffers,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetRenderbuffersQCOM(self->next, renderbuffers, maxRenderbuffers, numRenderbuffers);
}

static void REGAL_CALL http_glExtGetTexLevelParameterivQCOM(Layer *_layer, GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetTexLevelParameterivQCOM","(", texture, ", ", toString(face), ", ", level, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetTexLevelParameterivQCOM(self->next, texture, face, level, pname, params);
}

static void REGAL_CALL http_glExtGetTexSubImageQCOM(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetTexSubImageQCOM","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ", ", toString(type), ", ", print_optional(texels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetTexSubImageQCOM(self->next, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}

static void REGAL_CALL http_glExtGetTexturesQCOM(Layer *_layer, GLuint *textures, GLint maxTextures, GLint *numTextures)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetTexturesQCOM","(", print_optional(textures,Logging::pointers), ", ", maxTextures, ", ", print_optional(numTextures,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetTexturesQCOM(self->next, textures, maxTextures, numTextures);
}

static void REGAL_CALL http_glExtTexObjectStateOverrideiQCOM(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtTexObjectStateOverrideiQCOM","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtTexObjectStateOverrideiQCOM(self->next, target, pname, param);
}

// GL_QCOM_extended_get2

static void REGAL_CALL http_glExtGetProgramBinarySourceQCOM(Layer *_layer, GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetProgramBinarySourceQCOM","(", program, ", ", toString(shadertype), ", ", print_quote(source,'"'), ", ", print_optional(length,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetProgramBinarySourceQCOM(self->next, program, shadertype, source, length);
}

static void REGAL_CALL http_glExtGetProgramsQCOM(Layer *_layer, GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetProgramsQCOM","(", print_optional(programs,Logging::pointers), ", ", maxPrograms, ", ", print_optional(numPrograms,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetProgramsQCOM(self->next, programs, maxPrograms, numPrograms);
}

static void REGAL_CALL http_glExtGetShadersQCOM(Layer *_layer, GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtGetShadersQCOM","(", print_optional(shaders,Logging::pointers), ", ", maxShaders, ", ", print_optional(numShaders,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglExtGetShadersQCOM(self->next, shaders, maxShaders, numShaders);
}

static GLboolean REGAL_CALL http_glExtIsProgramBinaryQCOM(Layer *_layer, GLuint program)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glExtIsProgramBinaryQCOM","(", program, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglExtIsProgramBinaryQCOM(self->next, program);
  return ret;
}

// GL_QCOM_tiled_rendering

static void REGAL_CALL http_glEndTilingQCOM(Layer *_layer, GLbitfield preserveMask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glEndTilingQCOM","(", GLstartTilingQCOMToString(preserveMask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglEndTilingQCOM(self->next, preserveMask);
}

static void REGAL_CALL http_glStartTilingQCOM(Layer *_layer, GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStartTilingQCOM","(", x, ", ", y, ", ", width, ", ", height, ", ", GLstartTilingQCOMToString(preserveMask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStartTilingQCOM(self->next, x, y, width, height, preserveMask);
}

// GL_REGAL_ES1_0_compatibility

static void REGAL_CALL http_glAlphaFuncx(Layer *_layer, GLenum func, GLclampx ref)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAlphaFuncx","(", toString(func), ", ", ref, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAlphaFuncx(self->next, func, ref);
}

static void REGAL_CALL http_glClearColorx(Layer *_layer, GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearColorx","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearColorx(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glClearDepthx(Layer *_layer, GLclampx depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClearDepthx","(", depth, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClearDepthx(self->next, depth);
}

static void REGAL_CALL http_glColor4x(Layer *_layer, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4x","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4x(self->next, red, green, blue, alpha);
}

static void REGAL_CALL http_glDepthRangex(Layer *_layer, GLclampx zNear, GLclampx zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDepthRangex","(", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDepthRangex(self->next, zNear, zFar);
}

static void REGAL_CALL http_glFogx(Layer *_layer, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogx","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogx(self->next, pname, param);
}

static void REGAL_CALL http_glFogxv(Layer *_layer, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogxv","(", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogxv(self->next, pname, params);
}

static void REGAL_CALL http_glFrustumf(Layer *_layer, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrustumf","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrustumf(self->next, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glFrustumx(Layer *_layer, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrustumx","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrustumx(self->next, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glLightModelx(Layer *_layer, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightModelx","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightModelx(self->next, pname, param);
}

static void REGAL_CALL http_glLightModelxv(Layer *_layer, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightModelxv","(", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightModelxv(self->next, pname, params);
}

static void REGAL_CALL http_glLightx(Layer *_layer, GLenum light, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightx","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightx(self->next, light, pname, param);
}

static void REGAL_CALL http_glLightxv(Layer *_layer, GLenum light, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightxv","(", toString(light), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightxv(self->next, light, pname, params);
}

static void REGAL_CALL http_glLineWidthx(Layer *_layer, GLfixed width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLineWidthx","(", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLineWidthx(self->next, width);
}

static void REGAL_CALL http_glLoadMatrixx(Layer *_layer, const GLfixed *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadMatrixx","(", m, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadMatrixx(self->next, m);
}

static void REGAL_CALL http_glMaterialx(Layer *_layer, GLenum face, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMaterialx","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMaterialx(self->next, face, pname, param);
}

static void REGAL_CALL http_glMaterialxv(Layer *_layer, GLenum face, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMaterialxv","(", toString(face), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMaterialxv(self->next, face, pname, params);
}

static void REGAL_CALL http_glMultMatrixx(Layer *_layer, const GLfixed *m)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultMatrixx","(", m, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultMatrixx(self->next, m);
}

static void REGAL_CALL http_glMultiTexCoord4x(Layer *_layer, GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glMultiTexCoord4x","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglMultiTexCoord4x(self->next, target, s, t, r, q);
}

static void REGAL_CALL http_glNormal3x(Layer *_layer, GLfixed nx, GLfixed ny, GLfixed nz)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3x","(", nx, ", ", ny, ", ", nz, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3x(self->next, nx, ny, nz);
}

static void REGAL_CALL http_glOrthof(Layer *_layer, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glOrthof","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglOrthof(self->next, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glOrthox(Layer *_layer, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glOrthox","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglOrthox(self->next, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL http_glPointSizex(Layer *_layer, GLfixed size)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointSizex","(", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointSizex(self->next, size);
}

static void REGAL_CALL http_glPolygonOffsetx(Layer *_layer, GLfixed factor, GLfixed units)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPolygonOffsetx","(", factor, ", ", units, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPolygonOffsetx(self->next, factor, units);
}

static void REGAL_CALL http_glRotatex(Layer *_layer, GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glRotatex","(", angle, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglRotatex(self->next, angle, x, y, z);
}

static void REGAL_CALL http_glSampleCoveragex(Layer *_layer, GLclampx value, GLboolean invert)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleCoveragex","(", value, ", ", toString(invert), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleCoveragex(self->next, value, invert);
}

static void REGAL_CALL http_glScalex(Layer *_layer, GLfixed x, GLfixed y, GLfixed z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glScalex","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglScalex(self->next, x, y, z);
}

static void REGAL_CALL http_glTexEnvx(Layer *_layer, GLenum target, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexEnvx","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexEnvx(self->next, target, pname, param);
}

static void REGAL_CALL http_glTexEnvxv(Layer *_layer, GLenum target, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexEnvxv","(", toString(target), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexEnvxv(self->next, target, pname, params);
}

static void REGAL_CALL http_glTexParameterx(Layer *_layer, GLenum target, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterx","(", toString(target), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterx(self->next, target, pname, param);
}

static void REGAL_CALL http_glTranslatex(Layer *_layer, GLfixed x, GLfixed y, GLfixed z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTranslatex","(", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTranslatex(self->next, x, y, z);
}

// GL_REGAL_ES1_1_compatibility

static void REGAL_CALL http_glClipPlanef(Layer *_layer, GLenum plane, const GLfloat *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClipPlanef","(", toString(plane), ", ", print_optional(equation,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClipPlanef(self->next, plane, equation);
}

static void REGAL_CALL http_glClipPlanex(Layer *_layer, GLenum plane, const GLfixed *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glClipPlanex","(", toString(plane), ", ", equation, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglClipPlanex(self->next, plane, equation);
}

static void REGAL_CALL http_glGetClipPlanef(Layer *_layer, GLenum pname, GLfloat *eqn)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetClipPlanef","(", toString(pname), ", ", print_optional(eqn,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetClipPlanef(self->next, pname, eqn);
}

static void REGAL_CALL http_glGetClipPlanex(Layer *_layer, GLenum pname, GLfixed *eqn)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetClipPlanex","(", toString(pname), ", ", eqn, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetClipPlanex(self->next, pname, eqn);
}

static void REGAL_CALL http_glGetFixedv(Layer *_layer, GLenum pname, GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFixedv","(", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFixedv(self->next, pname, params);
}

static void REGAL_CALL http_glGetLightxv(Layer *_layer, GLenum light, GLenum pname, GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetLightxv","(", toString(light), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetLightxv(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetMaterialxv(Layer *_layer, GLenum face, GLenum pname, GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetMaterialxv","(", toString(face), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetMaterialxv(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetTexEnvxv(Layer *_layer, GLenum env, GLenum pname, GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexEnvxv","(", toString(env), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexEnvxv(self->next, env, pname, params);
}

static void REGAL_CALL http_glGetTexParameterxv(Layer *_layer, GLenum target, GLenum pname, GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexParameterxv","(", toString(target), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexParameterxv(self->next, target, pname, params);
}

static void REGAL_CALL http_glPointParameterx(Layer *_layer, GLenum pname, GLfixed param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterx","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterx(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameterxv(Layer *_layer, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterxv","(", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterxv(self->next, pname, params);
}

static void REGAL_CALL http_glPointSizePointerOES(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointSizePointerOES","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointSizePointerOES(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glTexParameterxv(Layer *_layer, GLenum target, GLenum pname, const GLfixed *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexParameterxv","(", toString(target), ", ", toString(pname), ", ", params, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexParameterxv(self->next, target, pname, params);
}

// GL_REGAL_log

static void REGAL_CALL http_glLogMessageCallbackREGAL(Layer *_layer, GLLOGPROCREGAL callback)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLogMessageCallbackREGAL","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLogMessageCallbackREGAL(self->next, callback);
}

// GL_SGIS_detail_texture

static void REGAL_CALL http_glDetailTexFuncSGIS(Layer *_layer, GLenum target, GLsizei n, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDetailTexFuncSGIS","(", toString(target), ", ", n, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDetailTexFuncSGIS(self->next, target, n, points);
}

static void REGAL_CALL http_glGetDetailTexFuncSGIS(Layer *_layer, GLenum target, GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetDetailTexFuncSGIS","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetDetailTexFuncSGIS(self->next, target, points);
}

// GL_SGIS_fog_function

static void REGAL_CALL http_glFogFuncSGIS(Layer *_layer, GLsizei n, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFogFuncSGIS","(", n, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFogFuncSGIS(self->next, n, points);
}

static void REGAL_CALL http_glGetFogFuncSGIS(Layer *_layer, GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFogFuncSGIS","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFogFuncSGIS(self->next, points);
}

// GL_SGIS_multisample

static void REGAL_CALL http_glSampleMaskSGIS(Layer *_layer, GLclampf value, GLboolean invert)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSampleMaskSGIS","(", value, ", ", toString(invert), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSampleMaskSGIS(self->next, value, invert);
}

static void REGAL_CALL http_glSamplePatternSGIS(Layer *_layer, GLenum pattern)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSamplePatternSGIS","(", toString(pattern), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSamplePatternSGIS(self->next, pattern);
}

// GL_SGIS_pixel_texture

static void REGAL_CALL http_glGetPixelTexGenParameterfvSGIS(Layer *_layer, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelTexGenParameterfvSGIS","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelTexGenParameterfvSGIS(self->next, pname, params);
}

static void REGAL_CALL http_glGetPixelTexGenParameterivSGIS(Layer *_layer, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetPixelTexGenParameterivSGIS","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetPixelTexGenParameterivSGIS(self->next, pname, params);
}

static void REGAL_CALL http_glPixelTexGenParameterfSGIS(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTexGenParameterfSGIS","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTexGenParameterfSGIS(self->next, pname, param);
}

static void REGAL_CALL http_glPixelTexGenParameterfvSGIS(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTexGenParameterfvSGIS","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTexGenParameterfvSGIS(self->next, pname, params);
}

static void REGAL_CALL http_glPixelTexGenParameteriSGIS(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTexGenParameteriSGIS","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTexGenParameteriSGIS(self->next, pname, param);
}

static void REGAL_CALL http_glPixelTexGenParameterivSGIS(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTexGenParameterivSGIS","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTexGenParameterivSGIS(self->next, pname, params);
}

// GL_SGIS_point_parameters

static void REGAL_CALL http_glPointParameterfSGIS(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfSGIS","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfSGIS(self->next, pname, param);
}

static void REGAL_CALL http_glPointParameterfvSGIS(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPointParameterfvSGIS","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPointParameterfvSGIS(self->next, pname, params);
}

// GL_SGIS_sharpen_texture

static void REGAL_CALL http_glGetSharpenTexFuncSGIS(Layer *_layer, GLenum target, GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetSharpenTexFuncSGIS","(", toString(target), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetSharpenTexFuncSGIS(self->next, target, points);
}

static void REGAL_CALL http_glSharpenTexFuncSGIS(Layer *_layer, GLenum target, GLsizei n, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSharpenTexFuncSGIS","(", toString(target), ", ", n, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSharpenTexFuncSGIS(self->next, target, n, points);
}

// GL_SGIS_texture4D

static void REGAL_CALL http_glTexImage4DSGIS(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexImage4DSGIS","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", size4d, ", ", border, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexImage4DSGIS(self->next, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

static void REGAL_CALL http_glTexSubImage4DSGIS(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexSubImage4DSGIS","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", woffset, ", ", width, ", ", height, ", ", depth, ", ", size4d, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexSubImage4DSGIS(self->next, target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}

// GL_SGIS_texture_color_mask

static void REGAL_CALL http_glTextureColorMaskSGIS(Layer *_layer, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureColorMaskSGIS","(", toString(red), ", ", toString(green), ", ", toString(blue), ", ", toString(alpha), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureColorMaskSGIS(self->next, red, green, blue, alpha);
}

// GL_SGIS_texture_filter4

static void REGAL_CALL http_glGetTexFilterFuncSGIS(Layer *_layer, GLenum target, GLenum filter, GLfloat *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetTexFilterFuncSGIS","(", toString(target), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetTexFilterFuncSGIS(self->next, target, filter, weights);
}

static void REGAL_CALL http_glTexFilterFuncSGIS(Layer *_layer, GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexFilterFuncSGIS","(", toString(target), ", ", toString(filter), ", ", n, ", ", print_optional(weights,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexFilterFuncSGIS(self->next, target, filter, n, weights);
}

// GL_SGIX_async

static void REGAL_CALL http_glAsyncMarkerSGIX(Layer *_layer, GLuint marker)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAsyncMarkerSGIX","(", marker, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAsyncMarkerSGIX(self->next, marker);
}

static void REGAL_CALL http_glDeleteAsyncMarkersSGIX(Layer *_layer, GLuint marker, GLsizei range)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeleteAsyncMarkersSGIX","(", marker, ", ", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeleteAsyncMarkersSGIX(self->next, marker, range);
}

static GLint REGAL_CALL http_glFinishAsyncSGIX(Layer *_layer, GLuint *markerp)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinishAsyncSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglFinishAsyncSGIX(self->next, markerp);
  return ret;
}

static GLuint REGAL_CALL http_glGenAsyncMarkersSGIX(Layer *_layer, GLsizei range)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGenAsyncMarkersSGIX","(", range, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGenAsyncMarkersSGIX(self->next, range);
  return ret;
}

static GLboolean REGAL_CALL http_glIsAsyncMarkerSGIX(Layer *_layer, GLuint marker)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIsAsyncMarkerSGIX","(", marker, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglIsAsyncMarkerSGIX(self->next, marker);
  return ret;
}

static GLint REGAL_CALL http_glPollAsyncSGIX(Layer *_layer, GLuint *markerp)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPollAsyncSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglPollAsyncSGIX(self->next, markerp);
  return ret;
}

// GL_SGIX_flush_raster

static void REGAL_CALL http_glFlushRasterSGIX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFlushRasterSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFlushRasterSGIX(self->next);
}

// GL_SGIX_fog_texture

static void REGAL_CALL http_glTextureFogSGIX(Layer *_layer, GLenum pname)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTextureFogSGIX","(", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTextureFogSGIX(self->next, pname);
}

// GL_SGIX_fragment_lighting

static void REGAL_CALL http_glFragmentColorMaterialSGIX(Layer *_layer, GLenum face, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentColorMaterialSGIX","(", toString(face), ", ", GLmodeToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentColorMaterialSGIX(self->next, face, mode);
}

static void REGAL_CALL http_glFragmentLightModelfSGIX(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModelfSGIX","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModelfSGIX(self->next, pname, param);
}

static void REGAL_CALL http_glFragmentLightModelfvSGIX(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModelfvSGIX","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModelfvSGIX(self->next, pname, params);
}

static void REGAL_CALL http_glFragmentLightModeliSGIX(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModeliSGIX","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModeliSGIX(self->next, pname, param);
}

static void REGAL_CALL http_glFragmentLightModelivSGIX(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightModelivSGIX","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightModelivSGIX(self->next, pname, params);
}

static void REGAL_CALL http_glFragmentLightfSGIX(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightfSGIX","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightfSGIX(self->next, light, pname, param);
}

static void REGAL_CALL http_glFragmentLightfvSGIX(Layer *_layer, GLenum light, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightfvSGIX","(", toString(light), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightfvSGIX(self->next, light, pname, params);
}

static void REGAL_CALL http_glFragmentLightiSGIX(Layer *_layer, GLenum light, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightiSGIX","(", toString(light), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightiSGIX(self->next, light, pname, param);
}

static void REGAL_CALL http_glFragmentLightivSGIX(Layer *_layer, GLenum light, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentLightivSGIX","(", toString(light), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentLightivSGIX(self->next, light, pname, params);
}

static void REGAL_CALL http_glFragmentMaterialfSGIX(Layer *_layer, GLenum face, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialfSGIX","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialfSGIX(self->next, face, pname, param);
}

static void REGAL_CALL http_glFragmentMaterialfvSGIX(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialfvSGIX","(", toString(face), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialfvSGIX(self->next, face, pname, params);
}

static void REGAL_CALL http_glFragmentMaterialiSGIX(Layer *_layer, GLenum face, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialiSGIX","(", toString(face), ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialiSGIX(self->next, face, pname, param);
}

static void REGAL_CALL http_glFragmentMaterialivSGIX(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFragmentMaterialivSGIX","(", toString(face), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFragmentMaterialivSGIX(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetFragmentLightfvSGIX(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentLightfvSGIX","(", toString(light), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentLightfvSGIX(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetFragmentLightivSGIX(Layer *_layer, GLenum light, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentLightivSGIX","(", toString(light), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentLightivSGIX(self->next, light, pname, params);
}

static void REGAL_CALL http_glGetFragmentMaterialfvSGIX(Layer *_layer, GLenum face, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentMaterialfvSGIX","(", toString(face), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentMaterialfvSGIX(self->next, face, pname, params);
}

static void REGAL_CALL http_glGetFragmentMaterialivSGIX(Layer *_layer, GLenum face, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetFragmentMaterialivSGIX","(", toString(face), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetFragmentMaterialivSGIX(self->next, face, pname, params);
}

static void REGAL_CALL http_glLightEnviSGIX(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLightEnviSGIX","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLightEnviSGIX(self->next, pname, param);
}

// GL_SGIX_framezoom

static void REGAL_CALL http_glFrameZoomSGIX(Layer *_layer, GLint factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFrameZoomSGIX","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFrameZoomSGIX(self->next, factor);
}

// GL_SGIX_igloo_interface

static void REGAL_CALL http_glIglooInterfaceSGIX(Layer *_layer, GLenum pname, const GLvoid *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glIglooInterfaceSGIX","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglIglooInterfaceSGIX(self->next, pname, params);
}

// GL_SGIX_instruments

static GLint REGAL_CALL http_glGetInstrumentsSGIX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetInstrumentsSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglGetInstrumentsSGIX(self->next);
  return ret;
}

static void REGAL_CALL http_glInstrumentsBufferSGIX(Layer *_layer, GLsizei size, GLint *buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glInstrumentsBufferSGIX","(", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglInstrumentsBufferSGIX(self->next, size, buffer);
}

static GLint REGAL_CALL http_glPollInstrumentsSGIX(Layer *_layer, GLint *marker_p)
{
  Http * self = static_cast<Http *>(_layer);
    GLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPollInstrumentsSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglPollInstrumentsSGIX(self->next, marker_p);
  return ret;
}

static void REGAL_CALL http_glReadInstrumentsSGIX(Layer *_layer, GLint marker)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadInstrumentsSGIX","(", marker, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadInstrumentsSGIX(self->next, marker);
}

static void REGAL_CALL http_glStartInstrumentsSGIX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStartInstrumentsSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStartInstrumentsSGIX(self->next);
}

static void REGAL_CALL http_glStopInstrumentsSGIX(Layer *_layer, GLint marker)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glStopInstrumentsSGIX","(", marker, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglStopInstrumentsSGIX(self->next, marker);
}

// GL_SGIX_list_priority

static void REGAL_CALL http_glGetListParameterfvSGIX(Layer *_layer, GLuint list, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetListParameterfvSGIX","(", list, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetListParameterfvSGIX(self->next, list, pname, params);
}

static void REGAL_CALL http_glGetListParameterivSGIX(Layer *_layer, GLuint list, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetListParameterivSGIX","(", list, ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetListParameterivSGIX(self->next, list, pname, params);
}

static void REGAL_CALL http_glListParameterfSGIX(Layer *_layer, GLuint list, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glListParameterfSGIX","(", list, ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglListParameterfSGIX(self->next, list, pname, param);
}

static void REGAL_CALL http_glListParameterfvSGIX(Layer *_layer, GLuint list, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glListParameterfvSGIX","(", list, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglListParameterfvSGIX(self->next, list, pname, params);
}

static void REGAL_CALL http_glListParameteriSGIX(Layer *_layer, GLuint list, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glListParameteriSGIX","(", list, ", ", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglListParameteriSGIX(self->next, list, pname, param);
}

static void REGAL_CALL http_glListParameterivSGIX(Layer *_layer, GLuint list, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glListParameterivSGIX","(", list, ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglListParameterivSGIX(self->next, list, pname, params);
}

// GL_SGIX_pixel_texture

static void REGAL_CALL http_glPixelTexGenSGIX(Layer *_layer, GLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glPixelTexGenSGIX","(", toString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglPixelTexGenSGIX(self->next, mode);
}

// GL_SGIX_polynomial_ffd

static void REGAL_CALL http_glDeformSGIX(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeformSGIX","(", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeformSGIX(self->next, mask);
}

static void REGAL_CALL http_glDeformationMap3dSGIX(Layer *_layer, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeformationMap3dSGIX","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ", ", w1, ", ", w2, ", ", wstride, ", ", worder, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeformationMap3dSGIX(self->next, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

static void REGAL_CALL http_glDeformationMap3fSGIX(Layer *_layer, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDeformationMap3fSGIX","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ", ", w1, ", ", w2, ", ", wstride, ", ", worder, ", ", print_optional(points,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDeformationMap3fSGIX(self->next, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

static void REGAL_CALL http_glLoadIdentityDeformationMapSGIX(Layer *_layer, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glLoadIdentityDeformationMapSGIX","(", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglLoadIdentityDeformationMapSGIX(self->next, mask);
}

// GL_SGIX_reference_plane

static void REGAL_CALL http_glReferencePlaneSGIX(Layer *_layer, const GLdouble *equation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReferencePlaneSGIX","(", print_array(equation,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReferencePlaneSGIX(self->next, equation);
}

// GL_SGIX_sprite

static void REGAL_CALL http_glSpriteParameterfSGIX(Layer *_layer, GLenum pname, GLfloat param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSpriteParameterfSGIX","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSpriteParameterfSGIX(self->next, pname, param);
}

static void REGAL_CALL http_glSpriteParameterfvSGIX(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSpriteParameterfvSGIX","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSpriteParameterfvSGIX(self->next, pname, params);
}

static void REGAL_CALL http_glSpriteParameteriSGIX(Layer *_layer, GLenum pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSpriteParameteriSGIX","(", toString(pname), ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSpriteParameteriSGIX(self->next, pname, param);
}

static void REGAL_CALL http_glSpriteParameterivSGIX(Layer *_layer, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glSpriteParameterivSGIX","(", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglSpriteParameterivSGIX(self->next, pname, params);
}

// GL_SGIX_tag_sample_buffer

static void REGAL_CALL http_glTagSampleBufferSGIX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTagSampleBufferSGIX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTagSampleBufferSGIX(self->next);
}

// GL_SGI_color_table

static void REGAL_CALL http_glColorTableParameterfvSGI(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTableParameterfvSGI","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTableParameterfvSGI(self->next, target, pname, params);
}

static void REGAL_CALL http_glColorTableParameterivSGI(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTableParameterivSGI","(", toString(target), ", ", toString(pname), ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTableParameterivSGI(self->next, target, pname, params);
}

static void REGAL_CALL http_glColorTableSGI(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColorTableSGI","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", print_optional(table,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColorTableSGI(self->next, target, internalformat, width, format, type, table);
}

static void REGAL_CALL http_glCopyColorTableSGI(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glCopyColorTableSGI","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglCopyColorTableSGI(self->next, target, internalformat, x, y, width);
}

static void REGAL_CALL http_glGetColorTableParameterfvSGI(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableParameterfvSGI","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableParameterfvSGI(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetColorTableParameterivSGI(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableParameterivSGI","(", toString(target), ", ", toString(pname), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableParameterivSGI(self->next, target, pname, params);
}

static void REGAL_CALL http_glGetColorTableSGI(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGetColorTableSGI","(", toString(target), ", ", toString(format), ", ", toString(type), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGetColorTableSGI(self->next, target, format, type, table);
}

// GL_SUNX_constant_data

static void REGAL_CALL http_glFinishTextureSUNX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glFinishTextureSUNX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglFinishTextureSUNX(self->next);
}

// GL_SUN_global_alpha

static void REGAL_CALL http_glGlobalAlphaFactorbSUN(Layer *_layer, GLbyte factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactorbSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactorbSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactordSUN(Layer *_layer, GLdouble factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactordSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactordSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactorfSUN(Layer *_layer, GLfloat factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactorfSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactorfSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactoriSUN(Layer *_layer, GLint factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactoriSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactoriSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactorsSUN(Layer *_layer, GLshort factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactorsSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactorsSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactorubSUN(Layer *_layer, GLubyte factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactorubSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactorubSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactoruiSUN(Layer *_layer, GLuint factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactoruiSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactoruiSUN(self->next, factor);
}

static void REGAL_CALL http_glGlobalAlphaFactorusSUN(Layer *_layer, GLushort factor)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glGlobalAlphaFactorusSUN","(", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglGlobalAlphaFactorusSUN(self->next, factor);
}

// GL_SUN_mesh_array

static void REGAL_CALL http_glDrawMeshArraysSUN(Layer *_layer, GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glDrawMeshArraysSUN","(", GLmodeToString(mode), ", ", first, ", ", count, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglDrawMeshArraysSUN(self->next, mode, first, count, width);
}

// GL_SUN_read_video_pixels

static void REGAL_CALL http_glReadVideoPixelsSUN(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReadVideoPixelsSUN","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", print_optional(pixels,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReadVideoPixelsSUN(self->next, x, y, width, height, format, type, pixels);
}

// GL_SUN_triangle_list

static void REGAL_CALL http_glReplacementCodePointerSUN(Layer *_layer, GLenum type, GLsizei stride, const GLvoid **pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodePointerSUN","(", toString(type), ", ", stride, ", ", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodePointerSUN(self->next, type, stride, pointer);
}

static void REGAL_CALL http_glReplacementCodeubSUN(Layer *_layer, GLubyte code)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeubSUN","(", code, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeubSUN(self->next, code);
}

static void REGAL_CALL http_glReplacementCodeubvSUN(Layer *_layer, const GLubyte *code)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeubvSUN","(", print_optional(code,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeubvSUN(self->next, code);
}

static void REGAL_CALL http_glReplacementCodeuiSUN(Layer *_layer, GLuint code)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiSUN","(", code, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiSUN(self->next, code);
}

static void REGAL_CALL http_glReplacementCodeuivSUN(Layer *_layer, const GLuint *code)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuivSUN","(", print_optional(code,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuivSUN(self->next, code);
}

static void REGAL_CALL http_glReplacementCodeusSUN(Layer *_layer, GLushort code)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeusSUN","(", code, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeusSUN(self->next, code);
}

static void REGAL_CALL http_glReplacementCodeusvSUN(Layer *_layer, const GLushort *code)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeusvSUN","(", print_optional(code,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeusvSUN(self->next, code);
}

// GL_SUN_vertex

static void REGAL_CALL http_glColor3fVertex3fSUN(Layer *_layer, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3fVertex3fSUN","(", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3fVertex3fSUN(self->next, r, g, b, x, y, z);
}

static void REGAL_CALL http_glColor3fVertex3fvSUN(Layer *_layer, const GLfloat *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor3fVertex3fvSUN","(", print_array(c,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor3fVertex3fvSUN(self->next, c, v);
}

static void REGAL_CALL http_glColor4fNormal3fVertex3fSUN(Layer *_layer, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4fNormal3fVertex3fSUN","(", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4fNormal3fVertex3fSUN(self->next, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4fNormal3fVertex3fvSUN","(", print_array(c,4), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4fNormal3fVertex3fvSUN(self->next, c, n, v);
}

static void REGAL_CALL http_glColor4ubVertex2fSUN(Layer *_layer, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ubVertex2fSUN","(", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ubVertex2fSUN(self->next, r, g, b, a, x, y);
}

static void REGAL_CALL http_glColor4ubVertex2fvSUN(Layer *_layer, const GLubyte *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ubVertex2fvSUN","(", print_array(c,4), ", ", print_array(v,2), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ubVertex2fvSUN(self->next, c, v);
}

static void REGAL_CALL http_glColor4ubVertex3fSUN(Layer *_layer, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ubVertex3fSUN","(", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ubVertex3fSUN(self->next, r, g, b, a, x, y, z);
}

static void REGAL_CALL http_glColor4ubVertex3fvSUN(Layer *_layer, const GLubyte *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glColor4ubVertex3fvSUN","(", print_array(c,4), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglColor4ubVertex3fvSUN(self->next, c, v);
}

static void REGAL_CALL http_glNormal3fVertex3fSUN(Layer *_layer, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3fVertex3fSUN","(", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3fVertex3fSUN(self->next, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glNormal3fVertex3fvSUN","(", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglNormal3fVertex3fvSUN(self->next, n, v);
}

static void REGAL_CALL http_glReplacementCodeuiColor3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiColor3fVertex3fSUN","(", rc, ", ", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiColor3fVertex3fSUN(self->next, rc, r, g, b, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiColor3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiColor3fVertex3fvSUN","(", print_array(rc,1), ", ", print_array(c,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiColor3fVertex3fvSUN(self->next, rc, c, v);
}

static void REGAL_CALL http_glReplacementCodeuiColor4fNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiColor4fNormal3fVertex3fSUN","(", rc, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiColor4fNormal3fVertex3fSUN(self->next, rc, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiColor4fNormal3fVertex3fvSUN","(", print_array(rc,1), ", ", print_array(c,4), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiColor4fNormal3fVertex3fvSUN(self->next, rc, c, n, v);
}

static void REGAL_CALL http_glReplacementCodeuiColor4ubVertex3fSUN(Layer *_layer, GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiColor4ubVertex3fSUN","(", rc, ", ", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiColor4ubVertex3fSUN(self->next, rc, r, g, b, a, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiColor4ubVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiColor4ubVertex3fvSUN","(", print_array(rc,1), ", ", print_array(c,4), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiColor4ubVertex3fvSUN(self->next, rc, c, v);
}

static void REGAL_CALL http_glReplacementCodeuiNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiNormal3fVertex3fSUN","(", rc, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiNormal3fVertex3fSUN(self->next, rc, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiNormal3fVertex3fvSUN","(", print_array(rc,1), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiNormal3fVertex3fvSUN(self->next, rc, n, v);
}

static void REGAL_CALL http_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN","(", rc, ", ", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(self->next, rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN","(", print_array(rc,1), ", ", print_array(tc,2), ", ", print_array(c,4), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(self->next, rc, tc, c, n, v);
}

static void REGAL_CALL http_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN","(", rc, ", ", s, ", ", t, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(self->next, rc, s, t, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN","(", print_array(rc,1), ", ", print_array(tc,2), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(self->next, rc, tc, n, v);
}

static void REGAL_CALL http_glReplacementCodeuiTexCoord2fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiTexCoord2fVertex3fSUN","(", rc, ", ", s, ", ", t, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiTexCoord2fVertex3fSUN(self->next, rc, s, t, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiTexCoord2fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiTexCoord2fVertex3fvSUN","(", print_array(rc,1), ", ", print_array(tc,2), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiTexCoord2fVertex3fvSUN(self->next, rc, tc, v);
}

static void REGAL_CALL http_glReplacementCodeuiVertex3fSUN(Layer *_layer, GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiVertex3fSUN","(", rc, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiVertex3fSUN(self->next, rc, x, y, z);
}

static void REGAL_CALL http_glReplacementCodeuiVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glReplacementCodeuiVertex3fvSUN","(", print_array(rc,1), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglReplacementCodeuiVertex3fvSUN(self->next, rc, v);
}

static void REGAL_CALL http_glTexCoord2fColor3fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fColor3fVertex3fSUN","(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fColor3fVertex3fSUN(self->next, s, t, r, g, b, x, y, z);
}

static void REGAL_CALL http_glTexCoord2fColor3fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fColor3fVertex3fvSUN","(", print_array(tc,2), ", ", print_array(c,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fColor3fVertex3fvSUN(self->next, tc, c, v);
}

static void REGAL_CALL http_glTexCoord2fColor4fNormal3fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fColor4fNormal3fVertex3fSUN","(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fColor4fNormal3fVertex3fSUN(self->next, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glTexCoord2fColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fColor4fNormal3fVertex3fvSUN","(", print_array(tc,2), ", ", print_array(c,4), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fColor4fNormal3fVertex3fvSUN(self->next, tc, c, n, v);
}

static void REGAL_CALL http_glTexCoord2fColor4ubVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fColor4ubVertex3fSUN","(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fColor4ubVertex3fSUN(self->next, s, t, r, g, b, a, x, y, z);
}

static void REGAL_CALL http_glTexCoord2fColor4ubVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fColor4ubVertex3fvSUN","(", print_array(tc,2), ", ", print_array(c,4), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fColor4ubVertex3fvSUN(self->next, tc, c, v);
}

static void REGAL_CALL http_glTexCoord2fNormal3fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fNormal3fVertex3fSUN","(", s, ", ", t, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fNormal3fVertex3fSUN(self->next, s, t, nx, ny, nz, x, y, z);
}

static void REGAL_CALL http_glTexCoord2fNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fNormal3fVertex3fvSUN","(", print_array(tc,2), ", ", print_array(n,3), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fNormal3fVertex3fvSUN(self->next, tc, n, v);
}

static void REGAL_CALL http_glTexCoord2fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fVertex3fSUN","(", s, ", ", t, ", ", x, ", ", y, ", ", z, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fVertex3fSUN(self->next, s, t, x, y, z);
}

static void REGAL_CALL http_glTexCoord2fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord2fVertex3fvSUN","(", print_array(tc,2), ", ", print_array(v,3), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord2fVertex3fvSUN(self->next, tc, v);
}

static void REGAL_CALL http_glTexCoord4fColor4fNormal3fVertex4fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4fColor4fNormal3fVertex4fSUN","(", s, ", ", t, ", ", p, ", ", q, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4fColor4fNormal3fVertex4fSUN(self->next, s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

static void REGAL_CALL http_glTexCoord4fColor4fNormal3fVertex4fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4fColor4fNormal3fVertex4fvSUN","(", print_array(tc,4), ", ", print_array(c,4), ", ", print_array(n,3), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4fColor4fNormal3fVertex4fvSUN(self->next, tc, c, n, v);
}

static void REGAL_CALL http_glTexCoord4fVertex4fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4fVertex4fSUN","(", s, ", ", t, ", ", p, ", ", q, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4fVertex4fSUN(self->next, s, t, p, q, x, y, z, w);
}

static void REGAL_CALL http_glTexCoord4fVertex4fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *v)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glTexCoord4fVertex4fvSUN","(", print_array(tc,4), ", ", print_array(v,4), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglTexCoord4fVertex4fvSUN(self->next, tc, v);
}

// GL_WIN_swap_hint

static void REGAL_CALL http_glAddSwapHintRectWIN(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glAddSwapHintRectWIN","(", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglAddSwapHintRectWIN(self->next, x, y, width, height);
}

#if REGAL_SYS_WGL

// WGL_3DL_stereo_control

static BOOL REGAL_CALL http_wglSetStereoEmitterState3DL(Layer *_layer, HDC hDC, UINT uState)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetStereoEmitterState3DL","(", print_optional(hDC,Logging::pointers), ", ", uState, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetStereoEmitterState3DL(dispatchGlobal, hDC, uState);
  return ret;
}

// WGL_AMD_gpu_association

static VOID REGAL_CALL http_wglBlitContextFramebufferAMD(Layer *_layer, HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBlitContextFramebufferAMD","(", print_optional(dstCtx,Logging::pointers), ", ", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", GLblitFramebufferToString(mask), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RwglBlitContextFramebufferAMD(dispatchGlobal, dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static HGLRC REGAL_CALL http_wglCreateAssociatedContextAMD(Layer *_layer, UINT id)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateAssociatedContextAMD","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateAssociatedContextAMD(dispatchGlobal, id);
  return ret;
}

static HGLRC REGAL_CALL http_wglCreateAssociatedContextAttribsAMD(Layer *_layer, UINT id, HGLRC hShareContext, const int *attribList)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateAssociatedContextAttribsAMD","(", id, ", ", print_optional(hShareContext,Logging::pointers), ", ", print_optional(attribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateAssociatedContextAttribsAMD(dispatchGlobal, id, hShareContext, attribList);
  return ret;
}

static BOOL REGAL_CALL http_wglDeleteAssociatedContextAMD(Layer *_layer, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDeleteAssociatedContextAMD","(", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDeleteAssociatedContextAMD(dispatchGlobal, hglrc);
  return ret;
}

static UINT REGAL_CALL http_wglGetContextGPUIDAMD(Layer *_layer, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    UINT  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetContextGPUIDAMD","(", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetContextGPUIDAMD(dispatchGlobal, hglrc);
  return ret;
}

static HGLRC REGAL_CALL http_wglGetCurrentAssociatedContextAMD(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetCurrentAssociatedContextAMD","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetCurrentAssociatedContextAMD(dispatchGlobal);
  return ret;
}

static UINT REGAL_CALL http_wglGetGPUIDsAMD(Layer *_layer, UINT maxCount, UINT *ids)
{
  Http * self = static_cast<Http *>(_layer);
    UINT  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGPUIDsAMD","(", maxCount, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGPUIDsAMD(dispatchGlobal, maxCount, ids);
  return ret;
}

static INT REGAL_CALL http_wglGetGPUInfoAMD(Layer *_layer, UINT id, int property, GLenum dataType, UINT size, void *data)
{
  Http * self = static_cast<Http *>(_layer);
    INT  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGPUInfoAMD","(", id, ", ", property, ", ", toString(dataType), ", ", size, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGPUInfoAMD(dispatchGlobal, id, property, dataType, size, data);
  return ret;
}

static BOOL REGAL_CALL http_wglMakeAssociatedContextCurrentAMD(Layer *_layer, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglMakeAssociatedContextCurrentAMD","(", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglMakeAssociatedContextCurrentAMD(dispatchGlobal, hglrc);
  return ret;
}

// WGL_ARB_buffer_region

static HANDLE REGAL_CALL http_wglCreateBufferRegionARB(Layer *_layer, HDC hDC, int iLayerPlane, UINT uType)
{
  Http * self = static_cast<Http *>(_layer);
    HANDLE  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateBufferRegionARB","(", print_optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", uType, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateBufferRegionARB(dispatchGlobal, hDC, iLayerPlane, uType);
  return ret;
}

static VOID REGAL_CALL http_wglDeleteBufferRegionARB(Layer *_layer, HANDLE hRegion)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDeleteBufferRegionARB","(", hRegion, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RwglDeleteBufferRegionARB(dispatchGlobal, hRegion);
}

static BOOL REGAL_CALL http_wglRestoreBufferRegionARB(Layer *_layer, HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglRestoreBufferRegionARB","(", hRegion, ", ", x, ", ", y, ", ", width, ", ", height, ", ", xSrc, ", ", ySrc, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglRestoreBufferRegionARB(dispatchGlobal, hRegion, x, y, width, height, xSrc, ySrc);
  return ret;
}

static BOOL REGAL_CALL http_wglSaveBufferRegionARB(Layer *_layer, HANDLE hRegion, int x, int y, int width, int height)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSaveBufferRegionARB","(", hRegion, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSaveBufferRegionARB(dispatchGlobal, hRegion, x, y, width, height);
  return ret;
}

// WGL_ARB_create_context

static HGLRC REGAL_CALL http_wglCreateContextAttribsARB(Layer *_layer, HDC hDC, HGLRC hShareContext, const int *piAttribList)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateContextAttribsARB","(", print_optional(hDC,Logging::pointers), ", ", print_optional(hShareContext,Logging::pointers), ", ", print_optional(piAttribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateContextAttribsARB(dispatchGlobal, hDC, hShareContext, piAttribList);
  return ret;
}

// WGL_ARB_extensions_string

static const char *REGAL_CALL http_wglGetExtensionsStringARB(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetExtensionsStringARB","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetExtensionsStringARB(dispatchGlobal, hDC);
  return ret;
}

// WGL_ARB_make_current_read

static HDC REGAL_CALL http_wglGetCurrentReadDCARB(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    HDC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetCurrentReadDCARB","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetCurrentReadDCARB(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglMakeContextCurrentARB(Layer *_layer, HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglMakeContextCurrentARB","(", print_optional(hDrawDC,Logging::pointers), ", ", print_optional(hReadDC,Logging::pointers), ", ", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglMakeContextCurrentARB(dispatchGlobal, hDrawDC, hReadDC, hglrc);
  return ret;
}

// WGL_ARB_pbuffer

static HPBUFFERARB REGAL_CALL http_wglCreatePbufferARB(Layer *_layer, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
  Http * self = static_cast<Http *>(_layer);
    HPBUFFERARB  ret = (HPBUFFERARB) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreatePbufferARB","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iWidth, ", ", iHeight, ", ", print_optional(piAttribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreatePbufferARB(dispatchGlobal, hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  return ret;
}

static BOOL REGAL_CALL http_wglDestroyPbufferARB(Layer *_layer, HPBUFFERARB hPbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDestroyPbufferARB","(", print_optional(hPbuffer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDestroyPbufferARB(dispatchGlobal, hPbuffer);
  return ret;
}

static HDC REGAL_CALL http_wglGetPbufferDCARB(Layer *_layer, HPBUFFERARB hPbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    HDC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPbufferDCARB","(", print_optional(hPbuffer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPbufferDCARB(dispatchGlobal, hPbuffer);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryPbufferARB(Layer *_layer, HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryPbufferARB","(", print_optional(hPbuffer,Logging::pointers), ", ", iAttribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryPbufferARB(dispatchGlobal, hPbuffer, iAttribute, piValue);
  return ret;
}

static int REGAL_CALL http_wglReleasePbufferDCARB(Layer *_layer, HPBUFFERARB hPbuffer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleasePbufferDCARB","(", print_optional(hPbuffer,Logging::pointers), ", ", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleasePbufferDCARB(dispatchGlobal, hPbuffer, hDC);
  return ret;
}

// WGL_ARB_pixel_format

static BOOL REGAL_CALL http_wglChoosePixelFormatARB(Layer *_layer, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglChoosePixelFormatARB","(", print_optional(hDC,Logging::pointers), ", ", print_optional(piAttribIList,Logging::pointers), ", ", pfAttribFList, ", ", nMaxFormats, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglChoosePixelFormatARB(dispatchGlobal, hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  return ret;
}

static BOOL REGAL_CALL http_wglGetPixelFormatAttribfvARB(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPixelFormatAttribfvARB","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", print_array(piAttributes,nAttributes), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPixelFormatAttribfvARB(dispatchGlobal, hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  return ret;
}

static BOOL REGAL_CALL http_wglGetPixelFormatAttribivARB(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPixelFormatAttribivARB","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", print_array(piAttributes,nAttributes), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPixelFormatAttribivARB(dispatchGlobal, hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  return ret;
}

// WGL_ARB_render_texture

static BOOL REGAL_CALL http_wglBindTexImageARB(Layer *_layer, HPBUFFERARB hPbuffer, int iBuffer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBindTexImageARB","(", print_optional(hPbuffer,Logging::pointers), ", ", iBuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBindTexImageARB(dispatchGlobal, hPbuffer, iBuffer);
  return ret;
}

static BOOL REGAL_CALL http_wglReleaseTexImageARB(Layer *_layer, HPBUFFERARB hPbuffer, int iBuffer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleaseTexImageARB","(", print_optional(hPbuffer,Logging::pointers), ", ", iBuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleaseTexImageARB(dispatchGlobal, hPbuffer, iBuffer);
  return ret;
}

static BOOL REGAL_CALL http_wglSetPbufferAttribARB(Layer *_layer, HPBUFFERARB hPbuffer, const int *piAttribList)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetPbufferAttribARB","(", print_optional(hPbuffer,Logging::pointers), ", ", print_optional(piAttribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetPbufferAttribARB(dispatchGlobal, hPbuffer, piAttribList);
  return ret;
}

// WGL_EXT_display_color_table

static GLboolean REGAL_CALL http_wglBindDisplayColorTableEXT(Layer *_layer, GLushort id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBindDisplayColorTableEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBindDisplayColorTableEXT(dispatchGlobal, id);
  return ret;
}

static GLboolean REGAL_CALL http_wglCreateDisplayColorTableEXT(Layer *_layer, GLushort id)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateDisplayColorTableEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateDisplayColorTableEXT(dispatchGlobal, id);
  return ret;
}

static VOID REGAL_CALL http_wglDestroyDisplayColorTableEXT(Layer *_layer, GLushort id)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDestroyDisplayColorTableEXT","(", id, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RwglDestroyDisplayColorTableEXT(dispatchGlobal, id);
}

static GLboolean REGAL_CALL http_wglLoadDisplayColorTableEXT(Layer *_layer, const GLushort *table, GLuint length)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglLoadDisplayColorTableEXT","(", print_array(table,length), ", ", length, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglLoadDisplayColorTableEXT(dispatchGlobal, table, length);
  return ret;
}

// WGL_EXT_extensions_string

static const char *REGAL_CALL http_wglGetExtensionsStringEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetExtensionsStringEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetExtensionsStringEXT(dispatchGlobal);
  return ret;
}

// WGL_EXT_make_current_read

static HDC REGAL_CALL http_wglGetCurrentReadDCEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    HDC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetCurrentReadDCEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetCurrentReadDCEXT(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglMakeContextCurrentEXT(Layer *_layer, HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglMakeContextCurrentEXT","(", print_optional(hDrawDC,Logging::pointers), ", ", print_optional(hReadDC,Logging::pointers), ", ", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglMakeContextCurrentEXT(dispatchGlobal, hDrawDC, hReadDC, hglrc);
  return ret;
}

// WGL_EXT_pbuffer

static HPBUFFEREXT REGAL_CALL http_wglCreatePbufferEXT(Layer *_layer, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
  Http * self = static_cast<Http *>(_layer);
    HPBUFFEREXT  ret = (HPBUFFEREXT) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreatePbufferEXT","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iWidth, ", ", iHeight, ", ", print_optional(piAttribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreatePbufferEXT(dispatchGlobal, hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  return ret;
}

static BOOL REGAL_CALL http_wglDestroyPbufferEXT(Layer *_layer, HPBUFFEREXT hPbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDestroyPbufferEXT","(", print_optional(hPbuffer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDestroyPbufferEXT(dispatchGlobal, hPbuffer);
  return ret;
}

static HDC REGAL_CALL http_wglGetPbufferDCEXT(Layer *_layer, HPBUFFEREXT hPbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    HDC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPbufferDCEXT","(", print_optional(hPbuffer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPbufferDCEXT(dispatchGlobal, hPbuffer);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryPbufferEXT(Layer *_layer, HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryPbufferEXT","(", print_optional(hPbuffer,Logging::pointers), ", ", iAttribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryPbufferEXT(dispatchGlobal, hPbuffer, iAttribute, piValue);
  return ret;
}

static int REGAL_CALL http_wglReleasePbufferDCEXT(Layer *_layer, HPBUFFEREXT hPbuffer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleasePbufferDCEXT","(", print_optional(hPbuffer,Logging::pointers), ", ", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleasePbufferDCEXT(dispatchGlobal, hPbuffer, hDC);
  return ret;
}

// WGL_EXT_pixel_format

static BOOL REGAL_CALL http_wglChoosePixelFormatEXT(Layer *_layer, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglChoosePixelFormatEXT","(", print_optional(hDC,Logging::pointers), ", ", print_optional(piAttribIList,Logging::pointers), ", ", pfAttribFList, ", ", nMaxFormats, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglChoosePixelFormatEXT(dispatchGlobal, hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  return ret;
}

static BOOL REGAL_CALL http_wglGetPixelFormatAttribfvEXT(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPixelFormatAttribfvEXT","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", print_array(piAttributes,nAttributes), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPixelFormatAttribfvEXT(dispatchGlobal, hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  return ret;
}

static BOOL REGAL_CALL http_wglGetPixelFormatAttribivEXT(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPixelFormatAttribivEXT","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", print_array(piAttributes,nAttributes), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPixelFormatAttribivEXT(dispatchGlobal, hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  return ret;
}

// WGL_EXT_swap_control

static int REGAL_CALL http_wglGetSwapIntervalEXT(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetSwapIntervalEXT","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetSwapIntervalEXT(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglSwapIntervalEXT(Layer *_layer, int interval)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSwapIntervalEXT","(", interval, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSwapIntervalEXT(dispatchGlobal, interval);
  return ret;
}

// WGL_GDI

static BOOL REGAL_CALL http_SwapBuffers(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("SwapBuffers","(", print_optional(hDC,Logging::pointers), ")");
  }
  self->count.frame++;
  switch( self->runState ) {
     case RS_Run:
       break;
     default:
      self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RSwapBuffers(dispatchGlobal, hDC);
  self->count.lastFrame = self->count.call;
  return ret;
}

static int REGAL_CALL http_wglChoosePixelFormat(Layer *_layer, HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglChoosePixelFormat","(", print_optional(hDC,Logging::pointers), ", ", print_optional(ppfd,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglChoosePixelFormat(dispatchGlobal, hDC, ppfd);
  return ret;
}

static int REGAL_CALL http_wglDescribePixelFormat(Layer *_layer, HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDescribePixelFormat","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", nBytes, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDescribePixelFormat(dispatchGlobal, hDC, iPixelFormat, nBytes, ppfd);
  return ret;
}

static int REGAL_CALL http_wglGetPixelFormat(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetPixelFormat","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetPixelFormat(dispatchGlobal, hDC);
  return ret;
}

static BOOL REGAL_CALL http_wglSetPixelFormat(Layer *_layer, HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetPixelFormat","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", print_optional(ppfd,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetPixelFormat(dispatchGlobal, hDC, iPixelFormat, ppfd);
  return ret;
}

static BOOL REGAL_CALL http_wglSwapBuffers(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSwapBuffers","(", print_optional(hDC,Logging::pointers), ")");
  }
  self->count.frame++;
  switch( self->runState ) {
     case RS_Run:
       break;
     default:
      self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSwapBuffers(dispatchGlobal, hDC);
  self->count.lastFrame = self->count.call;
  return ret;
}

// WGL_I3D_digital_video_control

static BOOL REGAL_CALL http_wglGetDigitalVideoParametersI3D(Layer *_layer, HDC hDC, int iAttribute, int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetDigitalVideoParametersI3D","(", print_optional(hDC,Logging::pointers), ", ", iAttribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetDigitalVideoParametersI3D(dispatchGlobal, hDC, iAttribute, piValue);
  return ret;
}

static BOOL REGAL_CALL http_wglSetDigitalVideoParametersI3D(Layer *_layer, HDC hDC, int iAttribute, const int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetDigitalVideoParametersI3D","(", print_optional(hDC,Logging::pointers), ", ", iAttribute, ", ", print_optional(piValue,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetDigitalVideoParametersI3D(dispatchGlobal, hDC, iAttribute, piValue);
  return ret;
}

// WGL_I3D_gamma

static BOOL REGAL_CALL http_wglGetGammaTableI3D(Layer *_layer, HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGammaTableI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGammaTableI3D(dispatchGlobal, hDC, iEntries, puRed, puGreen, puBlue);
  return ret;
}

static BOOL REGAL_CALL http_wglGetGammaTableParametersI3D(Layer *_layer, HDC hDC, int iAttribute, int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGammaTableParametersI3D","(", print_optional(hDC,Logging::pointers), ", ", iAttribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGammaTableParametersI3D(dispatchGlobal, hDC, iAttribute, piValue);
  return ret;
}

static BOOL REGAL_CALL http_wglSetGammaTableI3D(Layer *_layer, HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetGammaTableI3D","(", print_optional(hDC,Logging::pointers), ", ", iEntries, ", ", print_array(puRed,iEntries), ", ", print_array(puGreen,iEntries), ", ", print_array(puBlue,iEntries), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetGammaTableI3D(dispatchGlobal, hDC, iEntries, puRed, puGreen, puBlue);
  return ret;
}

static BOOL REGAL_CALL http_wglSetGammaTableParametersI3D(Layer *_layer, HDC hDC, int iAttribute, const int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetGammaTableParametersI3D","(", print_optional(hDC,Logging::pointers), ", ", iAttribute, ", ", print_optional(piValue,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetGammaTableParametersI3D(dispatchGlobal, hDC, iAttribute, piValue);
  return ret;
}

// WGL_I3D_genlock

static BOOL REGAL_CALL http_wglDisableGenlockI3D(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDisableGenlockI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDisableGenlockI3D(dispatchGlobal, hDC);
  return ret;
}

static BOOL REGAL_CALL http_wglEnableGenlockI3D(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnableGenlockI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnableGenlockI3D(dispatchGlobal, hDC);
  return ret;
}

static BOOL REGAL_CALL http_wglGenlockSampleRateI3D(Layer *_layer, HDC hDC, UINT uRate)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGenlockSampleRateI3D","(", print_optional(hDC,Logging::pointers), ", ", uRate, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGenlockSampleRateI3D(dispatchGlobal, hDC, uRate);
  return ret;
}

static BOOL REGAL_CALL http_wglGenlockSourceDelayI3D(Layer *_layer, HDC hDC, UINT uDelay)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGenlockSourceDelayI3D","(", print_optional(hDC,Logging::pointers), ", ", uDelay, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGenlockSourceDelayI3D(dispatchGlobal, hDC, uDelay);
  return ret;
}

static BOOL REGAL_CALL http_wglGenlockSourceEdgeI3D(Layer *_layer, HDC hDC, UINT uEdge)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGenlockSourceEdgeI3D","(", print_optional(hDC,Logging::pointers), ", ", uEdge, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGenlockSourceEdgeI3D(dispatchGlobal, hDC, uEdge);
  return ret;
}

static BOOL REGAL_CALL http_wglGenlockSourceI3D(Layer *_layer, HDC hDC, UINT uSource)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGenlockSourceI3D","(", print_optional(hDC,Logging::pointers), ", ", uSource, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGenlockSourceI3D(dispatchGlobal, hDC, uSource);
  return ret;
}

static BOOL REGAL_CALL http_wglGetGenlockSampleRateI3D(Layer *_layer, HDC hDC, UINT *uRate)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGenlockSampleRateI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGenlockSampleRateI3D(dispatchGlobal, hDC, uRate);
  return ret;
}

static BOOL REGAL_CALL http_wglGetGenlockSourceDelayI3D(Layer *_layer, HDC hDC, UINT *uDelay)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGenlockSourceDelayI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGenlockSourceDelayI3D(dispatchGlobal, hDC, uDelay);
  return ret;
}

static BOOL REGAL_CALL http_wglGetGenlockSourceEdgeI3D(Layer *_layer, HDC hDC, UINT *uEdge)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGenlockSourceEdgeI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGenlockSourceEdgeI3D(dispatchGlobal, hDC, uEdge);
  return ret;
}

static BOOL REGAL_CALL http_wglGetGenlockSourceI3D(Layer *_layer, HDC hDC, UINT *uSource)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetGenlockSourceI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetGenlockSourceI3D(dispatchGlobal, hDC, uSource);
  return ret;
}

static BOOL REGAL_CALL http_wglIsEnabledGenlockI3D(Layer *_layer, HDC hDC, BOOL *pFlag)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglIsEnabledGenlockI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglIsEnabledGenlockI3D(dispatchGlobal, hDC, pFlag);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryGenlockMaxSourceDelayI3D(Layer *_layer, HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryGenlockMaxSourceDelayI3D","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryGenlockMaxSourceDelayI3D(dispatchGlobal, hDC, uMaxLineDelay, uMaxPixelDelay);
  return ret;
}

// WGL_I3D_image_buffer

static BOOL REGAL_CALL http_wglAssociateImageBufferEventsI3D(Layer *_layer, HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglAssociateImageBufferEventsI3D","(", print_optional(hDC,Logging::pointers), ", ", print_array(pEvent,count), ", ", print_array(pAddress,count), ", ", print_array(pSize,count), ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglAssociateImageBufferEventsI3D(dispatchGlobal, hDC, pEvent, pAddress, pSize, count);
  return ret;
}

static LPVOID REGAL_CALL http_wglCreateImageBufferI3D(Layer *_layer, HDC hDC, DWORD dwSize, UINT uFlags)
{
  Http * self = static_cast<Http *>(_layer);
    LPVOID  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateImageBufferI3D","(", print_optional(hDC,Logging::pointers), ", ", dwSize, ", ", uFlags, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateImageBufferI3D(dispatchGlobal, hDC, dwSize, uFlags);
  return ret;
}

static BOOL REGAL_CALL http_wglDestroyImageBufferI3D(Layer *_layer, HDC hDC, LPVOID pAddress)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDestroyImageBufferI3D","(", print_optional(hDC,Logging::pointers), ", ", print_optional(pAddress,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDestroyImageBufferI3D(dispatchGlobal, hDC, pAddress);
  return ret;
}

static BOOL REGAL_CALL http_wglReleaseImageBufferEventsI3D(Layer *_layer, HDC hDC, const LPVOID *pAddress, UINT count)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleaseImageBufferEventsI3D","(", print_optional(hDC,Logging::pointers), ", ", print_array(pAddress,count), ", ", count, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleaseImageBufferEventsI3D(dispatchGlobal, hDC, pAddress, count);
  return ret;
}

// WGL_I3D_swap_frame_lock

static BOOL REGAL_CALL http_wglDisableFrameLockI3D(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDisableFrameLockI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDisableFrameLockI3D(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglEnableFrameLockI3D(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnableFrameLockI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnableFrameLockI3D(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglIsEnabledFrameLockI3D(Layer *_layer, BOOL *pFlag)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglIsEnabledFrameLockI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglIsEnabledFrameLockI3D(dispatchGlobal, pFlag);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryFrameLockMasterI3D(Layer *_layer, BOOL *pFlag)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryFrameLockMasterI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryFrameLockMasterI3D(dispatchGlobal, pFlag);
  return ret;
}

// WGL_I3D_swap_frame_usage

static BOOL REGAL_CALL http_wglBeginFrameTrackingI3D(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBeginFrameTrackingI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBeginFrameTrackingI3D(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglEndFrameTrackingI3D(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEndFrameTrackingI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEndFrameTrackingI3D(dispatchGlobal);
  return ret;
}

static BOOL REGAL_CALL http_wglGetFrameUsageI3D(Layer *_layer, float *pUsage)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetFrameUsageI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetFrameUsageI3D(dispatchGlobal, pUsage);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryFrameTrackingI3D(Layer *_layer, DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryFrameTrackingI3D","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryFrameTrackingI3D(dispatchGlobal, pFrameCount, pMissedFrames, pLastMissedUsage);
  return ret;
}

// WGL_NV_DX_interop

static BOOL REGAL_CALL http_wglDXCloseDeviceNV(Layer *_layer, HANDLE hDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXCloseDeviceNV","(", hDevice, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXCloseDeviceNV(dispatchGlobal, hDevice);
  return ret;
}

static BOOL REGAL_CALL http_wglDXLockObjectsNV(Layer *_layer, HANDLE hDevice, GLint count, HANDLE *hObjects)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXLockObjectsNV","(", hDevice, ", ", count, ", ", hObjects, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXLockObjectsNV(dispatchGlobal, hDevice, count, hObjects);
  return ret;
}

static BOOL REGAL_CALL http_wglDXObjectAccessNV(Layer *_layer, HANDLE hObject, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXObjectAccessNV","(", hObject, ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXObjectAccessNV(dispatchGlobal, hObject, access);
  return ret;
}

static HANDLE REGAL_CALL http_wglDXOpenDeviceNV(Layer *_layer, GLvoid *dxDevice)
{
  Http * self = static_cast<Http *>(_layer);
    HANDLE  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXOpenDeviceNV","(", print_optional(dxDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXOpenDeviceNV(dispatchGlobal, dxDevice);
  return ret;
}

static HANDLE REGAL_CALL http_wglDXRegisterObjectNV(Layer *_layer, HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
{
  Http * self = static_cast<Http *>(_layer);
    HANDLE  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXRegisterObjectNV","(", hDevice, ", ", print_optional(dxObject,Logging::pointers), ", ", name, ", ", toString(type), ", ", toString(access), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXRegisterObjectNV(dispatchGlobal, hDevice, dxObject, name, type, access);
  return ret;
}

static BOOL REGAL_CALL http_wglDXSetResourceShareHandleNV(Layer *_layer, GLvoid *dxObject, HANDLE shareHandle)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXSetResourceShareHandleNV","(", print_optional(dxObject,Logging::pointers), ", ", shareHandle, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXSetResourceShareHandleNV(dispatchGlobal, dxObject, shareHandle);
  return ret;
}

static BOOL REGAL_CALL http_wglDXUnlockObjectsNV(Layer *_layer, HANDLE hDevice, GLint count, HANDLE *hObjects)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXUnlockObjectsNV","(", hDevice, ", ", count, ", ", hObjects, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXUnlockObjectsNV(dispatchGlobal, hDevice, count, hObjects);
  return ret;
}

static BOOL REGAL_CALL http_wglDXUnregisterObjectNV(Layer *_layer, HANDLE hDevice, HANDLE hObject)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDXUnregisterObjectNV","(", hDevice, ", ", hObject, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDXUnregisterObjectNV(dispatchGlobal, hDevice, hObject);
  return ret;
}

// WGL_NV_copy_image

static BOOL REGAL_CALL http_wglCopyImageSubDataNV(Layer *_layer, HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCopyImageSubDataNV","(", print_optional(hSrcRC,Logging::pointers), ", ", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", print_optional(hDstRC,Logging::pointers), ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ", ", dstX, ", ", dstY, ", ", dstZ, ", ", width, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCopyImageSubDataNV(dispatchGlobal, hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  return ret;
}

// WGL_NV_gpu_affinity

static HDC REGAL_CALL http_wglCreateAffinityDCNV(Layer *_layer, const HGPUNV *phGpuList)
{
  Http * self = static_cast<Http *>(_layer);
    HDC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateAffinityDCNV","(", phGpuList, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateAffinityDCNV(dispatchGlobal, phGpuList);
  return ret;
}

static BOOL REGAL_CALL http_wglDeleteDCNV(Layer *_layer, HDC hAffinityDC)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDeleteDCNV","(", print_optional(hAffinityDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDeleteDCNV(dispatchGlobal, hAffinityDC);
  return ret;
}

static BOOL REGAL_CALL http_wglEnumGpuDevicesNV(Layer *_layer, HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnumGpuDevicesNV","(", print_optional(hGpu,Logging::pointers), ", ", iDeviceIndex, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnumGpuDevicesNV(dispatchGlobal, hGpu, iDeviceIndex, lpGpuDevice);
  return ret;
}

static BOOL REGAL_CALL http_wglEnumGpusFromAffinityDCNV(Layer *_layer, HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnumGpusFromAffinityDCNV","(", print_optional(hAffinityDC,Logging::pointers), ", ", iGpuIndex, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnumGpusFromAffinityDCNV(dispatchGlobal, hAffinityDC, iGpuIndex, hGpu);
  return ret;
}

static BOOL REGAL_CALL http_wglEnumGpusNV(Layer *_layer, UINT iGpuIndex, HGPUNV *phGpu)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnumGpusNV","(", iGpuIndex, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnumGpusNV(dispatchGlobal, iGpuIndex, phGpu);
  return ret;
}

// WGL_NV_present_video

static BOOL REGAL_CALL http_wglBindVideoDeviceNV(Layer *_layer, HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBindVideoDeviceNV","(", print_optional(hDC,Logging::pointers), ", ", uVideoSlot, ", ", print_optional(hVideoDevice,Logging::pointers), ", ", print_optional(piAttribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBindVideoDeviceNV(dispatchGlobal, hDC, uVideoSlot, hVideoDevice, piAttribList);
  return ret;
}

static int REGAL_CALL http_wglEnumerateVideoDevicesNV(Layer *_layer, HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnumerateVideoDevicesNV","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnumerateVideoDevicesNV(dispatchGlobal, hDC, phDeviceList);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryCurrentContextNV(Layer *_layer, int iAttribute, int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryCurrentContextNV","(", iAttribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryCurrentContextNV(dispatchGlobal, iAttribute, piValue);
  return ret;
}

// WGL_NV_swap_group

static BOOL REGAL_CALL http_wglBindSwapBarrierNV(Layer *_layer, GLuint group, GLuint barrier)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBindSwapBarrierNV","(", group, ", ", barrier, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBindSwapBarrierNV(dispatchGlobal, group, barrier);
  return ret;
}

static BOOL REGAL_CALL http_wglJoinSwapGroupNV(Layer *_layer, HDC hDC, GLuint group)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglJoinSwapGroupNV","(", print_optional(hDC,Logging::pointers), ", ", group, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglJoinSwapGroupNV(dispatchGlobal, hDC, group);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryFrameCountNV(Layer *_layer, HDC hDC, GLuint *count)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryFrameCountNV","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryFrameCountNV(dispatchGlobal, hDC, count);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryMaxSwapGroupsNV(Layer *_layer, HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryMaxSwapGroupsNV","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryMaxSwapGroupsNV(dispatchGlobal, hDC, maxGroups, maxBarriers);
  return ret;
}

static BOOL REGAL_CALL http_wglQuerySwapGroupNV(Layer *_layer, HDC hDC, GLuint *group, GLuint *barrier)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQuerySwapGroupNV","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQuerySwapGroupNV(dispatchGlobal, hDC, group, barrier);
  return ret;
}

static BOOL REGAL_CALL http_wglResetFrameCountNV(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglResetFrameCountNV","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglResetFrameCountNV(dispatchGlobal, hDC);
  return ret;
}

// WGL_NV_vertex_array_range

static void *REGAL_CALL http_wglAllocateMemoryNV(Layer *_layer, GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
  Http * self = static_cast<Http *>(_layer);
    void * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglAllocateMemoryNV","(", size, ", ", readfreq, ", ", writefreq, ", ", priority, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglAllocateMemoryNV(dispatchGlobal, size, readfreq, writefreq, priority);
  return ret;
}

static void REGAL_CALL http_wglFreeMemoryNV(Layer *_layer, void *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglFreeMemoryNV","(", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RwglFreeMemoryNV(dispatchGlobal, pointer);
}

// WGL_NV_video_capture

static BOOL REGAL_CALL http_wglBindVideoCaptureDeviceNV(Layer *_layer, UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBindVideoCaptureDeviceNV","(", uVideoSlot, ", ", print_optional(hDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBindVideoCaptureDeviceNV(dispatchGlobal, uVideoSlot, hDevice);
  return ret;
}

static UINT REGAL_CALL http_wglEnumerateVideoCaptureDevicesNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
{
  Http * self = static_cast<Http *>(_layer);
    UINT  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglEnumerateVideoCaptureDevicesNV","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglEnumerateVideoCaptureDevicesNV(dispatchGlobal, hDC, phDeviceList);
  return ret;
}

static BOOL REGAL_CALL http_wglLockVideoCaptureDeviceNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglLockVideoCaptureDeviceNV","(", print_optional(hDC,Logging::pointers), ", ", print_optional(hDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglLockVideoCaptureDeviceNV(dispatchGlobal, hDC, hDevice);
  return ret;
}

static BOOL REGAL_CALL http_wglQueryVideoCaptureDeviceNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglQueryVideoCaptureDeviceNV","(", print_optional(hDC,Logging::pointers), ", ", print_optional(hDevice,Logging::pointers), ", ", iAttribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglQueryVideoCaptureDeviceNV(dispatchGlobal, hDC, hDevice, iAttribute, piValue);
  return ret;
}

static BOOL REGAL_CALL http_wglReleaseVideoCaptureDeviceNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleaseVideoCaptureDeviceNV","(", print_optional(hDC,Logging::pointers), ", ", print_optional(hDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleaseVideoCaptureDeviceNV(dispatchGlobal, hDC, hDevice);
  return ret;
}

// WGL_NV_video_output

static BOOL REGAL_CALL http_wglBindVideoImageNV(Layer *_layer, HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglBindVideoImageNV","(", print_optional(hVideoDevice,Logging::pointers), ", ", print_optional(hPbuffer,Logging::pointers), ", ", iVideoBuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglBindVideoImageNV(dispatchGlobal, hVideoDevice, hPbuffer, iVideoBuffer);
  return ret;
}

static BOOL REGAL_CALL http_wglGetVideoDeviceNV(Layer *_layer, HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetVideoDeviceNV","(", print_optional(hDC,Logging::pointers), ", ", numDevices, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetVideoDeviceNV(dispatchGlobal, hDC, numDevices, hVideoDevice);
  return ret;
}

static BOOL REGAL_CALL http_wglGetVideoInfoNV(Layer *_layer, HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetVideoInfoNV","(", print_optional(hpVideoDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetVideoInfoNV(dispatchGlobal, hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  return ret;
}

static BOOL REGAL_CALL http_wglReleaseVideoDeviceNV(Layer *_layer, HPVIDEODEV hVideoDevice)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleaseVideoDeviceNV","(", print_optional(hVideoDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleaseVideoDeviceNV(dispatchGlobal, hVideoDevice);
  return ret;
}

static BOOL REGAL_CALL http_wglReleaseVideoImageNV(Layer *_layer, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglReleaseVideoImageNV","(", print_optional(hPbuffer,Logging::pointers), ", ", iVideoBuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglReleaseVideoImageNV(dispatchGlobal, hPbuffer, iVideoBuffer);
  return ret;
}

static BOOL REGAL_CALL http_wglSendPbufferToVideoNV(Layer *_layer, HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSendPbufferToVideoNV","(", print_optional(hPbuffer,Logging::pointers), ", ", iBufferType, ", ", bBlock, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSendPbufferToVideoNV(dispatchGlobal, hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  return ret;
}

// WGL_OML_sync_control

static BOOL REGAL_CALL http_wglGetMscRateOML(Layer *_layer, HDC hDC, INT32 *numerator, INT32 *denominator)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetMscRateOML","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetMscRateOML(dispatchGlobal, hDC, numerator, denominator);
  return ret;
}

static BOOL REGAL_CALL http_wglGetSyncValuesOML(Layer *_layer, HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetSyncValuesOML","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetSyncValuesOML(dispatchGlobal, hDC, ust, msc, sbc);
  return ret;
}

static INT64 REGAL_CALL http_wglSwapBuffersMscOML(Layer *_layer, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  Http * self = static_cast<Http *>(_layer);
    INT64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSwapBuffersMscOML","(", print_optional(hDC,Logging::pointers), ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSwapBuffersMscOML(dispatchGlobal, hDC, target_msc, divisor, remainder);
  return ret;
}

static INT64 REGAL_CALL http_wglSwapLayerBuffersMscOML(Layer *_layer, HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  Http * self = static_cast<Http *>(_layer);
    INT64  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSwapLayerBuffersMscOML","(", print_optional(hDC,Logging::pointers), ", ", fuPlanes, ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSwapLayerBuffersMscOML(dispatchGlobal, hDC, fuPlanes, target_msc, divisor, remainder);
  return ret;
}

static BOOL REGAL_CALL http_wglWaitForMscOML(Layer *_layer, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglWaitForMscOML","(", print_optional(hDC,Logging::pointers), ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglWaitForMscOML(dispatchGlobal, hDC, target_msc, divisor, remainder, ust, msc, sbc);
  return ret;
}

static BOOL REGAL_CALL http_wglWaitForSbcOML(Layer *_layer, HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglWaitForSbcOML","(", print_optional(hDC,Logging::pointers), ", ", target_sbc, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglWaitForSbcOML(dispatchGlobal, hDC, target_sbc, ust, msc, sbc);
  return ret;
}

// WGL_core

static BOOL REGAL_CALL http_wglCopyContext(Layer *_layer, HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCopyContext","(", print_optional(hglrcSrc,Logging::pointers), ", ", print_optional(hglrcDst,Logging::pointers), ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCopyContext(dispatchGlobal, hglrcSrc, hglrcDst, mask);
  return ret;
}

static HGLRC REGAL_CALL http_wglCreateContext(Layer *_layer, HDC hDC)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateContext","(", print_optional(hDC,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateContext(dispatchGlobal, hDC);
  return ret;
}

static HGLRC REGAL_CALL http_wglCreateLayerContext(Layer *_layer, HDC hDC, int iLayerPlane)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglCreateLayerContext","(", print_optional(hDC,Logging::pointers), ", ", iLayerPlane, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglCreateLayerContext(dispatchGlobal, hDC, iLayerPlane);
  return ret;
}

static BOOL REGAL_CALL http_wglDeleteContext(Layer *_layer, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDeleteContext","(", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDeleteContext(dispatchGlobal, hglrc);
  return ret;
}

static BOOL REGAL_CALL http_wglDescribeLayerPlane(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglDescribeLayerPlane","(", print_optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nBytes, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglDescribeLayerPlane(dispatchGlobal, hDC, iPixelFormat, iLayerPlane, nBytes, plpd);
  return ret;
}

static HGLRC REGAL_CALL http_wglGetCurrentContext(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    HGLRC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetCurrentContext","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetCurrentContext(dispatchGlobal);
  return ret;
}

static HDC REGAL_CALL http_wglGetCurrentDC(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    HDC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetCurrentDC","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetCurrentDC(dispatchGlobal);
  return ret;
}

static PROC REGAL_CALL http_wglGetDefaultProcAddress(Layer *_layer, LPCSTR lpszProc)
{
  Http * self = static_cast<Http *>(_layer);
    PROC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetDefaultProcAddress","(", print_quote(lpszProc,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetDefaultProcAddress(dispatchGlobal, lpszProc);
  return ret;
}

static int REGAL_CALL http_wglGetLayerPaletteEntries(Layer *_layer, HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetLayerPaletteEntries","(", print_optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", iStart, ", ", nEntries, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetLayerPaletteEntries(dispatchGlobal, hDC, iLayerPlane, iStart, nEntries, pcr);
  return ret;
}

static PROC REGAL_CALL http_wglGetProcAddress(Layer *_layer, LPCSTR lpszProc)
{
  Http * self = static_cast<Http *>(_layer);
    PROC  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglGetProcAddress","(", print_quote(lpszProc,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglGetProcAddress(dispatchGlobal, lpszProc);
  return ret;
}

static BOOL REGAL_CALL http_wglMakeCurrent(Layer *_layer, HDC hDC, HGLRC hglrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglMakeCurrent","(", print_optional(hDC,Logging::pointers), ", ", print_optional(hglrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglMakeCurrent(dispatchGlobal, hDC, hglrc);
  return ret;
}

static BOOL REGAL_CALL http_wglRealizeLayerPalette(Layer *_layer, HDC hDC, int iLayerPlane, BOOL bRealize)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglRealizeLayerPalette","(", print_optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", bRealize, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglRealizeLayerPalette(dispatchGlobal, hDC, iLayerPlane, bRealize);
  return ret;
}

static int REGAL_CALL http_wglSetLayerPaletteEntries(Layer *_layer, HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSetLayerPaletteEntries","(", print_optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", iStart, ", ", nEntries, ", ", print_array(pcr,nEntries), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSetLayerPaletteEntries(dispatchGlobal, hDC, iLayerPlane, iStart, nEntries, pcr);
  return ret;
}

static BOOL REGAL_CALL http_wglShareLists(Layer *_layer, HGLRC hglrcShare, HGLRC hglrcSrc)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglShareLists","(", print_optional(hglrcShare,Logging::pointers), ", ", print_optional(hglrcSrc,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglShareLists(dispatchGlobal, hglrcShare, hglrcSrc);
  return ret;
}

static BOOL REGAL_CALL http_wglSwapLayerBuffers(Layer *_layer, HDC hDC, UINT fuPlanes)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSwapLayerBuffers","(", print_optional(hDC,Logging::pointers), ", ", fuPlanes, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSwapLayerBuffers(dispatchGlobal, hDC, fuPlanes);
  return ret;
}

static DWORD REGAL_CALL http_wglSwapMultipleBuffers(Layer *_layer, UINT n, const WGLSWAP *ps)
{
  Http * self = static_cast<Http *>(_layer);
    DWORD  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglSwapMultipleBuffers","(", n, ", ", ps, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglSwapMultipleBuffers(dispatchGlobal, n, ps);
  return ret;
}

static BOOL REGAL_CALL http_wglUseFontBitmapsA(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglUseFontBitmapsA","(", print_optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglUseFontBitmapsA(dispatchGlobal, hDC, first, count, listBase);
  return ret;
}

static BOOL REGAL_CALL http_wglUseFontBitmapsW(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglUseFontBitmapsW","(", print_optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglUseFontBitmapsW(dispatchGlobal, hDC, first, count, listBase);
  return ret;
}

static BOOL REGAL_CALL http_wglUseFontOutlinesA(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglUseFontOutlinesA","(", print_optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ", ", deviation, ", ", extrusion, ", ", format, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglUseFontOutlinesA(dispatchGlobal, hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  return ret;
}

static BOOL REGAL_CALL http_wglUseFontOutlinesW(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  Http * self = static_cast<Http *>(_layer);
    BOOL  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("wglUseFontOutlinesW","(", print_optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ", ", deviation, ", ", extrusion, ", ", format, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RwglUseFontOutlinesW(dispatchGlobal, hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  return ret;
}

#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX

// GLX_VERSION_1_0

static XVisualInfo *REGAL_CALL http_glXChooseVisual(Layer *_layer, Display *dpy, int screen, int *attribList)
{
  Http * self = static_cast<Http *>(_layer);
    XVisualInfo * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXChooseVisual","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", print_optional(attribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXChooseVisual(dispatchGlobal, dpy, screen, attribList);
  return ret;
}

static void REGAL_CALL http_glXCopyContext(Layer *_layer, Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCopyContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(src,Logging::pointers), ", ", print_optional(dst,Logging::pointers), ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXCopyContext(dispatchGlobal, dpy, src, dst, mask);
}

static GLXContext REGAL_CALL http_glXCreateContext(Layer *_layer, Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(vis,Logging::pointers), ", ", print_optional(shareList,Logging::pointers), ", ", direct, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateContext(dispatchGlobal, dpy, vis, shareList, direct);
  return ret;
}

static GLXPixmap REGAL_CALL http_glXCreateGLXPixmap(Layer *_layer, Display *dpy, XVisualInfo *vis, Pixmap pixmap)
{
  Http * self = static_cast<Http *>(_layer);
    GLXPixmap  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateGLXPixmap","(", print_optional(dpy,Logging::pointers), ", ", print_optional(vis,Logging::pointers), ", ", print_optional(pixmap,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateGLXPixmap(dispatchGlobal, dpy, vis, pixmap);
  return ret;
}

static void REGAL_CALL http_glXDestroyContext(Layer *_layer, Display *dpy, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDestroyContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDestroyContext(dispatchGlobal, dpy, ctx);
}

static void REGAL_CALL http_glXDestroyGLXPixmap(Layer *_layer, Display *dpy, GLXPixmap pix)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDestroyGLXPixmap","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pix,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDestroyGLXPixmap(dispatchGlobal, dpy, pix);
}

static int REGAL_CALL http_glXGetConfig(Layer *_layer, Display *dpy, XVisualInfo *vis, int attrib, int *value)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetConfig","(", print_optional(dpy,Logging::pointers), ", ", print_optional(vis,Logging::pointers), ", ", attrib, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetConfig(dispatchGlobal, dpy, vis, attrib, value);
  return ret;
}

static GLXContext REGAL_CALL http_glXGetCurrentContext(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetCurrentContext","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetCurrentContext(dispatchGlobal);
  return ret;
}

static GLXDrawable REGAL_CALL http_glXGetCurrentDrawable(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLXDrawable  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetCurrentDrawable","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetCurrentDrawable(dispatchGlobal);
  return ret;
}

static Bool REGAL_CALL http_glXIsDirect(Layer *_layer, Display *dpy, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXIsDirect","(", print_optional(dpy,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXIsDirect(dispatchGlobal, dpy, ctx);
  return ret;
}

static Bool REGAL_CALL http_glXMakeCurrent(Layer *_layer, Display *dpy, GLXDrawable drawable, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXMakeCurrent","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXMakeCurrent(dispatchGlobal, dpy, drawable, ctx);
  return ret;
}

static Bool REGAL_CALL http_glXQueryExtension(Layer *_layer, Display *dpy, int *errorBase, int *eventBase)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryExtension","(", print_optional(dpy,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryExtension(dispatchGlobal, dpy, errorBase, eventBase);
  return ret;
}

static Bool REGAL_CALL http_glXQueryVersion(Layer *_layer, Display *dpy, int *major, int *minor)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryVersion","(", print_optional(dpy,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryVersion(dispatchGlobal, dpy, major, minor);
  return ret;
}

static void REGAL_CALL http_glXSwapBuffers(Layer *_layer, Display *dpy, GLXDrawable drawable)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSwapBuffers","(", print_optional(dpy,Logging::pointers), ", ", drawable, ")");
  }
  self->count.frame++;
  switch( self->runState ) {
     case RS_Run:
       break;
     default:
      self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXSwapBuffers(dispatchGlobal, dpy, drawable);
  self->count.lastFrame = self->count.call;
}

static void REGAL_CALL http_glXUseXFont(Layer *_layer, Font font, int first, int count, int listBase)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXUseXFont","(", print_optional(font,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXUseXFont(dispatchGlobal, font, first, count, listBase);
}

static void REGAL_CALL http_glXWaitGL(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXWaitGL","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXWaitGL(dispatchGlobal);
}

static void REGAL_CALL http_glXWaitX(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXWaitX","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXWaitX(dispatchGlobal);
}

// GLX_VERSION_1_1

static const char *REGAL_CALL http_glXGetClientString(Layer *_layer, Display *dpy, int name)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetClientString","(", print_optional(dpy,Logging::pointers), ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetClientString(dispatchGlobal, dpy, name);
  return ret;
}

static const char *REGAL_CALL http_glXQueryExtensionsString(Layer *_layer, Display *dpy, int screen)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryExtensionsString","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryExtensionsString(dispatchGlobal, dpy, screen);
  return ret;
}

static const char *REGAL_CALL http_glXQueryServerString(Layer *_layer, Display *dpy, int screen, int name)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryServerString","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", name, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryServerString(dispatchGlobal, dpy, screen, name);
  return ret;
}

// GLX_VERSION_1_2

static Display *REGAL_CALL http_glXGetCurrentDisplay(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    Display * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetCurrentDisplay","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetCurrentDisplay(dispatchGlobal);
  return ret;
}

// GLX_VERSION_1_3

static GLXFBConfig *REGAL_CALL http_glXChooseFBConfig(Layer *_layer, Display *dpy, int screen, const int *attrib_list, int *nelements)
{
  Http * self = static_cast<Http *>(_layer);
    GLXFBConfig * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXChooseFBConfig","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXChooseFBConfig(dispatchGlobal, dpy, screen, attrib_list, nelements);
  return ret;
}

static GLXContext REGAL_CALL http_glXCreateNewContext(Layer *_layer, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateNewContext","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", render_type, ", ", print_optional(share_list,Logging::pointers), ", ", direct, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateNewContext(dispatchGlobal, dpy, config, render_type, share_list, direct);
  return ret;
}

static GLXPbuffer REGAL_CALL http_glXCreatePbuffer(Layer *_layer, Display *dpy, GLXFBConfig config, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    GLXPbuffer  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreatePbuffer","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreatePbuffer(dispatchGlobal, dpy, config, attrib_list);
  return ret;
}

static GLXPixmap REGAL_CALL http_glXCreatePixmap(Layer *_layer, Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    GLXPixmap  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreatePixmap","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", print_optional(pixmap,Logging::pointers), ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreatePixmap(dispatchGlobal, dpy, config, pixmap, attrib_list);
  return ret;
}

static GLXWindow REGAL_CALL http_glXCreateWindow(Layer *_layer, Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    GLXWindow  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateWindow","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", win, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateWindow(dispatchGlobal, dpy, config, win, attrib_list);
  return ret;
}

static void REGAL_CALL http_glXDestroyPbuffer(Layer *_layer, Display *dpy, GLXPbuffer pbuf)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDestroyPbuffer","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDestroyPbuffer(dispatchGlobal, dpy, pbuf);
}

static void REGAL_CALL http_glXDestroyPixmap(Layer *_layer, Display *dpy, GLXPixmap pixmap)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDestroyPixmap","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pixmap,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDestroyPixmap(dispatchGlobal, dpy, pixmap);
}

static void REGAL_CALL http_glXDestroyWindow(Layer *_layer, Display *dpy, GLXWindow win)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDestroyWindow","(", print_optional(dpy,Logging::pointers), ", ", print_optional(win,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDestroyWindow(dispatchGlobal, dpy, win);
}

static GLXDrawable REGAL_CALL http_glXGetCurrentReadDrawable(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLXDrawable  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetCurrentReadDrawable","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetCurrentReadDrawable(dispatchGlobal);
  return ret;
}

static int REGAL_CALL http_glXGetFBConfigAttrib(Layer *_layer, Display *dpy, GLXFBConfig config, int attribute, int *value)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetFBConfigAttrib","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", attribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetFBConfigAttrib(dispatchGlobal, dpy, config, attribute, value);
  return ret;
}

static GLXFBConfig *REGAL_CALL http_glXGetFBConfigs(Layer *_layer, Display *dpy, int screen, int *nelements)
{
  Http * self = static_cast<Http *>(_layer);
    GLXFBConfig * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetFBConfigs","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetFBConfigs(dispatchGlobal, dpy, screen, nelements);
  return ret;
}

static void REGAL_CALL http_glXGetSelectedEvent(Layer *_layer, Display *dpy, GLXDrawable draw, unsigned long *event_mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetSelectedEvent","(", print_optional(dpy,Logging::pointers), ", ", draw, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXGetSelectedEvent(dispatchGlobal, dpy, draw, event_mask);
}

static XVisualInfo *REGAL_CALL http_glXGetVisualFromFBConfig(Layer *_layer, Display *dpy, GLXFBConfig config)
{
  Http * self = static_cast<Http *>(_layer);
    XVisualInfo * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetVisualFromFBConfig","(", print_optional(dpy,Logging::pointers), ", ", config, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetVisualFromFBConfig(dispatchGlobal, dpy, config);
  return ret;
}

static Bool REGAL_CALL http_glXMakeContextCurrent(Layer *_layer, Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXMakeContextCurrent","(", print_optional(display,Logging::pointers), ", ", draw, ", ", read, ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXMakeContextCurrent(dispatchGlobal, display, draw, read, ctx);
  return ret;
}

static int REGAL_CALL http_glXQueryContext(Layer *_layer, Display *dpy, GLXContext ctx, int attribute, int *value)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ", ", GLXenumToString(attribute), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryContext(dispatchGlobal, dpy, ctx, attribute, value);
  return ret;
}

static void REGAL_CALL http_glXQueryDrawable(Layer *_layer, Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryDrawable","(", print_optional(dpy,Logging::pointers), ", ", draw, ", ", attribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXQueryDrawable(dispatchGlobal, dpy, draw, attribute, value);
}

static void REGAL_CALL http_glXSelectEvent(Layer *_layer, Display *dpy, GLXDrawable draw, unsigned long event_mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSelectEvent","(", print_optional(dpy,Logging::pointers), ", ", draw, ", ", event_mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXSelectEvent(dispatchGlobal, dpy, draw, event_mask);
}

// GLX_VERSION_1_4

static __GLXextFuncPtr REGAL_CALL http_glXGetProcAddress(Layer *_layer, const GLubyte *procName)
{
  Http * self = static_cast<Http *>(_layer);
    __GLXextFuncPtr  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetProcAddress","(", print_quote(reinterpret_cast<const char *>(procName),'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetProcAddress(dispatchGlobal, procName);
  return ret;
}

// GLX_AMD_gpu_association

static void REGAL_CALL http_glXBlitContextFramebufferAMD(Layer *_layer, GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBlitContextFramebufferAMD","(", print_optional(dstCtx,Logging::pointers), ", ", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", GLblitFramebufferToString(mask), ", ", toString(filter), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXBlitContextFramebufferAMD(dispatchGlobal, dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static GLXContext REGAL_CALL http_glXCreateAssociatedContextAMD(Layer *_layer, unsigned int id, GLXContext share_list)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateAssociatedContextAMD","(", id, ", ", print_optional(share_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateAssociatedContextAMD(dispatchGlobal, id, share_list);
  return ret;
}

static GLXContext REGAL_CALL http_glXCreateAssociatedContextAttribsAMD(Layer *_layer, unsigned int id, GLXContext share_context, const int *attribList)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateAssociatedContextAttribsAMD","(", id, ", ", print_optional(share_context,Logging::pointers), ", ", print_optional(attribList,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateAssociatedContextAttribsAMD(dispatchGlobal, id, share_context, attribList);
  return ret;
}

static Bool REGAL_CALL http_glXDeleteAssociatedContextAMD(Layer *_layer, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDeleteAssociatedContextAMD","(", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXDeleteAssociatedContextAMD(dispatchGlobal, ctx);
  return ret;
}

static unsigned int REGAL_CALL http_glXGetContextGPUIDAMD(Layer *_layer, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    unsigned int  ret = (unsigned int) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetContextGPUIDAMD","(", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetContextGPUIDAMD(dispatchGlobal, ctx);
  return ret;
}

static GLXContext REGAL_CALL http_glXGetCurrentAssociatedContextAMD(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetCurrentAssociatedContextAMD","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetCurrentAssociatedContextAMD(dispatchGlobal);
  return ret;
}

static unsigned int REGAL_CALL http_glXGetGPUIDsAMD(Layer *_layer, unsigned int maxCount, unsigned int *ids)
{
  Http * self = static_cast<Http *>(_layer);
    unsigned int  ret = (unsigned int) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetGPUIDsAMD","(", maxCount, ", ", ids, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetGPUIDsAMD(dispatchGlobal, maxCount, ids);
  return ret;
}

static int REGAL_CALL http_glXGetGPUInfoAMD(Layer *_layer, unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetGPUInfoAMD","(", id, ", ", property, ", ", toString(dataType), ", ", size, ", ", print_optional(data,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetGPUInfoAMD(dispatchGlobal, id, property, dataType, size, data);
  return ret;
}

static Bool REGAL_CALL http_glXMakeAssociatedContextCurrentAMD(Layer *_layer, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXMakeAssociatedContextCurrentAMD","(", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXMakeAssociatedContextCurrentAMD(dispatchGlobal, ctx);
  return ret;
}

// GLX_ARB_create_context

static GLXContext REGAL_CALL http_glXCreateContextAttribsARB(Layer *_layer, Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateContextAttribsARB","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", print_optional(share_context,Logging::pointers), ", ", direct, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateContextAttribsARB(dispatchGlobal, dpy, config, share_context, direct, attrib_list);
  return ret;
}

// GLX_ARB_get_proc_address

static __GLXextFuncPtr REGAL_CALL http_glXGetProcAddressARB(Layer *_layer, const GLubyte *procName)
{
  Http * self = static_cast<Http *>(_layer);
    __GLXextFuncPtr  ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetProcAddressARB","(", print_quote(reinterpret_cast<const char *>(procName),'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetProcAddressARB(dispatchGlobal, procName);
  return ret;
}

// GLX_ATI_render_texture

static void REGAL_CALL http_glXBindTexImageATI(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindTexImageATI","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXBindTexImageATI(dispatchGlobal, dpy, pbuf, buffer);
}

static void REGAL_CALL http_glXDrawableAttribATI(Layer *_layer, Display *dpy, GLXDrawable draw, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDrawableAttribATI","(", print_optional(dpy,Logging::pointers), ", ", draw, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDrawableAttribATI(dispatchGlobal, dpy, draw, attrib_list);
}

static void REGAL_CALL http_glXReleaseTexImageATI(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXReleaseTexImageATI","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXReleaseTexImageATI(dispatchGlobal, dpy, pbuf, buffer);
}

// GLX_EXT_import_context

static void REGAL_CALL http_glXFreeContextEXT(Layer *_layer, Display *dpy, GLXContext context)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXFreeContextEXT","(", print_optional(dpy,Logging::pointers), ", ", print_optional(context,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXFreeContextEXT(dispatchGlobal, dpy, context);
}

static GLXContextID REGAL_CALL http_glXGetContextIDEXT(Layer *_layer, const GLXContext context)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContextID  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetContextIDEXT","(", context, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetContextIDEXT(dispatchGlobal, context);
  return ret;
}

static GLXContext REGAL_CALL http_glXImportContextEXT(Layer *_layer, Display *dpy, GLXContextID contextID)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXImportContextEXT","(", print_optional(dpy,Logging::pointers), ", ", contextID, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXImportContextEXT(dispatchGlobal, dpy, contextID);
  return ret;
}

static int REGAL_CALL http_glXQueryContextInfoEXT(Layer *_layer, Display *dpy, GLXContext context, int attribute, int *value)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryContextInfoEXT","(", print_optional(dpy,Logging::pointers), ", ", print_optional(context,Logging::pointers), ", ", attribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryContextInfoEXT(dispatchGlobal, dpy, context, attribute, value);
  return ret;
}

// GLX_EXT_swap_control

static void REGAL_CALL http_glXSwapIntervalEXT(Layer *_layer, Display *dpy, GLXDrawable drawable, int interval)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSwapIntervalEXT","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", interval, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXSwapIntervalEXT(dispatchGlobal, dpy, drawable, interval);
}

// GLX_EXT_texture_from_pixmap

static void REGAL_CALL http_glXBindTexImageEXT(Layer *_layer, Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindTexImageEXT","(", print_optional(display,Logging::pointers), ", ", drawable, ", ", buffer, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXBindTexImageEXT(dispatchGlobal, display, drawable, buffer, attrib_list);
}

static void REGAL_CALL http_glXReleaseTexImageEXT(Layer *_layer, Display *display, GLXDrawable drawable, int buffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXReleaseTexImageEXT","(", print_optional(display,Logging::pointers), ", ", drawable, ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXReleaseTexImageEXT(dispatchGlobal, display, drawable, buffer);
}

// GLX_MESA_agp_offset

static unsigned int REGAL_CALL http_glXGetAGPOffsetMESA(Layer *_layer, const void *pointer)
{
  Http * self = static_cast<Http *>(_layer);
    unsigned int  ret = (unsigned int) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetAGPOffsetMESA","(", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetAGPOffsetMESA(dispatchGlobal, pointer);
  return ret;
}

// GLX_MESA_copy_sub_buffer

static void REGAL_CALL http_glXCopySubBufferMESA(Layer *_layer, Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCopySubBufferMESA","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXCopySubBufferMESA(dispatchGlobal, dpy, drawable, x, y, width, height);
}

// GLX_MESA_pixmap_colormap

static GLXPixmap REGAL_CALL http_glXCreateGLXPixmapMESA(Layer *_layer, Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
{
  Http * self = static_cast<Http *>(_layer);
    GLXPixmap  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateGLXPixmapMESA","(", print_optional(dpy,Logging::pointers), ", ", print_optional(visual,Logging::pointers), ", ", print_optional(pixmap,Logging::pointers), ", ", cmap, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateGLXPixmapMESA(dispatchGlobal, dpy, visual, pixmap, cmap);
  return ret;
}

// GLX_MESA_release_buffers

static Bool REGAL_CALL http_glXReleaseBuffersMESA(Layer *_layer, Display *dpy, GLXDrawable d)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXReleaseBuffersMESA","(", print_optional(dpy,Logging::pointers), ", ", d, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXReleaseBuffersMESA(dispatchGlobal, dpy, d);
  return ret;
}

// GLX_MESA_set_3dfx_mode

static GLboolean REGAL_CALL http_glXSet3DfxModeMESA(Layer *_layer, GLint mode)
{
  Http * self = static_cast<Http *>(_layer);
    GLboolean  ret = GL_FALSE;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSet3DfxModeMESA","(", mode, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXSet3DfxModeMESA(dispatchGlobal, mode);
  return ret;
}

// GLX_MESA_swap_control

static int REGAL_CALL http_glXGetSwapIntervalMESA(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetSwapIntervalMESA","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetSwapIntervalMESA(dispatchGlobal);
  return ret;
}

static int REGAL_CALL http_glXSwapIntervalMESA(Layer *_layer, unsigned int interval)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSwapIntervalMESA","(", interval, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXSwapIntervalMESA(dispatchGlobal, interval);
  return ret;
}

// GLX_NV_copy_image

static void REGAL_CALL http_glXCopyImageSubDataNV(Layer *_layer, Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCopyImageSubDataNV","(", print_optional(dpy,Logging::pointers), ", ", print_optional(srcCtx,Logging::pointers), ", ", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", print_optional(dstCtx,Logging::pointers), ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ", ", dstX, ", ", dstY, ", ", dstZ, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXCopyImageSubDataNV(dispatchGlobal, dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

// GLX_NV_present_video

static int REGAL_CALL http_glXBindVideoDeviceNV(Layer *_layer, Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindVideoDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", video_slot, ", ", video_device, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXBindVideoDeviceNV(dispatchGlobal, dpy, video_slot, video_device, attrib_list);
  return ret;
}

static unsigned int *REGAL_CALL http_glXEnumerateVideoDevicesNV(Layer *_layer, Display *dpy, int screen, int *nelements)
{
  Http * self = static_cast<Http *>(_layer);
    unsigned int * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXEnumerateVideoDevicesNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXEnumerateVideoDevicesNV(dispatchGlobal, dpy, screen, nelements);
  return ret;
}

// GLX_NV_swap_group

static Bool REGAL_CALL http_glXBindSwapBarrierNV(Layer *_layer, Display *dpy, GLuint group, GLuint barrier)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindSwapBarrierNV","(", print_optional(dpy,Logging::pointers), ", ", group, ", ", barrier, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXBindSwapBarrierNV(dispatchGlobal, dpy, group, barrier);
  return ret;
}

static Bool REGAL_CALL http_glXJoinSwapGroupNV(Layer *_layer, Display *dpy, GLXDrawable drawable, GLuint group)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXJoinSwapGroupNV","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", group, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXJoinSwapGroupNV(dispatchGlobal, dpy, drawable, group);
  return ret;
}

static Bool REGAL_CALL http_glXQueryFrameCountNV(Layer *_layer, Display *dpy, int screen, GLuint *count)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryFrameCountNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryFrameCountNV(dispatchGlobal, dpy, screen, count);
  return ret;
}

static Bool REGAL_CALL http_glXQueryMaxSwapGroupsNV(Layer *_layer, Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryMaxSwapGroupsNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryMaxSwapGroupsNV(dispatchGlobal, dpy, screen, maxGroups, maxBarriers);
  return ret;
}

static Bool REGAL_CALL http_glXQuerySwapGroupNV(Layer *_layer, Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQuerySwapGroupNV","(", print_optional(dpy,Logging::pointers), ", ", drawable, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQuerySwapGroupNV(dispatchGlobal, dpy, drawable, group, barrier);
  return ret;
}

static Bool REGAL_CALL http_glXResetFrameCountNV(Layer *_layer, Display *dpy, int screen)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXResetFrameCountNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXResetFrameCountNV(dispatchGlobal, dpy, screen);
  return ret;
}

// GLX_NV_vertex_array_range

static void *REGAL_CALL http_glXAllocateMemoryNV(Layer *_layer, GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
{
  Http * self = static_cast<Http *>(_layer);
    void * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXAllocateMemoryNV","(", size, ", ", readFrequency, ", ", writeFrequency, ", ", priority, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXAllocateMemoryNV(dispatchGlobal, size, readFrequency, writeFrequency, priority);
  return ret;
}

static void REGAL_CALL http_glXFreeMemoryNV(Layer *_layer, void *pointer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXFreeMemoryNV","(", print_optional(pointer,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXFreeMemoryNV(dispatchGlobal, pointer);
}

// GLX_NV_video_capture

static int REGAL_CALL http_glXBindVideoCaptureDeviceNV(Layer *_layer, Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindVideoCaptureDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", video_capture_slot, ", ", device, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXBindVideoCaptureDeviceNV(dispatchGlobal, dpy, video_capture_slot, device);
  return ret;
}

static GLXVideoCaptureDeviceNV *REGAL_CALL http_glXEnumerateVideoCaptureDevicesNV(Layer *_layer, Display *dpy, int screen, int *nelements)
{
  Http * self = static_cast<Http *>(_layer);
    GLXVideoCaptureDeviceNV * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXEnumerateVideoCaptureDevicesNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", print_optional(nelements,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXEnumerateVideoCaptureDevicesNV(dispatchGlobal, dpy, screen, nelements);
  return ret;
}

static void REGAL_CALL http_glXLockVideoCaptureDeviceNV(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXLockVideoCaptureDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", device, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXLockVideoCaptureDeviceNV(dispatchGlobal, dpy, device);
}

static int REGAL_CALL http_glXQueryVideoCaptureDeviceNV(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryVideoCaptureDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", device, ", ", attribute, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryVideoCaptureDeviceNV(dispatchGlobal, dpy, device, attribute, value);
  return ret;
}

static void REGAL_CALL http_glXReleaseVideoCaptureDeviceNV(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXReleaseVideoCaptureDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", device, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXReleaseVideoCaptureDeviceNV(dispatchGlobal, dpy, device);
}

// GLX_NV_video_output

static int REGAL_CALL http_glXBindVideoImageNV(Layer *_layer, Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindVideoImageNV","(", print_optional(dpy,Logging::pointers), ", ", print_optional(VideoDevice,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ", ", iVideoBuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXBindVideoImageNV(dispatchGlobal, dpy, VideoDevice, pbuf, iVideoBuffer);
  return ret;
}

static int REGAL_CALL http_glXGetVideoDeviceNV(Layer *_layer, Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetVideoDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", numVideoDevices, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetVideoDeviceNV(dispatchGlobal, dpy, screen, numVideoDevices, pVideoDevice);
  return ret;
}

static int REGAL_CALL http_glXGetVideoInfoNV(Layer *_layer, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetVideoInfoNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", print_optional(VideoDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetVideoInfoNV(dispatchGlobal, dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  return ret;
}

static int REGAL_CALL http_glXReleaseVideoDeviceNV(Layer *_layer, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXReleaseVideoDeviceNV","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", print_optional(VideoDevice,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXReleaseVideoDeviceNV(dispatchGlobal, dpy, screen, VideoDevice);
  return ret;
}

static int REGAL_CALL http_glXReleaseVideoImageNV(Layer *_layer, Display *dpy, GLXPbuffer pbuf)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXReleaseVideoImageNV","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXReleaseVideoImageNV(dispatchGlobal, dpy, pbuf);
  return ret;
}

static int REGAL_CALL http_glXSendPbufferToVideoNV(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSendPbufferToVideoNV","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ", ", iBufferType, ", ", toString(bBlock), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXSendPbufferToVideoNV(dispatchGlobal, dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  return ret;
}

// GLX_OML_sync_control

static Bool REGAL_CALL http_glXGetMscRateOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetMscRateOML","(", print_optional(dpy,Logging::pointers), ", ", drawable, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetMscRateOML(dispatchGlobal, dpy, drawable, numerator, denominator);
  return ret;
}

static Bool REGAL_CALL http_glXGetSyncValuesOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetSyncValuesOML","(", print_optional(dpy,Logging::pointers), ", ", drawable, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetSyncValuesOML(dispatchGlobal, dpy, drawable, ust, msc, sbc);
  return ret;
}

static int64_t REGAL_CALL http_glXSwapBuffersMscOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
{
  Http * self = static_cast<Http *>(_layer);
    int64_t  ret = (int64_t) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSwapBuffersMscOML","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXSwapBuffersMscOML(dispatchGlobal, dpy, drawable, target_msc, divisor, remainder);
  return ret;
}

static Bool REGAL_CALL http_glXWaitForMscOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXWaitForMscOML","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXWaitForMscOML(dispatchGlobal, dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  return ret;
}

static Bool REGAL_CALL http_glXWaitForSbcOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXWaitForSbcOML","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", target_sbc, ", ", print_array(ust,1), ", ", print_array(msc,1), ", ", print_array(sbc,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXWaitForSbcOML(dispatchGlobal, dpy, drawable, target_sbc, ust, msc, sbc);
  return ret;
}

// GLX_SGIX_fbconfig

static GLXFBConfigSGIX *REGAL_CALL http_glXChooseFBConfigSGIX(Layer *_layer, Display *dpy, int screen, const int *attrib_list, int *nelements)
{
  Http * self = static_cast<Http *>(_layer);
    GLXFBConfigSGIX * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXChooseFBConfigSGIX","(", print_optional(dpy,Logging::pointers), ", ", screen, ", ", print_optional(attrib_list,Logging::pointers), ", ", print_optional(nelements,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXChooseFBConfigSGIX(dispatchGlobal, dpy, screen, attrib_list, nelements);
  return ret;
}

static GLXContext REGAL_CALL http_glXCreateContextWithConfigSGIX(Layer *_layer, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  Http * self = static_cast<Http *>(_layer);
    GLXContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateContextWithConfigSGIX","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", render_type, ", ", print_optional(share_list,Logging::pointers), ", ", direct, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateContextWithConfigSGIX(dispatchGlobal, dpy, config, render_type, share_list, direct);
  return ret;
}

static GLXPixmap REGAL_CALL http_glXCreateGLXPixmapWithConfigSGIX(Layer *_layer, Display *dpy, GLXFBConfig config, Pixmap pixmap)
{
  Http * self = static_cast<Http *>(_layer);
    GLXPixmap  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateGLXPixmapWithConfigSGIX","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", print_optional(pixmap,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateGLXPixmapWithConfigSGIX(dispatchGlobal, dpy, config, pixmap);
  return ret;
}

static int REGAL_CALL http_glXGetFBConfigAttribSGIX(Layer *_layer, Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetFBConfigAttribSGIX","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", attribute, ", ", print_array(value,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetFBConfigAttribSGIX(dispatchGlobal, dpy, config, attribute, value);
  return ret;
}

static GLXFBConfigSGIX REGAL_CALL http_glXGetFBConfigFromVisualSGIX(Layer *_layer, Display *dpy, XVisualInfo *vis)
{
  Http * self = static_cast<Http *>(_layer);
    GLXFBConfigSGIX  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetFBConfigFromVisualSGIX","(", print_optional(dpy,Logging::pointers), ", ", print_optional(vis,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetFBConfigFromVisualSGIX(dispatchGlobal, dpy, vis);
  return ret;
}

static XVisualInfo *REGAL_CALL http_glXGetVisualFromFBConfigSGIX(Layer *_layer, Display *dpy, GLXFBConfig config)
{
  Http * self = static_cast<Http *>(_layer);
    XVisualInfo * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetVisualFromFBConfigSGIX","(", print_optional(dpy,Logging::pointers), ", ", config, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetVisualFromFBConfigSGIX(dispatchGlobal, dpy, config);
  return ret;
}

// GLX_SGIX_pbuffer

static GLXPbuffer REGAL_CALL http_glXCreateGLXPbufferSGIX(Layer *_layer, Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    GLXPbuffer  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCreateGLXPbufferSGIX","(", print_optional(dpy,Logging::pointers), ", ", config, ", ", width, ", ", height, ", ", print_optional(attrib_list,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXCreateGLXPbufferSGIX(dispatchGlobal, dpy, config, width, height, attrib_list);
  return ret;
}

static void REGAL_CALL http_glXDestroyGLXPbufferSGIX(Layer *_layer, Display *dpy, GLXPbuffer pbuf)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXDestroyGLXPbufferSGIX","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXDestroyGLXPbufferSGIX(dispatchGlobal, dpy, pbuf);
}

static void REGAL_CALL http_glXGetSelectedEventSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, unsigned long *mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetSelectedEventSGIX","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", print_array(mask,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXGetSelectedEventSGIX(dispatchGlobal, dpy, drawable, mask);
}

static void REGAL_CALL http_glXQueryGLXPbufferSGIX(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryGLXPbufferSGIX","(", print_optional(dpy,Logging::pointers), ", ", print_optional(pbuf,Logging::pointers), ", ", attribute, ", ", print_array(value,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXQueryGLXPbufferSGIX(dispatchGlobal, dpy, pbuf, attribute, value);
}

static void REGAL_CALL http_glXSelectEventSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, unsigned long mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSelectEventSGIX","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXSelectEventSGIX(dispatchGlobal, dpy, drawable, mask);
}

// GLX_SGIX_swap_barrier

static void REGAL_CALL http_glXBindSwapBarrierSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, int barrier)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindSwapBarrierSGIX","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", barrier, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXBindSwapBarrierSGIX(dispatchGlobal, dpy, drawable, barrier);
}

static Bool REGAL_CALL http_glXQueryMaxSwapBarriersSGIX(Layer *_layer, Display *dpy, int screen, int *max)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryMaxSwapBarriersSGIX","(", print_optional(dpy,Logging::pointers), ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryMaxSwapBarriersSGIX(dispatchGlobal, dpy, screen, max);
  return ret;
}

// GLX_SGIX_swap_group

static void REGAL_CALL http_glXJoinSwapGroupSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, GLXDrawable member)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXJoinSwapGroupSGIX","(", print_optional(dpy,Logging::pointers), ", ", drawable, ", ", member, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXJoinSwapGroupSGIX(dispatchGlobal, dpy, drawable, member);
}

// GLX_SGIX_video_resize

static int REGAL_CALL http_glXBindChannelToWindowSGIX(Layer *_layer, Display *display, int screen, int channel, Window window)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXBindChannelToWindowSGIX","(", print_optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", window, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXBindChannelToWindowSGIX(dispatchGlobal, display, screen, channel, window);
  return ret;
}

static int REGAL_CALL http_glXChannelRectSGIX(Layer *_layer, Display *display, int screen, int channel, int x, int y, int w, int h)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXChannelRectSGIX","(", print_optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", x, ", ", y, ", ", w, ", ", h, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXChannelRectSGIX(dispatchGlobal, display, screen, channel, x, y, w, h);
  return ret;
}

static int REGAL_CALL http_glXChannelRectSyncSGIX(Layer *_layer, Display *display, int screen, int channel, GLenum synctype)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXChannelRectSyncSGIX","(", print_optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", toString(synctype), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXChannelRectSyncSGIX(dispatchGlobal, display, screen, channel, synctype);
  return ret;
}

static int REGAL_CALL http_glXQueryChannelDeltasSGIX(Layer *_layer, Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryChannelDeltasSGIX","(", print_optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", print_array(x,1), ", ", print_array(y,1), ", ", print_array(w,1), ", ", print_array(h,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryChannelDeltasSGIX(dispatchGlobal, display, screen, channel, x, y, w, h);
  return ret;
}

static int REGAL_CALL http_glXQueryChannelRectSGIX(Layer *_layer, Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXQueryChannelRectSGIX","(", print_optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", print_array(dx,1), ", ", print_array(dy,1), ", ", print_array(dw,1), ", ", print_array(dh,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXQueryChannelRectSGIX(dispatchGlobal, display, screen, channel, dx, dy, dw, dh);
  return ret;
}

// GLX_SGI_cushion

static void REGAL_CALL http_glXCushionSGI(Layer *_layer, Display *dpy, Window window, float cushion)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXCushionSGI","(", print_optional(dpy,Logging::pointers), ", ", window, ", ", cushion, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RglXCushionSGI(dispatchGlobal, dpy, window, cushion);
}

// GLX_SGI_make_current_read

static GLXDrawable REGAL_CALL http_glXGetCurrentReadDrawableSGI(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    GLXDrawable  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetCurrentReadDrawableSGI","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetCurrentReadDrawableSGI(dispatchGlobal);
  return ret;
}

static Bool REGAL_CALL http_glXMakeCurrentReadSGI(Layer *_layer, Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    Bool  ret = (Bool) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXMakeCurrentReadSGI","(", print_optional(dpy,Logging::pointers), ", ", draw, ", ", read, ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXMakeCurrentReadSGI(dispatchGlobal, dpy, draw, read, ctx);
  return ret;
}

// GLX_SGI_swap_control

static int REGAL_CALL http_glXSwapIntervalSGI(Layer *_layer, int interval)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXSwapIntervalSGI","(", interval, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXSwapIntervalSGI(dispatchGlobal, interval);
  return ret;
}

// GLX_SGI_video_sync

static int REGAL_CALL http_glXGetVideoSyncSGI(Layer *_layer, unsigned int *count)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetVideoSyncSGI","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetVideoSyncSGI(dispatchGlobal, count);
  return ret;
}

static int REGAL_CALL http_glXWaitVideoSyncSGI(Layer *_layer, int divisor, int remainder, unsigned int *count)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXWaitVideoSyncSGI","(", divisor, ", ", remainder, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXWaitVideoSyncSGI(dispatchGlobal, divisor, remainder, count);
  return ret;
}

// GLX_SUN_get_transparent_index

static Status REGAL_CALL http_glXGetTransparentIndexSUN(Layer *_layer, Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
{
  Http * self = static_cast<Http *>(_layer);
    Status  ret = (Status) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetTransparentIndexSUN","(", print_optional(dpy,Logging::pointers), ", ", overlay, ", ", underlay, ", ", print_array(pTransparentIndex,1), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetTransparentIndexSUN(dispatchGlobal, dpy, overlay, underlay, pTransparentIndex);
  return ret;
}

// GLX_SUN_video_resize

static int REGAL_CALL http_glXGetVideoResizeSUN(Layer *_layer, Display *display, GLXDrawable window, float *factor)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXGetVideoResizeSUN","(", print_optional(display,Logging::pointers), ", ", window, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXGetVideoResizeSUN(dispatchGlobal, display, window, factor);
  return ret;
}

static int REGAL_CALL http_glXVideoResizeSUN(Layer *_layer, Display *display, GLXDrawable window, float factor)
{
  Http * self = static_cast<Http *>(_layer);
    int  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("glXVideoResizeSUN","(", print_optional(display,Logging::pointers), ", ", window, ", ", factor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RglXVideoResizeSUN(dispatchGlobal, display, window, factor);
  return ret;
}

#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX

// CGL_VERSION_1_0

static CGLError REGAL_CALL http_CGLChoosePixelFormat(Layer *_layer, const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLChoosePixelFormat","(", attribs, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLChoosePixelFormat(dispatchGlobal, attribs, pix, npix);
  return ret;
}

static CGLError REGAL_CALL http_CGLClearDrawable(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLClearDrawable","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLClearDrawable(dispatchGlobal, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLCopyContext(Layer *_layer, CGLContextObj src, CGLContextObj dst, GLbitfield mask)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLCopyContext","(", src, ", ", dst, ", ", GLpushAttribToString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLCopyContext(dispatchGlobal, src, dst, mask);
  return ret;
}

static CGLError REGAL_CALL http_CGLCreateContext(Layer *_layer, CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLCreateContext","(", pix, ", ", share, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLCreateContext(dispatchGlobal, pix, share, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLDescribePixelFormat(Layer *_layer, CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDescribePixelFormat","(", pix, ", ", pix_num, ", ", attrib, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDescribePixelFormat(dispatchGlobal, pix, pix_num, attrib, value);
  return ret;
}

static CGLError REGAL_CALL http_CGLDescribeRenderer(Layer *_layer, CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDescribeRenderer","(", rend, ", ", rend_num, ", ", prop, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDescribeRenderer(dispatchGlobal, rend, rend_num, prop, value);
  return ret;
}

static CGLError REGAL_CALL http_CGLDestroyContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDestroyContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDestroyContext(dispatchGlobal, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLDestroyPixelFormat(Layer *_layer, CGLPixelFormatObj pix)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDestroyPixelFormat","(", pix, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDestroyPixelFormat(dispatchGlobal, pix);
  return ret;
}

static CGLError REGAL_CALL http_CGLDestroyRendererInfo(Layer *_layer, CGLRendererInfoObj rend)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDestroyRendererInfo","(", rend, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDestroyRendererInfo(dispatchGlobal, rend);
  return ret;
}

static CGLError REGAL_CALL http_CGLDisable(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDisable","(", ctx, ", ", pname, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDisable(dispatchGlobal, ctx, pname);
  return ret;
}

static CGLError REGAL_CALL http_CGLEnable(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLEnable","(", ctx, ", ", pname, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLEnable(dispatchGlobal, ctx, pname);
  return ret;
}

static const char *REGAL_CALL http_CGLErrorString(Layer *_layer, CGLError error)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLErrorString","(", error, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLErrorString(dispatchGlobal, error);
  return ret;
}

static CGLError REGAL_CALL http_CGLFlushDrawable(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLFlushDrawable","(", ctx, ")");
  }
  self->count.frame++;
  switch( self->runState ) {
     case RS_Run:
       break;
     default:
      self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLFlushDrawable(dispatchGlobal, ctx);
  self->count.lastFrame = self->count.call;
  return ret;
}

static CGLError REGAL_CALL http_CGLGetOffScreen(Layer *_layer, CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetOffScreen","(", ctx, ", ", print_optional(width,Logging::pointers), ", ", print_optional(height,Logging::pointers), ", ", print_optional(rowbytes,Logging::pointers), ", ", print_optional(baseaddr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetOffScreen(dispatchGlobal, ctx, width, height, rowbytes, baseaddr);
  return ret;
}

static CGLError REGAL_CALL http_CGLGetOption(Layer *_layer, CGLGlobalOption pname, GLint *param)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetOption","(", pname, ", ", print_optional(param,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetOption(dispatchGlobal, pname, param);
  return ret;
}

static CGLError REGAL_CALL http_CGLGetParameter(Layer *_layer, CGLContextObj ctx, CGLContextParameter pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetParameter","(", ctx, ", ", pname, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetParameter(dispatchGlobal, ctx, pname, params);
  return ret;
}

static void REGAL_CALL http_CGLGetVersion(Layer *_layer, GLint *majorvers, GLint *minorvers)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetVersion","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RCGLGetVersion(dispatchGlobal, majorvers, minorvers);
}

static CGLError REGAL_CALL http_CGLGetVirtualScreen(Layer *_layer, CGLContextObj ctx, GLint *screen)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetVirtualScreen","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetVirtualScreen(dispatchGlobal, ctx, screen);
  return ret;
}

static CGLError REGAL_CALL http_CGLIsEnabled(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLIsEnabled","(", ctx, ", ", pname, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLIsEnabled(dispatchGlobal, ctx, pname, enable);
  return ret;
}

static CGLError REGAL_CALL http_CGLQueryRendererInfo(Layer *_layer, GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLQueryRendererInfo","(", display_mask, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLQueryRendererInfo(dispatchGlobal, display_mask, rend, nrend);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetFullScreen(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetFullScreen","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetFullScreen(dispatchGlobal, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetOffScreen(Layer *_layer, CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetOffScreen","(", ctx, ", ", width, ", ", height, ", ", rowbytes, ", ", print_optional(baseaddr,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetOffScreen(dispatchGlobal, ctx, width, height, rowbytes, baseaddr);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetOption(Layer *_layer, CGLGlobalOption pname, GLint param)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetOption","(", pname, ", ", param, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetOption(dispatchGlobal, pname, param);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetParameter(Layer *_layer, CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetParameter","(", ctx, ", ", pname, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetParameter(dispatchGlobal, ctx, pname, params);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetVirtualScreen(Layer *_layer, CGLContextObj ctx, GLint screen)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetVirtualScreen","(", ctx, ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetVirtualScreen(dispatchGlobal, ctx, screen);
  return ret;
}

// CGL_VERSION_1_1

static CGLError REGAL_CALL http_CGLCreatePBuffer(Layer *_layer, GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLCreatePBuffer","(", width, ", ", height, ", ", toString(target), ", ", toString(internalFormat), ", ", max_level, ", ", pbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLCreatePBuffer(dispatchGlobal, width, height, target, internalFormat, max_level, pbuffer);
  return ret;
}

static CGLError REGAL_CALL http_CGLDescribePBuffer(Layer *_layer, CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDescribePBuffer","(", pbuffer, ", ", print_optional(width,Logging::pointers), ", ", print_optional(height,Logging::pointers), ", ", print_optional(target,Logging::pointers), ", ", print_optional(internalFormat,Logging::pointers), ", ", print_optional(mipmap,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDescribePBuffer(dispatchGlobal, pbuffer, width, height, target, internalFormat, mipmap);
  return ret;
}

static CGLError REGAL_CALL http_CGLDestroyPBuffer(Layer *_layer, CGLPBufferObj pbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLDestroyPBuffer","(", pbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLDestroyPBuffer(dispatchGlobal, pbuffer);
  return ret;
}

static CGLError REGAL_CALL http_CGLGetPBuffer(Layer *_layer, CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetPBuffer","(", ctx, ", ", pbuffer, ", ", print_optional(face,Logging::pointers), ", ", print_optional(level,Logging::pointers), ", ", print_optional(screen,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetPBuffer(dispatchGlobal, ctx, pbuffer, face, level, screen);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetPBuffer(Layer *_layer, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetPBuffer","(", ctx, ", ", pbuffer, ", ", toString(face), ", ", level, ", ", screen, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetPBuffer(dispatchGlobal, ctx, pbuffer, face, level, screen);
  return ret;
}

static CGLError REGAL_CALL http_CGLTexImagePBuffer(Layer *_layer, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLTexImagePBuffer","(", ctx, ", ", pbuffer, ", ", toString(source), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLTexImagePBuffer(dispatchGlobal, ctx, pbuffer, source);
  return ret;
}

// CGL_VERSION_1_2

static GLuint REGAL_CALL http_CGLGetContextRetainCount(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetContextRetainCount","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetContextRetainCount(dispatchGlobal, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLGetGlobalOption(Layer *_layer, CGLGlobalOption pname, GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetGlobalOption","(", pname, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetGlobalOption(dispatchGlobal, pname, params);
  return ret;
}

static GLuint REGAL_CALL http_CGLGetPBufferRetainCount(Layer *_layer, CGLPBufferObj pbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetPBufferRetainCount","(", pbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetPBufferRetainCount(dispatchGlobal, pbuffer);
  return ret;
}

static CGLPixelFormatObj REGAL_CALL http_CGLGetPixelFormat(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLPixelFormatObj  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetPixelFormat","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetPixelFormat(dispatchGlobal, ctx);
  return ret;
}

static GLuint REGAL_CALL http_CGLGetPixelFormatRetainCount(Layer *_layer, CGLPixelFormatObj pix)
{
  Http * self = static_cast<Http *>(_layer);
    GLuint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetPixelFormatRetainCount","(", pix, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetPixelFormatRetainCount(dispatchGlobal, pix);
  return ret;
}

static CGLError REGAL_CALL http_CGLLockContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLLockContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLLockContext(dispatchGlobal, ctx);
  return ret;
}

static void REGAL_CALL http_CGLReleaseContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLReleaseContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RCGLReleaseContext(dispatchGlobal, ctx);
}

static void REGAL_CALL http_CGLReleasePBuffer(Layer *_layer, CGLPBufferObj pbuffer)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLReleasePBuffer","(", pbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RCGLReleasePBuffer(dispatchGlobal, pbuffer);
}

static void REGAL_CALL http_CGLReleasePixelFormat(Layer *_layer, CGLPixelFormatObj pix)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLReleasePixelFormat","(", pix, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  RCGLReleasePixelFormat(dispatchGlobal, pix);
}

static CGLContextObj REGAL_CALL http_CGLRetainContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLContextObj  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLRetainContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLRetainContext(dispatchGlobal, ctx);
  return ret;
}

static CGLPBufferObj REGAL_CALL http_CGLRetainPBuffer(Layer *_layer, CGLPBufferObj pbuffer)
{
  Http * self = static_cast<Http *>(_layer);
    CGLPBufferObj  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLRetainPBuffer","(", pbuffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLRetainPBuffer(dispatchGlobal, pbuffer);
  return ret;
}

static CGLPixelFormatObj REGAL_CALL http_CGLRetainPixelFormat(Layer *_layer, CGLPixelFormatObj pix)
{
  Http * self = static_cast<Http *>(_layer);
    CGLPixelFormatObj  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLRetainPixelFormat","(", pix, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLRetainPixelFormat(dispatchGlobal, pix);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetGlobalOption(Layer *_layer, CGLGlobalOption pname, const GLint *params)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetGlobalOption","(", pname, ", ", print_optional(params,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetGlobalOption(dispatchGlobal, pname, params);
  return ret;
}

static CGLError REGAL_CALL http_CGLUnlockContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLUnlockContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLUnlockContext(dispatchGlobal, ctx);
  return ret;
}

// CGL_VERSION_1_3

static CGLContextObj REGAL_CALL http_CGLGetCurrentContext(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    CGLContextObj  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetCurrentContext","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetCurrentContext(dispatchGlobal);
  return ret;
}

static CGLShareGroupObj REGAL_CALL http_CGLGetShareGroup(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLShareGroupObj  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetShareGroup","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetShareGroup(dispatchGlobal, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLGetSurface(Layer *_layer, CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLGetSurface","(", ctx, ", ", conn, ", ", win, ", ", srf, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLGetSurface(dispatchGlobal, ctx, conn, win, srf);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetCurrentContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetCurrentContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetCurrentContext(dispatchGlobal, ctx);
  return ret;
}

static CGLError REGAL_CALL http_CGLSetSurface(Layer *_layer, CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLSetSurface","(", ctx, ", ", conn, ", ", win, ", ", srf, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLSetSurface(dispatchGlobal, ctx, conn, win, srf);
  return ret;
}

static CGLError REGAL_CALL http_CGLTexImageIOSurface2D(Layer *_layer, CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLTexImageIOSurface2D","(", ctx, ", ", toString(target), ", ", toString(internal_format), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", ioSurface, ", ", plane, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLTexImageIOSurface2D(dispatchGlobal, ctx, target, internal_format, width, height, format, type, ioSurface, plane);
  return ret;
}

static CGLError REGAL_CALL http_CGLUpdateContext(Layer *_layer, CGLContextObj ctx)
{
  Http * self = static_cast<Http *>(_layer);
    CGLError  ret = (CGLError) 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("CGLUpdateContext","(", ctx, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = RCGLUpdateContext(dispatchGlobal, ctx);
  return ret;
}

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

// EGL_ANGLE_query_surface_pointer

static EGLBoolean REGAL_CALL http_eglQuerySurfacePointerANGLE(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglQuerySurfacePointerANGLE","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", attribute, ", ", print_optional(value,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglQuerySurfacePointerANGLE(dispatchGlobal, dpy, surface, attribute, value);
  return ret;
}

// EGL_KHR_fence_sync

static EGLint REGAL_CALL http_eglClientWaitSyncKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
{
  Http * self = static_cast<Http *>(_layer);
    EGLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglClientWaitSyncKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(GLsync,Logging::pointers), ", ", flags, ", ", timeout, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglClientWaitSyncKHR(dispatchGlobal, dpy, GLsync, flags, timeout);
  return ret;
}

static EGLSyncKHR REGAL_CALL http_eglCreateSyncKHR(Layer *_layer, EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSyncKHR  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateSyncKHR","(", print_optional(dpy,Logging::pointers), ", ", EGLenumToString(type), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateSyncKHR(dispatchGlobal, dpy, type, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglDestroySyncKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglDestroySyncKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(GLsync,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglDestroySyncKHR(dispatchGlobal, dpy, GLsync);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglGetSyncAttribKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetSyncAttribKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(GLsync,Logging::pointers), ", ", attribute, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetSyncAttribKHR(dispatchGlobal, dpy, GLsync, attribute, value);
  return ret;
}

// EGL_KHR_image_base

static EGLImageKHR REGAL_CALL http_eglCreateImageKHR(Layer *_layer, EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLImageKHR  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateImageKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ", ", EGLenumToString(target), ", ", print_optional(buffer,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateImageKHR(dispatchGlobal, dpy, ctx, target, buffer, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglDestroyImageKHR(Layer *_layer, EGLDisplay dpy, EGLImageKHR image)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglDestroyImageKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(image,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglDestroyImageKHR(dispatchGlobal, dpy, image);
  return ret;
}

// EGL_KHR_lock_surface

static EGLBoolean REGAL_CALL http_eglLockSurfaceKHR(Layer *_layer, EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglLockSurfaceKHR","(", print_optional(display,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglLockSurfaceKHR(dispatchGlobal, display, surface, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglUnlockSurfaceKHR(Layer *_layer, EGLDisplay display, EGLSurface surface)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglUnlockSurfaceKHR","(", print_optional(display,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglUnlockSurfaceKHR(dispatchGlobal, display, surface);
  return ret;
}

// EGL_KHR_stream_consumer_gltexture

static EGLBoolean REGAL_CALL http_eglStreamConsumerAcquireKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglStreamConsumerAcquireKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(stream,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglStreamConsumerAcquireKHR(dispatchGlobal, dpy, stream);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglStreamConsumerGLTextureExternalKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglStreamConsumerGLTextureExternalKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(stream,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglStreamConsumerGLTextureExternalKHR(dispatchGlobal, dpy, stream);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglStreamConsumerReleaseKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglStreamConsumerReleaseKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(stream,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglStreamConsumerReleaseKHR(dispatchGlobal, dpy, stream);
  return ret;
}

// EGL_KHR_stream_cross_process_fd

static EGLStreamKHR REGAL_CALL http_eglCreateStreamFromFileDescriptorKHR(Layer *_layer, EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
{
  Http * self = static_cast<Http *>(_layer);
    EGLStreamKHR  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateStreamFromFileDescriptorKHR","(", print_optional(dpy,Logging::pointers), ", ", file_descriptor, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateStreamFromFileDescriptorKHR(dispatchGlobal, dpy, file_descriptor);
  return ret;
}

static EGLNativeFileDescriptorKHR REGAL_CALL http_eglGetStreamFileDescriptorKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
{
  Http * self = static_cast<Http *>(_layer);
    EGLNativeFileDescriptorKHR  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetStreamFileDescriptorKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(stream,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetStreamFileDescriptorKHR(dispatchGlobal, dpy, stream);
  return ret;
}

// EGL_KHR_stream_producer_eglsurface

static EGLSurface REGAL_CALL http_eglCreateStreamProducerSurfaceKHR(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSurface  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateStreamProducerSurfaceKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", print_optional(stream,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateStreamProducerSurfaceKHR(dispatchGlobal, dpy, config, stream, attrib_list);
  return ret;
}

// EGL_KHR_wait_sync

static EGLint REGAL_CALL http_eglWaitSyncKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags)
{
  Http * self = static_cast<Http *>(_layer);
    EGLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglWaitSyncKHR","(", print_optional(dpy,Logging::pointers), ", ", print_optional(GLsync,Logging::pointers), ", ", flags, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglWaitSyncKHR(dispatchGlobal, dpy, GLsync, flags);
  return ret;
}

// EGL_MESA_drm_image

static EGLImageKHR REGAL_CALL http_eglCreateDRMImageMESA(Layer *_layer, EGLDisplay dpy, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLImageKHR  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateDRMImageMESA","(", print_optional(dpy,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateDRMImageMESA(dispatchGlobal, dpy, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglExportDRMImageMESA(Layer *_layer, EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglExportDRMImageMESA","(", print_optional(dpy,Logging::pointers), ", ", print_optional(image,Logging::pointers), ", ", name, ", ", handle, ", ", stride, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglExportDRMImageMESA(dispatchGlobal, dpy, image, name, handle, stride);
  return ret;
}

// EGL_NV_coverage_sample

static void REGAL_CALL http_eglCoverageMaskNV(Layer *_layer, GLboolean mask)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCoverageMaskNV","(", toString(mask), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ReglCoverageMaskNV(dispatchGlobal, mask);
}

static void REGAL_CALL http_eglCoverageOperationNV(Layer *_layer, GLenum operation)
{
  Http * self = static_cast<Http *>(_layer);
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCoverageOperationNV","(", toString(operation), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ReglCoverageOperationNV(dispatchGlobal, operation);
}

// EGL_NV_post_sub_buffer

static EGLBoolean REGAL_CALL http_eglPostSubBufferNV(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglPostSubBufferNV","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", x, ", ", y, ", ", width, ", ", height, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglPostSubBufferNV(dispatchGlobal, dpy, surface, x, y, width, height);
  return ret;
}

// EGL_NV_sync

static EGLint REGAL_CALL http_eglClientWaitSyncNV(Layer *_layer, EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
{
  Http * self = static_cast<Http *>(_layer);
    EGLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglClientWaitSyncNV","(", print_optional(GLsync,Logging::pointers), ", ", flags, ", ", timeout, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglClientWaitSyncNV(dispatchGlobal, GLsync, flags, timeout);
  return ret;
}

static EGLSyncNV REGAL_CALL http_eglCreateFenceSyncNV(Layer *_layer, EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSyncNV  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateFenceSyncNV","(", print_optional(dpy,Logging::pointers), ", ", EGLenumToString(condition), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateFenceSyncNV(dispatchGlobal, dpy, condition, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglDestroySyncNV(Layer *_layer, EGLSyncNV GLsync)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglDestroySyncNV","(", print_optional(GLsync,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglDestroySyncNV(dispatchGlobal, GLsync);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglFenceNV(Layer *_layer, EGLSyncNV GLsync)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglFenceNV","(", print_optional(GLsync,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglFenceNV(dispatchGlobal, GLsync);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglGetSyncAttribNV(Layer *_layer, EGLSyncNV GLsync, EGLint attribute, EGLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetSyncAttribNV","(", print_optional(GLsync,Logging::pointers), ", ", attribute, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetSyncAttribNV(dispatchGlobal, GLsync, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglSignalSyncNV(Layer *_layer, EGLSyncNV GLsync, EGLenum mode)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglSignalSyncNV","(", print_optional(GLsync,Logging::pointers), ", ", EGLenumToString(mode), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglSignalSyncNV(dispatchGlobal, GLsync, mode);
  return ret;
}

// EGL_NV_system_time

static EGLuint64NV REGAL_CALL http_eglGetSystemTimeFrequencyNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLuint64NV  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetSystemTimeFrequencyNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetSystemTimeFrequencyNV(dispatchGlobal);
  return ret;
}

static EGLuint64NV REGAL_CALL http_eglGetSystemTimeNV(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLuint64NV  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetSystemTimeNV","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetSystemTimeNV(dispatchGlobal);
  return ret;
}

// EGL_VERSION_1_0

static EGLBoolean REGAL_CALL http_eglChooseConfig(Layer *_layer, EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglChooseConfig","(", print_optional(dpy,Logging::pointers), ", ", attrib_list, ", ", configs, ", ", config_size, ", ", num_config, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglChooseConfig(dispatchGlobal, dpy, attrib_list, configs, config_size, num_config);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglCopyBuffers(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCopyBuffers","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", print_optional(target,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCopyBuffers(dispatchGlobal, dpy, surface, target);
  return ret;
}

static EGLContext REGAL_CALL http_eglCreateContext(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", print_optional(share_context,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateContext(dispatchGlobal, dpy, config, share_context, attrib_list);
  return ret;
}

static EGLSurface REGAL_CALL http_eglCreatePbufferSurface(Layer *_layer, EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSurface  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreatePbufferSurface","(", print_optional(dpy,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreatePbufferSurface(dispatchGlobal, dpy, config, attrib_list);
  return ret;
}

static EGLSurface REGAL_CALL http_eglCreatePixmapSurface(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSurface  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreatePixmapSurface","(", print_optional(dpy,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", print_optional(pixmap,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreatePixmapSurface(dispatchGlobal, dpy, config, pixmap, attrib_list);
  return ret;
}

static EGLSurface REGAL_CALL http_eglCreateWindowSurface(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSurface  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreateWindowSurface","(", print_optional(dpy,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", print_optional(win,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreateWindowSurface(dispatchGlobal, dpy, config, win, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglDestroyContext(Layer *_layer, EGLDisplay dpy, EGLContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglDestroyContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglDestroyContext(dispatchGlobal, dpy, ctx);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglDestroySurface(Layer *_layer, EGLDisplay dpy, EGLSurface surface)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglDestroySurface","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglDestroySurface(dispatchGlobal, dpy, surface);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglGetConfigAttrib(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetConfigAttrib","(", print_optional(dpy,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", attribute, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetConfigAttrib(dispatchGlobal, dpy, config, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglGetConfigs(Layer *_layer, EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetConfigs","(", print_optional(dpy,Logging::pointers), ", ", configs, ", ", config_size, ", ", num_config, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetConfigs(dispatchGlobal, dpy, configs, config_size, num_config);
  return ret;
}

static EGLContext REGAL_CALL http_eglGetCurrentContext(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLContext  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetCurrentContext","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetCurrentContext(dispatchGlobal);
  return ret;
}

static EGLDisplay REGAL_CALL http_eglGetCurrentDisplay(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLDisplay  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetCurrentDisplay","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetCurrentDisplay(dispatchGlobal);
  return ret;
}

static EGLSurface REGAL_CALL http_eglGetCurrentSurface(Layer *_layer, EGLint readdraw)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSurface  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetCurrentSurface","(", readdraw, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetCurrentSurface(dispatchGlobal, readdraw);
  return ret;
}

static EGLDisplay REGAL_CALL http_eglGetDisplay(Layer *_layer, EGLNativeDisplayType display_id)
{
  Http * self = static_cast<Http *>(_layer);
    EGLDisplay  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetDisplay","(", print_optional(display_id,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetDisplay(dispatchGlobal, display_id);
  return ret;
}

static EGLint REGAL_CALL http_eglGetError(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLint  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetError","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetError(dispatchGlobal);
  return ret;
}

static __eglMustCastToProperFunctionPointerType REGAL_CALL http_eglGetProcAddress(Layer *_layer, const char *procname)
{
  Http * self = static_cast<Http *>(_layer);
    __eglMustCastToProperFunctionPointerType  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglGetProcAddress","(", print_quote(procname,'"'), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglGetProcAddress(dispatchGlobal, procname);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglInitialize(Layer *_layer, EGLDisplay dpy, EGLint *major, EGLint *minor)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglInitialize","(", print_optional(dpy,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglInitialize(dispatchGlobal, dpy, major, minor);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglMakeCurrent(Layer *_layer, EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglMakeCurrent","(", print_optional(dpy,Logging::pointers), ", ", print_optional(draw,Logging::pointers), ", ", print_optional(read,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglMakeCurrent(dispatchGlobal, dpy, draw, read, ctx);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglQueryContext(Layer *_layer, EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglQueryContext","(", print_optional(dpy,Logging::pointers), ", ", print_optional(ctx,Logging::pointers), ", ", attribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglQueryContext(dispatchGlobal, dpy, ctx, attribute, value);
  return ret;
}

static const char *REGAL_CALL http_eglQueryString(Layer *_layer, EGLDisplay dpy, EGLint name)
{
  Http * self = static_cast<Http *>(_layer);
    const char * ret = NULL;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglQueryString","(", print_optional(dpy,Logging::pointers), ", ", EGLenumToString(name), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglQueryString(dispatchGlobal, dpy, name);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglQuerySurface(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglQuerySurface","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", attribute, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglQuerySurface(dispatchGlobal, dpy, surface, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglSwapBuffers(Layer *_layer, EGLDisplay dpy, EGLSurface surface)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglSwapBuffers","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ")");
  }
  self->count.frame++;
  switch( self->runState ) {
     case RS_Run:
       break;
     default:
      self->runState = RS_Pause;
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglSwapBuffers(dispatchGlobal, dpy, surface);
  self->count.lastFrame = self->count.call;
  return ret;
}

static EGLBoolean REGAL_CALL http_eglTerminate(Layer *_layer, EGLDisplay dpy)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglTerminate","(", print_optional(dpy,Logging::pointers), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglTerminate(dispatchGlobal, dpy);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglWaitGL(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglWaitGL","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglWaitGL(dispatchGlobal);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglWaitNative(Layer *_layer, EGLint engine)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglWaitNative","(", engine, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglWaitNative(dispatchGlobal, engine);
  return ret;
}

// EGL_VERSION_1_1

static EGLBoolean REGAL_CALL http_eglBindTexImage(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglBindTexImage","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglBindTexImage(dispatchGlobal, dpy, surface, buffer);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglReleaseTexImage(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglReleaseTexImage","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", buffer, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglReleaseTexImage(dispatchGlobal, dpy, surface, buffer);
  return ret;
}

// EGL_VERSION_1_2

static EGLBoolean REGAL_CALL http_eglBindAPI(Layer *_layer, EGLenum api)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglBindAPI","(", EGLenumToString(api), ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglBindAPI(dispatchGlobal, api);
  return ret;
}

static EGLSurface REGAL_CALL http_eglCreatePbufferFromClientBuffer(Layer *_layer, EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
{
  Http * self = static_cast<Http *>(_layer);
    EGLSurface  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglCreatePbufferFromClientBuffer","(", dpy, ", ", EGLenumToString(buftype), ", ", print_optional(buffer,Logging::pointers), ", ", print_optional(config,Logging::pointers), ", ", attrib_list, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglCreatePbufferFromClientBuffer(dispatchGlobal, dpy, buftype, buffer, config, attrib_list);
  return ret;
}

static EGLenum REGAL_CALL http_eglQueryAPI(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLenum  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglQueryAPI","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglQueryAPI(dispatchGlobal);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglReleaseThread(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglReleaseThread","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglReleaseThread(dispatchGlobal);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglSurfaceAttrib(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglSurfaceAttrib","(", print_optional(dpy,Logging::pointers), ", ", print_optional(surface,Logging::pointers), ", ", attribute, ", ", value, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglSurfaceAttrib(dispatchGlobal, dpy, surface, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglSwapInterval(Layer *_layer, EGLDisplay dpy, EGLint interval)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglSwapInterval","(", print_optional(dpy,Logging::pointers), ", ", interval, ")");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglSwapInterval(dispatchGlobal, dpy, interval);
  return ret;
}

static EGLBoolean REGAL_CALL http_eglWaitClient(Layer *_layer)
{
  Http * self = static_cast<Http *>(_layer);
    EGLBoolean  ret = 0;
  if( self->inBeginEnd == 0 ) {
    self->callString = print_string("eglWaitClient","()");
  }
  if( self->runState == RS_Next ) {
    self->runState = RS_Pause;
  }
  self->YieldToHttpServer( self->inBeginEnd == 0 );
  ret = ReglWaitClient(dispatchGlobal);
  return ret;
}

#endif // REGAL_SYS_EGL

void InitDispatchHttp( Layer *layer, Dispatch::GL &tbl)
{

  // GL_VERSION_1_0

  tbl.glAccum = MakeRegalProc( http_glAccum, layer );
  tbl.glAlphaFunc = MakeRegalProc( http_glAlphaFunc, layer );
  tbl.glBegin = MakeRegalProc( http_glBegin, layer );
  tbl.glBitmap = MakeRegalProc( http_glBitmap, layer );
  tbl.glBlendFunc = MakeRegalProc( http_glBlendFunc, layer );
  tbl.glCallList = MakeRegalProc( http_glCallList, layer );
  tbl.glCallLists = MakeRegalProc( http_glCallLists, layer );
  tbl.glClear = MakeRegalProc( http_glClear, layer );
  tbl.glClearAccum = MakeRegalProc( http_glClearAccum, layer );
  tbl.glClearColor = MakeRegalProc( http_glClearColor, layer );
  tbl.glClearDepth = MakeRegalProc( http_glClearDepth, layer );
  tbl.glClearIndex = MakeRegalProc( http_glClearIndex, layer );
  tbl.glClearStencil = MakeRegalProc( http_glClearStencil, layer );
  tbl.glClipPlane = MakeRegalProc( http_glClipPlane, layer );
  tbl.glColor3b = MakeRegalProc( http_glColor3b, layer );
  tbl.glColor3bv = MakeRegalProc( http_glColor3bv, layer );
  tbl.glColor3d = MakeRegalProc( http_glColor3d, layer );
  tbl.glColor3dv = MakeRegalProc( http_glColor3dv, layer );
  tbl.glColor3f = MakeRegalProc( http_glColor3f, layer );
  tbl.glColor3fv = MakeRegalProc( http_glColor3fv, layer );
  tbl.glColor3i = MakeRegalProc( http_glColor3i, layer );
  tbl.glColor3iv = MakeRegalProc( http_glColor3iv, layer );
  tbl.glColor3s = MakeRegalProc( http_glColor3s, layer );
  tbl.glColor3sv = MakeRegalProc( http_glColor3sv, layer );
  tbl.glColor3ub = MakeRegalProc( http_glColor3ub, layer );
  tbl.glColor3ubv = MakeRegalProc( http_glColor3ubv, layer );
  tbl.glColor3ui = MakeRegalProc( http_glColor3ui, layer );
  tbl.glColor3uiv = MakeRegalProc( http_glColor3uiv, layer );
  tbl.glColor3us = MakeRegalProc( http_glColor3us, layer );
  tbl.glColor3usv = MakeRegalProc( http_glColor3usv, layer );
  tbl.glColor4b = MakeRegalProc( http_glColor4b, layer );
  tbl.glColor4bv = MakeRegalProc( http_glColor4bv, layer );
  tbl.glColor4d = MakeRegalProc( http_glColor4d, layer );
  tbl.glColor4dv = MakeRegalProc( http_glColor4dv, layer );
  tbl.glColor4f = MakeRegalProc( http_glColor4f, layer );
  tbl.glColor4fv = MakeRegalProc( http_glColor4fv, layer );
  tbl.glColor4i = MakeRegalProc( http_glColor4i, layer );
  tbl.glColor4iv = MakeRegalProc( http_glColor4iv, layer );
  tbl.glColor4s = MakeRegalProc( http_glColor4s, layer );
  tbl.glColor4sv = MakeRegalProc( http_glColor4sv, layer );
  tbl.glColor4ub = MakeRegalProc( http_glColor4ub, layer );
  tbl.glColor4ubv = MakeRegalProc( http_glColor4ubv, layer );
  tbl.glColor4ui = MakeRegalProc( http_glColor4ui, layer );
  tbl.glColor4uiv = MakeRegalProc( http_glColor4uiv, layer );
  tbl.glColor4us = MakeRegalProc( http_glColor4us, layer );
  tbl.glColor4usv = MakeRegalProc( http_glColor4usv, layer );
  tbl.glColorMask = MakeRegalProc( http_glColorMask, layer );
  tbl.glColorMaterial = MakeRegalProc( http_glColorMaterial, layer );
  tbl.glCopyPixels = MakeRegalProc( http_glCopyPixels, layer );
  tbl.glCullFace = MakeRegalProc( http_glCullFace, layer );
  tbl.glDeleteLists = MakeRegalProc( http_glDeleteLists, layer );
  tbl.glDepthFunc = MakeRegalProc( http_glDepthFunc, layer );
  tbl.glDepthMask = MakeRegalProc( http_glDepthMask, layer );
  tbl.glDepthRange = MakeRegalProc( http_glDepthRange, layer );
  tbl.glDisable = MakeRegalProc( http_glDisable, layer );
  tbl.glDrawBuffer = MakeRegalProc( http_glDrawBuffer, layer );
  tbl.glDrawPixels = MakeRegalProc( http_glDrawPixels, layer );
  tbl.glEdgeFlag = MakeRegalProc( http_glEdgeFlag, layer );
  tbl.glEdgeFlagv = MakeRegalProc( http_glEdgeFlagv, layer );
  tbl.glEnable = MakeRegalProc( http_glEnable, layer );
  tbl.glEnd = MakeRegalProc( http_glEnd, layer );
  tbl.glEndList = MakeRegalProc( http_glEndList, layer );
  tbl.glEvalCoord1d = MakeRegalProc( http_glEvalCoord1d, layer );
  tbl.glEvalCoord1dv = MakeRegalProc( http_glEvalCoord1dv, layer );
  tbl.glEvalCoord1f = MakeRegalProc( http_glEvalCoord1f, layer );
  tbl.glEvalCoord1fv = MakeRegalProc( http_glEvalCoord1fv, layer );
  tbl.glEvalCoord2d = MakeRegalProc( http_glEvalCoord2d, layer );
  tbl.glEvalCoord2dv = MakeRegalProc( http_glEvalCoord2dv, layer );
  tbl.glEvalCoord2f = MakeRegalProc( http_glEvalCoord2f, layer );
  tbl.glEvalCoord2fv = MakeRegalProc( http_glEvalCoord2fv, layer );
  tbl.glEvalMesh1 = MakeRegalProc( http_glEvalMesh1, layer );
  tbl.glEvalMesh2 = MakeRegalProc( http_glEvalMesh2, layer );
  tbl.glEvalPoint1 = MakeRegalProc( http_glEvalPoint1, layer );
  tbl.glEvalPoint2 = MakeRegalProc( http_glEvalPoint2, layer );
  tbl.glFeedbackBuffer = MakeRegalProc( http_glFeedbackBuffer, layer );
  tbl.glFinish = MakeRegalProc( http_glFinish, layer );
  tbl.glFlush = MakeRegalProc( http_glFlush, layer );
  tbl.glFogf = MakeRegalProc( http_glFogf, layer );
  tbl.glFogfv = MakeRegalProc( http_glFogfv, layer );
  tbl.glFogi = MakeRegalProc( http_glFogi, layer );
  tbl.glFogiv = MakeRegalProc( http_glFogiv, layer );
  tbl.glFrontFace = MakeRegalProc( http_glFrontFace, layer );
  tbl.glFrustum = MakeRegalProc( http_glFrustum, layer );
  tbl.glGenLists = MakeRegalProc( http_glGenLists, layer );
  tbl.glGetBooleanv = MakeRegalProc( http_glGetBooleanv, layer );
  tbl.glGetClipPlane = MakeRegalProc( http_glGetClipPlane, layer );
  tbl.glGetDoublev = MakeRegalProc( http_glGetDoublev, layer );
  tbl.glGetError = MakeRegalProc( http_glGetError, layer );
  tbl.glGetFloatv = MakeRegalProc( http_glGetFloatv, layer );
  tbl.glGetIntegerv = MakeRegalProc( http_glGetIntegerv, layer );
  tbl.glGetLightfv = MakeRegalProc( http_glGetLightfv, layer );
  tbl.glGetLightiv = MakeRegalProc( http_glGetLightiv, layer );
  tbl.glGetMapdv = MakeRegalProc( http_glGetMapdv, layer );
  tbl.glGetMapfv = MakeRegalProc( http_glGetMapfv, layer );
  tbl.glGetMapiv = MakeRegalProc( http_glGetMapiv, layer );
  tbl.glGetMaterialfv = MakeRegalProc( http_glGetMaterialfv, layer );
  tbl.glGetMaterialiv = MakeRegalProc( http_glGetMaterialiv, layer );
  tbl.glGetPixelMapfv = MakeRegalProc( http_glGetPixelMapfv, layer );
  tbl.glGetPixelMapuiv = MakeRegalProc( http_glGetPixelMapuiv, layer );
  tbl.glGetPixelMapusv = MakeRegalProc( http_glGetPixelMapusv, layer );
  tbl.glGetPolygonStipple = MakeRegalProc( http_glGetPolygonStipple, layer );
  tbl.glGetString = MakeRegalProc( http_glGetString, layer );
  tbl.glGetTexEnvfv = MakeRegalProc( http_glGetTexEnvfv, layer );
  tbl.glGetTexEnviv = MakeRegalProc( http_glGetTexEnviv, layer );
  tbl.glGetTexGendv = MakeRegalProc( http_glGetTexGendv, layer );
  tbl.glGetTexGenfv = MakeRegalProc( http_glGetTexGenfv, layer );
  tbl.glGetTexGeniv = MakeRegalProc( http_glGetTexGeniv, layer );
  tbl.glGetTexImage = MakeRegalProc( http_glGetTexImage, layer );
  tbl.glGetTexLevelParameterfv = MakeRegalProc( http_glGetTexLevelParameterfv, layer );
  tbl.glGetTexLevelParameteriv = MakeRegalProc( http_glGetTexLevelParameteriv, layer );
  tbl.glGetTexParameterfv = MakeRegalProc( http_glGetTexParameterfv, layer );
  tbl.glGetTexParameteriv = MakeRegalProc( http_glGetTexParameteriv, layer );
  tbl.glHint = MakeRegalProc( http_glHint, layer );
  tbl.glIndexMask = MakeRegalProc( http_glIndexMask, layer );
  tbl.glIndexd = MakeRegalProc( http_glIndexd, layer );
  tbl.glIndexdv = MakeRegalProc( http_glIndexdv, layer );
  tbl.glIndexf = MakeRegalProc( http_glIndexf, layer );
  tbl.glIndexfv = MakeRegalProc( http_glIndexfv, layer );
  tbl.glIndexi = MakeRegalProc( http_glIndexi, layer );
  tbl.glIndexiv = MakeRegalProc( http_glIndexiv, layer );
  tbl.glIndexs = MakeRegalProc( http_glIndexs, layer );
  tbl.glIndexsv = MakeRegalProc( http_glIndexsv, layer );
  tbl.glInitNames = MakeRegalProc( http_glInitNames, layer );
  tbl.glIsEnabled = MakeRegalProc( http_glIsEnabled, layer );
  tbl.glIsList = MakeRegalProc( http_glIsList, layer );
  tbl.glLightModelf = MakeRegalProc( http_glLightModelf, layer );
  tbl.glLightModelfv = MakeRegalProc( http_glLightModelfv, layer );
  tbl.glLightModeli = MakeRegalProc( http_glLightModeli, layer );
  tbl.glLightModeliv = MakeRegalProc( http_glLightModeliv, layer );
  tbl.glLightf = MakeRegalProc( http_glLightf, layer );
  tbl.glLightfv = MakeRegalProc( http_glLightfv, layer );
  tbl.glLighti = MakeRegalProc( http_glLighti, layer );
  tbl.glLightiv = MakeRegalProc( http_glLightiv, layer );
  tbl.glLineStipple = MakeRegalProc( http_glLineStipple, layer );
  tbl.glLineWidth = MakeRegalProc( http_glLineWidth, layer );
  tbl.glListBase = MakeRegalProc( http_glListBase, layer );
  tbl.glLoadIdentity = MakeRegalProc( http_glLoadIdentity, layer );
  tbl.glLoadMatrixd = MakeRegalProc( http_glLoadMatrixd, layer );
  tbl.glLoadMatrixf = MakeRegalProc( http_glLoadMatrixf, layer );
  tbl.glLoadName = MakeRegalProc( http_glLoadName, layer );
  tbl.glLogicOp = MakeRegalProc( http_glLogicOp, layer );
  tbl.glMap1d = MakeRegalProc( http_glMap1d, layer );
  tbl.glMap1f = MakeRegalProc( http_glMap1f, layer );
  tbl.glMap2d = MakeRegalProc( http_glMap2d, layer );
  tbl.glMap2f = MakeRegalProc( http_glMap2f, layer );
  tbl.glMapGrid1d = MakeRegalProc( http_glMapGrid1d, layer );
  tbl.glMapGrid1f = MakeRegalProc( http_glMapGrid1f, layer );
  tbl.glMapGrid2d = MakeRegalProc( http_glMapGrid2d, layer );
  tbl.glMapGrid2f = MakeRegalProc( http_glMapGrid2f, layer );
  tbl.glMaterialf = MakeRegalProc( http_glMaterialf, layer );
  tbl.glMaterialfv = MakeRegalProc( http_glMaterialfv, layer );
  tbl.glMateriali = MakeRegalProc( http_glMateriali, layer );
  tbl.glMaterialiv = MakeRegalProc( http_glMaterialiv, layer );
  tbl.glMatrixMode = MakeRegalProc( http_glMatrixMode, layer );
  tbl.glMultMatrixd = MakeRegalProc( http_glMultMatrixd, layer );
  tbl.glMultMatrixf = MakeRegalProc( http_glMultMatrixf, layer );
  tbl.glNewList = MakeRegalProc( http_glNewList, layer );
  tbl.glNormal3b = MakeRegalProc( http_glNormal3b, layer );
  tbl.glNormal3bv = MakeRegalProc( http_glNormal3bv, layer );
  tbl.glNormal3d = MakeRegalProc( http_glNormal3d, layer );
  tbl.glNormal3dv = MakeRegalProc( http_glNormal3dv, layer );
  tbl.glNormal3f = MakeRegalProc( http_glNormal3f, layer );
  tbl.glNormal3fv = MakeRegalProc( http_glNormal3fv, layer );
  tbl.glNormal3i = MakeRegalProc( http_glNormal3i, layer );
  tbl.glNormal3iv = MakeRegalProc( http_glNormal3iv, layer );
  tbl.glNormal3s = MakeRegalProc( http_glNormal3s, layer );
  tbl.glNormal3sv = MakeRegalProc( http_glNormal3sv, layer );
  tbl.glOrtho = MakeRegalProc( http_glOrtho, layer );
  tbl.glPassThrough = MakeRegalProc( http_glPassThrough, layer );
  tbl.glPixelMapfv = MakeRegalProc( http_glPixelMapfv, layer );
  tbl.glPixelMapuiv = MakeRegalProc( http_glPixelMapuiv, layer );
  tbl.glPixelMapusv = MakeRegalProc( http_glPixelMapusv, layer );
  tbl.glPixelStoref = MakeRegalProc( http_glPixelStoref, layer );
  tbl.glPixelStorei = MakeRegalProc( http_glPixelStorei, layer );
  tbl.glPixelTransferf = MakeRegalProc( http_glPixelTransferf, layer );
  tbl.glPixelTransferi = MakeRegalProc( http_glPixelTransferi, layer );
  tbl.glPixelZoom = MakeRegalProc( http_glPixelZoom, layer );
  tbl.glPointSize = MakeRegalProc( http_glPointSize, layer );
  tbl.glPolygonMode = MakeRegalProc( http_glPolygonMode, layer );
  tbl.glPolygonStipple = MakeRegalProc( http_glPolygonStipple, layer );
  tbl.glPopAttrib = MakeRegalProc( http_glPopAttrib, layer );
  tbl.glPopMatrix = MakeRegalProc( http_glPopMatrix, layer );
  tbl.glPopName = MakeRegalProc( http_glPopName, layer );
  tbl.glPushAttrib = MakeRegalProc( http_glPushAttrib, layer );
  tbl.glPushMatrix = MakeRegalProc( http_glPushMatrix, layer );
  tbl.glPushName = MakeRegalProc( http_glPushName, layer );
  tbl.glRasterPos2d = MakeRegalProc( http_glRasterPos2d, layer );
  tbl.glRasterPos2dv = MakeRegalProc( http_glRasterPos2dv, layer );
  tbl.glRasterPos2f = MakeRegalProc( http_glRasterPos2f, layer );
  tbl.glRasterPos2fv = MakeRegalProc( http_glRasterPos2fv, layer );
  tbl.glRasterPos2i = MakeRegalProc( http_glRasterPos2i, layer );
  tbl.glRasterPos2iv = MakeRegalProc( http_glRasterPos2iv, layer );
  tbl.glRasterPos2s = MakeRegalProc( http_glRasterPos2s, layer );
  tbl.glRasterPos2sv = MakeRegalProc( http_glRasterPos2sv, layer );
  tbl.glRasterPos3d = MakeRegalProc( http_glRasterPos3d, layer );
  tbl.glRasterPos3dv = MakeRegalProc( http_glRasterPos3dv, layer );
  tbl.glRasterPos3f = MakeRegalProc( http_glRasterPos3f, layer );
  tbl.glRasterPos3fv = MakeRegalProc( http_glRasterPos3fv, layer );
  tbl.glRasterPos3i = MakeRegalProc( http_glRasterPos3i, layer );
  tbl.glRasterPos3iv = MakeRegalProc( http_glRasterPos3iv, layer );
  tbl.glRasterPos3s = MakeRegalProc( http_glRasterPos3s, layer );
  tbl.glRasterPos3sv = MakeRegalProc( http_glRasterPos3sv, layer );
  tbl.glRasterPos4d = MakeRegalProc( http_glRasterPos4d, layer );
  tbl.glRasterPos4dv = MakeRegalProc( http_glRasterPos4dv, layer );
  tbl.glRasterPos4f = MakeRegalProc( http_glRasterPos4f, layer );
  tbl.glRasterPos4fv = MakeRegalProc( http_glRasterPos4fv, layer );
  tbl.glRasterPos4i = MakeRegalProc( http_glRasterPos4i, layer );
  tbl.glRasterPos4iv = MakeRegalProc( http_glRasterPos4iv, layer );
  tbl.glRasterPos4s = MakeRegalProc( http_glRasterPos4s, layer );
  tbl.glRasterPos4sv = MakeRegalProc( http_glRasterPos4sv, layer );
  tbl.glReadBuffer = MakeRegalProc( http_glReadBuffer, layer );
  tbl.glReadPixels = MakeRegalProc( http_glReadPixels, layer );
  tbl.glRectd = MakeRegalProc( http_glRectd, layer );
  tbl.glRectdv = MakeRegalProc( http_glRectdv, layer );
  tbl.glRectf = MakeRegalProc( http_glRectf, layer );
  tbl.glRectfv = MakeRegalProc( http_glRectfv, layer );
  tbl.glRecti = MakeRegalProc( http_glRecti, layer );
  tbl.glRectiv = MakeRegalProc( http_glRectiv, layer );
  tbl.glRects = MakeRegalProc( http_glRects, layer );
  tbl.glRectsv = MakeRegalProc( http_glRectsv, layer );
  tbl.glRenderMode = MakeRegalProc( http_glRenderMode, layer );
  tbl.glRotated = MakeRegalProc( http_glRotated, layer );
  tbl.glRotatef = MakeRegalProc( http_glRotatef, layer );
  tbl.glScaled = MakeRegalProc( http_glScaled, layer );
  tbl.glScalef = MakeRegalProc( http_glScalef, layer );
  tbl.glScissor = MakeRegalProc( http_glScissor, layer );
  tbl.glSelectBuffer = MakeRegalProc( http_glSelectBuffer, layer );
  tbl.glShadeModel = MakeRegalProc( http_glShadeModel, layer );
  tbl.glStencilFunc = MakeRegalProc( http_glStencilFunc, layer );
  tbl.glStencilMask = MakeRegalProc( http_glStencilMask, layer );
  tbl.glStencilOp = MakeRegalProc( http_glStencilOp, layer );
  tbl.glTexCoord1d = MakeRegalProc( http_glTexCoord1d, layer );
  tbl.glTexCoord1dv = MakeRegalProc( http_glTexCoord1dv, layer );
  tbl.glTexCoord1f = MakeRegalProc( http_glTexCoord1f, layer );
  tbl.glTexCoord1fv = MakeRegalProc( http_glTexCoord1fv, layer );
  tbl.glTexCoord1i = MakeRegalProc( http_glTexCoord1i, layer );
  tbl.glTexCoord1iv = MakeRegalProc( http_glTexCoord1iv, layer );
  tbl.glTexCoord1s = MakeRegalProc( http_glTexCoord1s, layer );
  tbl.glTexCoord1sv = MakeRegalProc( http_glTexCoord1sv, layer );
  tbl.glTexCoord2d = MakeRegalProc( http_glTexCoord2d, layer );
  tbl.glTexCoord2dv = MakeRegalProc( http_glTexCoord2dv, layer );
  tbl.glTexCoord2f = MakeRegalProc( http_glTexCoord2f, layer );
  tbl.glTexCoord2fv = MakeRegalProc( http_glTexCoord2fv, layer );
  tbl.glTexCoord2i = MakeRegalProc( http_glTexCoord2i, layer );
  tbl.glTexCoord2iv = MakeRegalProc( http_glTexCoord2iv, layer );
  tbl.glTexCoord2s = MakeRegalProc( http_glTexCoord2s, layer );
  tbl.glTexCoord2sv = MakeRegalProc( http_glTexCoord2sv, layer );
  tbl.glTexCoord3d = MakeRegalProc( http_glTexCoord3d, layer );
  tbl.glTexCoord3dv = MakeRegalProc( http_glTexCoord3dv, layer );
  tbl.glTexCoord3f = MakeRegalProc( http_glTexCoord3f, layer );
  tbl.glTexCoord3fv = MakeRegalProc( http_glTexCoord3fv, layer );
  tbl.glTexCoord3i = MakeRegalProc( http_glTexCoord3i, layer );
  tbl.glTexCoord3iv = MakeRegalProc( http_glTexCoord3iv, layer );
  tbl.glTexCoord3s = MakeRegalProc( http_glTexCoord3s, layer );
  tbl.glTexCoord3sv = MakeRegalProc( http_glTexCoord3sv, layer );
  tbl.glTexCoord4d = MakeRegalProc( http_glTexCoord4d, layer );
  tbl.glTexCoord4dv = MakeRegalProc( http_glTexCoord4dv, layer );
  tbl.glTexCoord4f = MakeRegalProc( http_glTexCoord4f, layer );
  tbl.glTexCoord4fv = MakeRegalProc( http_glTexCoord4fv, layer );
  tbl.glTexCoord4i = MakeRegalProc( http_glTexCoord4i, layer );
  tbl.glTexCoord4iv = MakeRegalProc( http_glTexCoord4iv, layer );
  tbl.glTexCoord4s = MakeRegalProc( http_glTexCoord4s, layer );
  tbl.glTexCoord4sv = MakeRegalProc( http_glTexCoord4sv, layer );
  tbl.glTexEnvf = MakeRegalProc( http_glTexEnvf, layer );
  tbl.glTexEnvfv = MakeRegalProc( http_glTexEnvfv, layer );
  tbl.glTexEnvi = MakeRegalProc( http_glTexEnvi, layer );
  tbl.glTexEnviv = MakeRegalProc( http_glTexEnviv, layer );
  tbl.glTexGend = MakeRegalProc( http_glTexGend, layer );
  tbl.glTexGendv = MakeRegalProc( http_glTexGendv, layer );
  tbl.glTexGenf = MakeRegalProc( http_glTexGenf, layer );
  tbl.glTexGenfv = MakeRegalProc( http_glTexGenfv, layer );
  tbl.glTexGeni = MakeRegalProc( http_glTexGeni, layer );
  tbl.glTexGeniv = MakeRegalProc( http_glTexGeniv, layer );
  tbl.glTexImage1D = MakeRegalProc( http_glTexImage1D, layer );
  tbl.glTexImage2D = MakeRegalProc( http_glTexImage2D, layer );
  tbl.glTexParameterf = MakeRegalProc( http_glTexParameterf, layer );
  tbl.glTexParameterfv = MakeRegalProc( http_glTexParameterfv, layer );
  tbl.glTexParameteri = MakeRegalProc( http_glTexParameteri, layer );
  tbl.glTexParameteriv = MakeRegalProc( http_glTexParameteriv, layer );
  tbl.glTranslated = MakeRegalProc( http_glTranslated, layer );
  tbl.glTranslatef = MakeRegalProc( http_glTranslatef, layer );
  tbl.glVertex2d = MakeRegalProc( http_glVertex2d, layer );
  tbl.glVertex2dv = MakeRegalProc( http_glVertex2dv, layer );
  tbl.glVertex2f = MakeRegalProc( http_glVertex2f, layer );
  tbl.glVertex2fv = MakeRegalProc( http_glVertex2fv, layer );
  tbl.glVertex2i = MakeRegalProc( http_glVertex2i, layer );
  tbl.glVertex2iv = MakeRegalProc( http_glVertex2iv, layer );
  tbl.glVertex2s = MakeRegalProc( http_glVertex2s, layer );
  tbl.glVertex2sv = MakeRegalProc( http_glVertex2sv, layer );
  tbl.glVertex3d = MakeRegalProc( http_glVertex3d, layer );
  tbl.glVertex3dv = MakeRegalProc( http_glVertex3dv, layer );
  tbl.glVertex3f = MakeRegalProc( http_glVertex3f, layer );
  tbl.glVertex3fv = MakeRegalProc( http_glVertex3fv, layer );
  tbl.glVertex3i = MakeRegalProc( http_glVertex3i, layer );
  tbl.glVertex3iv = MakeRegalProc( http_glVertex3iv, layer );
  tbl.glVertex3s = MakeRegalProc( http_glVertex3s, layer );
  tbl.glVertex3sv = MakeRegalProc( http_glVertex3sv, layer );
  tbl.glVertex4d = MakeRegalProc( http_glVertex4d, layer );
  tbl.glVertex4dv = MakeRegalProc( http_glVertex4dv, layer );
  tbl.glVertex4f = MakeRegalProc( http_glVertex4f, layer );
  tbl.glVertex4fv = MakeRegalProc( http_glVertex4fv, layer );
  tbl.glVertex4i = MakeRegalProc( http_glVertex4i, layer );
  tbl.glVertex4iv = MakeRegalProc( http_glVertex4iv, layer );
  tbl.glVertex4s = MakeRegalProc( http_glVertex4s, layer );
  tbl.glVertex4sv = MakeRegalProc( http_glVertex4sv, layer );
  tbl.glViewport = MakeRegalProc( http_glViewport, layer );

  // GL_VERSION_1_1

  tbl.glAreTexturesResident = MakeRegalProc( http_glAreTexturesResident, layer );
  tbl.glArrayElement = MakeRegalProc( http_glArrayElement, layer );
  tbl.glBindTexture = MakeRegalProc( http_glBindTexture, layer );
  tbl.glColorPointer = MakeRegalProc( http_glColorPointer, layer );
  tbl.glCopyTexImage1D = MakeRegalProc( http_glCopyTexImage1D, layer );
  tbl.glCopyTexImage2D = MakeRegalProc( http_glCopyTexImage2D, layer );
  tbl.glCopyTexSubImage1D = MakeRegalProc( http_glCopyTexSubImage1D, layer );
  tbl.glCopyTexSubImage2D = MakeRegalProc( http_glCopyTexSubImage2D, layer );
  tbl.glDeleteTextures = MakeRegalProc( http_glDeleteTextures, layer );
  tbl.glDisableClientState = MakeRegalProc( http_glDisableClientState, layer );
  tbl.glDrawArrays = MakeRegalProc( http_glDrawArrays, layer );
  tbl.glDrawElements = MakeRegalProc( http_glDrawElements, layer );
  tbl.glEdgeFlagPointer = MakeRegalProc( http_glEdgeFlagPointer, layer );
  tbl.glEnableClientState = MakeRegalProc( http_glEnableClientState, layer );
  tbl.glGenTextures = MakeRegalProc( http_glGenTextures, layer );
  tbl.glGetPointerv = MakeRegalProc( http_glGetPointerv, layer );
  tbl.glIndexPointer = MakeRegalProc( http_glIndexPointer, layer );
  tbl.glIndexub = MakeRegalProc( http_glIndexub, layer );
  tbl.glIndexubv = MakeRegalProc( http_glIndexubv, layer );
  tbl.glInterleavedArrays = MakeRegalProc( http_glInterleavedArrays, layer );
  tbl.glIsTexture = MakeRegalProc( http_glIsTexture, layer );
  tbl.glNormalPointer = MakeRegalProc( http_glNormalPointer, layer );
  tbl.glPolygonOffset = MakeRegalProc( http_glPolygonOffset, layer );
  tbl.glPopClientAttrib = MakeRegalProc( http_glPopClientAttrib, layer );
  tbl.glPrioritizeTextures = MakeRegalProc( http_glPrioritizeTextures, layer );
  tbl.glPushClientAttrib = MakeRegalProc( http_glPushClientAttrib, layer );
  tbl.glTexCoordPointer = MakeRegalProc( http_glTexCoordPointer, layer );
  tbl.glTexSubImage1D = MakeRegalProc( http_glTexSubImage1D, layer );
  tbl.glTexSubImage2D = MakeRegalProc( http_glTexSubImage2D, layer );
  tbl.glVertexPointer = MakeRegalProc( http_glVertexPointer, layer );

  // GL_VERSION_1_2

  tbl.glBlendColor = MakeRegalProc( http_glBlendColor, layer );
  tbl.glBlendEquation = MakeRegalProc( http_glBlendEquation, layer );
  tbl.glCopyTexSubImage3D = MakeRegalProc( http_glCopyTexSubImage3D, layer );
  tbl.glDrawRangeElements = MakeRegalProc( http_glDrawRangeElements, layer );
  tbl.glTexImage3D = MakeRegalProc( http_glTexImage3D, layer );
  tbl.glTexSubImage3D = MakeRegalProc( http_glTexSubImage3D, layer );

  // GL_VERSION_1_3

  tbl.glActiveTexture = MakeRegalProc( http_glActiveTexture, layer );
  tbl.glClientActiveTexture = MakeRegalProc( http_glClientActiveTexture, layer );
  tbl.glCompressedTexImage1D = MakeRegalProc( http_glCompressedTexImage1D, layer );
  tbl.glCompressedTexImage2D = MakeRegalProc( http_glCompressedTexImage2D, layer );
  tbl.glCompressedTexImage3D = MakeRegalProc( http_glCompressedTexImage3D, layer );
  tbl.glCompressedTexSubImage1D = MakeRegalProc( http_glCompressedTexSubImage1D, layer );
  tbl.glCompressedTexSubImage2D = MakeRegalProc( http_glCompressedTexSubImage2D, layer );
  tbl.glCompressedTexSubImage3D = MakeRegalProc( http_glCompressedTexSubImage3D, layer );
  tbl.glGetCompressedTexImage = MakeRegalProc( http_glGetCompressedTexImage, layer );
  tbl.glLoadTransposeMatrixd = MakeRegalProc( http_glLoadTransposeMatrixd, layer );
  tbl.glLoadTransposeMatrixf = MakeRegalProc( http_glLoadTransposeMatrixf, layer );
  tbl.glMultTransposeMatrixd = MakeRegalProc( http_glMultTransposeMatrixd, layer );
  tbl.glMultTransposeMatrixf = MakeRegalProc( http_glMultTransposeMatrixf, layer );
  tbl.glMultiTexCoord1d = MakeRegalProc( http_glMultiTexCoord1d, layer );
  tbl.glMultiTexCoord1dv = MakeRegalProc( http_glMultiTexCoord1dv, layer );
  tbl.glMultiTexCoord1f = MakeRegalProc( http_glMultiTexCoord1f, layer );
  tbl.glMultiTexCoord1fv = MakeRegalProc( http_glMultiTexCoord1fv, layer );
  tbl.glMultiTexCoord1i = MakeRegalProc( http_glMultiTexCoord1i, layer );
  tbl.glMultiTexCoord1iv = MakeRegalProc( http_glMultiTexCoord1iv, layer );
  tbl.glMultiTexCoord1s = MakeRegalProc( http_glMultiTexCoord1s, layer );
  tbl.glMultiTexCoord1sv = MakeRegalProc( http_glMultiTexCoord1sv, layer );
  tbl.glMultiTexCoord2d = MakeRegalProc( http_glMultiTexCoord2d, layer );
  tbl.glMultiTexCoord2dv = MakeRegalProc( http_glMultiTexCoord2dv, layer );
  tbl.glMultiTexCoord2f = MakeRegalProc( http_glMultiTexCoord2f, layer );
  tbl.glMultiTexCoord2fv = MakeRegalProc( http_glMultiTexCoord2fv, layer );
  tbl.glMultiTexCoord2i = MakeRegalProc( http_glMultiTexCoord2i, layer );
  tbl.glMultiTexCoord2iv = MakeRegalProc( http_glMultiTexCoord2iv, layer );
  tbl.glMultiTexCoord2s = MakeRegalProc( http_glMultiTexCoord2s, layer );
  tbl.glMultiTexCoord2sv = MakeRegalProc( http_glMultiTexCoord2sv, layer );
  tbl.glMultiTexCoord3d = MakeRegalProc( http_glMultiTexCoord3d, layer );
  tbl.glMultiTexCoord3dv = MakeRegalProc( http_glMultiTexCoord3dv, layer );
  tbl.glMultiTexCoord3f = MakeRegalProc( http_glMultiTexCoord3f, layer );
  tbl.glMultiTexCoord3fv = MakeRegalProc( http_glMultiTexCoord3fv, layer );
  tbl.glMultiTexCoord3i = MakeRegalProc( http_glMultiTexCoord3i, layer );
  tbl.glMultiTexCoord3iv = MakeRegalProc( http_glMultiTexCoord3iv, layer );
  tbl.glMultiTexCoord3s = MakeRegalProc( http_glMultiTexCoord3s, layer );
  tbl.glMultiTexCoord3sv = MakeRegalProc( http_glMultiTexCoord3sv, layer );
  tbl.glMultiTexCoord4d = MakeRegalProc( http_glMultiTexCoord4d, layer );
  tbl.glMultiTexCoord4dv = MakeRegalProc( http_glMultiTexCoord4dv, layer );
  tbl.glMultiTexCoord4f = MakeRegalProc( http_glMultiTexCoord4f, layer );
  tbl.glMultiTexCoord4fv = MakeRegalProc( http_glMultiTexCoord4fv, layer );
  tbl.glMultiTexCoord4i = MakeRegalProc( http_glMultiTexCoord4i, layer );
  tbl.glMultiTexCoord4iv = MakeRegalProc( http_glMultiTexCoord4iv, layer );
  tbl.glMultiTexCoord4s = MakeRegalProc( http_glMultiTexCoord4s, layer );
  tbl.glMultiTexCoord4sv = MakeRegalProc( http_glMultiTexCoord4sv, layer );
  tbl.glSampleCoverage = MakeRegalProc( http_glSampleCoverage, layer );

  // GL_VERSION_1_4

  tbl.glBlendFuncSeparate = MakeRegalProc( http_glBlendFuncSeparate, layer );
  tbl.glFogCoordPointer = MakeRegalProc( http_glFogCoordPointer, layer );
  tbl.glFogCoordd = MakeRegalProc( http_glFogCoordd, layer );
  tbl.glFogCoorddv = MakeRegalProc( http_glFogCoorddv, layer );
  tbl.glFogCoordf = MakeRegalProc( http_glFogCoordf, layer );
  tbl.glFogCoordfv = MakeRegalProc( http_glFogCoordfv, layer );
  tbl.glMultiDrawArrays = MakeRegalProc( http_glMultiDrawArrays, layer );
  tbl.glMultiDrawElements = MakeRegalProc( http_glMultiDrawElements, layer );
  tbl.glPointParameterf = MakeRegalProc( http_glPointParameterf, layer );
  tbl.glPointParameterfv = MakeRegalProc( http_glPointParameterfv, layer );
  tbl.glPointParameteri = MakeRegalProc( http_glPointParameteri, layer );
  tbl.glPointParameteriv = MakeRegalProc( http_glPointParameteriv, layer );
  tbl.glSecondaryColor3b = MakeRegalProc( http_glSecondaryColor3b, layer );
  tbl.glSecondaryColor3bv = MakeRegalProc( http_glSecondaryColor3bv, layer );
  tbl.glSecondaryColor3d = MakeRegalProc( http_glSecondaryColor3d, layer );
  tbl.glSecondaryColor3dv = MakeRegalProc( http_glSecondaryColor3dv, layer );
  tbl.glSecondaryColor3f = MakeRegalProc( http_glSecondaryColor3f, layer );
  tbl.glSecondaryColor3fv = MakeRegalProc( http_glSecondaryColor3fv, layer );
  tbl.glSecondaryColor3i = MakeRegalProc( http_glSecondaryColor3i, layer );
  tbl.glSecondaryColor3iv = MakeRegalProc( http_glSecondaryColor3iv, layer );
  tbl.glSecondaryColor3s = MakeRegalProc( http_glSecondaryColor3s, layer );
  tbl.glSecondaryColor3sv = MakeRegalProc( http_glSecondaryColor3sv, layer );
  tbl.glSecondaryColor3ub = MakeRegalProc( http_glSecondaryColor3ub, layer );
  tbl.glSecondaryColor3ubv = MakeRegalProc( http_glSecondaryColor3ubv, layer );
  tbl.glSecondaryColor3ui = MakeRegalProc( http_glSecondaryColor3ui, layer );
  tbl.glSecondaryColor3uiv = MakeRegalProc( http_glSecondaryColor3uiv, layer );
  tbl.glSecondaryColor3us = MakeRegalProc( http_glSecondaryColor3us, layer );
  tbl.glSecondaryColor3usv = MakeRegalProc( http_glSecondaryColor3usv, layer );
  tbl.glSecondaryColorPointer = MakeRegalProc( http_glSecondaryColorPointer, layer );
  tbl.glWindowPos2d = MakeRegalProc( http_glWindowPos2d, layer );
  tbl.glWindowPos2dv = MakeRegalProc( http_glWindowPos2dv, layer );
  tbl.glWindowPos2f = MakeRegalProc( http_glWindowPos2f, layer );
  tbl.glWindowPos2fv = MakeRegalProc( http_glWindowPos2fv, layer );
  tbl.glWindowPos2i = MakeRegalProc( http_glWindowPos2i, layer );
  tbl.glWindowPos2iv = MakeRegalProc( http_glWindowPos2iv, layer );
  tbl.glWindowPos2s = MakeRegalProc( http_glWindowPos2s, layer );
  tbl.glWindowPos2sv = MakeRegalProc( http_glWindowPos2sv, layer );
  tbl.glWindowPos3d = MakeRegalProc( http_glWindowPos3d, layer );
  tbl.glWindowPos3dv = MakeRegalProc( http_glWindowPos3dv, layer );
  tbl.glWindowPos3f = MakeRegalProc( http_glWindowPos3f, layer );
  tbl.glWindowPos3fv = MakeRegalProc( http_glWindowPos3fv, layer );
  tbl.glWindowPos3i = MakeRegalProc( http_glWindowPos3i, layer );
  tbl.glWindowPos3iv = MakeRegalProc( http_glWindowPos3iv, layer );
  tbl.glWindowPos3s = MakeRegalProc( http_glWindowPos3s, layer );
  tbl.glWindowPos3sv = MakeRegalProc( http_glWindowPos3sv, layer );

  // GL_VERSION_1_5

  tbl.glBeginQuery = MakeRegalProc( http_glBeginQuery, layer );
  tbl.glBindBuffer = MakeRegalProc( http_glBindBuffer, layer );
  tbl.glBufferData = MakeRegalProc( http_glBufferData, layer );
  tbl.glBufferSubData = MakeRegalProc( http_glBufferSubData, layer );
  tbl.glDeleteBuffers = MakeRegalProc( http_glDeleteBuffers, layer );
  tbl.glDeleteQueries = MakeRegalProc( http_glDeleteQueries, layer );
  tbl.glEndQuery = MakeRegalProc( http_glEndQuery, layer );
  tbl.glGenBuffers = MakeRegalProc( http_glGenBuffers, layer );
  tbl.glGenQueries = MakeRegalProc( http_glGenQueries, layer );
  tbl.glGetBufferParameteriv = MakeRegalProc( http_glGetBufferParameteriv, layer );
  tbl.glGetBufferPointerv = MakeRegalProc( http_glGetBufferPointerv, layer );
  tbl.glGetBufferSubData = MakeRegalProc( http_glGetBufferSubData, layer );
  tbl.glGetQueryObjectiv = MakeRegalProc( http_glGetQueryObjectiv, layer );
  tbl.glGetQueryObjectuiv = MakeRegalProc( http_glGetQueryObjectuiv, layer );
  tbl.glGetQueryiv = MakeRegalProc( http_glGetQueryiv, layer );
  tbl.glIsBuffer = MakeRegalProc( http_glIsBuffer, layer );
  tbl.glIsQuery = MakeRegalProc( http_glIsQuery, layer );
  tbl.glMapBuffer = MakeRegalProc( http_glMapBuffer, layer );
  tbl.glUnmapBuffer = MakeRegalProc( http_glUnmapBuffer, layer );

  // GL_VERSION_2_0

  tbl.glAttachShader = MakeRegalProc( http_glAttachShader, layer );
  tbl.glBindAttribLocation = MakeRegalProc( http_glBindAttribLocation, layer );
  tbl.glBlendEquationSeparate = MakeRegalProc( http_glBlendEquationSeparate, layer );
  tbl.glCompileShader = MakeRegalProc( http_glCompileShader, layer );
  tbl.glCreateProgram = MakeRegalProc( http_glCreateProgram, layer );
  tbl.glCreateShader = MakeRegalProc( http_glCreateShader, layer );
  tbl.glDeleteProgram = MakeRegalProc( http_glDeleteProgram, layer );
  tbl.glDeleteShader = MakeRegalProc( http_glDeleteShader, layer );
  tbl.glDetachShader = MakeRegalProc( http_glDetachShader, layer );
  tbl.glDisableVertexAttribArray = MakeRegalProc( http_glDisableVertexAttribArray, layer );
  tbl.glDrawBuffers = MakeRegalProc( http_glDrawBuffers, layer );
  tbl.glEnableVertexAttribArray = MakeRegalProc( http_glEnableVertexAttribArray, layer );
  tbl.glGetActiveAttrib = MakeRegalProc( http_glGetActiveAttrib, layer );
  tbl.glGetActiveUniform = MakeRegalProc( http_glGetActiveUniform, layer );
  tbl.glGetAttachedShaders = MakeRegalProc( http_glGetAttachedShaders, layer );
  tbl.glGetAttribLocation = MakeRegalProc( http_glGetAttribLocation, layer );
  tbl.glGetProgramInfoLog = MakeRegalProc( http_glGetProgramInfoLog, layer );
  tbl.glGetProgramiv = MakeRegalProc( http_glGetProgramiv, layer );
  tbl.glGetShaderInfoLog = MakeRegalProc( http_glGetShaderInfoLog, layer );
  tbl.glGetShaderSource = MakeRegalProc( http_glGetShaderSource, layer );
  tbl.glGetShaderiv = MakeRegalProc( http_glGetShaderiv, layer );
  tbl.glGetUniformLocation = MakeRegalProc( http_glGetUniformLocation, layer );
  tbl.glGetUniformfv = MakeRegalProc( http_glGetUniformfv, layer );
  tbl.glGetUniformiv = MakeRegalProc( http_glGetUniformiv, layer );
  tbl.glGetVertexAttribPointerv = MakeRegalProc( http_glGetVertexAttribPointerv, layer );
  tbl.glGetVertexAttribdv = MakeRegalProc( http_glGetVertexAttribdv, layer );
  tbl.glGetVertexAttribfv = MakeRegalProc( http_glGetVertexAttribfv, layer );
  tbl.glGetVertexAttribiv = MakeRegalProc( http_glGetVertexAttribiv, layer );
  tbl.glIsProgram = MakeRegalProc( http_glIsProgram, layer );
  tbl.glIsShader = MakeRegalProc( http_glIsShader, layer );
  tbl.glLinkProgram = MakeRegalProc( http_glLinkProgram, layer );
  tbl.glShaderSource = MakeRegalProc( http_glShaderSource, layer );
  tbl.glStencilFuncSeparate = MakeRegalProc( http_glStencilFuncSeparate, layer );
  tbl.glStencilMaskSeparate = MakeRegalProc( http_glStencilMaskSeparate, layer );
  tbl.glStencilOpSeparate = MakeRegalProc( http_glStencilOpSeparate, layer );
  tbl.glUniform1f = MakeRegalProc( http_glUniform1f, layer );
  tbl.glUniform1fv = MakeRegalProc( http_glUniform1fv, layer );
  tbl.glUniform1i = MakeRegalProc( http_glUniform1i, layer );
  tbl.glUniform1iv = MakeRegalProc( http_glUniform1iv, layer );
  tbl.glUniform2f = MakeRegalProc( http_glUniform2f, layer );
  tbl.glUniform2fv = MakeRegalProc( http_glUniform2fv, layer );
  tbl.glUniform2i = MakeRegalProc( http_glUniform2i, layer );
  tbl.glUniform2iv = MakeRegalProc( http_glUniform2iv, layer );
  tbl.glUniform3f = MakeRegalProc( http_glUniform3f, layer );
  tbl.glUniform3fv = MakeRegalProc( http_glUniform3fv, layer );
  tbl.glUniform3i = MakeRegalProc( http_glUniform3i, layer );
  tbl.glUniform3iv = MakeRegalProc( http_glUniform3iv, layer );
  tbl.glUniform4f = MakeRegalProc( http_glUniform4f, layer );
  tbl.glUniform4fv = MakeRegalProc( http_glUniform4fv, layer );
  tbl.glUniform4i = MakeRegalProc( http_glUniform4i, layer );
  tbl.glUniform4iv = MakeRegalProc( http_glUniform4iv, layer );
  tbl.glUniformMatrix2fv = MakeRegalProc( http_glUniformMatrix2fv, layer );
  tbl.glUniformMatrix3fv = MakeRegalProc( http_glUniformMatrix3fv, layer );
  tbl.glUniformMatrix4fv = MakeRegalProc( http_glUniformMatrix4fv, layer );
  tbl.glUseProgram = MakeRegalProc( http_glUseProgram, layer );
  tbl.glValidateProgram = MakeRegalProc( http_glValidateProgram, layer );
  tbl.glVertexAttrib1d = MakeRegalProc( http_glVertexAttrib1d, layer );
  tbl.glVertexAttrib1dv = MakeRegalProc( http_glVertexAttrib1dv, layer );
  tbl.glVertexAttrib1f = MakeRegalProc( http_glVertexAttrib1f, layer );
  tbl.glVertexAttrib1fv = MakeRegalProc( http_glVertexAttrib1fv, layer );
  tbl.glVertexAttrib1s = MakeRegalProc( http_glVertexAttrib1s, layer );
  tbl.glVertexAttrib1sv = MakeRegalProc( http_glVertexAttrib1sv, layer );
  tbl.glVertexAttrib2d = MakeRegalProc( http_glVertexAttrib2d, layer );
  tbl.glVertexAttrib2dv = MakeRegalProc( http_glVertexAttrib2dv, layer );
  tbl.glVertexAttrib2f = MakeRegalProc( http_glVertexAttrib2f, layer );
  tbl.glVertexAttrib2fv = MakeRegalProc( http_glVertexAttrib2fv, layer );
  tbl.glVertexAttrib2s = MakeRegalProc( http_glVertexAttrib2s, layer );
  tbl.glVertexAttrib2sv = MakeRegalProc( http_glVertexAttrib2sv, layer );
  tbl.glVertexAttrib3d = MakeRegalProc( http_glVertexAttrib3d, layer );
  tbl.glVertexAttrib3dv = MakeRegalProc( http_glVertexAttrib3dv, layer );
  tbl.glVertexAttrib3f = MakeRegalProc( http_glVertexAttrib3f, layer );
  tbl.glVertexAttrib3fv = MakeRegalProc( http_glVertexAttrib3fv, layer );
  tbl.glVertexAttrib3s = MakeRegalProc( http_glVertexAttrib3s, layer );
  tbl.glVertexAttrib3sv = MakeRegalProc( http_glVertexAttrib3sv, layer );
  tbl.glVertexAttrib4Nbv = MakeRegalProc( http_glVertexAttrib4Nbv, layer );
  tbl.glVertexAttrib4Niv = MakeRegalProc( http_glVertexAttrib4Niv, layer );
  tbl.glVertexAttrib4Nsv = MakeRegalProc( http_glVertexAttrib4Nsv, layer );
  tbl.glVertexAttrib4Nub = MakeRegalProc( http_glVertexAttrib4Nub, layer );
  tbl.glVertexAttrib4Nubv = MakeRegalProc( http_glVertexAttrib4Nubv, layer );
  tbl.glVertexAttrib4Nuiv = MakeRegalProc( http_glVertexAttrib4Nuiv, layer );
  tbl.glVertexAttrib4Nusv = MakeRegalProc( http_glVertexAttrib4Nusv, layer );
  tbl.glVertexAttrib4bv = MakeRegalProc( http_glVertexAttrib4bv, layer );
  tbl.glVertexAttrib4d = MakeRegalProc( http_glVertexAttrib4d, layer );
  tbl.glVertexAttrib4dv = MakeRegalProc( http_glVertexAttrib4dv, layer );
  tbl.glVertexAttrib4f = MakeRegalProc( http_glVertexAttrib4f, layer );
  tbl.glVertexAttrib4fv = MakeRegalProc( http_glVertexAttrib4fv, layer );
  tbl.glVertexAttrib4iv = MakeRegalProc( http_glVertexAttrib4iv, layer );
  tbl.glVertexAttrib4s = MakeRegalProc( http_glVertexAttrib4s, layer );
  tbl.glVertexAttrib4sv = MakeRegalProc( http_glVertexAttrib4sv, layer );
  tbl.glVertexAttrib4ubv = MakeRegalProc( http_glVertexAttrib4ubv, layer );
  tbl.glVertexAttrib4uiv = MakeRegalProc( http_glVertexAttrib4uiv, layer );
  tbl.glVertexAttrib4usv = MakeRegalProc( http_glVertexAttrib4usv, layer );
  tbl.glVertexAttribPointer = MakeRegalProc( http_glVertexAttribPointer, layer );

  // GL_VERSION_2_1

  tbl.glUniformMatrix2x3fv = MakeRegalProc( http_glUniformMatrix2x3fv, layer );
  tbl.glUniformMatrix2x4fv = MakeRegalProc( http_glUniformMatrix2x4fv, layer );
  tbl.glUniformMatrix3x2fv = MakeRegalProc( http_glUniformMatrix3x2fv, layer );
  tbl.glUniformMatrix3x4fv = MakeRegalProc( http_glUniformMatrix3x4fv, layer );
  tbl.glUniformMatrix4x2fv = MakeRegalProc( http_glUniformMatrix4x2fv, layer );
  tbl.glUniformMatrix4x3fv = MakeRegalProc( http_glUniformMatrix4x3fv, layer );

  // GL_VERSION_3_0

  tbl.glBeginConditionalRender = MakeRegalProc( http_glBeginConditionalRender, layer );
  tbl.glBeginTransformFeedback = MakeRegalProc( http_glBeginTransformFeedback, layer );
  tbl.glBindFragDataLocation = MakeRegalProc( http_glBindFragDataLocation, layer );
  tbl.glClampColor = MakeRegalProc( http_glClampColor, layer );
  tbl.glClearBufferfi = MakeRegalProc( http_glClearBufferfi, layer );
  tbl.glClearBufferfv = MakeRegalProc( http_glClearBufferfv, layer );
  tbl.glClearBufferiv = MakeRegalProc( http_glClearBufferiv, layer );
  tbl.glClearBufferuiv = MakeRegalProc( http_glClearBufferuiv, layer );
  tbl.glColorMaski = MakeRegalProc( http_glColorMaski, layer );
  tbl.glDisablei = MakeRegalProc( http_glDisablei, layer );
  tbl.glEnablei = MakeRegalProc( http_glEnablei, layer );
  tbl.glEndConditionalRender = MakeRegalProc( http_glEndConditionalRender, layer );
  tbl.glEndTransformFeedback = MakeRegalProc( http_glEndTransformFeedback, layer );
  tbl.glGetBooleani_v = MakeRegalProc( http_glGetBooleani_v, layer );
  tbl.glGetFragDataLocation = MakeRegalProc( http_glGetFragDataLocation, layer );
  tbl.glGetStringi = MakeRegalProc( http_glGetStringi, layer );
  tbl.glGetTexParameterIiv = MakeRegalProc( http_glGetTexParameterIiv, layer );
  tbl.glGetTexParameterIuiv = MakeRegalProc( http_glGetTexParameterIuiv, layer );
  tbl.glGetTransformFeedbackVarying = MakeRegalProc( http_glGetTransformFeedbackVarying, layer );
  tbl.glGetUniformuiv = MakeRegalProc( http_glGetUniformuiv, layer );
  tbl.glGetVertexAttribIiv = MakeRegalProc( http_glGetVertexAttribIiv, layer );
  tbl.glGetVertexAttribIuiv = MakeRegalProc( http_glGetVertexAttribIuiv, layer );
  tbl.glIsEnabledi = MakeRegalProc( http_glIsEnabledi, layer );
  tbl.glTexParameterIiv = MakeRegalProc( http_glTexParameterIiv, layer );
  tbl.glTexParameterIuiv = MakeRegalProc( http_glTexParameterIuiv, layer );
  tbl.glTransformFeedbackVaryings = MakeRegalProc( http_glTransformFeedbackVaryings, layer );
  tbl.glUniform1ui = MakeRegalProc( http_glUniform1ui, layer );
  tbl.glUniform1uiv = MakeRegalProc( http_glUniform1uiv, layer );
  tbl.glUniform2ui = MakeRegalProc( http_glUniform2ui, layer );
  tbl.glUniform2uiv = MakeRegalProc( http_glUniform2uiv, layer );
  tbl.glUniform3ui = MakeRegalProc( http_glUniform3ui, layer );
  tbl.glUniform3uiv = MakeRegalProc( http_glUniform3uiv, layer );
  tbl.glUniform4ui = MakeRegalProc( http_glUniform4ui, layer );
  tbl.glUniform4uiv = MakeRegalProc( http_glUniform4uiv, layer );
  tbl.glVertexAttribI1i = MakeRegalProc( http_glVertexAttribI1i, layer );
  tbl.glVertexAttribI1iv = MakeRegalProc( http_glVertexAttribI1iv, layer );
  tbl.glVertexAttribI1ui = MakeRegalProc( http_glVertexAttribI1ui, layer );
  tbl.glVertexAttribI1uiv = MakeRegalProc( http_glVertexAttribI1uiv, layer );
  tbl.glVertexAttribI2i = MakeRegalProc( http_glVertexAttribI2i, layer );
  tbl.glVertexAttribI2iv = MakeRegalProc( http_glVertexAttribI2iv, layer );
  tbl.glVertexAttribI2ui = MakeRegalProc( http_glVertexAttribI2ui, layer );
  tbl.glVertexAttribI2uiv = MakeRegalProc( http_glVertexAttribI2uiv, layer );
  tbl.glVertexAttribI3i = MakeRegalProc( http_glVertexAttribI3i, layer );
  tbl.glVertexAttribI3iv = MakeRegalProc( http_glVertexAttribI3iv, layer );
  tbl.glVertexAttribI3ui = MakeRegalProc( http_glVertexAttribI3ui, layer );
  tbl.glVertexAttribI3uiv = MakeRegalProc( http_glVertexAttribI3uiv, layer );
  tbl.glVertexAttribI4bv = MakeRegalProc( http_glVertexAttribI4bv, layer );
  tbl.glVertexAttribI4i = MakeRegalProc( http_glVertexAttribI4i, layer );
  tbl.glVertexAttribI4iv = MakeRegalProc( http_glVertexAttribI4iv, layer );
  tbl.glVertexAttribI4sv = MakeRegalProc( http_glVertexAttribI4sv, layer );
  tbl.glVertexAttribI4ubv = MakeRegalProc( http_glVertexAttribI4ubv, layer );
  tbl.glVertexAttribI4ui = MakeRegalProc( http_glVertexAttribI4ui, layer );
  tbl.glVertexAttribI4uiv = MakeRegalProc( http_glVertexAttribI4uiv, layer );
  tbl.glVertexAttribI4usv = MakeRegalProc( http_glVertexAttribI4usv, layer );
  tbl.glVertexAttribIPointer = MakeRegalProc( http_glVertexAttribIPointer, layer );

  // GL_VERSION_3_1

  tbl.glDrawArraysInstanced = MakeRegalProc( http_glDrawArraysInstanced, layer );
  tbl.glDrawElementsInstanced = MakeRegalProc( http_glDrawElementsInstanced, layer );
  tbl.glPrimitiveRestartIndex = MakeRegalProc( http_glPrimitiveRestartIndex, layer );
  tbl.glTexBuffer = MakeRegalProc( http_glTexBuffer, layer );

  // GL_VERSION_3_2

  tbl.glFramebufferTexture = MakeRegalProc( http_glFramebufferTexture, layer );
  tbl.glFramebufferTextureFace = MakeRegalProc( http_glFramebufferTextureFace, layer );
  tbl.glGetBufferParameteri64v = MakeRegalProc( http_glGetBufferParameteri64v, layer );
  tbl.glGetInteger64i_v = MakeRegalProc( http_glGetInteger64i_v, layer );

  // GL_VERSION_3_3

  tbl.glVertexAttribDivisor = MakeRegalProc( http_glVertexAttribDivisor, layer );

  // GL_VERSION_4_0

  tbl.glBlendEquationSeparatei = MakeRegalProc( http_glBlendEquationSeparatei, layer );
  tbl.glBlendEquationi = MakeRegalProc( http_glBlendEquationi, layer );
  tbl.glBlendFuncSeparatei = MakeRegalProc( http_glBlendFuncSeparatei, layer );
  tbl.glBlendFunci = MakeRegalProc( http_glBlendFunci, layer );

  // GL_3DFX_tbuffer

  tbl.glTbufferMask3DFX = MakeRegalProc( http_glTbufferMask3DFX, layer );

  // GL_AMD_debug_output

  tbl.glDebugMessageCallbackAMD = MakeRegalProc( http_glDebugMessageCallbackAMD, layer );
  tbl.glDebugMessageEnableAMD = MakeRegalProc( http_glDebugMessageEnableAMD, layer );
  tbl.glDebugMessageInsertAMD = MakeRegalProc( http_glDebugMessageInsertAMD, layer );
  tbl.glGetDebugMessageLogAMD = MakeRegalProc( http_glGetDebugMessageLogAMD, layer );

  // GL_AMD_draw_buffers_blend

  tbl.glBlendEquationIndexedAMD = MakeRegalProc( http_glBlendEquationIndexedAMD, layer );
  tbl.glBlendEquationSeparateIndexedAMD = MakeRegalProc( http_glBlendEquationSeparateIndexedAMD, layer );
  tbl.glBlendFuncIndexedAMD = MakeRegalProc( http_glBlendFuncIndexedAMD, layer );
  tbl.glBlendFuncSeparateIndexedAMD = MakeRegalProc( http_glBlendFuncSeparateIndexedAMD, layer );

  // GL_AMD_interleaved_elements

  tbl.glVertexAttribParameteriAMD = MakeRegalProc( http_glVertexAttribParameteriAMD, layer );

  // GL_AMD_multi_draw_indirect

  tbl.glMultiDrawArraysIndirectAMD = MakeRegalProc( http_glMultiDrawArraysIndirectAMD, layer );
  tbl.glMultiDrawElementsIndirectAMD = MakeRegalProc( http_glMultiDrawElementsIndirectAMD, layer );

  // GL_AMD_name_gen_delete

  tbl.glDeleteNamesAMD = MakeRegalProc( http_glDeleteNamesAMD, layer );
  tbl.glGenNamesAMD = MakeRegalProc( http_glGenNamesAMD, layer );
  tbl.glIsNameAMD = MakeRegalProc( http_glIsNameAMD, layer );

  // GL_AMD_performance_monitor

  tbl.glBeginPerfMonitorAMD = MakeRegalProc( http_glBeginPerfMonitorAMD, layer );
  tbl.glDeletePerfMonitorsAMD = MakeRegalProc( http_glDeletePerfMonitorsAMD, layer );
  tbl.glEndPerfMonitorAMD = MakeRegalProc( http_glEndPerfMonitorAMD, layer );
  tbl.glGenPerfMonitorsAMD = MakeRegalProc( http_glGenPerfMonitorsAMD, layer );
  tbl.glGetPerfMonitorCounterDataAMD = MakeRegalProc( http_glGetPerfMonitorCounterDataAMD, layer );
  tbl.glGetPerfMonitorCounterInfoAMD = MakeRegalProc( http_glGetPerfMonitorCounterInfoAMD, layer );
  tbl.glGetPerfMonitorCounterStringAMD = MakeRegalProc( http_glGetPerfMonitorCounterStringAMD, layer );
  tbl.glGetPerfMonitorCountersAMD = MakeRegalProc( http_glGetPerfMonitorCountersAMD, layer );
  tbl.glGetPerfMonitorGroupStringAMD = MakeRegalProc( http_glGetPerfMonitorGroupStringAMD, layer );
  tbl.glGetPerfMonitorGroupsAMD = MakeRegalProc( http_glGetPerfMonitorGroupsAMD, layer );
  tbl.glSelectPerfMonitorCountersAMD = MakeRegalProc( http_glSelectPerfMonitorCountersAMD, layer );

  // GL_AMD_sample_positions

  tbl.glSetMultisamplefvAMD = MakeRegalProc( http_glSetMultisamplefvAMD, layer );

  // GL_AMD_sparse_texture

  tbl.glTexStorageSparseAMD = MakeRegalProc( http_glTexStorageSparseAMD, layer );
  tbl.glTextureStorageSparseAMD = MakeRegalProc( http_glTextureStorageSparseAMD, layer );

  // GL_AMD_stencil_operation_extended

  tbl.glStencilOpValueAMD = MakeRegalProc( http_glStencilOpValueAMD, layer );

  // GL_AMD_vertex_shader_tessellator

  tbl.glTessellationFactorAMD = MakeRegalProc( http_glTessellationFactorAMD, layer );
  tbl.glTessellationModeAMD = MakeRegalProc( http_glTessellationModeAMD, layer );

  // GL_ANGLE_framebuffer_blit

  tbl.glBlitFramebufferANGLE = MakeRegalProc( http_glBlitFramebufferANGLE, layer );

  // GL_ANGLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleANGLE = MakeRegalProc( http_glRenderbufferStorageMultisampleANGLE, layer );

  // GL_ANGLE_instanced_arrays

  tbl.glDrawArraysInstancedANGLE = MakeRegalProc( http_glDrawArraysInstancedANGLE, layer );
  tbl.glDrawElementsInstancedANGLE = MakeRegalProc( http_glDrawElementsInstancedANGLE, layer );
  tbl.glVertexAttribDivisorANGLE = MakeRegalProc( http_glVertexAttribDivisorANGLE, layer );

  // GL_ANGLE_timer_query

  tbl.glBeginQueryANGLE = MakeRegalProc( http_glBeginQueryANGLE, layer );
  tbl.glDeleteQueriesANGLE = MakeRegalProc( http_glDeleteQueriesANGLE, layer );
  tbl.glEndQueryANGLE = MakeRegalProc( http_glEndQueryANGLE, layer );
  tbl.glGenQueriesANGLE = MakeRegalProc( http_glGenQueriesANGLE, layer );
  tbl.glGetQueryObjecti64vANGLE = MakeRegalProc( http_glGetQueryObjecti64vANGLE, layer );
  tbl.glGetQueryObjectivANGLE = MakeRegalProc( http_glGetQueryObjectivANGLE, layer );
  tbl.glGetQueryObjectui64vANGLE = MakeRegalProc( http_glGetQueryObjectui64vANGLE, layer );
  tbl.glGetQueryObjectuivANGLE = MakeRegalProc( http_glGetQueryObjectuivANGLE, layer );
  tbl.glGetQueryivANGLE = MakeRegalProc( http_glGetQueryivANGLE, layer );
  tbl.glIsQueryANGLE = MakeRegalProc( http_glIsQueryANGLE, layer );
  tbl.glQueryCounterANGLE = MakeRegalProc( http_glQueryCounterANGLE, layer );

  // GL_ANGLE_translated_shader_source

  tbl.glGetTranslatedShaderSourceANGLE = MakeRegalProc( http_glGetTranslatedShaderSourceANGLE, layer );

  // GL_APPLE_copy_texture_levels

  tbl.glCopyTextureLevelsAPPLE = MakeRegalProc( http_glCopyTextureLevelsAPPLE, layer );

  // GL_APPLE_element_array

  tbl.glDrawElementArrayAPPLE = MakeRegalProc( http_glDrawElementArrayAPPLE, layer );
  tbl.glDrawRangeElementArrayAPPLE = MakeRegalProc( http_glDrawRangeElementArrayAPPLE, layer );
  tbl.glElementPointerAPPLE = MakeRegalProc( http_glElementPointerAPPLE, layer );
  tbl.glMultiDrawElementArrayAPPLE = MakeRegalProc( http_glMultiDrawElementArrayAPPLE, layer );
  tbl.glMultiDrawRangeElementArrayAPPLE = MakeRegalProc( http_glMultiDrawRangeElementArrayAPPLE, layer );

  // GL_APPLE_fence

  tbl.glDeleteFencesAPPLE = MakeRegalProc( http_glDeleteFencesAPPLE, layer );
  tbl.glFinishFenceAPPLE = MakeRegalProc( http_glFinishFenceAPPLE, layer );
  tbl.glFinishObjectAPPLE = MakeRegalProc( http_glFinishObjectAPPLE, layer );
  tbl.glGenFencesAPPLE = MakeRegalProc( http_glGenFencesAPPLE, layer );
  tbl.glIsFenceAPPLE = MakeRegalProc( http_glIsFenceAPPLE, layer );
  tbl.glSetFenceAPPLE = MakeRegalProc( http_glSetFenceAPPLE, layer );
  tbl.glTestFenceAPPLE = MakeRegalProc( http_glTestFenceAPPLE, layer );
  tbl.glTestObjectAPPLE = MakeRegalProc( http_glTestObjectAPPLE, layer );

  // GL_APPLE_flush_buffer_range

  tbl.glBufferParameteriAPPLE = MakeRegalProc( http_glBufferParameteriAPPLE, layer );
  tbl.glFlushMappedBufferRangeAPPLE = MakeRegalProc( http_glFlushMappedBufferRangeAPPLE, layer );

  // GL_APPLE_flush_render

  tbl.glFinishRenderAPPLE = MakeRegalProc( http_glFinishRenderAPPLE, layer );
  tbl.glFlushRenderAPPLE = MakeRegalProc( http_glFlushRenderAPPLE, layer );
  tbl.glSwapAPPLE = MakeRegalProc( http_glSwapAPPLE, layer );

  // GL_APPLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleAPPLE = MakeRegalProc( http_glRenderbufferStorageMultisampleAPPLE, layer );
  tbl.glResolveMultisampleFramebufferAPPLE = MakeRegalProc( http_glResolveMultisampleFramebufferAPPLE, layer );

  // GL_APPLE_object_purgeable

  tbl.glGetObjectParameterivAPPLE = MakeRegalProc( http_glGetObjectParameterivAPPLE, layer );
  tbl.glObjectPurgeableAPPLE = MakeRegalProc( http_glObjectPurgeableAPPLE, layer );
  tbl.glObjectUnpurgeableAPPLE = MakeRegalProc( http_glObjectUnpurgeableAPPLE, layer );

  // GL_APPLE_sync

  tbl.glClientWaitSyncAPPLE = MakeRegalProc( http_glClientWaitSyncAPPLE, layer );
  tbl.glDeleteSyncAPPLE = MakeRegalProc( http_glDeleteSyncAPPLE, layer );
  tbl.glFenceSyncAPPLE = MakeRegalProc( http_glFenceSyncAPPLE, layer );
  tbl.glGetInteger64vAPPLE = MakeRegalProc( http_glGetInteger64vAPPLE, layer );
  tbl.glGetSyncivAPPLE = MakeRegalProc( http_glGetSyncivAPPLE, layer );
  tbl.glIsSyncAPPLE = MakeRegalProc( http_glIsSyncAPPLE, layer );
  tbl.glWaitSyncAPPLE = MakeRegalProc( http_glWaitSyncAPPLE, layer );

  // GL_APPLE_texture_range

  tbl.glGetTexParameterPointervAPPLE = MakeRegalProc( http_glGetTexParameterPointervAPPLE, layer );
  tbl.glTextureRangeAPPLE = MakeRegalProc( http_glTextureRangeAPPLE, layer );

  // GL_APPLE_vertex_array_object

  tbl.glBindVertexArrayAPPLE = MakeRegalProc( http_glBindVertexArrayAPPLE, layer );
  tbl.glDeleteVertexArraysAPPLE = MakeRegalProc( http_glDeleteVertexArraysAPPLE, layer );
  tbl.glGenVertexArraysAPPLE = MakeRegalProc( http_glGenVertexArraysAPPLE, layer );
  tbl.glIsVertexArrayAPPLE = MakeRegalProc( http_glIsVertexArrayAPPLE, layer );

  // GL_APPLE_vertex_array_range

  tbl.glFlushVertexArrayRangeAPPLE = MakeRegalProc( http_glFlushVertexArrayRangeAPPLE, layer );
  tbl.glVertexArrayParameteriAPPLE = MakeRegalProc( http_glVertexArrayParameteriAPPLE, layer );
  tbl.glVertexArrayRangeAPPLE = MakeRegalProc( http_glVertexArrayRangeAPPLE, layer );

  // GL_APPLE_vertex_program_evaluators

  tbl.glDisableVertexAttribAPPLE = MakeRegalProc( http_glDisableVertexAttribAPPLE, layer );
  tbl.glEnableVertexAttribAPPLE = MakeRegalProc( http_glEnableVertexAttribAPPLE, layer );
  tbl.glIsVertexAttribEnabledAPPLE = MakeRegalProc( http_glIsVertexAttribEnabledAPPLE, layer );
  tbl.glMapVertexAttrib1dAPPLE = MakeRegalProc( http_glMapVertexAttrib1dAPPLE, layer );
  tbl.glMapVertexAttrib1fAPPLE = MakeRegalProc( http_glMapVertexAttrib1fAPPLE, layer );
  tbl.glMapVertexAttrib2dAPPLE = MakeRegalProc( http_glMapVertexAttrib2dAPPLE, layer );
  tbl.glMapVertexAttrib2fAPPLE = MakeRegalProc( http_glMapVertexAttrib2fAPPLE, layer );

  // GL_ARB_ES2_compatibility

  tbl.glClearDepthf = MakeRegalProc( http_glClearDepthf, layer );
  tbl.glDepthRangef = MakeRegalProc( http_glDepthRangef, layer );
  tbl.glGetShaderPrecisionFormat = MakeRegalProc( http_glGetShaderPrecisionFormat, layer );
  tbl.glReleaseShaderCompiler = MakeRegalProc( http_glReleaseShaderCompiler, layer );
  tbl.glShaderBinary = MakeRegalProc( http_glShaderBinary, layer );

  // GL_ARB_base_instance

  tbl.glDrawArraysInstancedBaseInstance = MakeRegalProc( http_glDrawArraysInstancedBaseInstance, layer );
  tbl.glDrawElementsInstancedBaseInstance = MakeRegalProc( http_glDrawElementsInstancedBaseInstance, layer );
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = MakeRegalProc( http_glDrawElementsInstancedBaseVertexBaseInstance, layer );

  // GL_ARB_bindless_texture

  tbl.glGetImageHandleARB = MakeRegalProc( http_glGetImageHandleARB, layer );
  tbl.glGetTextureHandleARB = MakeRegalProc( http_glGetTextureHandleARB, layer );
  tbl.glGetTextureSamplerHandleARB = MakeRegalProc( http_glGetTextureSamplerHandleARB, layer );
  tbl.glGetVertexAttribLui64vARB = MakeRegalProc( http_glGetVertexAttribLui64vARB, layer );
  tbl.glIsImageHandleResidentARB = MakeRegalProc( http_glIsImageHandleResidentARB, layer );
  tbl.glIsTextureHandleResidentARB = MakeRegalProc( http_glIsTextureHandleResidentARB, layer );
  tbl.glMakeImageHandleNonResidentARB = MakeRegalProc( http_glMakeImageHandleNonResidentARB, layer );
  tbl.glMakeImageHandleResidentARB = MakeRegalProc( http_glMakeImageHandleResidentARB, layer );
  tbl.glMakeTextureHandleNonResidentARB = MakeRegalProc( http_glMakeTextureHandleNonResidentARB, layer );
  tbl.glMakeTextureHandleResidentARB = MakeRegalProc( http_glMakeTextureHandleResidentARB, layer );
  tbl.glProgramUniformHandleui64ARB = MakeRegalProc( http_glProgramUniformHandleui64ARB, layer );
  tbl.glProgramUniformHandleui64vARB = MakeRegalProc( http_glProgramUniformHandleui64vARB, layer );
  tbl.glUniformHandleui64ARB = MakeRegalProc( http_glUniformHandleui64ARB, layer );
  tbl.glUniformHandleui64vARB = MakeRegalProc( http_glUniformHandleui64vARB, layer );
  tbl.glVertexAttribL1ui64ARB = MakeRegalProc( http_glVertexAttribL1ui64ARB, layer );
  tbl.glVertexAttribL1ui64vARB = MakeRegalProc( http_glVertexAttribL1ui64vARB, layer );

  // GL_ARB_blend_func_extended

  tbl.glBindFragDataLocationIndexed = MakeRegalProc( http_glBindFragDataLocationIndexed, layer );
  tbl.glGetFragDataIndex = MakeRegalProc( http_glGetFragDataIndex, layer );

  // GL_ARB_buffer_storage

  tbl.glBufferStorage = MakeRegalProc( http_glBufferStorage, layer );
  tbl.glNamedBufferStorageEXT = MakeRegalProc( http_glNamedBufferStorageEXT, layer );

  // GL_ARB_cl_event

  tbl.glCreateSyncFromCLeventARB = MakeRegalProc( http_glCreateSyncFromCLeventARB, layer );

  // GL_ARB_clear_buffer_object

  tbl.glClearBufferData = MakeRegalProc( http_glClearBufferData, layer );
  tbl.glClearBufferSubData = MakeRegalProc( http_glClearBufferSubData, layer );
  tbl.glClearNamedBufferDataEXT = MakeRegalProc( http_glClearNamedBufferDataEXT, layer );
  tbl.glClearNamedBufferSubDataEXT = MakeRegalProc( http_glClearNamedBufferSubDataEXT, layer );

  // GL_ARB_clear_texture

  tbl.glClearTexImage = MakeRegalProc( http_glClearTexImage, layer );
  tbl.glClearTexSubImage = MakeRegalProc( http_glClearTexSubImage, layer );

  // GL_ARB_color_buffer_float

  tbl.glClampColorARB = MakeRegalProc( http_glClampColorARB, layer );

  // GL_ARB_compute_shader

  tbl.glDispatchCompute = MakeRegalProc( http_glDispatchCompute, layer );
  tbl.glDispatchComputeIndirect = MakeRegalProc( http_glDispatchComputeIndirect, layer );

  // GL_ARB_compute_variable_group_size

  tbl.glDispatchComputeGroupSizeARB = MakeRegalProc( http_glDispatchComputeGroupSizeARB, layer );

  // GL_ARB_copy_buffer

  tbl.glCopyBufferSubData = MakeRegalProc( http_glCopyBufferSubData, layer );

  // GL_ARB_copy_image

  tbl.glCopyImageSubData = MakeRegalProc( http_glCopyImageSubData, layer );

  // GL_ARB_debug_output

  tbl.glDebugMessageCallbackARB = MakeRegalProc( http_glDebugMessageCallbackARB, layer );
  tbl.glDebugMessageControlARB = MakeRegalProc( http_glDebugMessageControlARB, layer );
  tbl.glDebugMessageInsertARB = MakeRegalProc( http_glDebugMessageInsertARB, layer );
  tbl.glGetDebugMessageLogARB = MakeRegalProc( http_glGetDebugMessageLogARB, layer );

  // GL_ARB_draw_buffers

  tbl.glDrawBuffersARB = MakeRegalProc( http_glDrawBuffersARB, layer );

  // GL_ARB_draw_buffers_blend

  tbl.glBlendEquationSeparateiARB = MakeRegalProc( http_glBlendEquationSeparateiARB, layer );
  tbl.glBlendEquationiARB = MakeRegalProc( http_glBlendEquationiARB, layer );
  tbl.glBlendFuncSeparateiARB = MakeRegalProc( http_glBlendFuncSeparateiARB, layer );
  tbl.glBlendFunciARB = MakeRegalProc( http_glBlendFunciARB, layer );

  // GL_ARB_draw_elements_base_vertex

  tbl.glDrawElementsBaseVertex = MakeRegalProc( http_glDrawElementsBaseVertex, layer );
  tbl.glDrawElementsInstancedBaseVertex = MakeRegalProc( http_glDrawElementsInstancedBaseVertex, layer );
  tbl.glDrawRangeElementsBaseVertex = MakeRegalProc( http_glDrawRangeElementsBaseVertex, layer );
  tbl.glMultiDrawElementsBaseVertex = MakeRegalProc( http_glMultiDrawElementsBaseVertex, layer );

  // GL_ARB_draw_indirect

  tbl.glDrawArraysIndirect = MakeRegalProc( http_glDrawArraysIndirect, layer );
  tbl.glDrawElementsIndirect = MakeRegalProc( http_glDrawElementsIndirect, layer );

  // GL_ARB_draw_instanced

  tbl.glDrawArraysInstancedARB = MakeRegalProc( http_glDrawArraysInstancedARB, layer );
  tbl.glDrawElementsInstancedARB = MakeRegalProc( http_glDrawElementsInstancedARB, layer );

  // GL_ARB_framebuffer_no_attachments

  tbl.glFramebufferParameteri = MakeRegalProc( http_glFramebufferParameteri, layer );
  tbl.glGetFramebufferParameteriv = MakeRegalProc( http_glGetFramebufferParameteriv, layer );
  tbl.glGetNamedFramebufferParameterivEXT = MakeRegalProc( http_glGetNamedFramebufferParameterivEXT, layer );
  tbl.glNamedFramebufferParameteriEXT = MakeRegalProc( http_glNamedFramebufferParameteriEXT, layer );

  // GL_ARB_framebuffer_object

  tbl.glBindFramebuffer = MakeRegalProc( http_glBindFramebuffer, layer );
  tbl.glBindRenderbuffer = MakeRegalProc( http_glBindRenderbuffer, layer );
  tbl.glBlitFramebuffer = MakeRegalProc( http_glBlitFramebuffer, layer );
  tbl.glCheckFramebufferStatus = MakeRegalProc( http_glCheckFramebufferStatus, layer );
  tbl.glDeleteFramebuffers = MakeRegalProc( http_glDeleteFramebuffers, layer );
  tbl.glDeleteRenderbuffers = MakeRegalProc( http_glDeleteRenderbuffers, layer );
  tbl.glFramebufferRenderbuffer = MakeRegalProc( http_glFramebufferRenderbuffer, layer );
  tbl.glFramebufferTexture1D = MakeRegalProc( http_glFramebufferTexture1D, layer );
  tbl.glFramebufferTexture2D = MakeRegalProc( http_glFramebufferTexture2D, layer );
  tbl.glFramebufferTexture3D = MakeRegalProc( http_glFramebufferTexture3D, layer );
  tbl.glFramebufferTextureLayer = MakeRegalProc( http_glFramebufferTextureLayer, layer );
  tbl.glGenFramebuffers = MakeRegalProc( http_glGenFramebuffers, layer );
  tbl.glGenRenderbuffers = MakeRegalProc( http_glGenRenderbuffers, layer );
  tbl.glGenerateMipmap = MakeRegalProc( http_glGenerateMipmap, layer );
  tbl.glGetFramebufferAttachmentParameteriv = MakeRegalProc( http_glGetFramebufferAttachmentParameteriv, layer );
  tbl.glGetRenderbufferParameteriv = MakeRegalProc( http_glGetRenderbufferParameteriv, layer );
  tbl.glIsFramebuffer = MakeRegalProc( http_glIsFramebuffer, layer );
  tbl.glIsRenderbuffer = MakeRegalProc( http_glIsRenderbuffer, layer );
  tbl.glRenderbufferStorage = MakeRegalProc( http_glRenderbufferStorage, layer );
  tbl.glRenderbufferStorageMultisample = MakeRegalProc( http_glRenderbufferStorageMultisample, layer );

  // GL_ARB_geometry_shader4

  tbl.glFramebufferTextureARB = MakeRegalProc( http_glFramebufferTextureARB, layer );
  tbl.glFramebufferTextureFaceARB = MakeRegalProc( http_glFramebufferTextureFaceARB, layer );
  tbl.glFramebufferTextureLayerARB = MakeRegalProc( http_glFramebufferTextureLayerARB, layer );
  tbl.glProgramParameteriARB = MakeRegalProc( http_glProgramParameteriARB, layer );

  // GL_ARB_get_program_binary

  tbl.glGetProgramBinary = MakeRegalProc( http_glGetProgramBinary, layer );
  tbl.glProgramBinary = MakeRegalProc( http_glProgramBinary, layer );
  tbl.glProgramParameteri = MakeRegalProc( http_glProgramParameteri, layer );

  // GL_ARB_gpu_shader_fp64

  tbl.glGetUniformdv = MakeRegalProc( http_glGetUniformdv, layer );
  tbl.glUniform1d = MakeRegalProc( http_glUniform1d, layer );
  tbl.glUniform1dv = MakeRegalProc( http_glUniform1dv, layer );
  tbl.glUniform2d = MakeRegalProc( http_glUniform2d, layer );
  tbl.glUniform2dv = MakeRegalProc( http_glUniform2dv, layer );
  tbl.glUniform3d = MakeRegalProc( http_glUniform3d, layer );
  tbl.glUniform3dv = MakeRegalProc( http_glUniform3dv, layer );
  tbl.glUniform4d = MakeRegalProc( http_glUniform4d, layer );
  tbl.glUniform4dv = MakeRegalProc( http_glUniform4dv, layer );
  tbl.glUniformMatrix2dv = MakeRegalProc( http_glUniformMatrix2dv, layer );
  tbl.glUniformMatrix2x3dv = MakeRegalProc( http_glUniformMatrix2x3dv, layer );
  tbl.glUniformMatrix2x4dv = MakeRegalProc( http_glUniformMatrix2x4dv, layer );
  tbl.glUniformMatrix3dv = MakeRegalProc( http_glUniformMatrix3dv, layer );
  tbl.glUniformMatrix3x2dv = MakeRegalProc( http_glUniformMatrix3x2dv, layer );
  tbl.glUniformMatrix3x4dv = MakeRegalProc( http_glUniformMatrix3x4dv, layer );
  tbl.glUniformMatrix4dv = MakeRegalProc( http_glUniformMatrix4dv, layer );
  tbl.glUniformMatrix4x2dv = MakeRegalProc( http_glUniformMatrix4x2dv, layer );
  tbl.glUniformMatrix4x3dv = MakeRegalProc( http_glUniformMatrix4x3dv, layer );

  // GL_ARB_imaging

  tbl.glColorSubTable = MakeRegalProc( http_glColorSubTable, layer );
  tbl.glColorTable = MakeRegalProc( http_glColorTable, layer );
  tbl.glColorTableParameterfv = MakeRegalProc( http_glColorTableParameterfv, layer );
  tbl.glColorTableParameteriv = MakeRegalProc( http_glColorTableParameteriv, layer );
  tbl.glConvolutionFilter1D = MakeRegalProc( http_glConvolutionFilter1D, layer );
  tbl.glConvolutionFilter2D = MakeRegalProc( http_glConvolutionFilter2D, layer );
  tbl.glConvolutionParameterf = MakeRegalProc( http_glConvolutionParameterf, layer );
  tbl.glConvolutionParameterfv = MakeRegalProc( http_glConvolutionParameterfv, layer );
  tbl.glConvolutionParameteri = MakeRegalProc( http_glConvolutionParameteri, layer );
  tbl.glConvolutionParameteriv = MakeRegalProc( http_glConvolutionParameteriv, layer );
  tbl.glCopyColorSubTable = MakeRegalProc( http_glCopyColorSubTable, layer );
  tbl.glCopyColorTable = MakeRegalProc( http_glCopyColorTable, layer );
  tbl.glCopyConvolutionFilter1D = MakeRegalProc( http_glCopyConvolutionFilter1D, layer );
  tbl.glCopyConvolutionFilter2D = MakeRegalProc( http_glCopyConvolutionFilter2D, layer );
  tbl.glGetColorTable = MakeRegalProc( http_glGetColorTable, layer );
  tbl.glGetColorTableParameterfv = MakeRegalProc( http_glGetColorTableParameterfv, layer );
  tbl.glGetColorTableParameteriv = MakeRegalProc( http_glGetColorTableParameteriv, layer );
  tbl.glGetConvolutionFilter = MakeRegalProc( http_glGetConvolutionFilter, layer );
  tbl.glGetConvolutionParameterfv = MakeRegalProc( http_glGetConvolutionParameterfv, layer );
  tbl.glGetConvolutionParameteriv = MakeRegalProc( http_glGetConvolutionParameteriv, layer );
  tbl.glGetHistogram = MakeRegalProc( http_glGetHistogram, layer );
  tbl.glGetHistogramParameterfv = MakeRegalProc( http_glGetHistogramParameterfv, layer );
  tbl.glGetHistogramParameteriv = MakeRegalProc( http_glGetHistogramParameteriv, layer );
  tbl.glGetMinmax = MakeRegalProc( http_glGetMinmax, layer );
  tbl.glGetMinmaxParameterfv = MakeRegalProc( http_glGetMinmaxParameterfv, layer );
  tbl.glGetMinmaxParameteriv = MakeRegalProc( http_glGetMinmaxParameteriv, layer );
  tbl.glGetSeparableFilter = MakeRegalProc( http_glGetSeparableFilter, layer );
  tbl.glHistogram = MakeRegalProc( http_glHistogram, layer );
  tbl.glMinmax = MakeRegalProc( http_glMinmax, layer );
  tbl.glResetHistogram = MakeRegalProc( http_glResetHistogram, layer );
  tbl.glResetMinmax = MakeRegalProc( http_glResetMinmax, layer );
  tbl.glSeparableFilter2D = MakeRegalProc( http_glSeparableFilter2D, layer );

  // GL_ARB_indirect_parameters

  tbl.glMultiDrawArraysIndirectCountARB = MakeRegalProc( http_glMultiDrawArraysIndirectCountARB, layer );
  tbl.glMultiDrawElementsIndirectCountARB = MakeRegalProc( http_glMultiDrawElementsIndirectCountARB, layer );

  // GL_ARB_instanced_arrays

  tbl.glVertexAttribDivisorARB = MakeRegalProc( http_glVertexAttribDivisorARB, layer );

  // GL_ARB_internalformat_query

  tbl.glGetInternalformativ = MakeRegalProc( http_glGetInternalformativ, layer );

  // GL_ARB_internalformat_query2

  tbl.glGetInternalformati64v = MakeRegalProc( http_glGetInternalformati64v, layer );

  // GL_ARB_invalidate_subdata

  tbl.glInvalidateBufferData = MakeRegalProc( http_glInvalidateBufferData, layer );
  tbl.glInvalidateBufferSubData = MakeRegalProc( http_glInvalidateBufferSubData, layer );
  tbl.glInvalidateFramebuffer = MakeRegalProc( http_glInvalidateFramebuffer, layer );
  tbl.glInvalidateSubFramebuffer = MakeRegalProc( http_glInvalidateSubFramebuffer, layer );
  tbl.glInvalidateTexImage = MakeRegalProc( http_glInvalidateTexImage, layer );
  tbl.glInvalidateTexSubImage = MakeRegalProc( http_glInvalidateTexSubImage, layer );

  // GL_ARB_map_buffer_range

  tbl.glFlushMappedBufferRange = MakeRegalProc( http_glFlushMappedBufferRange, layer );
  tbl.glMapBufferRange = MakeRegalProc( http_glMapBufferRange, layer );

  // GL_ARB_matrix_palette

  tbl.glCurrentPaletteMatrixARB = MakeRegalProc( http_glCurrentPaletteMatrixARB, layer );
  tbl.glMatrixIndexPointerARB = MakeRegalProc( http_glMatrixIndexPointerARB, layer );
  tbl.glMatrixIndexubvARB = MakeRegalProc( http_glMatrixIndexubvARB, layer );
  tbl.glMatrixIndexuivARB = MakeRegalProc( http_glMatrixIndexuivARB, layer );
  tbl.glMatrixIndexusvARB = MakeRegalProc( http_glMatrixIndexusvARB, layer );

  // GL_ARB_multi_bind

  tbl.glBindBuffersBase = MakeRegalProc( http_glBindBuffersBase, layer );
  tbl.glBindBuffersRange = MakeRegalProc( http_glBindBuffersRange, layer );
  tbl.glBindImageTextures = MakeRegalProc( http_glBindImageTextures, layer );
  tbl.glBindSamplers = MakeRegalProc( http_glBindSamplers, layer );
  tbl.glBindTextures = MakeRegalProc( http_glBindTextures, layer );
  tbl.glBindVertexBuffers = MakeRegalProc( http_glBindVertexBuffers, layer );

  // GL_ARB_multi_draw_indirect

  tbl.glMultiDrawArraysIndirect = MakeRegalProc( http_glMultiDrawArraysIndirect, layer );
  tbl.glMultiDrawElementsIndirect = MakeRegalProc( http_glMultiDrawElementsIndirect, layer );

  // GL_ARB_multisample

  tbl.glSampleCoverageARB = MakeRegalProc( http_glSampleCoverageARB, layer );

  // GL_ARB_multitexture

  tbl.glActiveTextureARB = MakeRegalProc( http_glActiveTextureARB, layer );
  tbl.glClientActiveTextureARB = MakeRegalProc( http_glClientActiveTextureARB, layer );
  tbl.glMultiTexCoord1dARB = MakeRegalProc( http_glMultiTexCoord1dARB, layer );
  tbl.glMultiTexCoord1dvARB = MakeRegalProc( http_glMultiTexCoord1dvARB, layer );
  tbl.glMultiTexCoord1fARB = MakeRegalProc( http_glMultiTexCoord1fARB, layer );
  tbl.glMultiTexCoord1fvARB = MakeRegalProc( http_glMultiTexCoord1fvARB, layer );
  tbl.glMultiTexCoord1iARB = MakeRegalProc( http_glMultiTexCoord1iARB, layer );
  tbl.glMultiTexCoord1ivARB = MakeRegalProc( http_glMultiTexCoord1ivARB, layer );
  tbl.glMultiTexCoord1sARB = MakeRegalProc( http_glMultiTexCoord1sARB, layer );
  tbl.glMultiTexCoord1svARB = MakeRegalProc( http_glMultiTexCoord1svARB, layer );
  tbl.glMultiTexCoord2dARB = MakeRegalProc( http_glMultiTexCoord2dARB, layer );
  tbl.glMultiTexCoord2dvARB = MakeRegalProc( http_glMultiTexCoord2dvARB, layer );
  tbl.glMultiTexCoord2fARB = MakeRegalProc( http_glMultiTexCoord2fARB, layer );
  tbl.glMultiTexCoord2fvARB = MakeRegalProc( http_glMultiTexCoord2fvARB, layer );
  tbl.glMultiTexCoord2iARB = MakeRegalProc( http_glMultiTexCoord2iARB, layer );
  tbl.glMultiTexCoord2ivARB = MakeRegalProc( http_glMultiTexCoord2ivARB, layer );
  tbl.glMultiTexCoord2sARB = MakeRegalProc( http_glMultiTexCoord2sARB, layer );
  tbl.glMultiTexCoord2svARB = MakeRegalProc( http_glMultiTexCoord2svARB, layer );
  tbl.glMultiTexCoord3dARB = MakeRegalProc( http_glMultiTexCoord3dARB, layer );
  tbl.glMultiTexCoord3dvARB = MakeRegalProc( http_glMultiTexCoord3dvARB, layer );
  tbl.glMultiTexCoord3fARB = MakeRegalProc( http_glMultiTexCoord3fARB, layer );
  tbl.glMultiTexCoord3fvARB = MakeRegalProc( http_glMultiTexCoord3fvARB, layer );
  tbl.glMultiTexCoord3iARB = MakeRegalProc( http_glMultiTexCoord3iARB, layer );
  tbl.glMultiTexCoord3ivARB = MakeRegalProc( http_glMultiTexCoord3ivARB, layer );
  tbl.glMultiTexCoord3sARB = MakeRegalProc( http_glMultiTexCoord3sARB, layer );
  tbl.glMultiTexCoord3svARB = MakeRegalProc( http_glMultiTexCoord3svARB, layer );
  tbl.glMultiTexCoord4dARB = MakeRegalProc( http_glMultiTexCoord4dARB, layer );
  tbl.glMultiTexCoord4dvARB = MakeRegalProc( http_glMultiTexCoord4dvARB, layer );
  tbl.glMultiTexCoord4fARB = MakeRegalProc( http_glMultiTexCoord4fARB, layer );
  tbl.glMultiTexCoord4fvARB = MakeRegalProc( http_glMultiTexCoord4fvARB, layer );
  tbl.glMultiTexCoord4iARB = MakeRegalProc( http_glMultiTexCoord4iARB, layer );
  tbl.glMultiTexCoord4ivARB = MakeRegalProc( http_glMultiTexCoord4ivARB, layer );
  tbl.glMultiTexCoord4sARB = MakeRegalProc( http_glMultiTexCoord4sARB, layer );
  tbl.glMultiTexCoord4svARB = MakeRegalProc( http_glMultiTexCoord4svARB, layer );

  // GL_ARB_occlusion_query

  tbl.glBeginQueryARB = MakeRegalProc( http_glBeginQueryARB, layer );
  tbl.glDeleteQueriesARB = MakeRegalProc( http_glDeleteQueriesARB, layer );
  tbl.glEndQueryARB = MakeRegalProc( http_glEndQueryARB, layer );
  tbl.glGenQueriesARB = MakeRegalProc( http_glGenQueriesARB, layer );
  tbl.glGetQueryObjectivARB = MakeRegalProc( http_glGetQueryObjectivARB, layer );
  tbl.glGetQueryObjectuivARB = MakeRegalProc( http_glGetQueryObjectuivARB, layer );
  tbl.glGetQueryivARB = MakeRegalProc( http_glGetQueryivARB, layer );
  tbl.glIsQueryARB = MakeRegalProc( http_glIsQueryARB, layer );

  // GL_ARB_point_parameters

  tbl.glPointParameterfARB = MakeRegalProc( http_glPointParameterfARB, layer );
  tbl.glPointParameterfvARB = MakeRegalProc( http_glPointParameterfvARB, layer );

  // GL_ARB_program_interface_query

  tbl.glGetProgramInterfaceiv = MakeRegalProc( http_glGetProgramInterfaceiv, layer );
  tbl.glGetProgramResourceIndex = MakeRegalProc( http_glGetProgramResourceIndex, layer );
  tbl.glGetProgramResourceLocation = MakeRegalProc( http_glGetProgramResourceLocation, layer );
  tbl.glGetProgramResourceLocationIndex = MakeRegalProc( http_glGetProgramResourceLocationIndex, layer );
  tbl.glGetProgramResourceName = MakeRegalProc( http_glGetProgramResourceName, layer );
  tbl.glGetProgramResourceiv = MakeRegalProc( http_glGetProgramResourceiv, layer );

  // GL_ARB_provoking_vertex

  tbl.glProvokingVertex = MakeRegalProc( http_glProvokingVertex, layer );

  // GL_ARB_robustness

  tbl.glGetGraphicsResetStatusARB = MakeRegalProc( http_glGetGraphicsResetStatusARB, layer );
  tbl.glGetnColorTableARB = MakeRegalProc( http_glGetnColorTableARB, layer );
  tbl.glGetnCompressedTexImageARB = MakeRegalProc( http_glGetnCompressedTexImageARB, layer );
  tbl.glGetnConvolutionFilterARB = MakeRegalProc( http_glGetnConvolutionFilterARB, layer );
  tbl.glGetnHistogramARB = MakeRegalProc( http_glGetnHistogramARB, layer );
  tbl.glGetnMapdvARB = MakeRegalProc( http_glGetnMapdvARB, layer );
  tbl.glGetnMapfvARB = MakeRegalProc( http_glGetnMapfvARB, layer );
  tbl.glGetnMapivARB = MakeRegalProc( http_glGetnMapivARB, layer );
  tbl.glGetnMinmaxARB = MakeRegalProc( http_glGetnMinmaxARB, layer );
  tbl.glGetnPixelMapfvARB = MakeRegalProc( http_glGetnPixelMapfvARB, layer );
  tbl.glGetnPixelMapuivARB = MakeRegalProc( http_glGetnPixelMapuivARB, layer );
  tbl.glGetnPixelMapusvARB = MakeRegalProc( http_glGetnPixelMapusvARB, layer );
  tbl.glGetnPolygonStippleARB = MakeRegalProc( http_glGetnPolygonStippleARB, layer );
  tbl.glGetnSeparableFilterARB = MakeRegalProc( http_glGetnSeparableFilterARB, layer );
  tbl.glGetnTexImageARB = MakeRegalProc( http_glGetnTexImageARB, layer );
  tbl.glGetnUniformdvARB = MakeRegalProc( http_glGetnUniformdvARB, layer );
  tbl.glGetnUniformfvARB = MakeRegalProc( http_glGetnUniformfvARB, layer );
  tbl.glGetnUniformivARB = MakeRegalProc( http_glGetnUniformivARB, layer );
  tbl.glGetnUniformuivARB = MakeRegalProc( http_glGetnUniformuivARB, layer );
  tbl.glReadnPixelsARB = MakeRegalProc( http_glReadnPixelsARB, layer );

  // GL_ARB_sample_shading

  tbl.glMinSampleShading = MakeRegalProc( http_glMinSampleShading, layer );
  tbl.glMinSampleShadingARB = MakeRegalProc( http_glMinSampleShadingARB, layer );

  // GL_ARB_sampler_objects

  tbl.glBindSampler = MakeRegalProc( http_glBindSampler, layer );
  tbl.glDeleteSamplers = MakeRegalProc( http_glDeleteSamplers, layer );
  tbl.glGenSamplers = MakeRegalProc( http_glGenSamplers, layer );
  tbl.glGetSamplerParameterIiv = MakeRegalProc( http_glGetSamplerParameterIiv, layer );
  tbl.glGetSamplerParameterIuiv = MakeRegalProc( http_glGetSamplerParameterIuiv, layer );
  tbl.glGetSamplerParameterfv = MakeRegalProc( http_glGetSamplerParameterfv, layer );
  tbl.glGetSamplerParameteriv = MakeRegalProc( http_glGetSamplerParameteriv, layer );
  tbl.glIsSampler = MakeRegalProc( http_glIsSampler, layer );
  tbl.glSamplerParameterIiv = MakeRegalProc( http_glSamplerParameterIiv, layer );
  tbl.glSamplerParameterIuiv = MakeRegalProc( http_glSamplerParameterIuiv, layer );
  tbl.glSamplerParameterf = MakeRegalProc( http_glSamplerParameterf, layer );
  tbl.glSamplerParameterfv = MakeRegalProc( http_glSamplerParameterfv, layer );
  tbl.glSamplerParameteri = MakeRegalProc( http_glSamplerParameteri, layer );
  tbl.glSamplerParameteriv = MakeRegalProc( http_glSamplerParameteriv, layer );

  // GL_ARB_separate_shader_objects

  tbl.glActiveShaderProgram = MakeRegalProc( http_glActiveShaderProgram, layer );
  tbl.glBindProgramPipeline = MakeRegalProc( http_glBindProgramPipeline, layer );
  tbl.glCreateShaderProgramv = MakeRegalProc( http_glCreateShaderProgramv, layer );
  tbl.glDeleteProgramPipelines = MakeRegalProc( http_glDeleteProgramPipelines, layer );
  tbl.glGenProgramPipelines = MakeRegalProc( http_glGenProgramPipelines, layer );
  tbl.glGetProgramPipelineInfoLog = MakeRegalProc( http_glGetProgramPipelineInfoLog, layer );
  tbl.glGetProgramPipelineiv = MakeRegalProc( http_glGetProgramPipelineiv, layer );
  tbl.glIsProgramPipeline = MakeRegalProc( http_glIsProgramPipeline, layer );
  tbl.glProgramUniform1d = MakeRegalProc( http_glProgramUniform1d, layer );
  tbl.glProgramUniform1dv = MakeRegalProc( http_glProgramUniform1dv, layer );
  tbl.glProgramUniform1f = MakeRegalProc( http_glProgramUniform1f, layer );
  tbl.glProgramUniform1fv = MakeRegalProc( http_glProgramUniform1fv, layer );
  tbl.glProgramUniform1i = MakeRegalProc( http_glProgramUniform1i, layer );
  tbl.glProgramUniform1iv = MakeRegalProc( http_glProgramUniform1iv, layer );
  tbl.glProgramUniform1ui = MakeRegalProc( http_glProgramUniform1ui, layer );
  tbl.glProgramUniform1uiv = MakeRegalProc( http_glProgramUniform1uiv, layer );
  tbl.glProgramUniform2d = MakeRegalProc( http_glProgramUniform2d, layer );
  tbl.glProgramUniform2dv = MakeRegalProc( http_glProgramUniform2dv, layer );
  tbl.glProgramUniform2f = MakeRegalProc( http_glProgramUniform2f, layer );
  tbl.glProgramUniform2fv = MakeRegalProc( http_glProgramUniform2fv, layer );
  tbl.glProgramUniform2i = MakeRegalProc( http_glProgramUniform2i, layer );
  tbl.glProgramUniform2iv = MakeRegalProc( http_glProgramUniform2iv, layer );
  tbl.glProgramUniform2ui = MakeRegalProc( http_glProgramUniform2ui, layer );
  tbl.glProgramUniform2uiv = MakeRegalProc( http_glProgramUniform2uiv, layer );
  tbl.glProgramUniform3d = MakeRegalProc( http_glProgramUniform3d, layer );
  tbl.glProgramUniform3dv = MakeRegalProc( http_glProgramUniform3dv, layer );
  tbl.glProgramUniform3f = MakeRegalProc( http_glProgramUniform3f, layer );
  tbl.glProgramUniform3fv = MakeRegalProc( http_glProgramUniform3fv, layer );
  tbl.glProgramUniform3i = MakeRegalProc( http_glProgramUniform3i, layer );
  tbl.glProgramUniform3iv = MakeRegalProc( http_glProgramUniform3iv, layer );
  tbl.glProgramUniform3ui = MakeRegalProc( http_glProgramUniform3ui, layer );
  tbl.glProgramUniform3uiv = MakeRegalProc( http_glProgramUniform3uiv, layer );
  tbl.glProgramUniform4d = MakeRegalProc( http_glProgramUniform4d, layer );
  tbl.glProgramUniform4dv = MakeRegalProc( http_glProgramUniform4dv, layer );
  tbl.glProgramUniform4f = MakeRegalProc( http_glProgramUniform4f, layer );
  tbl.glProgramUniform4fv = MakeRegalProc( http_glProgramUniform4fv, layer );
  tbl.glProgramUniform4i = MakeRegalProc( http_glProgramUniform4i, layer );
  tbl.glProgramUniform4iv = MakeRegalProc( http_glProgramUniform4iv, layer );
  tbl.glProgramUniform4ui = MakeRegalProc( http_glProgramUniform4ui, layer );
  tbl.glProgramUniform4uiv = MakeRegalProc( http_glProgramUniform4uiv, layer );
  tbl.glProgramUniformMatrix2dv = MakeRegalProc( http_glProgramUniformMatrix2dv, layer );
  tbl.glProgramUniformMatrix2fv = MakeRegalProc( http_glProgramUniformMatrix2fv, layer );
  tbl.glProgramUniformMatrix2x3dv = MakeRegalProc( http_glProgramUniformMatrix2x3dv, layer );
  tbl.glProgramUniformMatrix2x3fv = MakeRegalProc( http_glProgramUniformMatrix2x3fv, layer );
  tbl.glProgramUniformMatrix2x4dv = MakeRegalProc( http_glProgramUniformMatrix2x4dv, layer );
  tbl.glProgramUniformMatrix2x4fv = MakeRegalProc( http_glProgramUniformMatrix2x4fv, layer );
  tbl.glProgramUniformMatrix3dv = MakeRegalProc( http_glProgramUniformMatrix3dv, layer );
  tbl.glProgramUniformMatrix3fv = MakeRegalProc( http_glProgramUniformMatrix3fv, layer );
  tbl.glProgramUniformMatrix3x2dv = MakeRegalProc( http_glProgramUniformMatrix3x2dv, layer );
  tbl.glProgramUniformMatrix3x2fv = MakeRegalProc( http_glProgramUniformMatrix3x2fv, layer );
  tbl.glProgramUniformMatrix3x4dv = MakeRegalProc( http_glProgramUniformMatrix3x4dv, layer );
  tbl.glProgramUniformMatrix3x4fv = MakeRegalProc( http_glProgramUniformMatrix3x4fv, layer );
  tbl.glProgramUniformMatrix4dv = MakeRegalProc( http_glProgramUniformMatrix4dv, layer );
  tbl.glProgramUniformMatrix4fv = MakeRegalProc( http_glProgramUniformMatrix4fv, layer );
  tbl.glProgramUniformMatrix4x2dv = MakeRegalProc( http_glProgramUniformMatrix4x2dv, layer );
  tbl.glProgramUniformMatrix4x2fv = MakeRegalProc( http_glProgramUniformMatrix4x2fv, layer );
  tbl.glProgramUniformMatrix4x3dv = MakeRegalProc( http_glProgramUniformMatrix4x3dv, layer );
  tbl.glProgramUniformMatrix4x3fv = MakeRegalProc( http_glProgramUniformMatrix4x3fv, layer );
  tbl.glUseProgramStages = MakeRegalProc( http_glUseProgramStages, layer );
  tbl.glValidateProgramPipeline = MakeRegalProc( http_glValidateProgramPipeline, layer );

  // GL_ARB_shader_atomic_counters

  tbl.glGetActiveAtomicCounterBufferiv = MakeRegalProc( http_glGetActiveAtomicCounterBufferiv, layer );

  // GL_ARB_shader_image_load_store

  tbl.glBindImageTexture = MakeRegalProc( http_glBindImageTexture, layer );
  tbl.glMemoryBarrier = MakeRegalProc( http_glMemoryBarrier, layer );

  // GL_ARB_shader_objects

  tbl.glAttachObjectARB = MakeRegalProc( http_glAttachObjectARB, layer );
  tbl.glCompileShaderARB = MakeRegalProc( http_glCompileShaderARB, layer );
  tbl.glCreateProgramObjectARB = MakeRegalProc( http_glCreateProgramObjectARB, layer );
  tbl.glCreateShaderObjectARB = MakeRegalProc( http_glCreateShaderObjectARB, layer );
  tbl.glDeleteObjectARB = MakeRegalProc( http_glDeleteObjectARB, layer );
  tbl.glDetachObjectARB = MakeRegalProc( http_glDetachObjectARB, layer );
  tbl.glGetActiveUniformARB = MakeRegalProc( http_glGetActiveUniformARB, layer );
  tbl.glGetAttachedObjectsARB = MakeRegalProc( http_glGetAttachedObjectsARB, layer );
  tbl.glGetHandleARB = MakeRegalProc( http_glGetHandleARB, layer );
  tbl.glGetInfoLogARB = MakeRegalProc( http_glGetInfoLogARB, layer );
  tbl.glGetObjectParameterfvARB = MakeRegalProc( http_glGetObjectParameterfvARB, layer );
  tbl.glGetObjectParameterivARB = MakeRegalProc( http_glGetObjectParameterivARB, layer );
  tbl.glGetShaderSourceARB = MakeRegalProc( http_glGetShaderSourceARB, layer );
  tbl.glGetUniformLocationARB = MakeRegalProc( http_glGetUniformLocationARB, layer );
  tbl.glGetUniformfvARB = MakeRegalProc( http_glGetUniformfvARB, layer );
  tbl.glGetUniformivARB = MakeRegalProc( http_glGetUniformivARB, layer );
  tbl.glLinkProgramARB = MakeRegalProc( http_glLinkProgramARB, layer );
  tbl.glShaderSourceARB = MakeRegalProc( http_glShaderSourceARB, layer );
  tbl.glUniform1fARB = MakeRegalProc( http_glUniform1fARB, layer );
  tbl.glUniform1fvARB = MakeRegalProc( http_glUniform1fvARB, layer );
  tbl.glUniform1iARB = MakeRegalProc( http_glUniform1iARB, layer );
  tbl.glUniform1ivARB = MakeRegalProc( http_glUniform1ivARB, layer );
  tbl.glUniform2fARB = MakeRegalProc( http_glUniform2fARB, layer );
  tbl.glUniform2fvARB = MakeRegalProc( http_glUniform2fvARB, layer );
  tbl.glUniform2iARB = MakeRegalProc( http_glUniform2iARB, layer );
  tbl.glUniform2ivARB = MakeRegalProc( http_glUniform2ivARB, layer );
  tbl.glUniform3fARB = MakeRegalProc( http_glUniform3fARB, layer );
  tbl.glUniform3fvARB = MakeRegalProc( http_glUniform3fvARB, layer );
  tbl.glUniform3iARB = MakeRegalProc( http_glUniform3iARB, layer );
  tbl.glUniform3ivARB = MakeRegalProc( http_glUniform3ivARB, layer );
  tbl.glUniform4fARB = MakeRegalProc( http_glUniform4fARB, layer );
  tbl.glUniform4fvARB = MakeRegalProc( http_glUniform4fvARB, layer );
  tbl.glUniform4iARB = MakeRegalProc( http_glUniform4iARB, layer );
  tbl.glUniform4ivARB = MakeRegalProc( http_glUniform4ivARB, layer );
  tbl.glUniformMatrix2fvARB = MakeRegalProc( http_glUniformMatrix2fvARB, layer );
  tbl.glUniformMatrix3fvARB = MakeRegalProc( http_glUniformMatrix3fvARB, layer );
  tbl.glUniformMatrix4fvARB = MakeRegalProc( http_glUniformMatrix4fvARB, layer );
  tbl.glUseProgramObjectARB = MakeRegalProc( http_glUseProgramObjectARB, layer );
  tbl.glValidateProgramARB = MakeRegalProc( http_glValidateProgramARB, layer );

  // GL_ARB_shader_storage_buffer_object

  tbl.glShaderStorageBlockBinding = MakeRegalProc( http_glShaderStorageBlockBinding, layer );

  // GL_ARB_shader_subroutine

  tbl.glGetActiveSubroutineName = MakeRegalProc( http_glGetActiveSubroutineName, layer );
  tbl.glGetActiveSubroutineUniformName = MakeRegalProc( http_glGetActiveSubroutineUniformName, layer );
  tbl.glGetActiveSubroutineUniformiv = MakeRegalProc( http_glGetActiveSubroutineUniformiv, layer );
  tbl.glGetProgramStageiv = MakeRegalProc( http_glGetProgramStageiv, layer );
  tbl.glGetProgramSubroutineParameteruivNV = MakeRegalProc( http_glGetProgramSubroutineParameteruivNV, layer );
  tbl.glGetSubroutineIndex = MakeRegalProc( http_glGetSubroutineIndex, layer );
  tbl.glGetSubroutineUniformLocation = MakeRegalProc( http_glGetSubroutineUniformLocation, layer );
  tbl.glGetUniformSubroutineuiv = MakeRegalProc( http_glGetUniformSubroutineuiv, layer );
  tbl.glProgramSubroutineParametersuivNV = MakeRegalProc( http_glProgramSubroutineParametersuivNV, layer );
  tbl.glUniformSubroutinesuiv = MakeRegalProc( http_glUniformSubroutinesuiv, layer );

  // GL_ARB_shading_language_include

  tbl.glCompileShaderIncludeARB = MakeRegalProc( http_glCompileShaderIncludeARB, layer );
  tbl.glDeleteNamedStringARB = MakeRegalProc( http_glDeleteNamedStringARB, layer );
  tbl.glGetNamedStringARB = MakeRegalProc( http_glGetNamedStringARB, layer );
  tbl.glGetNamedStringivARB = MakeRegalProc( http_glGetNamedStringivARB, layer );
  tbl.glIsNamedStringARB = MakeRegalProc( http_glIsNamedStringARB, layer );
  tbl.glNamedStringARB = MakeRegalProc( http_glNamedStringARB, layer );

  // GL_ARB_sparse_texture

  tbl.glTexPageCommitmentARB = MakeRegalProc( http_glTexPageCommitmentARB, layer );
  tbl.glTexturePageCommitmentEXT = MakeRegalProc( http_glTexturePageCommitmentEXT, layer );

  // GL_ARB_sync

  tbl.glClientWaitSync = MakeRegalProc( http_glClientWaitSync, layer );
  tbl.glDeleteSync = MakeRegalProc( http_glDeleteSync, layer );
  tbl.glFenceSync = MakeRegalProc( http_glFenceSync, layer );
  tbl.glGetInteger64v = MakeRegalProc( http_glGetInteger64v, layer );
  tbl.glGetSynciv = MakeRegalProc( http_glGetSynciv, layer );
  tbl.glIsSync = MakeRegalProc( http_glIsSync, layer );
  tbl.glWaitSync = MakeRegalProc( http_glWaitSync, layer );

  // GL_ARB_tessellation_shader

  tbl.glPatchParameterfv = MakeRegalProc( http_glPatchParameterfv, layer );
  tbl.glPatchParameteri = MakeRegalProc( http_glPatchParameteri, layer );

  // GL_ARB_texture_buffer_object

  tbl.glTexBufferARB = MakeRegalProc( http_glTexBufferARB, layer );

  // GL_ARB_texture_buffer_range

  tbl.glTexBufferRange = MakeRegalProc( http_glTexBufferRange, layer );
  tbl.glTextureBufferRangeEXT = MakeRegalProc( http_glTextureBufferRangeEXT, layer );

  // GL_ARB_texture_compression

  tbl.glCompressedTexImage1DARB = MakeRegalProc( http_glCompressedTexImage1DARB, layer );
  tbl.glCompressedTexImage2DARB = MakeRegalProc( http_glCompressedTexImage2DARB, layer );
  tbl.glCompressedTexImage3DARB = MakeRegalProc( http_glCompressedTexImage3DARB, layer );
  tbl.glCompressedTexSubImage1DARB = MakeRegalProc( http_glCompressedTexSubImage1DARB, layer );
  tbl.glCompressedTexSubImage2DARB = MakeRegalProc( http_glCompressedTexSubImage2DARB, layer );
  tbl.glCompressedTexSubImage3DARB = MakeRegalProc( http_glCompressedTexSubImage3DARB, layer );
  tbl.glGetCompressedTexImageARB = MakeRegalProc( http_glGetCompressedTexImageARB, layer );

  // GL_ARB_texture_multisample

  tbl.glGetMultisamplefv = MakeRegalProc( http_glGetMultisamplefv, layer );
  tbl.glSampleMaski = MakeRegalProc( http_glSampleMaski, layer );
  tbl.glTexImage2DMultisample = MakeRegalProc( http_glTexImage2DMultisample, layer );
  tbl.glTexImage3DMultisample = MakeRegalProc( http_glTexImage3DMultisample, layer );

  // GL_ARB_texture_storage

  tbl.glTexStorage1D = MakeRegalProc( http_glTexStorage1D, layer );
  tbl.glTexStorage2D = MakeRegalProc( http_glTexStorage2D, layer );
  tbl.glTexStorage3D = MakeRegalProc( http_glTexStorage3D, layer );
  tbl.glTextureStorage1DEXT = MakeRegalProc( http_glTextureStorage1DEXT, layer );
  tbl.glTextureStorage2DEXT = MakeRegalProc( http_glTextureStorage2DEXT, layer );
  tbl.glTextureStorage3DEXT = MakeRegalProc( http_glTextureStorage3DEXT, layer );

  // GL_ARB_texture_storage_multisample

  tbl.glTexStorage2DMultisample = MakeRegalProc( http_glTexStorage2DMultisample, layer );
  tbl.glTexStorage3DMultisample = MakeRegalProc( http_glTexStorage3DMultisample, layer );
  tbl.glTextureStorage2DMultisampleEXT = MakeRegalProc( http_glTextureStorage2DMultisampleEXT, layer );
  tbl.glTextureStorage3DMultisampleEXT = MakeRegalProc( http_glTextureStorage3DMultisampleEXT, layer );

  // GL_ARB_texture_view

  tbl.glTextureView = MakeRegalProc( http_glTextureView, layer );

  // GL_ARB_timer_query

  tbl.glGetQueryObjecti64v = MakeRegalProc( http_glGetQueryObjecti64v, layer );
  tbl.glGetQueryObjectui64v = MakeRegalProc( http_glGetQueryObjectui64v, layer );
  tbl.glQueryCounter = MakeRegalProc( http_glQueryCounter, layer );

  // GL_ARB_transform_feedback2

  tbl.glBindTransformFeedback = MakeRegalProc( http_glBindTransformFeedback, layer );
  tbl.glDeleteTransformFeedbacks = MakeRegalProc( http_glDeleteTransformFeedbacks, layer );
  tbl.glDrawTransformFeedback = MakeRegalProc( http_glDrawTransformFeedback, layer );
  tbl.glGenTransformFeedbacks = MakeRegalProc( http_glGenTransformFeedbacks, layer );
  tbl.glIsTransformFeedback = MakeRegalProc( http_glIsTransformFeedback, layer );
  tbl.glPauseTransformFeedback = MakeRegalProc( http_glPauseTransformFeedback, layer );
  tbl.glResumeTransformFeedback = MakeRegalProc( http_glResumeTransformFeedback, layer );

  // GL_ARB_transform_feedback3

  tbl.glBeginQueryIndexed = MakeRegalProc( http_glBeginQueryIndexed, layer );
  tbl.glDrawTransformFeedbackStream = MakeRegalProc( http_glDrawTransformFeedbackStream, layer );
  tbl.glEndQueryIndexed = MakeRegalProc( http_glEndQueryIndexed, layer );
  tbl.glGetQueryIndexediv = MakeRegalProc( http_glGetQueryIndexediv, layer );

  // GL_ARB_transform_feedback_instanced

  tbl.glDrawTransformFeedbackInstanced = MakeRegalProc( http_glDrawTransformFeedbackInstanced, layer );
  tbl.glDrawTransformFeedbackStreamInstanced = MakeRegalProc( http_glDrawTransformFeedbackStreamInstanced, layer );

  // GL_ARB_transpose_matrix

  tbl.glLoadTransposeMatrixdARB = MakeRegalProc( http_glLoadTransposeMatrixdARB, layer );
  tbl.glLoadTransposeMatrixfARB = MakeRegalProc( http_glLoadTransposeMatrixfARB, layer );
  tbl.glMultTransposeMatrixdARB = MakeRegalProc( http_glMultTransposeMatrixdARB, layer );
  tbl.glMultTransposeMatrixfARB = MakeRegalProc( http_glMultTransposeMatrixfARB, layer );

  // GL_ARB_uniform_buffer_object

  tbl.glBindBufferBase = MakeRegalProc( http_glBindBufferBase, layer );
  tbl.glBindBufferRange = MakeRegalProc( http_glBindBufferRange, layer );
  tbl.glGetActiveUniformBlockName = MakeRegalProc( http_glGetActiveUniformBlockName, layer );
  tbl.glGetActiveUniformBlockiv = MakeRegalProc( http_glGetActiveUniformBlockiv, layer );
  tbl.glGetActiveUniformName = MakeRegalProc( http_glGetActiveUniformName, layer );
  tbl.glGetActiveUniformsiv = MakeRegalProc( http_glGetActiveUniformsiv, layer );
  tbl.glGetIntegeri_v = MakeRegalProc( http_glGetIntegeri_v, layer );
  tbl.glGetUniformBlockIndex = MakeRegalProc( http_glGetUniformBlockIndex, layer );
  tbl.glGetUniformIndices = MakeRegalProc( http_glGetUniformIndices, layer );
  tbl.glUniformBlockBinding = MakeRegalProc( http_glUniformBlockBinding, layer );

  // GL_ARB_vertex_array_object

  tbl.glBindVertexArray = MakeRegalProc( http_glBindVertexArray, layer );
  tbl.glDeleteVertexArrays = MakeRegalProc( http_glDeleteVertexArrays, layer );
  tbl.glGenVertexArrays = MakeRegalProc( http_glGenVertexArrays, layer );
  tbl.glIsVertexArray = MakeRegalProc( http_glIsVertexArray, layer );

  // GL_ARB_vertex_attrib_64bit

  tbl.glGetVertexAttribLdv = MakeRegalProc( http_glGetVertexAttribLdv, layer );
  tbl.glVertexAttribL1d = MakeRegalProc( http_glVertexAttribL1d, layer );
  tbl.glVertexAttribL1dv = MakeRegalProc( http_glVertexAttribL1dv, layer );
  tbl.glVertexAttribL2d = MakeRegalProc( http_glVertexAttribL2d, layer );
  tbl.glVertexAttribL2dv = MakeRegalProc( http_glVertexAttribL2dv, layer );
  tbl.glVertexAttribL3d = MakeRegalProc( http_glVertexAttribL3d, layer );
  tbl.glVertexAttribL3dv = MakeRegalProc( http_glVertexAttribL3dv, layer );
  tbl.glVertexAttribL4d = MakeRegalProc( http_glVertexAttribL4d, layer );
  tbl.glVertexAttribL4dv = MakeRegalProc( http_glVertexAttribL4dv, layer );
  tbl.glVertexAttribLPointer = MakeRegalProc( http_glVertexAttribLPointer, layer );

  // GL_ARB_vertex_attrib_binding

  tbl.glBindVertexBuffer = MakeRegalProc( http_glBindVertexBuffer, layer );
  tbl.glVertexArrayBindVertexBufferEXT = MakeRegalProc( http_glVertexArrayBindVertexBufferEXT, layer );
  tbl.glVertexArrayVertexAttribBindingEXT = MakeRegalProc( http_glVertexArrayVertexAttribBindingEXT, layer );
  tbl.glVertexArrayVertexAttribFormatEXT = MakeRegalProc( http_glVertexArrayVertexAttribFormatEXT, layer );
  tbl.glVertexArrayVertexAttribIFormatEXT = MakeRegalProc( http_glVertexArrayVertexAttribIFormatEXT, layer );
  tbl.glVertexArrayVertexAttribLFormatEXT = MakeRegalProc( http_glVertexArrayVertexAttribLFormatEXT, layer );
  tbl.glVertexArrayVertexBindingDivisorEXT = MakeRegalProc( http_glVertexArrayVertexBindingDivisorEXT, layer );
  tbl.glVertexAttribBinding = MakeRegalProc( http_glVertexAttribBinding, layer );
  tbl.glVertexAttribFormat = MakeRegalProc( http_glVertexAttribFormat, layer );
  tbl.glVertexAttribIFormat = MakeRegalProc( http_glVertexAttribIFormat, layer );
  tbl.glVertexAttribLFormat = MakeRegalProc( http_glVertexAttribLFormat, layer );
  tbl.glVertexBindingDivisor = MakeRegalProc( http_glVertexBindingDivisor, layer );

  // GL_ARB_vertex_blend

  tbl.glVertexBlendARB = MakeRegalProc( http_glVertexBlendARB, layer );
  tbl.glWeightPointerARB = MakeRegalProc( http_glWeightPointerARB, layer );
  tbl.glWeightbvARB = MakeRegalProc( http_glWeightbvARB, layer );
  tbl.glWeightdvARB = MakeRegalProc( http_glWeightdvARB, layer );
  tbl.glWeightfvARB = MakeRegalProc( http_glWeightfvARB, layer );
  tbl.glWeightivARB = MakeRegalProc( http_glWeightivARB, layer );
  tbl.glWeightsvARB = MakeRegalProc( http_glWeightsvARB, layer );
  tbl.glWeightubvARB = MakeRegalProc( http_glWeightubvARB, layer );
  tbl.glWeightuivARB = MakeRegalProc( http_glWeightuivARB, layer );
  tbl.glWeightusvARB = MakeRegalProc( http_glWeightusvARB, layer );

  // GL_ARB_vertex_buffer_object

  tbl.glBindBufferARB = MakeRegalProc( http_glBindBufferARB, layer );
  tbl.glBufferDataARB = MakeRegalProc( http_glBufferDataARB, layer );
  tbl.glBufferSubDataARB = MakeRegalProc( http_glBufferSubDataARB, layer );
  tbl.glDeleteBuffersARB = MakeRegalProc( http_glDeleteBuffersARB, layer );
  tbl.glGenBuffersARB = MakeRegalProc( http_glGenBuffersARB, layer );
  tbl.glGetBufferParameterivARB = MakeRegalProc( http_glGetBufferParameterivARB, layer );
  tbl.glGetBufferPointervARB = MakeRegalProc( http_glGetBufferPointervARB, layer );
  tbl.glGetBufferSubDataARB = MakeRegalProc( http_glGetBufferSubDataARB, layer );
  tbl.glIsBufferARB = MakeRegalProc( http_glIsBufferARB, layer );
  tbl.glMapBufferARB = MakeRegalProc( http_glMapBufferARB, layer );
  tbl.glUnmapBufferARB = MakeRegalProc( http_glUnmapBufferARB, layer );

  // GL_ARB_vertex_program

  tbl.glBindProgramARB = MakeRegalProc( http_glBindProgramARB, layer );
  tbl.glDeleteProgramsARB = MakeRegalProc( http_glDeleteProgramsARB, layer );
  tbl.glDisableVertexAttribArrayARB = MakeRegalProc( http_glDisableVertexAttribArrayARB, layer );
  tbl.glEnableVertexAttribArrayARB = MakeRegalProc( http_glEnableVertexAttribArrayARB, layer );
  tbl.glGenProgramsARB = MakeRegalProc( http_glGenProgramsARB, layer );
  tbl.glGetProgramEnvParameterdvARB = MakeRegalProc( http_glGetProgramEnvParameterdvARB, layer );
  tbl.glGetProgramEnvParameterfvARB = MakeRegalProc( http_glGetProgramEnvParameterfvARB, layer );
  tbl.glGetProgramLocalParameterdvARB = MakeRegalProc( http_glGetProgramLocalParameterdvARB, layer );
  tbl.glGetProgramLocalParameterfvARB = MakeRegalProc( http_glGetProgramLocalParameterfvARB, layer );
  tbl.glGetProgramStringARB = MakeRegalProc( http_glGetProgramStringARB, layer );
  tbl.glGetProgramivARB = MakeRegalProc( http_glGetProgramivARB, layer );
  tbl.glGetVertexAttribPointervARB = MakeRegalProc( http_glGetVertexAttribPointervARB, layer );
  tbl.glGetVertexAttribdvARB = MakeRegalProc( http_glGetVertexAttribdvARB, layer );
  tbl.glGetVertexAttribfvARB = MakeRegalProc( http_glGetVertexAttribfvARB, layer );
  tbl.glGetVertexAttribivARB = MakeRegalProc( http_glGetVertexAttribivARB, layer );
  tbl.glIsProgramARB = MakeRegalProc( http_glIsProgramARB, layer );
  tbl.glProgramEnvParameter4dARB = MakeRegalProc( http_glProgramEnvParameter4dARB, layer );
  tbl.glProgramEnvParameter4dvARB = MakeRegalProc( http_glProgramEnvParameter4dvARB, layer );
  tbl.glProgramEnvParameter4fARB = MakeRegalProc( http_glProgramEnvParameter4fARB, layer );
  tbl.glProgramEnvParameter4fvARB = MakeRegalProc( http_glProgramEnvParameter4fvARB, layer );
  tbl.glProgramLocalParameter4dARB = MakeRegalProc( http_glProgramLocalParameter4dARB, layer );
  tbl.glProgramLocalParameter4dvARB = MakeRegalProc( http_glProgramLocalParameter4dvARB, layer );
  tbl.glProgramLocalParameter4fARB = MakeRegalProc( http_glProgramLocalParameter4fARB, layer );
  tbl.glProgramLocalParameter4fvARB = MakeRegalProc( http_glProgramLocalParameter4fvARB, layer );
  tbl.glProgramStringARB = MakeRegalProc( http_glProgramStringARB, layer );
  tbl.glVertexAttrib1dARB = MakeRegalProc( http_glVertexAttrib1dARB, layer );
  tbl.glVertexAttrib1dvARB = MakeRegalProc( http_glVertexAttrib1dvARB, layer );
  tbl.glVertexAttrib1fARB = MakeRegalProc( http_glVertexAttrib1fARB, layer );
  tbl.glVertexAttrib1fvARB = MakeRegalProc( http_glVertexAttrib1fvARB, layer );
  tbl.glVertexAttrib1sARB = MakeRegalProc( http_glVertexAttrib1sARB, layer );
  tbl.glVertexAttrib1svARB = MakeRegalProc( http_glVertexAttrib1svARB, layer );
  tbl.glVertexAttrib2dARB = MakeRegalProc( http_glVertexAttrib2dARB, layer );
  tbl.glVertexAttrib2dvARB = MakeRegalProc( http_glVertexAttrib2dvARB, layer );
  tbl.glVertexAttrib2fARB = MakeRegalProc( http_glVertexAttrib2fARB, layer );
  tbl.glVertexAttrib2fvARB = MakeRegalProc( http_glVertexAttrib2fvARB, layer );
  tbl.glVertexAttrib2sARB = MakeRegalProc( http_glVertexAttrib2sARB, layer );
  tbl.glVertexAttrib2svARB = MakeRegalProc( http_glVertexAttrib2svARB, layer );
  tbl.glVertexAttrib3dARB = MakeRegalProc( http_glVertexAttrib3dARB, layer );
  tbl.glVertexAttrib3dvARB = MakeRegalProc( http_glVertexAttrib3dvARB, layer );
  tbl.glVertexAttrib3fARB = MakeRegalProc( http_glVertexAttrib3fARB, layer );
  tbl.glVertexAttrib3fvARB = MakeRegalProc( http_glVertexAttrib3fvARB, layer );
  tbl.glVertexAttrib3sARB = MakeRegalProc( http_glVertexAttrib3sARB, layer );
  tbl.glVertexAttrib3svARB = MakeRegalProc( http_glVertexAttrib3svARB, layer );
  tbl.glVertexAttrib4NbvARB = MakeRegalProc( http_glVertexAttrib4NbvARB, layer );
  tbl.glVertexAttrib4NivARB = MakeRegalProc( http_glVertexAttrib4NivARB, layer );
  tbl.glVertexAttrib4NsvARB = MakeRegalProc( http_glVertexAttrib4NsvARB, layer );
  tbl.glVertexAttrib4NubARB = MakeRegalProc( http_glVertexAttrib4NubARB, layer );
  tbl.glVertexAttrib4NubvARB = MakeRegalProc( http_glVertexAttrib4NubvARB, layer );
  tbl.glVertexAttrib4NuivARB = MakeRegalProc( http_glVertexAttrib4NuivARB, layer );
  tbl.glVertexAttrib4NusvARB = MakeRegalProc( http_glVertexAttrib4NusvARB, layer );
  tbl.glVertexAttrib4bvARB = MakeRegalProc( http_glVertexAttrib4bvARB, layer );
  tbl.glVertexAttrib4dARB = MakeRegalProc( http_glVertexAttrib4dARB, layer );
  tbl.glVertexAttrib4dvARB = MakeRegalProc( http_glVertexAttrib4dvARB, layer );
  tbl.glVertexAttrib4fARB = MakeRegalProc( http_glVertexAttrib4fARB, layer );
  tbl.glVertexAttrib4fvARB = MakeRegalProc( http_glVertexAttrib4fvARB, layer );
  tbl.glVertexAttrib4ivARB = MakeRegalProc( http_glVertexAttrib4ivARB, layer );
  tbl.glVertexAttrib4sARB = MakeRegalProc( http_glVertexAttrib4sARB, layer );
  tbl.glVertexAttrib4svARB = MakeRegalProc( http_glVertexAttrib4svARB, layer );
  tbl.glVertexAttrib4ubvARB = MakeRegalProc( http_glVertexAttrib4ubvARB, layer );
  tbl.glVertexAttrib4uivARB = MakeRegalProc( http_glVertexAttrib4uivARB, layer );
  tbl.glVertexAttrib4usvARB = MakeRegalProc( http_glVertexAttrib4usvARB, layer );
  tbl.glVertexAttribPointerARB = MakeRegalProc( http_glVertexAttribPointerARB, layer );

  // GL_ARB_vertex_shader

  tbl.glBindAttribLocationARB = MakeRegalProc( http_glBindAttribLocationARB, layer );
  tbl.glGetActiveAttribARB = MakeRegalProc( http_glGetActiveAttribARB, layer );
  tbl.glGetAttribLocationARB = MakeRegalProc( http_glGetAttribLocationARB, layer );

  // GL_ARB_vertex_type_2_10_10_10_rev

  tbl.glColorP3ui = MakeRegalProc( http_glColorP3ui, layer );
  tbl.glColorP3uiv = MakeRegalProc( http_glColorP3uiv, layer );
  tbl.glColorP4ui = MakeRegalProc( http_glColorP4ui, layer );
  tbl.glColorP4uiv = MakeRegalProc( http_glColorP4uiv, layer );
  tbl.glMultiTexCoordP1ui = MakeRegalProc( http_glMultiTexCoordP1ui, layer );
  tbl.glMultiTexCoordP1uiv = MakeRegalProc( http_glMultiTexCoordP1uiv, layer );
  tbl.glMultiTexCoordP2ui = MakeRegalProc( http_glMultiTexCoordP2ui, layer );
  tbl.glMultiTexCoordP2uiv = MakeRegalProc( http_glMultiTexCoordP2uiv, layer );
  tbl.glMultiTexCoordP3ui = MakeRegalProc( http_glMultiTexCoordP3ui, layer );
  tbl.glMultiTexCoordP3uiv = MakeRegalProc( http_glMultiTexCoordP3uiv, layer );
  tbl.glMultiTexCoordP4ui = MakeRegalProc( http_glMultiTexCoordP4ui, layer );
  tbl.glMultiTexCoordP4uiv = MakeRegalProc( http_glMultiTexCoordP4uiv, layer );
  tbl.glNormalP3ui = MakeRegalProc( http_glNormalP3ui, layer );
  tbl.glNormalP3uiv = MakeRegalProc( http_glNormalP3uiv, layer );
  tbl.glSecondaryColorP3ui = MakeRegalProc( http_glSecondaryColorP3ui, layer );
  tbl.glSecondaryColorP3uiv = MakeRegalProc( http_glSecondaryColorP3uiv, layer );
  tbl.glTexCoordP1ui = MakeRegalProc( http_glTexCoordP1ui, layer );
  tbl.glTexCoordP1uiv = MakeRegalProc( http_glTexCoordP1uiv, layer );
  tbl.glTexCoordP2ui = MakeRegalProc( http_glTexCoordP2ui, layer );
  tbl.glTexCoordP2uiv = MakeRegalProc( http_glTexCoordP2uiv, layer );
  tbl.glTexCoordP3ui = MakeRegalProc( http_glTexCoordP3ui, layer );
  tbl.glTexCoordP3uiv = MakeRegalProc( http_glTexCoordP3uiv, layer );
  tbl.glTexCoordP4ui = MakeRegalProc( http_glTexCoordP4ui, layer );
  tbl.glTexCoordP4uiv = MakeRegalProc( http_glTexCoordP4uiv, layer );
  tbl.glVertexAttribP1ui = MakeRegalProc( http_glVertexAttribP1ui, layer );
  tbl.glVertexAttribP1uiv = MakeRegalProc( http_glVertexAttribP1uiv, layer );
  tbl.glVertexAttribP2ui = MakeRegalProc( http_glVertexAttribP2ui, layer );
  tbl.glVertexAttribP2uiv = MakeRegalProc( http_glVertexAttribP2uiv, layer );
  tbl.glVertexAttribP3ui = MakeRegalProc( http_glVertexAttribP3ui, layer );
  tbl.glVertexAttribP3uiv = MakeRegalProc( http_glVertexAttribP3uiv, layer );
  tbl.glVertexAttribP4ui = MakeRegalProc( http_glVertexAttribP4ui, layer );
  tbl.glVertexAttribP4uiv = MakeRegalProc( http_glVertexAttribP4uiv, layer );
  tbl.glVertexP2ui = MakeRegalProc( http_glVertexP2ui, layer );
  tbl.glVertexP2uiv = MakeRegalProc( http_glVertexP2uiv, layer );
  tbl.glVertexP3ui = MakeRegalProc( http_glVertexP3ui, layer );
  tbl.glVertexP3uiv = MakeRegalProc( http_glVertexP3uiv, layer );
  tbl.glVertexP4ui = MakeRegalProc( http_glVertexP4ui, layer );
  tbl.glVertexP4uiv = MakeRegalProc( http_glVertexP4uiv, layer );

  // GL_ARB_viewport_array

  tbl.glDepthRangeArrayv = MakeRegalProc( http_glDepthRangeArrayv, layer );
  tbl.glDepthRangeIndexed = MakeRegalProc( http_glDepthRangeIndexed, layer );
  tbl.glGetDoublei_v = MakeRegalProc( http_glGetDoublei_v, layer );
  tbl.glGetFloati_v = MakeRegalProc( http_glGetFloati_v, layer );
  tbl.glScissorArrayv = MakeRegalProc( http_glScissorArrayv, layer );
  tbl.glScissorIndexed = MakeRegalProc( http_glScissorIndexed, layer );
  tbl.glScissorIndexedv = MakeRegalProc( http_glScissorIndexedv, layer );
  tbl.glViewportArrayv = MakeRegalProc( http_glViewportArrayv, layer );
  tbl.glViewportIndexedf = MakeRegalProc( http_glViewportIndexedf, layer );
  tbl.glViewportIndexedfv = MakeRegalProc( http_glViewportIndexedfv, layer );

  // GL_ARB_window_pos

  tbl.glWindowPos2dARB = MakeRegalProc( http_glWindowPos2dARB, layer );
  tbl.glWindowPos2dvARB = MakeRegalProc( http_glWindowPos2dvARB, layer );
  tbl.glWindowPos2fARB = MakeRegalProc( http_glWindowPos2fARB, layer );
  tbl.glWindowPos2fvARB = MakeRegalProc( http_glWindowPos2fvARB, layer );
  tbl.glWindowPos2iARB = MakeRegalProc( http_glWindowPos2iARB, layer );
  tbl.glWindowPos2ivARB = MakeRegalProc( http_glWindowPos2ivARB, layer );
  tbl.glWindowPos2sARB = MakeRegalProc( http_glWindowPos2sARB, layer );
  tbl.glWindowPos2svARB = MakeRegalProc( http_glWindowPos2svARB, layer );
  tbl.glWindowPos3dARB = MakeRegalProc( http_glWindowPos3dARB, layer );
  tbl.glWindowPos3dvARB = MakeRegalProc( http_glWindowPos3dvARB, layer );
  tbl.glWindowPos3fARB = MakeRegalProc( http_glWindowPos3fARB, layer );
  tbl.glWindowPos3fvARB = MakeRegalProc( http_glWindowPos3fvARB, layer );
  tbl.glWindowPos3iARB = MakeRegalProc( http_glWindowPos3iARB, layer );
  tbl.glWindowPos3ivARB = MakeRegalProc( http_glWindowPos3ivARB, layer );
  tbl.glWindowPos3sARB = MakeRegalProc( http_glWindowPos3sARB, layer );
  tbl.glWindowPos3svARB = MakeRegalProc( http_glWindowPos3svARB, layer );

  // GL_ATI_draw_buffers

  tbl.glDrawBuffersATI = MakeRegalProc( http_glDrawBuffersATI, layer );

  // GL_ATI_element_array

  tbl.glDrawElementArrayATI = MakeRegalProc( http_glDrawElementArrayATI, layer );
  tbl.glDrawRangeElementArrayATI = MakeRegalProc( http_glDrawRangeElementArrayATI, layer );
  tbl.glElementPointerATI = MakeRegalProc( http_glElementPointerATI, layer );

  // GL_ATI_envmap_bumpmap

  tbl.glGetTexBumpParameterfvATI = MakeRegalProc( http_glGetTexBumpParameterfvATI, layer );
  tbl.glGetTexBumpParameterivATI = MakeRegalProc( http_glGetTexBumpParameterivATI, layer );
  tbl.glTexBumpParameterfvATI = MakeRegalProc( http_glTexBumpParameterfvATI, layer );
  tbl.glTexBumpParameterivATI = MakeRegalProc( http_glTexBumpParameterivATI, layer );

  // GL_ATI_fragment_shader

  tbl.glAlphaFragmentOp1ATI = MakeRegalProc( http_glAlphaFragmentOp1ATI, layer );
  tbl.glAlphaFragmentOp2ATI = MakeRegalProc( http_glAlphaFragmentOp2ATI, layer );
  tbl.glAlphaFragmentOp3ATI = MakeRegalProc( http_glAlphaFragmentOp3ATI, layer );
  tbl.glBeginFragmentShaderATI = MakeRegalProc( http_glBeginFragmentShaderATI, layer );
  tbl.glBindFragmentShaderATI = MakeRegalProc( http_glBindFragmentShaderATI, layer );
  tbl.glColorFragmentOp1ATI = MakeRegalProc( http_glColorFragmentOp1ATI, layer );
  tbl.glColorFragmentOp2ATI = MakeRegalProc( http_glColorFragmentOp2ATI, layer );
  tbl.glColorFragmentOp3ATI = MakeRegalProc( http_glColorFragmentOp3ATI, layer );
  tbl.glDeleteFragmentShaderATI = MakeRegalProc( http_glDeleteFragmentShaderATI, layer );
  tbl.glEndFragmentShaderATI = MakeRegalProc( http_glEndFragmentShaderATI, layer );
  tbl.glGenFragmentShadersATI = MakeRegalProc( http_glGenFragmentShadersATI, layer );
  tbl.glPassTexCoordATI = MakeRegalProc( http_glPassTexCoordATI, layer );
  tbl.glSampleMapATI = MakeRegalProc( http_glSampleMapATI, layer );
  tbl.glSetFragmentShaderConstantATI = MakeRegalProc( http_glSetFragmentShaderConstantATI, layer );

  // GL_ATI_map_object_buffer

  tbl.glMapObjectBufferATI = MakeRegalProc( http_glMapObjectBufferATI, layer );
  tbl.glUnmapObjectBufferATI = MakeRegalProc( http_glUnmapObjectBufferATI, layer );

  // GL_ATI_pn_triangles

  tbl.glPNTrianglesfATI = MakeRegalProc( http_glPNTrianglesfATI, layer );
  tbl.glPNTrianglesiATI = MakeRegalProc( http_glPNTrianglesiATI, layer );

  // GL_ATI_separate_stencil

  tbl.glStencilFuncSeparateATI = MakeRegalProc( http_glStencilFuncSeparateATI, layer );
  tbl.glStencilOpSeparateATI = MakeRegalProc( http_glStencilOpSeparateATI, layer );

  // GL_ATI_vertex_array_object

  tbl.glArrayObjectATI = MakeRegalProc( http_glArrayObjectATI, layer );
  tbl.glFreeObjectBufferATI = MakeRegalProc( http_glFreeObjectBufferATI, layer );
  tbl.glGetArrayObjectfvATI = MakeRegalProc( http_glGetArrayObjectfvATI, layer );
  tbl.glGetArrayObjectivATI = MakeRegalProc( http_glGetArrayObjectivATI, layer );
  tbl.glGetObjectBufferfvATI = MakeRegalProc( http_glGetObjectBufferfvATI, layer );
  tbl.glGetObjectBufferivATI = MakeRegalProc( http_glGetObjectBufferivATI, layer );
  tbl.glGetVariantArrayObjectfvATI = MakeRegalProc( http_glGetVariantArrayObjectfvATI, layer );
  tbl.glGetVariantArrayObjectivATI = MakeRegalProc( http_glGetVariantArrayObjectivATI, layer );
  tbl.glIsObjectBufferATI = MakeRegalProc( http_glIsObjectBufferATI, layer );
  tbl.glNewObjectBufferATI = MakeRegalProc( http_glNewObjectBufferATI, layer );
  tbl.glUpdateObjectBufferATI = MakeRegalProc( http_glUpdateObjectBufferATI, layer );
  tbl.glVariantArrayObjectATI = MakeRegalProc( http_glVariantArrayObjectATI, layer );

  // GL_ATI_vertex_attrib_array_object

  tbl.glGetVertexAttribArrayObjectfvATI = MakeRegalProc( http_glGetVertexAttribArrayObjectfvATI, layer );
  tbl.glGetVertexAttribArrayObjectivATI = MakeRegalProc( http_glGetVertexAttribArrayObjectivATI, layer );
  tbl.glVertexAttribArrayObjectATI = MakeRegalProc( http_glVertexAttribArrayObjectATI, layer );

  // GL_ATI_vertex_streams

  tbl.glClientActiveVertexStreamATI = MakeRegalProc( http_glClientActiveVertexStreamATI, layer );
  tbl.glNormalStream3bATI = MakeRegalProc( http_glNormalStream3bATI, layer );
  tbl.glNormalStream3bvATI = MakeRegalProc( http_glNormalStream3bvATI, layer );
  tbl.glNormalStream3dATI = MakeRegalProc( http_glNormalStream3dATI, layer );
  tbl.glNormalStream3dvATI = MakeRegalProc( http_glNormalStream3dvATI, layer );
  tbl.glNormalStream3fATI = MakeRegalProc( http_glNormalStream3fATI, layer );
  tbl.glNormalStream3fvATI = MakeRegalProc( http_glNormalStream3fvATI, layer );
  tbl.glNormalStream3iATI = MakeRegalProc( http_glNormalStream3iATI, layer );
  tbl.glNormalStream3ivATI = MakeRegalProc( http_glNormalStream3ivATI, layer );
  tbl.glNormalStream3sATI = MakeRegalProc( http_glNormalStream3sATI, layer );
  tbl.glNormalStream3svATI = MakeRegalProc( http_glNormalStream3svATI, layer );
  tbl.glVertexBlendEnvfATI = MakeRegalProc( http_glVertexBlendEnvfATI, layer );
  tbl.glVertexBlendEnviATI = MakeRegalProc( http_glVertexBlendEnviATI, layer );
  tbl.glVertexStream1dATI = MakeRegalProc( http_glVertexStream1dATI, layer );
  tbl.glVertexStream1dvATI = MakeRegalProc( http_glVertexStream1dvATI, layer );
  tbl.glVertexStream1fATI = MakeRegalProc( http_glVertexStream1fATI, layer );
  tbl.glVertexStream1fvATI = MakeRegalProc( http_glVertexStream1fvATI, layer );
  tbl.glVertexStream1iATI = MakeRegalProc( http_glVertexStream1iATI, layer );
  tbl.glVertexStream1ivATI = MakeRegalProc( http_glVertexStream1ivATI, layer );
  tbl.glVertexStream1sATI = MakeRegalProc( http_glVertexStream1sATI, layer );
  tbl.glVertexStream1svATI = MakeRegalProc( http_glVertexStream1svATI, layer );
  tbl.glVertexStream2dATI = MakeRegalProc( http_glVertexStream2dATI, layer );
  tbl.glVertexStream2dvATI = MakeRegalProc( http_glVertexStream2dvATI, layer );
  tbl.glVertexStream2fATI = MakeRegalProc( http_glVertexStream2fATI, layer );
  tbl.glVertexStream2fvATI = MakeRegalProc( http_glVertexStream2fvATI, layer );
  tbl.glVertexStream2iATI = MakeRegalProc( http_glVertexStream2iATI, layer );
  tbl.glVertexStream2ivATI = MakeRegalProc( http_glVertexStream2ivATI, layer );
  tbl.glVertexStream2sATI = MakeRegalProc( http_glVertexStream2sATI, layer );
  tbl.glVertexStream2svATI = MakeRegalProc( http_glVertexStream2svATI, layer );
  tbl.glVertexStream3dATI = MakeRegalProc( http_glVertexStream3dATI, layer );
  tbl.glVertexStream3dvATI = MakeRegalProc( http_glVertexStream3dvATI, layer );
  tbl.glVertexStream3fATI = MakeRegalProc( http_glVertexStream3fATI, layer );
  tbl.glVertexStream3fvATI = MakeRegalProc( http_glVertexStream3fvATI, layer );
  tbl.glVertexStream3iATI = MakeRegalProc( http_glVertexStream3iATI, layer );
  tbl.glVertexStream3ivATI = MakeRegalProc( http_glVertexStream3ivATI, layer );
  tbl.glVertexStream3sATI = MakeRegalProc( http_glVertexStream3sATI, layer );
  tbl.glVertexStream3svATI = MakeRegalProc( http_glVertexStream3svATI, layer );
  tbl.glVertexStream4dATI = MakeRegalProc( http_glVertexStream4dATI, layer );
  tbl.glVertexStream4dvATI = MakeRegalProc( http_glVertexStream4dvATI, layer );
  tbl.glVertexStream4fATI = MakeRegalProc( http_glVertexStream4fATI, layer );
  tbl.glVertexStream4fvATI = MakeRegalProc( http_glVertexStream4fvATI, layer );
  tbl.glVertexStream4iATI = MakeRegalProc( http_glVertexStream4iATI, layer );
  tbl.glVertexStream4ivATI = MakeRegalProc( http_glVertexStream4ivATI, layer );
  tbl.glVertexStream4sATI = MakeRegalProc( http_glVertexStream4sATI, layer );
  tbl.glVertexStream4svATI = MakeRegalProc( http_glVertexStream4svATI, layer );

  // GL_EXT_bindable_uniform

  tbl.glGetUniformBufferSizeEXT = MakeRegalProc( http_glGetUniformBufferSizeEXT, layer );
  tbl.glGetUniformOffsetEXT = MakeRegalProc( http_glGetUniformOffsetEXT, layer );
  tbl.glUniformBufferEXT = MakeRegalProc( http_glUniformBufferEXT, layer );

  // GL_EXT_blend_color

  tbl.glBlendColorEXT = MakeRegalProc( http_glBlendColorEXT, layer );

  // GL_EXT_blend_equation_separate

  tbl.glBlendEquationSeparateEXT = MakeRegalProc( http_glBlendEquationSeparateEXT, layer );

  // GL_EXT_blend_func_separate

  tbl.glBlendFuncSeparateEXT = MakeRegalProc( http_glBlendFuncSeparateEXT, layer );

  // GL_EXT_blend_minmax

  tbl.glBlendEquationEXT = MakeRegalProc( http_glBlendEquationEXT, layer );

  // GL_EXT_color_subtable

  tbl.glColorSubTableEXT = MakeRegalProc( http_glColorSubTableEXT, layer );
  tbl.glCopyColorSubTableEXT = MakeRegalProc( http_glCopyColorSubTableEXT, layer );

  // GL_EXT_compiled_vertex_array

  tbl.glLockArraysEXT = MakeRegalProc( http_glLockArraysEXT, layer );
  tbl.glUnlockArraysEXT = MakeRegalProc( http_glUnlockArraysEXT, layer );

  // GL_EXT_convolution

  tbl.glConvolutionFilter1DEXT = MakeRegalProc( http_glConvolutionFilter1DEXT, layer );
  tbl.glConvolutionFilter2DEXT = MakeRegalProc( http_glConvolutionFilter2DEXT, layer );
  tbl.glConvolutionParameterfEXT = MakeRegalProc( http_glConvolutionParameterfEXT, layer );
  tbl.glConvolutionParameterfvEXT = MakeRegalProc( http_glConvolutionParameterfvEXT, layer );
  tbl.glConvolutionParameteriEXT = MakeRegalProc( http_glConvolutionParameteriEXT, layer );
  tbl.glConvolutionParameterivEXT = MakeRegalProc( http_glConvolutionParameterivEXT, layer );
  tbl.glCopyConvolutionFilter1DEXT = MakeRegalProc( http_glCopyConvolutionFilter1DEXT, layer );
  tbl.glCopyConvolutionFilter2DEXT = MakeRegalProc( http_glCopyConvolutionFilter2DEXT, layer );
  tbl.glGetConvolutionFilterEXT = MakeRegalProc( http_glGetConvolutionFilterEXT, layer );
  tbl.glGetConvolutionParameterfvEXT = MakeRegalProc( http_glGetConvolutionParameterfvEXT, layer );
  tbl.glGetConvolutionParameterivEXT = MakeRegalProc( http_glGetConvolutionParameterivEXT, layer );
  tbl.glGetSeparableFilterEXT = MakeRegalProc( http_glGetSeparableFilterEXT, layer );
  tbl.glSeparableFilter2DEXT = MakeRegalProc( http_glSeparableFilter2DEXT, layer );

  // GL_EXT_coordinate_frame

  tbl.glBinormal3bEXT = MakeRegalProc( http_glBinormal3bEXT, layer );
  tbl.glBinormal3bvEXT = MakeRegalProc( http_glBinormal3bvEXT, layer );
  tbl.glBinormal3dEXT = MakeRegalProc( http_glBinormal3dEXT, layer );
  tbl.glBinormal3dvEXT = MakeRegalProc( http_glBinormal3dvEXT, layer );
  tbl.glBinormal3fEXT = MakeRegalProc( http_glBinormal3fEXT, layer );
  tbl.glBinormal3fvEXT = MakeRegalProc( http_glBinormal3fvEXT, layer );
  tbl.glBinormal3iEXT = MakeRegalProc( http_glBinormal3iEXT, layer );
  tbl.glBinormal3ivEXT = MakeRegalProc( http_glBinormal3ivEXT, layer );
  tbl.glBinormal3sEXT = MakeRegalProc( http_glBinormal3sEXT, layer );
  tbl.glBinormal3svEXT = MakeRegalProc( http_glBinormal3svEXT, layer );
  tbl.glBinormalPointerEXT = MakeRegalProc( http_glBinormalPointerEXT, layer );
  tbl.glTangent3bEXT = MakeRegalProc( http_glTangent3bEXT, layer );
  tbl.glTangent3bvEXT = MakeRegalProc( http_glTangent3bvEXT, layer );
  tbl.glTangent3dEXT = MakeRegalProc( http_glTangent3dEXT, layer );
  tbl.glTangent3dvEXT = MakeRegalProc( http_glTangent3dvEXT, layer );
  tbl.glTangent3fEXT = MakeRegalProc( http_glTangent3fEXT, layer );
  tbl.glTangent3fvEXT = MakeRegalProc( http_glTangent3fvEXT, layer );
  tbl.glTangent3iEXT = MakeRegalProc( http_glTangent3iEXT, layer );
  tbl.glTangent3ivEXT = MakeRegalProc( http_glTangent3ivEXT, layer );
  tbl.glTangent3sEXT = MakeRegalProc( http_glTangent3sEXT, layer );
  tbl.glTangent3svEXT = MakeRegalProc( http_glTangent3svEXT, layer );
  tbl.glTangentPointerEXT = MakeRegalProc( http_glTangentPointerEXT, layer );

  // GL_EXT_copy_texture

  tbl.glCopyTexImage1DEXT = MakeRegalProc( http_glCopyTexImage1DEXT, layer );
  tbl.glCopyTexImage2DEXT = MakeRegalProc( http_glCopyTexImage2DEXT, layer );
  tbl.glCopyTexSubImage1DEXT = MakeRegalProc( http_glCopyTexSubImage1DEXT, layer );
  tbl.glCopyTexSubImage2DEXT = MakeRegalProc( http_glCopyTexSubImage2DEXT, layer );
  tbl.glCopyTexSubImage3DEXT = MakeRegalProc( http_glCopyTexSubImage3DEXT, layer );

  // GL_EXT_cull_vertex

  tbl.glCullParameterdvEXT = MakeRegalProc( http_glCullParameterdvEXT, layer );
  tbl.glCullParameterfvEXT = MakeRegalProc( http_glCullParameterfvEXT, layer );

  // GL_EXT_debug_label

  tbl.glGetObjectLabelEXT = MakeRegalProc( http_glGetObjectLabelEXT, layer );
  tbl.glLabelObjectEXT = MakeRegalProc( http_glLabelObjectEXT, layer );

  // GL_EXT_debug_marker

  tbl.glInsertEventMarkerEXT = MakeRegalProc( http_glInsertEventMarkerEXT, layer );
  tbl.glPopGroupMarkerEXT = MakeRegalProc( http_glPopGroupMarkerEXT, layer );
  tbl.glPushGroupMarkerEXT = MakeRegalProc( http_glPushGroupMarkerEXT, layer );

  // GL_EXT_depth_bounds_test

  tbl.glDepthBoundsEXT = MakeRegalProc( http_glDepthBoundsEXT, layer );

  // GL_EXT_direct_state_access

  tbl.glBindMultiTextureEXT = MakeRegalProc( http_glBindMultiTextureEXT, layer );
  tbl.glCheckNamedFramebufferStatusEXT = MakeRegalProc( http_glCheckNamedFramebufferStatusEXT, layer );
  tbl.glClientAttribDefaultEXT = MakeRegalProc( http_glClientAttribDefaultEXT, layer );
  tbl.glCompressedMultiTexImage1DEXT = MakeRegalProc( http_glCompressedMultiTexImage1DEXT, layer );
  tbl.glCompressedMultiTexImage2DEXT = MakeRegalProc( http_glCompressedMultiTexImage2DEXT, layer );
  tbl.glCompressedMultiTexImage3DEXT = MakeRegalProc( http_glCompressedMultiTexImage3DEXT, layer );
  tbl.glCompressedMultiTexSubImage1DEXT = MakeRegalProc( http_glCompressedMultiTexSubImage1DEXT, layer );
  tbl.glCompressedMultiTexSubImage2DEXT = MakeRegalProc( http_glCompressedMultiTexSubImage2DEXT, layer );
  tbl.glCompressedMultiTexSubImage3DEXT = MakeRegalProc( http_glCompressedMultiTexSubImage3DEXT, layer );
  tbl.glCompressedTextureImage1DEXT = MakeRegalProc( http_glCompressedTextureImage1DEXT, layer );
  tbl.glCompressedTextureImage2DEXT = MakeRegalProc( http_glCompressedTextureImage2DEXT, layer );
  tbl.glCompressedTextureImage3DEXT = MakeRegalProc( http_glCompressedTextureImage3DEXT, layer );
  tbl.glCompressedTextureSubImage1DEXT = MakeRegalProc( http_glCompressedTextureSubImage1DEXT, layer );
  tbl.glCompressedTextureSubImage2DEXT = MakeRegalProc( http_glCompressedTextureSubImage2DEXT, layer );
  tbl.glCompressedTextureSubImage3DEXT = MakeRegalProc( http_glCompressedTextureSubImage3DEXT, layer );
  tbl.glCopyMultiTexImage1DEXT = MakeRegalProc( http_glCopyMultiTexImage1DEXT, layer );
  tbl.glCopyMultiTexImage2DEXT = MakeRegalProc( http_glCopyMultiTexImage2DEXT, layer );
  tbl.glCopyMultiTexSubImage1DEXT = MakeRegalProc( http_glCopyMultiTexSubImage1DEXT, layer );
  tbl.glCopyMultiTexSubImage2DEXT = MakeRegalProc( http_glCopyMultiTexSubImage2DEXT, layer );
  tbl.glCopyMultiTexSubImage3DEXT = MakeRegalProc( http_glCopyMultiTexSubImage3DEXT, layer );
  tbl.glCopyTextureImage1DEXT = MakeRegalProc( http_glCopyTextureImage1DEXT, layer );
  tbl.glCopyTextureImage2DEXT = MakeRegalProc( http_glCopyTextureImage2DEXT, layer );
  tbl.glCopyTextureSubImage1DEXT = MakeRegalProc( http_glCopyTextureSubImage1DEXT, layer );
  tbl.glCopyTextureSubImage2DEXT = MakeRegalProc( http_glCopyTextureSubImage2DEXT, layer );
  tbl.glCopyTextureSubImage3DEXT = MakeRegalProc( http_glCopyTextureSubImage3DEXT, layer );
  tbl.glDisableClientStateIndexedEXT = MakeRegalProc( http_glDisableClientStateIndexedEXT, layer );
  tbl.glDisableClientStateiEXT = MakeRegalProc( http_glDisableClientStateiEXT, layer );
  tbl.glDisableVertexArrayAttribEXT = MakeRegalProc( http_glDisableVertexArrayAttribEXT, layer );
  tbl.glDisableVertexArrayEXT = MakeRegalProc( http_glDisableVertexArrayEXT, layer );
  tbl.glEnableClientStateIndexedEXT = MakeRegalProc( http_glEnableClientStateIndexedEXT, layer );
  tbl.glEnableClientStateiEXT = MakeRegalProc( http_glEnableClientStateiEXT, layer );
  tbl.glEnableVertexArrayAttribEXT = MakeRegalProc( http_glEnableVertexArrayAttribEXT, layer );
  tbl.glEnableVertexArrayEXT = MakeRegalProc( http_glEnableVertexArrayEXT, layer );
  tbl.glFlushMappedNamedBufferRangeEXT = MakeRegalProc( http_glFlushMappedNamedBufferRangeEXT, layer );
  tbl.glFramebufferDrawBufferEXT = MakeRegalProc( http_glFramebufferDrawBufferEXT, layer );
  tbl.glFramebufferDrawBuffersEXT = MakeRegalProc( http_glFramebufferDrawBuffersEXT, layer );
  tbl.glFramebufferReadBufferEXT = MakeRegalProc( http_glFramebufferReadBufferEXT, layer );
  tbl.glGenerateMultiTexMipmapEXT = MakeRegalProc( http_glGenerateMultiTexMipmapEXT, layer );
  tbl.glGenerateTextureMipmapEXT = MakeRegalProc( http_glGenerateTextureMipmapEXT, layer );
  tbl.glGetCompressedMultiTexImageEXT = MakeRegalProc( http_glGetCompressedMultiTexImageEXT, layer );
  tbl.glGetCompressedTextureImageEXT = MakeRegalProc( http_glGetCompressedTextureImageEXT, layer );
  tbl.glGetDoubleIndexedvEXT = MakeRegalProc( http_glGetDoubleIndexedvEXT, layer );
  tbl.glGetDoublei_vEXT = MakeRegalProc( http_glGetDoublei_vEXT, layer );
  tbl.glGetFloatIndexedvEXT = MakeRegalProc( http_glGetFloatIndexedvEXT, layer );
  tbl.glGetFloati_vEXT = MakeRegalProc( http_glGetFloati_vEXT, layer );
  tbl.glGetFramebufferParameterivEXT = MakeRegalProc( http_glGetFramebufferParameterivEXT, layer );
  tbl.glGetMultiTexEnvfvEXT = MakeRegalProc( http_glGetMultiTexEnvfvEXT, layer );
  tbl.glGetMultiTexEnvivEXT = MakeRegalProc( http_glGetMultiTexEnvivEXT, layer );
  tbl.glGetMultiTexGendvEXT = MakeRegalProc( http_glGetMultiTexGendvEXT, layer );
  tbl.glGetMultiTexGenfvEXT = MakeRegalProc( http_glGetMultiTexGenfvEXT, layer );
  tbl.glGetMultiTexGenivEXT = MakeRegalProc( http_glGetMultiTexGenivEXT, layer );
  tbl.glGetMultiTexImageEXT = MakeRegalProc( http_glGetMultiTexImageEXT, layer );
  tbl.glGetMultiTexLevelParameterfvEXT = MakeRegalProc( http_glGetMultiTexLevelParameterfvEXT, layer );
  tbl.glGetMultiTexLevelParameterivEXT = MakeRegalProc( http_glGetMultiTexLevelParameterivEXT, layer );
  tbl.glGetMultiTexParameterIivEXT = MakeRegalProc( http_glGetMultiTexParameterIivEXT, layer );
  tbl.glGetMultiTexParameterIuivEXT = MakeRegalProc( http_glGetMultiTexParameterIuivEXT, layer );
  tbl.glGetMultiTexParameterfvEXT = MakeRegalProc( http_glGetMultiTexParameterfvEXT, layer );
  tbl.glGetMultiTexParameterivEXT = MakeRegalProc( http_glGetMultiTexParameterivEXT, layer );
  tbl.glGetNamedBufferParameterivEXT = MakeRegalProc( http_glGetNamedBufferParameterivEXT, layer );
  tbl.glGetNamedBufferPointervEXT = MakeRegalProc( http_glGetNamedBufferPointervEXT, layer );
  tbl.glGetNamedBufferSubDataEXT = MakeRegalProc( http_glGetNamedBufferSubDataEXT, layer );
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = MakeRegalProc( http_glGetNamedFramebufferAttachmentParameterivEXT, layer );
  tbl.glGetNamedProgramLocalParameterIivEXT = MakeRegalProc( http_glGetNamedProgramLocalParameterIivEXT, layer );
  tbl.glGetNamedProgramLocalParameterIuivEXT = MakeRegalProc( http_glGetNamedProgramLocalParameterIuivEXT, layer );
  tbl.glGetNamedProgramLocalParameterdvEXT = MakeRegalProc( http_glGetNamedProgramLocalParameterdvEXT, layer );
  tbl.glGetNamedProgramLocalParameterfvEXT = MakeRegalProc( http_glGetNamedProgramLocalParameterfvEXT, layer );
  tbl.glGetNamedProgramStringEXT = MakeRegalProc( http_glGetNamedProgramStringEXT, layer );
  tbl.glGetNamedProgramivEXT = MakeRegalProc( http_glGetNamedProgramivEXT, layer );
  tbl.glGetNamedRenderbufferParameterivEXT = MakeRegalProc( http_glGetNamedRenderbufferParameterivEXT, layer );
  tbl.glGetPointerIndexedvEXT = MakeRegalProc( http_glGetPointerIndexedvEXT, layer );
  tbl.glGetPointeri_vEXT = MakeRegalProc( http_glGetPointeri_vEXT, layer );
  tbl.glGetTextureImageEXT = MakeRegalProc( http_glGetTextureImageEXT, layer );
  tbl.glGetTextureLevelParameterfvEXT = MakeRegalProc( http_glGetTextureLevelParameterfvEXT, layer );
  tbl.glGetTextureLevelParameterivEXT = MakeRegalProc( http_glGetTextureLevelParameterivEXT, layer );
  tbl.glGetTextureParameterIivEXT = MakeRegalProc( http_glGetTextureParameterIivEXT, layer );
  tbl.glGetTextureParameterIuivEXT = MakeRegalProc( http_glGetTextureParameterIuivEXT, layer );
  tbl.glGetTextureParameterfvEXT = MakeRegalProc( http_glGetTextureParameterfvEXT, layer );
  tbl.glGetTextureParameterivEXT = MakeRegalProc( http_glGetTextureParameterivEXT, layer );
  tbl.glGetVertexArrayIntegeri_vEXT = MakeRegalProc( http_glGetVertexArrayIntegeri_vEXT, layer );
  tbl.glGetVertexArrayIntegervEXT = MakeRegalProc( http_glGetVertexArrayIntegervEXT, layer );
  tbl.glGetVertexArrayPointeri_vEXT = MakeRegalProc( http_glGetVertexArrayPointeri_vEXT, layer );
  tbl.glGetVertexArrayPointervEXT = MakeRegalProc( http_glGetVertexArrayPointervEXT, layer );
  tbl.glMapNamedBufferEXT = MakeRegalProc( http_glMapNamedBufferEXT, layer );
  tbl.glMapNamedBufferRangeEXT = MakeRegalProc( http_glMapNamedBufferRangeEXT, layer );
  tbl.glMatrixFrustumEXT = MakeRegalProc( http_glMatrixFrustumEXT, layer );
  tbl.glMatrixLoadIdentityEXT = MakeRegalProc( http_glMatrixLoadIdentityEXT, layer );
  tbl.glMatrixLoadTransposedEXT = MakeRegalProc( http_glMatrixLoadTransposedEXT, layer );
  tbl.glMatrixLoadTransposefEXT = MakeRegalProc( http_glMatrixLoadTransposefEXT, layer );
  tbl.glMatrixLoaddEXT = MakeRegalProc( http_glMatrixLoaddEXT, layer );
  tbl.glMatrixLoadfEXT = MakeRegalProc( http_glMatrixLoadfEXT, layer );
  tbl.glMatrixMultTransposedEXT = MakeRegalProc( http_glMatrixMultTransposedEXT, layer );
  tbl.glMatrixMultTransposefEXT = MakeRegalProc( http_glMatrixMultTransposefEXT, layer );
  tbl.glMatrixMultdEXT = MakeRegalProc( http_glMatrixMultdEXT, layer );
  tbl.glMatrixMultfEXT = MakeRegalProc( http_glMatrixMultfEXT, layer );
  tbl.glMatrixOrthoEXT = MakeRegalProc( http_glMatrixOrthoEXT, layer );
  tbl.glMatrixPopEXT = MakeRegalProc( http_glMatrixPopEXT, layer );
  tbl.glMatrixPushEXT = MakeRegalProc( http_glMatrixPushEXT, layer );
  tbl.glMatrixRotatedEXT = MakeRegalProc( http_glMatrixRotatedEXT, layer );
  tbl.glMatrixRotatefEXT = MakeRegalProc( http_glMatrixRotatefEXT, layer );
  tbl.glMatrixScaledEXT = MakeRegalProc( http_glMatrixScaledEXT, layer );
  tbl.glMatrixScalefEXT = MakeRegalProc( http_glMatrixScalefEXT, layer );
  tbl.glMatrixTranslatedEXT = MakeRegalProc( http_glMatrixTranslatedEXT, layer );
  tbl.glMatrixTranslatefEXT = MakeRegalProc( http_glMatrixTranslatefEXT, layer );
  tbl.glMultiTexBufferEXT = MakeRegalProc( http_glMultiTexBufferEXT, layer );
  tbl.glMultiTexCoordPointerEXT = MakeRegalProc( http_glMultiTexCoordPointerEXT, layer );
  tbl.glMultiTexEnvfEXT = MakeRegalProc( http_glMultiTexEnvfEXT, layer );
  tbl.glMultiTexEnvfvEXT = MakeRegalProc( http_glMultiTexEnvfvEXT, layer );
  tbl.glMultiTexEnviEXT = MakeRegalProc( http_glMultiTexEnviEXT, layer );
  tbl.glMultiTexEnvivEXT = MakeRegalProc( http_glMultiTexEnvivEXT, layer );
  tbl.glMultiTexGendEXT = MakeRegalProc( http_glMultiTexGendEXT, layer );
  tbl.glMultiTexGendvEXT = MakeRegalProc( http_glMultiTexGendvEXT, layer );
  tbl.glMultiTexGenfEXT = MakeRegalProc( http_glMultiTexGenfEXT, layer );
  tbl.glMultiTexGenfvEXT = MakeRegalProc( http_glMultiTexGenfvEXT, layer );
  tbl.glMultiTexGeniEXT = MakeRegalProc( http_glMultiTexGeniEXT, layer );
  tbl.glMultiTexGenivEXT = MakeRegalProc( http_glMultiTexGenivEXT, layer );
  tbl.glMultiTexImage1DEXT = MakeRegalProc( http_glMultiTexImage1DEXT, layer );
  tbl.glMultiTexImage2DEXT = MakeRegalProc( http_glMultiTexImage2DEXT, layer );
  tbl.glMultiTexImage3DEXT = MakeRegalProc( http_glMultiTexImage3DEXT, layer );
  tbl.glMultiTexParameterIivEXT = MakeRegalProc( http_glMultiTexParameterIivEXT, layer );
  tbl.glMultiTexParameterIuivEXT = MakeRegalProc( http_glMultiTexParameterIuivEXT, layer );
  tbl.glMultiTexParameterfEXT = MakeRegalProc( http_glMultiTexParameterfEXT, layer );
  tbl.glMultiTexParameterfvEXT = MakeRegalProc( http_glMultiTexParameterfvEXT, layer );
  tbl.glMultiTexParameteriEXT = MakeRegalProc( http_glMultiTexParameteriEXT, layer );
  tbl.glMultiTexParameterivEXT = MakeRegalProc( http_glMultiTexParameterivEXT, layer );
  tbl.glMultiTexRenderbufferEXT = MakeRegalProc( http_glMultiTexRenderbufferEXT, layer );
  tbl.glMultiTexSubImage1DEXT = MakeRegalProc( http_glMultiTexSubImage1DEXT, layer );
  tbl.glMultiTexSubImage2DEXT = MakeRegalProc( http_glMultiTexSubImage2DEXT, layer );
  tbl.glMultiTexSubImage3DEXT = MakeRegalProc( http_glMultiTexSubImage3DEXT, layer );
  tbl.glNamedBufferDataEXT = MakeRegalProc( http_glNamedBufferDataEXT, layer );
  tbl.glNamedBufferSubDataEXT = MakeRegalProc( http_glNamedBufferSubDataEXT, layer );
  tbl.glNamedCopyBufferSubDataEXT = MakeRegalProc( http_glNamedCopyBufferSubDataEXT, layer );
  tbl.glNamedFramebufferRenderbufferEXT = MakeRegalProc( http_glNamedFramebufferRenderbufferEXT, layer );
  tbl.glNamedFramebufferTexture1DEXT = MakeRegalProc( http_glNamedFramebufferTexture1DEXT, layer );
  tbl.glNamedFramebufferTexture2DEXT = MakeRegalProc( http_glNamedFramebufferTexture2DEXT, layer );
  tbl.glNamedFramebufferTexture3DEXT = MakeRegalProc( http_glNamedFramebufferTexture3DEXT, layer );
  tbl.glNamedFramebufferTextureEXT = MakeRegalProc( http_glNamedFramebufferTextureEXT, layer );
  tbl.glNamedFramebufferTextureFaceEXT = MakeRegalProc( http_glNamedFramebufferTextureFaceEXT, layer );
  tbl.glNamedFramebufferTextureLayerEXT = MakeRegalProc( http_glNamedFramebufferTextureLayerEXT, layer );
  tbl.glNamedProgramLocalParameter4dEXT = MakeRegalProc( http_glNamedProgramLocalParameter4dEXT, layer );
  tbl.glNamedProgramLocalParameter4dvEXT = MakeRegalProc( http_glNamedProgramLocalParameter4dvEXT, layer );
  tbl.glNamedProgramLocalParameter4fEXT = MakeRegalProc( http_glNamedProgramLocalParameter4fEXT, layer );
  tbl.glNamedProgramLocalParameter4fvEXT = MakeRegalProc( http_glNamedProgramLocalParameter4fvEXT, layer );
  tbl.glNamedProgramLocalParameterI4iEXT = MakeRegalProc( http_glNamedProgramLocalParameterI4iEXT, layer );
  tbl.glNamedProgramLocalParameterI4ivEXT = MakeRegalProc( http_glNamedProgramLocalParameterI4ivEXT, layer );
  tbl.glNamedProgramLocalParameterI4uiEXT = MakeRegalProc( http_glNamedProgramLocalParameterI4uiEXT, layer );
  tbl.glNamedProgramLocalParameterI4uivEXT = MakeRegalProc( http_glNamedProgramLocalParameterI4uivEXT, layer );
  tbl.glNamedProgramLocalParameters4fvEXT = MakeRegalProc( http_glNamedProgramLocalParameters4fvEXT, layer );
  tbl.glNamedProgramLocalParametersI4ivEXT = MakeRegalProc( http_glNamedProgramLocalParametersI4ivEXT, layer );
  tbl.glNamedProgramLocalParametersI4uivEXT = MakeRegalProc( http_glNamedProgramLocalParametersI4uivEXT, layer );
  tbl.glNamedProgramStringEXT = MakeRegalProc( http_glNamedProgramStringEXT, layer );
  tbl.glNamedRenderbufferStorageEXT = MakeRegalProc( http_glNamedRenderbufferStorageEXT, layer );
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = MakeRegalProc( http_glNamedRenderbufferStorageMultisampleCoverageEXT, layer );
  tbl.glNamedRenderbufferStorageMultisampleEXT = MakeRegalProc( http_glNamedRenderbufferStorageMultisampleEXT, layer );
  tbl.glProgramUniform1dEXT = MakeRegalProc( http_glProgramUniform1dEXT, layer );
  tbl.glProgramUniform1dvEXT = MakeRegalProc( http_glProgramUniform1dvEXT, layer );
  tbl.glProgramUniform1fEXT = MakeRegalProc( http_glProgramUniform1fEXT, layer );
  tbl.glProgramUniform1fvEXT = MakeRegalProc( http_glProgramUniform1fvEXT, layer );
  tbl.glProgramUniform1iEXT = MakeRegalProc( http_glProgramUniform1iEXT, layer );
  tbl.glProgramUniform1ivEXT = MakeRegalProc( http_glProgramUniform1ivEXT, layer );
  tbl.glProgramUniform1uiEXT = MakeRegalProc( http_glProgramUniform1uiEXT, layer );
  tbl.glProgramUniform1uivEXT = MakeRegalProc( http_glProgramUniform1uivEXT, layer );
  tbl.glProgramUniform2dEXT = MakeRegalProc( http_glProgramUniform2dEXT, layer );
  tbl.glProgramUniform2dvEXT = MakeRegalProc( http_glProgramUniform2dvEXT, layer );
  tbl.glProgramUniform2fEXT = MakeRegalProc( http_glProgramUniform2fEXT, layer );
  tbl.glProgramUniform2fvEXT = MakeRegalProc( http_glProgramUniform2fvEXT, layer );
  tbl.glProgramUniform2iEXT = MakeRegalProc( http_glProgramUniform2iEXT, layer );
  tbl.glProgramUniform2ivEXT = MakeRegalProc( http_glProgramUniform2ivEXT, layer );
  tbl.glProgramUniform2uiEXT = MakeRegalProc( http_glProgramUniform2uiEXT, layer );
  tbl.glProgramUniform2uivEXT = MakeRegalProc( http_glProgramUniform2uivEXT, layer );
  tbl.glProgramUniform3dEXT = MakeRegalProc( http_glProgramUniform3dEXT, layer );
  tbl.glProgramUniform3dvEXT = MakeRegalProc( http_glProgramUniform3dvEXT, layer );
  tbl.glProgramUniform3fEXT = MakeRegalProc( http_glProgramUniform3fEXT, layer );
  tbl.glProgramUniform3fvEXT = MakeRegalProc( http_glProgramUniform3fvEXT, layer );
  tbl.glProgramUniform3iEXT = MakeRegalProc( http_glProgramUniform3iEXT, layer );
  tbl.glProgramUniform3ivEXT = MakeRegalProc( http_glProgramUniform3ivEXT, layer );
  tbl.glProgramUniform3uiEXT = MakeRegalProc( http_glProgramUniform3uiEXT, layer );
  tbl.glProgramUniform3uivEXT = MakeRegalProc( http_glProgramUniform3uivEXT, layer );
  tbl.glProgramUniform4dEXT = MakeRegalProc( http_glProgramUniform4dEXT, layer );
  tbl.glProgramUniform4dvEXT = MakeRegalProc( http_glProgramUniform4dvEXT, layer );
  tbl.glProgramUniform4fEXT = MakeRegalProc( http_glProgramUniform4fEXT, layer );
  tbl.glProgramUniform4fvEXT = MakeRegalProc( http_glProgramUniform4fvEXT, layer );
  tbl.glProgramUniform4iEXT = MakeRegalProc( http_glProgramUniform4iEXT, layer );
  tbl.glProgramUniform4ivEXT = MakeRegalProc( http_glProgramUniform4ivEXT, layer );
  tbl.glProgramUniform4uiEXT = MakeRegalProc( http_glProgramUniform4uiEXT, layer );
  tbl.glProgramUniform4uivEXT = MakeRegalProc( http_glProgramUniform4uivEXT, layer );
  tbl.glProgramUniformMatrix2dvEXT = MakeRegalProc( http_glProgramUniformMatrix2dvEXT, layer );
  tbl.glProgramUniformMatrix2fvEXT = MakeRegalProc( http_glProgramUniformMatrix2fvEXT, layer );
  tbl.glProgramUniformMatrix2x3dvEXT = MakeRegalProc( http_glProgramUniformMatrix2x3dvEXT, layer );
  tbl.glProgramUniformMatrix2x3fvEXT = MakeRegalProc( http_glProgramUniformMatrix2x3fvEXT, layer );
  tbl.glProgramUniformMatrix2x4dvEXT = MakeRegalProc( http_glProgramUniformMatrix2x4dvEXT, layer );
  tbl.glProgramUniformMatrix2x4fvEXT = MakeRegalProc( http_glProgramUniformMatrix2x4fvEXT, layer );
  tbl.glProgramUniformMatrix3dvEXT = MakeRegalProc( http_glProgramUniformMatrix3dvEXT, layer );
  tbl.glProgramUniformMatrix3fvEXT = MakeRegalProc( http_glProgramUniformMatrix3fvEXT, layer );
  tbl.glProgramUniformMatrix3x2dvEXT = MakeRegalProc( http_glProgramUniformMatrix3x2dvEXT, layer );
  tbl.glProgramUniformMatrix3x2fvEXT = MakeRegalProc( http_glProgramUniformMatrix3x2fvEXT, layer );
  tbl.glProgramUniformMatrix3x4dvEXT = MakeRegalProc( http_glProgramUniformMatrix3x4dvEXT, layer );
  tbl.glProgramUniformMatrix3x4fvEXT = MakeRegalProc( http_glProgramUniformMatrix3x4fvEXT, layer );
  tbl.glProgramUniformMatrix4dvEXT = MakeRegalProc( http_glProgramUniformMatrix4dvEXT, layer );
  tbl.glProgramUniformMatrix4fvEXT = MakeRegalProc( http_glProgramUniformMatrix4fvEXT, layer );
  tbl.glProgramUniformMatrix4x2dvEXT = MakeRegalProc( http_glProgramUniformMatrix4x2dvEXT, layer );
  tbl.glProgramUniformMatrix4x2fvEXT = MakeRegalProc( http_glProgramUniformMatrix4x2fvEXT, layer );
  tbl.glProgramUniformMatrix4x3dvEXT = MakeRegalProc( http_glProgramUniformMatrix4x3dvEXT, layer );
  tbl.glProgramUniformMatrix4x3fvEXT = MakeRegalProc( http_glProgramUniformMatrix4x3fvEXT, layer );
  tbl.glPushClientAttribDefaultEXT = MakeRegalProc( http_glPushClientAttribDefaultEXT, layer );
  tbl.glTextureBufferEXT = MakeRegalProc( http_glTextureBufferEXT, layer );
  tbl.glTextureImage1DEXT = MakeRegalProc( http_glTextureImage1DEXT, layer );
  tbl.glTextureImage2DEXT = MakeRegalProc( http_glTextureImage2DEXT, layer );
  tbl.glTextureImage3DEXT = MakeRegalProc( http_glTextureImage3DEXT, layer );
  tbl.glTextureParameterIivEXT = MakeRegalProc( http_glTextureParameterIivEXT, layer );
  tbl.glTextureParameterIuivEXT = MakeRegalProc( http_glTextureParameterIuivEXT, layer );
  tbl.glTextureParameterfEXT = MakeRegalProc( http_glTextureParameterfEXT, layer );
  tbl.glTextureParameterfvEXT = MakeRegalProc( http_glTextureParameterfvEXT, layer );
  tbl.glTextureParameteriEXT = MakeRegalProc( http_glTextureParameteriEXT, layer );
  tbl.glTextureParameterivEXT = MakeRegalProc( http_glTextureParameterivEXT, layer );
  tbl.glTextureRenderbufferEXT = MakeRegalProc( http_glTextureRenderbufferEXT, layer );
  tbl.glTextureSubImage1DEXT = MakeRegalProc( http_glTextureSubImage1DEXT, layer );
  tbl.glTextureSubImage2DEXT = MakeRegalProc( http_glTextureSubImage2DEXT, layer );
  tbl.glTextureSubImage3DEXT = MakeRegalProc( http_glTextureSubImage3DEXT, layer );
  tbl.glUnmapNamedBufferEXT = MakeRegalProc( http_glUnmapNamedBufferEXT, layer );
  tbl.glVertexArrayColorOffsetEXT = MakeRegalProc( http_glVertexArrayColorOffsetEXT, layer );
  tbl.glVertexArrayEdgeFlagOffsetEXT = MakeRegalProc( http_glVertexArrayEdgeFlagOffsetEXT, layer );
  tbl.glVertexArrayFogCoordOffsetEXT = MakeRegalProc( http_glVertexArrayFogCoordOffsetEXT, layer );
  tbl.glVertexArrayIndexOffsetEXT = MakeRegalProc( http_glVertexArrayIndexOffsetEXT, layer );
  tbl.glVertexArrayMultiTexCoordOffsetEXT = MakeRegalProc( http_glVertexArrayMultiTexCoordOffsetEXT, layer );
  tbl.glVertexArrayNormalOffsetEXT = MakeRegalProc( http_glVertexArrayNormalOffsetEXT, layer );
  tbl.glVertexArraySecondaryColorOffsetEXT = MakeRegalProc( http_glVertexArraySecondaryColorOffsetEXT, layer );
  tbl.glVertexArrayTexCoordOffsetEXT = MakeRegalProc( http_glVertexArrayTexCoordOffsetEXT, layer );
  tbl.glVertexArrayVertexAttribIOffsetEXT = MakeRegalProc( http_glVertexArrayVertexAttribIOffsetEXT, layer );
  tbl.glVertexArrayVertexAttribOffsetEXT = MakeRegalProc( http_glVertexArrayVertexAttribOffsetEXT, layer );
  tbl.glVertexArrayVertexOffsetEXT = MakeRegalProc( http_glVertexArrayVertexOffsetEXT, layer );

  // GL_EXT_discard_framebuffer

  tbl.glDiscardFramebufferEXT = MakeRegalProc( http_glDiscardFramebufferEXT, layer );

  // GL_EXT_disjoint_timer_query

  tbl.glGetQueryObjectivEXT = MakeRegalProc( http_glGetQueryObjectivEXT, layer );
  tbl.glQueryCounterEXT = MakeRegalProc( http_glQueryCounterEXT, layer );

  // GL_EXT_draw_buffers2

  tbl.glColorMaskIndexedEXT = MakeRegalProc( http_glColorMaskIndexedEXT, layer );
  tbl.glDisableIndexedEXT = MakeRegalProc( http_glDisableIndexedEXT, layer );
  tbl.glEnableIndexedEXT = MakeRegalProc( http_glEnableIndexedEXT, layer );
  tbl.glGetBooleanIndexedvEXT = MakeRegalProc( http_glGetBooleanIndexedvEXT, layer );
  tbl.glGetIntegerIndexedvEXT = MakeRegalProc( http_glGetIntegerIndexedvEXT, layer );
  tbl.glIsEnabledIndexedEXT = MakeRegalProc( http_glIsEnabledIndexedEXT, layer );

  // GL_EXT_draw_instanced

  tbl.glDrawArraysInstancedEXT = MakeRegalProc( http_glDrawArraysInstancedEXT, layer );
  tbl.glDrawElementsInstancedEXT = MakeRegalProc( http_glDrawElementsInstancedEXT, layer );

  // GL_EXT_draw_range_elements

  tbl.glDrawRangeElementsEXT = MakeRegalProc( http_glDrawRangeElementsEXT, layer );

  // GL_EXT_fog_coord

  tbl.glFogCoordPointerEXT = MakeRegalProc( http_glFogCoordPointerEXT, layer );
  tbl.glFogCoorddEXT = MakeRegalProc( http_glFogCoorddEXT, layer );
  tbl.glFogCoorddvEXT = MakeRegalProc( http_glFogCoorddvEXT, layer );
  tbl.glFogCoordfEXT = MakeRegalProc( http_glFogCoordfEXT, layer );
  tbl.glFogCoordfvEXT = MakeRegalProc( http_glFogCoordfvEXT, layer );

  // GL_EXT_fragment_lighting

  tbl.glFragmentColorMaterialEXT = MakeRegalProc( http_glFragmentColorMaterialEXT, layer );
  tbl.glFragmentLightModelfEXT = MakeRegalProc( http_glFragmentLightModelfEXT, layer );
  tbl.glFragmentLightModelfvEXT = MakeRegalProc( http_glFragmentLightModelfvEXT, layer );
  tbl.glFragmentLightModeliEXT = MakeRegalProc( http_glFragmentLightModeliEXT, layer );
  tbl.glFragmentLightModelivEXT = MakeRegalProc( http_glFragmentLightModelivEXT, layer );
  tbl.glFragmentLightfEXT = MakeRegalProc( http_glFragmentLightfEXT, layer );
  tbl.glFragmentLightfvEXT = MakeRegalProc( http_glFragmentLightfvEXT, layer );
  tbl.glFragmentLightiEXT = MakeRegalProc( http_glFragmentLightiEXT, layer );
  tbl.glFragmentLightivEXT = MakeRegalProc( http_glFragmentLightivEXT, layer );
  tbl.glFragmentMaterialfEXT = MakeRegalProc( http_glFragmentMaterialfEXT, layer );
  tbl.glFragmentMaterialfvEXT = MakeRegalProc( http_glFragmentMaterialfvEXT, layer );
  tbl.glFragmentMaterialiEXT = MakeRegalProc( http_glFragmentMaterialiEXT, layer );
  tbl.glFragmentMaterialivEXT = MakeRegalProc( http_glFragmentMaterialivEXT, layer );
  tbl.glGetFragmentLightfvEXT = MakeRegalProc( http_glGetFragmentLightfvEXT, layer );
  tbl.glGetFragmentLightivEXT = MakeRegalProc( http_glGetFragmentLightivEXT, layer );
  tbl.glGetFragmentMaterialfvEXT = MakeRegalProc( http_glGetFragmentMaterialfvEXT, layer );
  tbl.glGetFragmentMaterialivEXT = MakeRegalProc( http_glGetFragmentMaterialivEXT, layer );
  tbl.glLightEnviEXT = MakeRegalProc( http_glLightEnviEXT, layer );

  // GL_EXT_framebuffer_blit

  tbl.glBlitFramebufferEXT = MakeRegalProc( http_glBlitFramebufferEXT, layer );

  // GL_EXT_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleEXT = MakeRegalProc( http_glRenderbufferStorageMultisampleEXT, layer );

  // GL_EXT_framebuffer_object

  tbl.glBindFramebufferEXT = MakeRegalProc( http_glBindFramebufferEXT, layer );
  tbl.glBindRenderbufferEXT = MakeRegalProc( http_glBindRenderbufferEXT, layer );
  tbl.glCheckFramebufferStatusEXT = MakeRegalProc( http_glCheckFramebufferStatusEXT, layer );
  tbl.glDeleteFramebuffersEXT = MakeRegalProc( http_glDeleteFramebuffersEXT, layer );
  tbl.glDeleteRenderbuffersEXT = MakeRegalProc( http_glDeleteRenderbuffersEXT, layer );
  tbl.glFramebufferRenderbufferEXT = MakeRegalProc( http_glFramebufferRenderbufferEXT, layer );
  tbl.glFramebufferTexture1DEXT = MakeRegalProc( http_glFramebufferTexture1DEXT, layer );
  tbl.glFramebufferTexture2DEXT = MakeRegalProc( http_glFramebufferTexture2DEXT, layer );
  tbl.glFramebufferTexture3DEXT = MakeRegalProc( http_glFramebufferTexture3DEXT, layer );
  tbl.glGenFramebuffersEXT = MakeRegalProc( http_glGenFramebuffersEXT, layer );
  tbl.glGenRenderbuffersEXT = MakeRegalProc( http_glGenRenderbuffersEXT, layer );
  tbl.glGenerateMipmapEXT = MakeRegalProc( http_glGenerateMipmapEXT, layer );
  tbl.glGetFramebufferAttachmentParameterivEXT = MakeRegalProc( http_glGetFramebufferAttachmentParameterivEXT, layer );
  tbl.glGetRenderbufferParameterivEXT = MakeRegalProc( http_glGetRenderbufferParameterivEXT, layer );
  tbl.glIsFramebufferEXT = MakeRegalProc( http_glIsFramebufferEXT, layer );
  tbl.glIsRenderbufferEXT = MakeRegalProc( http_glIsRenderbufferEXT, layer );
  tbl.glRenderbufferStorageEXT = MakeRegalProc( http_glRenderbufferStorageEXT, layer );

  // GL_EXT_geometry_shader4

  tbl.glFramebufferTextureEXT = MakeRegalProc( http_glFramebufferTextureEXT, layer );
  tbl.glFramebufferTextureFaceEXT = MakeRegalProc( http_glFramebufferTextureFaceEXT, layer );
  tbl.glProgramParameteriEXT = MakeRegalProc( http_glProgramParameteriEXT, layer );

  // GL_EXT_gpu_program_parameters

  tbl.glProgramEnvParameters4fvEXT = MakeRegalProc( http_glProgramEnvParameters4fvEXT, layer );
  tbl.glProgramLocalParameters4fvEXT = MakeRegalProc( http_glProgramLocalParameters4fvEXT, layer );

  // GL_EXT_gpu_shader4

  tbl.glBindFragDataLocationEXT = MakeRegalProc( http_glBindFragDataLocationEXT, layer );
  tbl.glGetFragDataLocationEXT = MakeRegalProc( http_glGetFragDataLocationEXT, layer );
  tbl.glGetUniformuivEXT = MakeRegalProc( http_glGetUniformuivEXT, layer );
  tbl.glGetVertexAttribIivEXT = MakeRegalProc( http_glGetVertexAttribIivEXT, layer );
  tbl.glGetVertexAttribIuivEXT = MakeRegalProc( http_glGetVertexAttribIuivEXT, layer );
  tbl.glUniform1uiEXT = MakeRegalProc( http_glUniform1uiEXT, layer );
  tbl.glUniform1uivEXT = MakeRegalProc( http_glUniform1uivEXT, layer );
  tbl.glUniform2uiEXT = MakeRegalProc( http_glUniform2uiEXT, layer );
  tbl.glUniform2uivEXT = MakeRegalProc( http_glUniform2uivEXT, layer );
  tbl.glUniform3uiEXT = MakeRegalProc( http_glUniform3uiEXT, layer );
  tbl.glUniform3uivEXT = MakeRegalProc( http_glUniform3uivEXT, layer );
  tbl.glUniform4uiEXT = MakeRegalProc( http_glUniform4uiEXT, layer );
  tbl.glUniform4uivEXT = MakeRegalProc( http_glUniform4uivEXT, layer );
  tbl.glVertexAttribI1iEXT = MakeRegalProc( http_glVertexAttribI1iEXT, layer );
  tbl.glVertexAttribI1ivEXT = MakeRegalProc( http_glVertexAttribI1ivEXT, layer );
  tbl.glVertexAttribI1uiEXT = MakeRegalProc( http_glVertexAttribI1uiEXT, layer );
  tbl.glVertexAttribI1uivEXT = MakeRegalProc( http_glVertexAttribI1uivEXT, layer );
  tbl.glVertexAttribI2iEXT = MakeRegalProc( http_glVertexAttribI2iEXT, layer );
  tbl.glVertexAttribI2ivEXT = MakeRegalProc( http_glVertexAttribI2ivEXT, layer );
  tbl.glVertexAttribI2uiEXT = MakeRegalProc( http_glVertexAttribI2uiEXT, layer );
  tbl.glVertexAttribI2uivEXT = MakeRegalProc( http_glVertexAttribI2uivEXT, layer );
  tbl.glVertexAttribI3iEXT = MakeRegalProc( http_glVertexAttribI3iEXT, layer );
  tbl.glVertexAttribI3ivEXT = MakeRegalProc( http_glVertexAttribI3ivEXT, layer );
  tbl.glVertexAttribI3uiEXT = MakeRegalProc( http_glVertexAttribI3uiEXT, layer );
  tbl.glVertexAttribI3uivEXT = MakeRegalProc( http_glVertexAttribI3uivEXT, layer );
  tbl.glVertexAttribI4bvEXT = MakeRegalProc( http_glVertexAttribI4bvEXT, layer );
  tbl.glVertexAttribI4iEXT = MakeRegalProc( http_glVertexAttribI4iEXT, layer );
  tbl.glVertexAttribI4ivEXT = MakeRegalProc( http_glVertexAttribI4ivEXT, layer );
  tbl.glVertexAttribI4svEXT = MakeRegalProc( http_glVertexAttribI4svEXT, layer );
  tbl.glVertexAttribI4ubvEXT = MakeRegalProc( http_glVertexAttribI4ubvEXT, layer );
  tbl.glVertexAttribI4uiEXT = MakeRegalProc( http_glVertexAttribI4uiEXT, layer );
  tbl.glVertexAttribI4uivEXT = MakeRegalProc( http_glVertexAttribI4uivEXT, layer );
  tbl.glVertexAttribI4usvEXT = MakeRegalProc( http_glVertexAttribI4usvEXT, layer );
  tbl.glVertexAttribIPointerEXT = MakeRegalProc( http_glVertexAttribIPointerEXT, layer );

  // GL_EXT_histogram

  tbl.glGetHistogramEXT = MakeRegalProc( http_glGetHistogramEXT, layer );
  tbl.glGetHistogramParameterfvEXT = MakeRegalProc( http_glGetHistogramParameterfvEXT, layer );
  tbl.glGetHistogramParameterivEXT = MakeRegalProc( http_glGetHistogramParameterivEXT, layer );
  tbl.glGetMinmaxEXT = MakeRegalProc( http_glGetMinmaxEXT, layer );
  tbl.glGetMinmaxParameterfvEXT = MakeRegalProc( http_glGetMinmaxParameterfvEXT, layer );
  tbl.glGetMinmaxParameterivEXT = MakeRegalProc( http_glGetMinmaxParameterivEXT, layer );
  tbl.glHistogramEXT = MakeRegalProc( http_glHistogramEXT, layer );
  tbl.glMinmaxEXT = MakeRegalProc( http_glMinmaxEXT, layer );
  tbl.glResetHistogramEXT = MakeRegalProc( http_glResetHistogramEXT, layer );
  tbl.glResetMinmaxEXT = MakeRegalProc( http_glResetMinmaxEXT, layer );

  // GL_EXT_index_func

  tbl.glIndexFuncEXT = MakeRegalProc( http_glIndexFuncEXT, layer );

  // GL_EXT_index_material

  tbl.glIndexMaterialEXT = MakeRegalProc( http_glIndexMaterialEXT, layer );

  // GL_EXT_light_texture

  tbl.glApplyTextureEXT = MakeRegalProc( http_glApplyTextureEXT, layer );
  tbl.glTextureLightEXT = MakeRegalProc( http_glTextureLightEXT, layer );
  tbl.glTextureMaterialEXT = MakeRegalProc( http_glTextureMaterialEXT, layer );

  // GL_EXT_map_buffer_range

  tbl.glFlushMappedBufferRangeEXT = MakeRegalProc( http_glFlushMappedBufferRangeEXT, layer );
  tbl.glMapBufferRangeEXT = MakeRegalProc( http_glMapBufferRangeEXT, layer );

  // GL_EXT_multi_draw_arrays

  tbl.glMultiDrawArraysEXT = MakeRegalProc( http_glMultiDrawArraysEXT, layer );
  tbl.glMultiDrawElementsEXT = MakeRegalProc( http_glMultiDrawElementsEXT, layer );

  // GL_EXT_multisample

  tbl.glSampleMaskEXT = MakeRegalProc( http_glSampleMaskEXT, layer );
  tbl.glSamplePatternEXT = MakeRegalProc( http_glSamplePatternEXT, layer );

  // GL_EXT_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleEXT = MakeRegalProc( http_glFramebufferTexture2DMultisampleEXT, layer );

  // GL_EXT_multiview_draw_buffers

  tbl.glDrawBuffersIndexedEXT = MakeRegalProc( http_glDrawBuffersIndexedEXT, layer );
  tbl.glGetIntegeri_vEXT = MakeRegalProc( http_glGetIntegeri_vEXT, layer );
  tbl.glReadBufferIndexedEXT = MakeRegalProc( http_glReadBufferIndexedEXT, layer );

  // GL_EXT_occlusion_query_boolean

  tbl.glBeginQueryEXT = MakeRegalProc( http_glBeginQueryEXT, layer );
  tbl.glDeleteQueriesEXT = MakeRegalProc( http_glDeleteQueriesEXT, layer );
  tbl.glEndQueryEXT = MakeRegalProc( http_glEndQueryEXT, layer );
  tbl.glGenQueriesEXT = MakeRegalProc( http_glGenQueriesEXT, layer );
  tbl.glGetQueryObjectuivEXT = MakeRegalProc( http_glGetQueryObjectuivEXT, layer );
  tbl.glGetQueryivEXT = MakeRegalProc( http_glGetQueryivEXT, layer );
  tbl.glIsQueryEXT = MakeRegalProc( http_glIsQueryEXT, layer );

  // GL_EXT_paletted_texture

  tbl.glColorTableEXT = MakeRegalProc( http_glColorTableEXT, layer );
  tbl.glGetColorTableEXT = MakeRegalProc( http_glGetColorTableEXT, layer );
  tbl.glGetColorTableParameterfvEXT = MakeRegalProc( http_glGetColorTableParameterfvEXT, layer );
  tbl.glGetColorTableParameterivEXT = MakeRegalProc( http_glGetColorTableParameterivEXT, layer );

  // GL_EXT_pixel_transform

  tbl.glGetPixelTransformParameterfvEXT = MakeRegalProc( http_glGetPixelTransformParameterfvEXT, layer );
  tbl.glGetPixelTransformParameterivEXT = MakeRegalProc( http_glGetPixelTransformParameterivEXT, layer );
  tbl.glPixelTransformParameterfEXT = MakeRegalProc( http_glPixelTransformParameterfEXT, layer );
  tbl.glPixelTransformParameterfvEXT = MakeRegalProc( http_glPixelTransformParameterfvEXT, layer );
  tbl.glPixelTransformParameteriEXT = MakeRegalProc( http_glPixelTransformParameteriEXT, layer );
  tbl.glPixelTransformParameterivEXT = MakeRegalProc( http_glPixelTransformParameterivEXT, layer );

  // GL_EXT_point_parameters

  tbl.glPointParameterfEXT = MakeRegalProc( http_glPointParameterfEXT, layer );
  tbl.glPointParameterfvEXT = MakeRegalProc( http_glPointParameterfvEXT, layer );

  // GL_EXT_polygon_offset

  tbl.glPolygonOffsetEXT = MakeRegalProc( http_glPolygonOffsetEXT, layer );

  // GL_EXT_provoking_vertex

  tbl.glProvokingVertexEXT = MakeRegalProc( http_glProvokingVertexEXT, layer );

  // GL_EXT_robustness

  tbl.glGetnUniformfvEXT = MakeRegalProc( http_glGetnUniformfvEXT, layer );
  tbl.glGetnUniformivEXT = MakeRegalProc( http_glGetnUniformivEXT, layer );
  tbl.glReadnPixelsEXT = MakeRegalProc( http_glReadnPixelsEXT, layer );

  // GL_EXT_scene_marker

  tbl.glBeginSceneEXT = MakeRegalProc( http_glBeginSceneEXT, layer );
  tbl.glEndSceneEXT = MakeRegalProc( http_glEndSceneEXT, layer );

  // GL_EXT_secondary_color

  tbl.glSecondaryColor3bEXT = MakeRegalProc( http_glSecondaryColor3bEXT, layer );
  tbl.glSecondaryColor3bvEXT = MakeRegalProc( http_glSecondaryColor3bvEXT, layer );
  tbl.glSecondaryColor3dEXT = MakeRegalProc( http_glSecondaryColor3dEXT, layer );
  tbl.glSecondaryColor3dvEXT = MakeRegalProc( http_glSecondaryColor3dvEXT, layer );
  tbl.glSecondaryColor3fEXT = MakeRegalProc( http_glSecondaryColor3fEXT, layer );
  tbl.glSecondaryColor3fvEXT = MakeRegalProc( http_glSecondaryColor3fvEXT, layer );
  tbl.glSecondaryColor3iEXT = MakeRegalProc( http_glSecondaryColor3iEXT, layer );
  tbl.glSecondaryColor3ivEXT = MakeRegalProc( http_glSecondaryColor3ivEXT, layer );
  tbl.glSecondaryColor3sEXT = MakeRegalProc( http_glSecondaryColor3sEXT, layer );
  tbl.glSecondaryColor3svEXT = MakeRegalProc( http_glSecondaryColor3svEXT, layer );
  tbl.glSecondaryColor3ubEXT = MakeRegalProc( http_glSecondaryColor3ubEXT, layer );
  tbl.glSecondaryColor3ubvEXT = MakeRegalProc( http_glSecondaryColor3ubvEXT, layer );
  tbl.glSecondaryColor3uiEXT = MakeRegalProc( http_glSecondaryColor3uiEXT, layer );
  tbl.glSecondaryColor3uivEXT = MakeRegalProc( http_glSecondaryColor3uivEXT, layer );
  tbl.glSecondaryColor3usEXT = MakeRegalProc( http_glSecondaryColor3usEXT, layer );
  tbl.glSecondaryColor3usvEXT = MakeRegalProc( http_glSecondaryColor3usvEXT, layer );
  tbl.glSecondaryColorPointerEXT = MakeRegalProc( http_glSecondaryColorPointerEXT, layer );

  // GL_EXT_separate_shader_objects

  tbl.glActiveProgramEXT = MakeRegalProc( http_glActiveProgramEXT, layer );
  tbl.glCreateShaderProgramEXT = MakeRegalProc( http_glCreateShaderProgramEXT, layer );
  tbl.glUseShaderProgramEXT = MakeRegalProc( http_glUseShaderProgramEXT, layer );

  // GL_EXT_shader_image_load_store

  tbl.glBindImageTextureEXT = MakeRegalProc( http_glBindImageTextureEXT, layer );
  tbl.glMemoryBarrierEXT = MakeRegalProc( http_glMemoryBarrierEXT, layer );

  // GL_EXT_stencil_clear_tag

  tbl.glStencilClearTagEXT = MakeRegalProc( http_glStencilClearTagEXT, layer );

  // GL_EXT_stencil_two_side

  tbl.glActiveStencilFaceEXT = MakeRegalProc( http_glActiveStencilFaceEXT, layer );

  // GL_EXT_subtexture

  tbl.glTexSubImage1DEXT = MakeRegalProc( http_glTexSubImage1DEXT, layer );
  tbl.glTexSubImage2DEXT = MakeRegalProc( http_glTexSubImage2DEXT, layer );
  tbl.glTexSubImage3DEXT = MakeRegalProc( http_glTexSubImage3DEXT, layer );

  // GL_EXT_texture3D

  tbl.glTexImage3DEXT = MakeRegalProc( http_glTexImage3DEXT, layer );

  // GL_EXT_texture_array

  tbl.glFramebufferTextureLayerEXT = MakeRegalProc( http_glFramebufferTextureLayerEXT, layer );

  // GL_EXT_texture_buffer_object

  tbl.glTexBufferEXT = MakeRegalProc( http_glTexBufferEXT, layer );

  // GL_EXT_texture_integer

  tbl.glClearColorIiEXT = MakeRegalProc( http_glClearColorIiEXT, layer );
  tbl.glClearColorIuiEXT = MakeRegalProc( http_glClearColorIuiEXT, layer );
  tbl.glGetTexParameterIivEXT = MakeRegalProc( http_glGetTexParameterIivEXT, layer );
  tbl.glGetTexParameterIuivEXT = MakeRegalProc( http_glGetTexParameterIuivEXT, layer );
  tbl.glTexParameterIivEXT = MakeRegalProc( http_glTexParameterIivEXT, layer );
  tbl.glTexParameterIuivEXT = MakeRegalProc( http_glTexParameterIuivEXT, layer );

  // GL_EXT_texture_object

  tbl.glAreTexturesResidentEXT = MakeRegalProc( http_glAreTexturesResidentEXT, layer );
  tbl.glBindTextureEXT = MakeRegalProc( http_glBindTextureEXT, layer );
  tbl.glDeleteTexturesEXT = MakeRegalProc( http_glDeleteTexturesEXT, layer );
  tbl.glGenTexturesEXT = MakeRegalProc( http_glGenTexturesEXT, layer );
  tbl.glIsTextureEXT = MakeRegalProc( http_glIsTextureEXT, layer );
  tbl.glPrioritizeTexturesEXT = MakeRegalProc( http_glPrioritizeTexturesEXT, layer );

  // GL_EXT_texture_perturb_normal

  tbl.glTextureNormalEXT = MakeRegalProc( http_glTextureNormalEXT, layer );

  // GL_EXT_texture_storage

  tbl.glTexStorage1DEXT = MakeRegalProc( http_glTexStorage1DEXT, layer );
  tbl.glTexStorage2DEXT = MakeRegalProc( http_glTexStorage2DEXT, layer );
  tbl.glTexStorage3DEXT = MakeRegalProc( http_glTexStorage3DEXT, layer );

  // GL_EXT_timer_query

  tbl.glGetQueryObjecti64vEXT = MakeRegalProc( http_glGetQueryObjecti64vEXT, layer );
  tbl.glGetQueryObjectui64vEXT = MakeRegalProc( http_glGetQueryObjectui64vEXT, layer );

  // GL_EXT_transform_feedback

  tbl.glBeginTransformFeedbackEXT = MakeRegalProc( http_glBeginTransformFeedbackEXT, layer );
  tbl.glBindBufferBaseEXT = MakeRegalProc( http_glBindBufferBaseEXT, layer );
  tbl.glBindBufferOffsetEXT = MakeRegalProc( http_glBindBufferOffsetEXT, layer );
  tbl.glBindBufferRangeEXT = MakeRegalProc( http_glBindBufferRangeEXT, layer );
  tbl.glEndTransformFeedbackEXT = MakeRegalProc( http_glEndTransformFeedbackEXT, layer );
  tbl.glGetTransformFeedbackVaryingEXT = MakeRegalProc( http_glGetTransformFeedbackVaryingEXT, layer );
  tbl.glTransformFeedbackVaryingsEXT = MakeRegalProc( http_glTransformFeedbackVaryingsEXT, layer );

  // GL_EXT_vertex_array

  tbl.glArrayElementEXT = MakeRegalProc( http_glArrayElementEXT, layer );
  tbl.glColorPointerEXT = MakeRegalProc( http_glColorPointerEXT, layer );
  tbl.glDrawArraysEXT = MakeRegalProc( http_glDrawArraysEXT, layer );
  tbl.glEdgeFlagPointerEXT = MakeRegalProc( http_glEdgeFlagPointerEXT, layer );
  tbl.glGetPointervEXT = MakeRegalProc( http_glGetPointervEXT, layer );
  tbl.glIndexPointerEXT = MakeRegalProc( http_glIndexPointerEXT, layer );
  tbl.glNormalPointerEXT = MakeRegalProc( http_glNormalPointerEXT, layer );
  tbl.glTexCoordPointerEXT = MakeRegalProc( http_glTexCoordPointerEXT, layer );
  tbl.glVertexPointerEXT = MakeRegalProc( http_glVertexPointerEXT, layer );

  // GL_EXT_vertex_attrib_64bit

  tbl.glGetVertexAttribLdvEXT = MakeRegalProc( http_glGetVertexAttribLdvEXT, layer );
  tbl.glVertexArrayVertexAttribLOffsetEXT = MakeRegalProc( http_glVertexArrayVertexAttribLOffsetEXT, layer );
  tbl.glVertexAttribL1dEXT = MakeRegalProc( http_glVertexAttribL1dEXT, layer );
  tbl.glVertexAttribL1dvEXT = MakeRegalProc( http_glVertexAttribL1dvEXT, layer );
  tbl.glVertexAttribL2dEXT = MakeRegalProc( http_glVertexAttribL2dEXT, layer );
  tbl.glVertexAttribL2dvEXT = MakeRegalProc( http_glVertexAttribL2dvEXT, layer );
  tbl.glVertexAttribL3dEXT = MakeRegalProc( http_glVertexAttribL3dEXT, layer );
  tbl.glVertexAttribL3dvEXT = MakeRegalProc( http_glVertexAttribL3dvEXT, layer );
  tbl.glVertexAttribL4dEXT = MakeRegalProc( http_glVertexAttribL4dEXT, layer );
  tbl.glVertexAttribL4dvEXT = MakeRegalProc( http_glVertexAttribL4dvEXT, layer );
  tbl.glVertexAttribLPointerEXT = MakeRegalProc( http_glVertexAttribLPointerEXT, layer );

  // GL_EXT_vertex_shader

  tbl.glBeginVertexShaderEXT = MakeRegalProc( http_glBeginVertexShaderEXT, layer );
  tbl.glBindLightParameterEXT = MakeRegalProc( http_glBindLightParameterEXT, layer );
  tbl.glBindMaterialParameterEXT = MakeRegalProc( http_glBindMaterialParameterEXT, layer );
  tbl.glBindParameterEXT = MakeRegalProc( http_glBindParameterEXT, layer );
  tbl.glBindTexGenParameterEXT = MakeRegalProc( http_glBindTexGenParameterEXT, layer );
  tbl.glBindTextureUnitParameterEXT = MakeRegalProc( http_glBindTextureUnitParameterEXT, layer );
  tbl.glBindVertexShaderEXT = MakeRegalProc( http_glBindVertexShaderEXT, layer );
  tbl.glDeleteVertexShaderEXT = MakeRegalProc( http_glDeleteVertexShaderEXT, layer );
  tbl.glDisableVariantClientStateEXT = MakeRegalProc( http_glDisableVariantClientStateEXT, layer );
  tbl.glEnableVariantClientStateEXT = MakeRegalProc( http_glEnableVariantClientStateEXT, layer );
  tbl.glEndVertexShaderEXT = MakeRegalProc( http_glEndVertexShaderEXT, layer );
  tbl.glExtractComponentEXT = MakeRegalProc( http_glExtractComponentEXT, layer );
  tbl.glGenSymbolsEXT = MakeRegalProc( http_glGenSymbolsEXT, layer );
  tbl.glGenVertexShadersEXT = MakeRegalProc( http_glGenVertexShadersEXT, layer );
  tbl.glGetInvariantBooleanvEXT = MakeRegalProc( http_glGetInvariantBooleanvEXT, layer );
  tbl.glGetInvariantFloatvEXT = MakeRegalProc( http_glGetInvariantFloatvEXT, layer );
  tbl.glGetInvariantIntegervEXT = MakeRegalProc( http_glGetInvariantIntegervEXT, layer );
  tbl.glGetLocalConstantBooleanvEXT = MakeRegalProc( http_glGetLocalConstantBooleanvEXT, layer );
  tbl.glGetLocalConstantFloatvEXT = MakeRegalProc( http_glGetLocalConstantFloatvEXT, layer );
  tbl.glGetLocalConstantIntegervEXT = MakeRegalProc( http_glGetLocalConstantIntegervEXT, layer );
  tbl.glGetVariantBooleanvEXT = MakeRegalProc( http_glGetVariantBooleanvEXT, layer );
  tbl.glGetVariantFloatvEXT = MakeRegalProc( http_glGetVariantFloatvEXT, layer );
  tbl.glGetVariantIntegervEXT = MakeRegalProc( http_glGetVariantIntegervEXT, layer );
  tbl.glGetVariantPointervEXT = MakeRegalProc( http_glGetVariantPointervEXT, layer );
  tbl.glInsertComponentEXT = MakeRegalProc( http_glInsertComponentEXT, layer );
  tbl.glIsVariantEnabledEXT = MakeRegalProc( http_glIsVariantEnabledEXT, layer );
  tbl.glSetInvariantEXT = MakeRegalProc( http_glSetInvariantEXT, layer );
  tbl.glSetLocalConstantEXT = MakeRegalProc( http_glSetLocalConstantEXT, layer );
  tbl.glShaderOp1EXT = MakeRegalProc( http_glShaderOp1EXT, layer );
  tbl.glShaderOp2EXT = MakeRegalProc( http_glShaderOp2EXT, layer );
  tbl.glShaderOp3EXT = MakeRegalProc( http_glShaderOp3EXT, layer );
  tbl.glSwizzleEXT = MakeRegalProc( http_glSwizzleEXT, layer );
  tbl.glVariantPointerEXT = MakeRegalProc( http_glVariantPointerEXT, layer );
  tbl.glVariantbvEXT = MakeRegalProc( http_glVariantbvEXT, layer );
  tbl.glVariantdvEXT = MakeRegalProc( http_glVariantdvEXT, layer );
  tbl.glVariantfvEXT = MakeRegalProc( http_glVariantfvEXT, layer );
  tbl.glVariantivEXT = MakeRegalProc( http_glVariantivEXT, layer );
  tbl.glVariantsvEXT = MakeRegalProc( http_glVariantsvEXT, layer );
  tbl.glVariantubvEXT = MakeRegalProc( http_glVariantubvEXT, layer );
  tbl.glVariantuivEXT = MakeRegalProc( http_glVariantuivEXT, layer );
  tbl.glVariantusvEXT = MakeRegalProc( http_glVariantusvEXT, layer );
  tbl.glWriteMaskEXT = MakeRegalProc( http_glWriteMaskEXT, layer );

  // GL_EXT_vertex_weighting

  tbl.glVertexWeightPointerEXT = MakeRegalProc( http_glVertexWeightPointerEXT, layer );
  tbl.glVertexWeightfEXT = MakeRegalProc( http_glVertexWeightfEXT, layer );
  tbl.glVertexWeightfvEXT = MakeRegalProc( http_glVertexWeightfvEXT, layer );

  // GL_EXT_x11_sync_object

  tbl.glImportSyncEXT = MakeRegalProc( http_glImportSyncEXT, layer );

  // GL_GREMEDY_frame_terminator

  tbl.glFrameTerminatorGREMEDY = MakeRegalProc( http_glFrameTerminatorGREMEDY, layer );

  // GL_GREMEDY_string_marker

  tbl.glStringMarkerGREMEDY = MakeRegalProc( http_glStringMarkerGREMEDY, layer );

  // GL_HP_image_transform

  tbl.glGetImageTransformParameterfvHP = MakeRegalProc( http_glGetImageTransformParameterfvHP, layer );
  tbl.glGetImageTransformParameterivHP = MakeRegalProc( http_glGetImageTransformParameterivHP, layer );
  tbl.glImageTransformParameterfHP = MakeRegalProc( http_glImageTransformParameterfHP, layer );
  tbl.glImageTransformParameterfvHP = MakeRegalProc( http_glImageTransformParameterfvHP, layer );
  tbl.glImageTransformParameteriHP = MakeRegalProc( http_glImageTransformParameteriHP, layer );
  tbl.glImageTransformParameterivHP = MakeRegalProc( http_glImageTransformParameterivHP, layer );

  // GL_IBM_multimode_draw_arrays

  tbl.glMultiModeDrawArraysIBM = MakeRegalProc( http_glMultiModeDrawArraysIBM, layer );
  tbl.glMultiModeDrawElementsIBM = MakeRegalProc( http_glMultiModeDrawElementsIBM, layer );

  // GL_IBM_vertex_array_lists

  tbl.glColorPointerListIBM = MakeRegalProc( http_glColorPointerListIBM, layer );
  tbl.glEdgeFlagPointerListIBM = MakeRegalProc( http_glEdgeFlagPointerListIBM, layer );
  tbl.glFogCoordPointerListIBM = MakeRegalProc( http_glFogCoordPointerListIBM, layer );
  tbl.glIndexPointerListIBM = MakeRegalProc( http_glIndexPointerListIBM, layer );
  tbl.glNormalPointerListIBM = MakeRegalProc( http_glNormalPointerListIBM, layer );
  tbl.glSecondaryColorPointerListIBM = MakeRegalProc( http_glSecondaryColorPointerListIBM, layer );
  tbl.glTexCoordPointerListIBM = MakeRegalProc( http_glTexCoordPointerListIBM, layer );
  tbl.glVertexPointerListIBM = MakeRegalProc( http_glVertexPointerListIBM, layer );

  // GL_IMG_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleIMG = MakeRegalProc( http_glFramebufferTexture2DMultisampleIMG, layer );
  tbl.glRenderbufferStorageMultisampleIMG = MakeRegalProc( http_glRenderbufferStorageMultisampleIMG, layer );

  // GL_INGR_blend_func_separate

  tbl.glBlendFuncSeparateINGR = MakeRegalProc( http_glBlendFuncSeparateINGR, layer );

  // GL_INTEL_map_texture

  tbl.glMapTexture2DINTEL = MakeRegalProc( http_glMapTexture2DINTEL, layer );
  tbl.glSyncTextureINTEL = MakeRegalProc( http_glSyncTextureINTEL, layer );
  tbl.glUnmapTexture2DINTEL = MakeRegalProc( http_glUnmapTexture2DINTEL, layer );

  // GL_INTEL_parallel_arrays

  tbl.glColorPointervINTEL = MakeRegalProc( http_glColorPointervINTEL, layer );
  tbl.glNormalPointervINTEL = MakeRegalProc( http_glNormalPointervINTEL, layer );
  tbl.glTexCoordPointervINTEL = MakeRegalProc( http_glTexCoordPointervINTEL, layer );
  tbl.glVertexPointervINTEL = MakeRegalProc( http_glVertexPointervINTEL, layer );

  // GL_INTEL_texture_scissor

  tbl.glTexScissorFuncINTEL = MakeRegalProc( http_glTexScissorFuncINTEL, layer );
  tbl.glTexScissorINTEL = MakeRegalProc( http_glTexScissorINTEL, layer );

  // GL_KHR_debug

  tbl.glDebugMessageCallback = MakeRegalProc( http_glDebugMessageCallback, layer );
  tbl.glDebugMessageControl = MakeRegalProc( http_glDebugMessageControl, layer );
  tbl.glDebugMessageInsert = MakeRegalProc( http_glDebugMessageInsert, layer );
  tbl.glGetDebugMessageLog = MakeRegalProc( http_glGetDebugMessageLog, layer );
  tbl.glGetObjectLabel = MakeRegalProc( http_glGetObjectLabel, layer );
  tbl.glGetObjectPtrLabel = MakeRegalProc( http_glGetObjectPtrLabel, layer );
  tbl.glObjectLabel = MakeRegalProc( http_glObjectLabel, layer );
  tbl.glObjectPtrLabel = MakeRegalProc( http_glObjectPtrLabel, layer );
  tbl.glPopDebugGroup = MakeRegalProc( http_glPopDebugGroup, layer );
  tbl.glPushDebugGroup = MakeRegalProc( http_glPushDebugGroup, layer );

  // GL_KTX_buffer_region

  tbl.glBufferRegionEnabled = MakeRegalProc( http_glBufferRegionEnabled, layer );
  tbl.glDeleteBufferRegion = MakeRegalProc( http_glDeleteBufferRegion, layer );
  tbl.glDrawBufferRegion = MakeRegalProc( http_glDrawBufferRegion, layer );
  tbl.glNewBufferRegion = MakeRegalProc( http_glNewBufferRegion, layer );
  tbl.glReadBufferRegion = MakeRegalProc( http_glReadBufferRegion, layer );

  // GL_MESA_resize_buffers

  tbl.glResizeBuffersMESA = MakeRegalProc( http_glResizeBuffersMESA, layer );

  // GL_MESA_window_pos

  tbl.glWindowPos2dMESA = MakeRegalProc( http_glWindowPos2dMESA, layer );
  tbl.glWindowPos2dvMESA = MakeRegalProc( http_glWindowPos2dvMESA, layer );
  tbl.glWindowPos2fMESA = MakeRegalProc( http_glWindowPos2fMESA, layer );
  tbl.glWindowPos2fvMESA = MakeRegalProc( http_glWindowPos2fvMESA, layer );
  tbl.glWindowPos2iMESA = MakeRegalProc( http_glWindowPos2iMESA, layer );
  tbl.glWindowPos2ivMESA = MakeRegalProc( http_glWindowPos2ivMESA, layer );
  tbl.glWindowPos2sMESA = MakeRegalProc( http_glWindowPos2sMESA, layer );
  tbl.glWindowPos2svMESA = MakeRegalProc( http_glWindowPos2svMESA, layer );
  tbl.glWindowPos3dMESA = MakeRegalProc( http_glWindowPos3dMESA, layer );
  tbl.glWindowPos3dvMESA = MakeRegalProc( http_glWindowPos3dvMESA, layer );
  tbl.glWindowPos3fMESA = MakeRegalProc( http_glWindowPos3fMESA, layer );
  tbl.glWindowPos3fvMESA = MakeRegalProc( http_glWindowPos3fvMESA, layer );
  tbl.glWindowPos3iMESA = MakeRegalProc( http_glWindowPos3iMESA, layer );
  tbl.glWindowPos3ivMESA = MakeRegalProc( http_glWindowPos3ivMESA, layer );
  tbl.glWindowPos3sMESA = MakeRegalProc( http_glWindowPos3sMESA, layer );
  tbl.glWindowPos3svMESA = MakeRegalProc( http_glWindowPos3svMESA, layer );
  tbl.glWindowPos4dMESA = MakeRegalProc( http_glWindowPos4dMESA, layer );
  tbl.glWindowPos4dvMESA = MakeRegalProc( http_glWindowPos4dvMESA, layer );
  tbl.glWindowPos4fMESA = MakeRegalProc( http_glWindowPos4fMESA, layer );
  tbl.glWindowPos4fvMESA = MakeRegalProc( http_glWindowPos4fvMESA, layer );
  tbl.glWindowPos4iMESA = MakeRegalProc( http_glWindowPos4iMESA, layer );
  tbl.glWindowPos4ivMESA = MakeRegalProc( http_glWindowPos4ivMESA, layer );
  tbl.glWindowPos4sMESA = MakeRegalProc( http_glWindowPos4sMESA, layer );
  tbl.glWindowPos4svMESA = MakeRegalProc( http_glWindowPos4svMESA, layer );

  // GL_NVX_conditional_render

  tbl.glBeginConditionalRenderNVX = MakeRegalProc( http_glBeginConditionalRenderNVX, layer );
  tbl.glEndConditionalRenderNVX = MakeRegalProc( http_glEndConditionalRenderNVX, layer );

  // GL_NV_bindless_texture

  tbl.glGetImageHandleNV = MakeRegalProc( http_glGetImageHandleNV, layer );
  tbl.glGetTextureHandleNV = MakeRegalProc( http_glGetTextureHandleNV, layer );
  tbl.glGetTextureSamplerHandleNV = MakeRegalProc( http_glGetTextureSamplerHandleNV, layer );
  tbl.glIsImageHandleResidentNV = MakeRegalProc( http_glIsImageHandleResidentNV, layer );
  tbl.glIsTextureHandleResidentNV = MakeRegalProc( http_glIsTextureHandleResidentNV, layer );
  tbl.glMakeImageHandleNonResidentNV = MakeRegalProc( http_glMakeImageHandleNonResidentNV, layer );
  tbl.glMakeImageHandleResidentNV = MakeRegalProc( http_glMakeImageHandleResidentNV, layer );
  tbl.glMakeTextureHandleNonResidentNV = MakeRegalProc( http_glMakeTextureHandleNonResidentNV, layer );
  tbl.glMakeTextureHandleResidentNV = MakeRegalProc( http_glMakeTextureHandleResidentNV, layer );
  tbl.glProgramUniformHandleui64NV = MakeRegalProc( http_glProgramUniformHandleui64NV, layer );
  tbl.glProgramUniformHandleui64vNV = MakeRegalProc( http_glProgramUniformHandleui64vNV, layer );
  tbl.glUniformHandleui64NV = MakeRegalProc( http_glUniformHandleui64NV, layer );
  tbl.glUniformHandleui64vNV = MakeRegalProc( http_glUniformHandleui64vNV, layer );

  // GL_NV_blend_equation_advanced

  tbl.glBlendBarrierNV = MakeRegalProc( http_glBlendBarrierNV, layer );
  tbl.glBlendParameteriNV = MakeRegalProc( http_glBlendParameteriNV, layer );

  // GL_NV_conditional_render

  tbl.glBeginConditionalRenderNV = MakeRegalProc( http_glBeginConditionalRenderNV, layer );
  tbl.glEndConditionalRenderNV = MakeRegalProc( http_glEndConditionalRenderNV, layer );

  // GL_NV_copy_buffer

  tbl.glCopyBufferSubDataNV = MakeRegalProc( http_glCopyBufferSubDataNV, layer );

  // GL_NV_copy_image

  tbl.glCopyImageSubDataNV = MakeRegalProc( http_glCopyImageSubDataNV, layer );

  // GL_NV_coverage_sample

  tbl.glCoverageMaskNV = MakeRegalProc( http_glCoverageMaskNV, layer );
  tbl.glCoverageOperationNV = MakeRegalProc( http_glCoverageOperationNV, layer );

  // GL_NV_depth_buffer_float

  tbl.glClearDepthdNV = MakeRegalProc( http_glClearDepthdNV, layer );
  tbl.glDepthBoundsdNV = MakeRegalProc( http_glDepthBoundsdNV, layer );
  tbl.glDepthRangedNV = MakeRegalProc( http_glDepthRangedNV, layer );

  // GL_NV_draw_buffers

  tbl.glDrawBuffersNV = MakeRegalProc( http_glDrawBuffersNV, layer );

  // GL_NV_draw_texture

  tbl.glDrawTextureNV = MakeRegalProc( http_glDrawTextureNV, layer );

  // GL_NV_evaluators

  tbl.glEvalMapsNV = MakeRegalProc( http_glEvalMapsNV, layer );
  tbl.glGetMapAttribParameterfvNV = MakeRegalProc( http_glGetMapAttribParameterfvNV, layer );
  tbl.glGetMapAttribParameterivNV = MakeRegalProc( http_glGetMapAttribParameterivNV, layer );
  tbl.glGetMapControlPointsNV = MakeRegalProc( http_glGetMapControlPointsNV, layer );
  tbl.glGetMapParameterfvNV = MakeRegalProc( http_glGetMapParameterfvNV, layer );
  tbl.glGetMapParameterivNV = MakeRegalProc( http_glGetMapParameterivNV, layer );
  tbl.glMapControlPointsNV = MakeRegalProc( http_glMapControlPointsNV, layer );
  tbl.glMapParameterfvNV = MakeRegalProc( http_glMapParameterfvNV, layer );
  tbl.glMapParameterivNV = MakeRegalProc( http_glMapParameterivNV, layer );

  // GL_NV_explicit_multisample

  tbl.glGetMultisamplefvNV = MakeRegalProc( http_glGetMultisamplefvNV, layer );
  tbl.glSampleMaskIndexedNV = MakeRegalProc( http_glSampleMaskIndexedNV, layer );
  tbl.glTexRenderbufferNV = MakeRegalProc( http_glTexRenderbufferNV, layer );

  // GL_NV_fence

  tbl.glDeleteFencesNV = MakeRegalProc( http_glDeleteFencesNV, layer );
  tbl.glFinishFenceNV = MakeRegalProc( http_glFinishFenceNV, layer );
  tbl.glGenFencesNV = MakeRegalProc( http_glGenFencesNV, layer );
  tbl.glGetFenceivNV = MakeRegalProc( http_glGetFenceivNV, layer );
  tbl.glIsFenceNV = MakeRegalProc( http_glIsFenceNV, layer );
  tbl.glSetFenceNV = MakeRegalProc( http_glSetFenceNV, layer );
  tbl.glTestFenceNV = MakeRegalProc( http_glTestFenceNV, layer );

  // GL_NV_fragment_program

  tbl.glGetProgramNamedParameterdvNV = MakeRegalProc( http_glGetProgramNamedParameterdvNV, layer );
  tbl.glGetProgramNamedParameterfvNV = MakeRegalProc( http_glGetProgramNamedParameterfvNV, layer );
  tbl.glProgramNamedParameter4dNV = MakeRegalProc( http_glProgramNamedParameter4dNV, layer );
  tbl.glProgramNamedParameter4dvNV = MakeRegalProc( http_glProgramNamedParameter4dvNV, layer );
  tbl.glProgramNamedParameter4fNV = MakeRegalProc( http_glProgramNamedParameter4fNV, layer );
  tbl.glProgramNamedParameter4fvNV = MakeRegalProc( http_glProgramNamedParameter4fvNV, layer );

  // GL_NV_framebuffer_blit

  tbl.glBlitFramebufferNV = MakeRegalProc( http_glBlitFramebufferNV, layer );

  // GL_NV_framebuffer_multisample_coverage

  tbl.glRenderbufferStorageMultisampleCoverageNV = MakeRegalProc( http_glRenderbufferStorageMultisampleCoverageNV, layer );

  // GL_NV_geometry_program4

  tbl.glProgramVertexLimitNV = MakeRegalProc( http_glProgramVertexLimitNV, layer );

  // GL_NV_gpu_program4

  tbl.glGetProgramEnvParameterIivNV = MakeRegalProc( http_glGetProgramEnvParameterIivNV, layer );
  tbl.glGetProgramEnvParameterIuivNV = MakeRegalProc( http_glGetProgramEnvParameterIuivNV, layer );
  tbl.glGetProgramLocalParameterIivNV = MakeRegalProc( http_glGetProgramLocalParameterIivNV, layer );
  tbl.glGetProgramLocalParameterIuivNV = MakeRegalProc( http_glGetProgramLocalParameterIuivNV, layer );
  tbl.glProgramEnvParameterI4iNV = MakeRegalProc( http_glProgramEnvParameterI4iNV, layer );
  tbl.glProgramEnvParameterI4ivNV = MakeRegalProc( http_glProgramEnvParameterI4ivNV, layer );
  tbl.glProgramEnvParameterI4uiNV = MakeRegalProc( http_glProgramEnvParameterI4uiNV, layer );
  tbl.glProgramEnvParameterI4uivNV = MakeRegalProc( http_glProgramEnvParameterI4uivNV, layer );
  tbl.glProgramEnvParametersI4ivNV = MakeRegalProc( http_glProgramEnvParametersI4ivNV, layer );
  tbl.glProgramEnvParametersI4uivNV = MakeRegalProc( http_glProgramEnvParametersI4uivNV, layer );
  tbl.glProgramLocalParameterI4iNV = MakeRegalProc( http_glProgramLocalParameterI4iNV, layer );
  tbl.glProgramLocalParameterI4ivNV = MakeRegalProc( http_glProgramLocalParameterI4ivNV, layer );
  tbl.glProgramLocalParameterI4uiNV = MakeRegalProc( http_glProgramLocalParameterI4uiNV, layer );
  tbl.glProgramLocalParameterI4uivNV = MakeRegalProc( http_glProgramLocalParameterI4uivNV, layer );
  tbl.glProgramLocalParametersI4ivNV = MakeRegalProc( http_glProgramLocalParametersI4ivNV, layer );
  tbl.glProgramLocalParametersI4uivNV = MakeRegalProc( http_glProgramLocalParametersI4uivNV, layer );

  // GL_NV_gpu_shader5

  tbl.glGetUniformi64vNV = MakeRegalProc( http_glGetUniformi64vNV, layer );
  tbl.glProgramUniform1i64NV = MakeRegalProc( http_glProgramUniform1i64NV, layer );
  tbl.glProgramUniform1i64vNV = MakeRegalProc( http_glProgramUniform1i64vNV, layer );
  tbl.glProgramUniform1ui64NV = MakeRegalProc( http_glProgramUniform1ui64NV, layer );
  tbl.glProgramUniform1ui64vNV = MakeRegalProc( http_glProgramUniform1ui64vNV, layer );
  tbl.glProgramUniform2i64NV = MakeRegalProc( http_glProgramUniform2i64NV, layer );
  tbl.glProgramUniform2i64vNV = MakeRegalProc( http_glProgramUniform2i64vNV, layer );
  tbl.glProgramUniform2ui64NV = MakeRegalProc( http_glProgramUniform2ui64NV, layer );
  tbl.glProgramUniform2ui64vNV = MakeRegalProc( http_glProgramUniform2ui64vNV, layer );
  tbl.glProgramUniform3i64NV = MakeRegalProc( http_glProgramUniform3i64NV, layer );
  tbl.glProgramUniform3i64vNV = MakeRegalProc( http_glProgramUniform3i64vNV, layer );
  tbl.glProgramUniform3ui64NV = MakeRegalProc( http_glProgramUniform3ui64NV, layer );
  tbl.glProgramUniform3ui64vNV = MakeRegalProc( http_glProgramUniform3ui64vNV, layer );
  tbl.glProgramUniform4i64NV = MakeRegalProc( http_glProgramUniform4i64NV, layer );
  tbl.glProgramUniform4i64vNV = MakeRegalProc( http_glProgramUniform4i64vNV, layer );
  tbl.glProgramUniform4ui64NV = MakeRegalProc( http_glProgramUniform4ui64NV, layer );
  tbl.glProgramUniform4ui64vNV = MakeRegalProc( http_glProgramUniform4ui64vNV, layer );
  tbl.glUniform1i64NV = MakeRegalProc( http_glUniform1i64NV, layer );
  tbl.glUniform1i64vNV = MakeRegalProc( http_glUniform1i64vNV, layer );
  tbl.glUniform1ui64NV = MakeRegalProc( http_glUniform1ui64NV, layer );
  tbl.glUniform1ui64vNV = MakeRegalProc( http_glUniform1ui64vNV, layer );
  tbl.glUniform2i64NV = MakeRegalProc( http_glUniform2i64NV, layer );
  tbl.glUniform2i64vNV = MakeRegalProc( http_glUniform2i64vNV, layer );
  tbl.glUniform2ui64NV = MakeRegalProc( http_glUniform2ui64NV, layer );
  tbl.glUniform2ui64vNV = MakeRegalProc( http_glUniform2ui64vNV, layer );
  tbl.glUniform3i64NV = MakeRegalProc( http_glUniform3i64NV, layer );
  tbl.glUniform3i64vNV = MakeRegalProc( http_glUniform3i64vNV, layer );
  tbl.glUniform3ui64NV = MakeRegalProc( http_glUniform3ui64NV, layer );
  tbl.glUniform3ui64vNV = MakeRegalProc( http_glUniform3ui64vNV, layer );
  tbl.glUniform4i64NV = MakeRegalProc( http_glUniform4i64NV, layer );
  tbl.glUniform4i64vNV = MakeRegalProc( http_glUniform4i64vNV, layer );
  tbl.glUniform4ui64NV = MakeRegalProc( http_glUniform4ui64NV, layer );
  tbl.glUniform4ui64vNV = MakeRegalProc( http_glUniform4ui64vNV, layer );

  // GL_NV_half_float

  tbl.glColor3hNV = MakeRegalProc( http_glColor3hNV, layer );
  tbl.glColor3hvNV = MakeRegalProc( http_glColor3hvNV, layer );
  tbl.glColor4hNV = MakeRegalProc( http_glColor4hNV, layer );
  tbl.glColor4hvNV = MakeRegalProc( http_glColor4hvNV, layer );
  tbl.glFogCoordhNV = MakeRegalProc( http_glFogCoordhNV, layer );
  tbl.glFogCoordhvNV = MakeRegalProc( http_glFogCoordhvNV, layer );
  tbl.glMultiTexCoord1hNV = MakeRegalProc( http_glMultiTexCoord1hNV, layer );
  tbl.glMultiTexCoord1hvNV = MakeRegalProc( http_glMultiTexCoord1hvNV, layer );
  tbl.glMultiTexCoord2hNV = MakeRegalProc( http_glMultiTexCoord2hNV, layer );
  tbl.glMultiTexCoord2hvNV = MakeRegalProc( http_glMultiTexCoord2hvNV, layer );
  tbl.glMultiTexCoord3hNV = MakeRegalProc( http_glMultiTexCoord3hNV, layer );
  tbl.glMultiTexCoord3hvNV = MakeRegalProc( http_glMultiTexCoord3hvNV, layer );
  tbl.glMultiTexCoord4hNV = MakeRegalProc( http_glMultiTexCoord4hNV, layer );
  tbl.glMultiTexCoord4hvNV = MakeRegalProc( http_glMultiTexCoord4hvNV, layer );
  tbl.glNormal3hNV = MakeRegalProc( http_glNormal3hNV, layer );
  tbl.glNormal3hvNV = MakeRegalProc( http_glNormal3hvNV, layer );
  tbl.glSecondaryColor3hNV = MakeRegalProc( http_glSecondaryColor3hNV, layer );
  tbl.glSecondaryColor3hvNV = MakeRegalProc( http_glSecondaryColor3hvNV, layer );
  tbl.glTexCoord1hNV = MakeRegalProc( http_glTexCoord1hNV, layer );
  tbl.glTexCoord1hvNV = MakeRegalProc( http_glTexCoord1hvNV, layer );
  tbl.glTexCoord2hNV = MakeRegalProc( http_glTexCoord2hNV, layer );
  tbl.glTexCoord2hvNV = MakeRegalProc( http_glTexCoord2hvNV, layer );
  tbl.glTexCoord3hNV = MakeRegalProc( http_glTexCoord3hNV, layer );
  tbl.glTexCoord3hvNV = MakeRegalProc( http_glTexCoord3hvNV, layer );
  tbl.glTexCoord4hNV = MakeRegalProc( http_glTexCoord4hNV, layer );
  tbl.glTexCoord4hvNV = MakeRegalProc( http_glTexCoord4hvNV, layer );
  tbl.glVertex2hNV = MakeRegalProc( http_glVertex2hNV, layer );
  tbl.glVertex2hvNV = MakeRegalProc( http_glVertex2hvNV, layer );
  tbl.glVertex3hNV = MakeRegalProc( http_glVertex3hNV, layer );
  tbl.glVertex3hvNV = MakeRegalProc( http_glVertex3hvNV, layer );
  tbl.glVertex4hNV = MakeRegalProc( http_glVertex4hNV, layer );
  tbl.glVertex4hvNV = MakeRegalProc( http_glVertex4hvNV, layer );
  tbl.glVertexAttrib1hNV = MakeRegalProc( http_glVertexAttrib1hNV, layer );
  tbl.glVertexAttrib1hvNV = MakeRegalProc( http_glVertexAttrib1hvNV, layer );
  tbl.glVertexAttrib2hNV = MakeRegalProc( http_glVertexAttrib2hNV, layer );
  tbl.glVertexAttrib2hvNV = MakeRegalProc( http_glVertexAttrib2hvNV, layer );
  tbl.glVertexAttrib3hNV = MakeRegalProc( http_glVertexAttrib3hNV, layer );
  tbl.glVertexAttrib3hvNV = MakeRegalProc( http_glVertexAttrib3hvNV, layer );
  tbl.glVertexAttrib4hNV = MakeRegalProc( http_glVertexAttrib4hNV, layer );
  tbl.glVertexAttrib4hvNV = MakeRegalProc( http_glVertexAttrib4hvNV, layer );
  tbl.glVertexAttribs1hvNV = MakeRegalProc( http_glVertexAttribs1hvNV, layer );
  tbl.glVertexAttribs2hvNV = MakeRegalProc( http_glVertexAttribs2hvNV, layer );
  tbl.glVertexAttribs3hvNV = MakeRegalProc( http_glVertexAttribs3hvNV, layer );
  tbl.glVertexAttribs4hvNV = MakeRegalProc( http_glVertexAttribs4hvNV, layer );
  tbl.glVertexWeighthNV = MakeRegalProc( http_glVertexWeighthNV, layer );
  tbl.glVertexWeighthvNV = MakeRegalProc( http_glVertexWeighthvNV, layer );

  // GL_NV_non_square_matrices

  tbl.glUniformMatrix2x3fvNV = MakeRegalProc( http_glUniformMatrix2x3fvNV, layer );
  tbl.glUniformMatrix2x4fvNV = MakeRegalProc( http_glUniformMatrix2x4fvNV, layer );
  tbl.glUniformMatrix3x2fvNV = MakeRegalProc( http_glUniformMatrix3x2fvNV, layer );
  tbl.glUniformMatrix3x4fvNV = MakeRegalProc( http_glUniformMatrix3x4fvNV, layer );
  tbl.glUniformMatrix4x2fvNV = MakeRegalProc( http_glUniformMatrix4x2fvNV, layer );
  tbl.glUniformMatrix4x3fvNV = MakeRegalProc( http_glUniformMatrix4x3fvNV, layer );

  // GL_NV_occlusion_query

  tbl.glBeginOcclusionQueryNV = MakeRegalProc( http_glBeginOcclusionQueryNV, layer );
  tbl.glDeleteOcclusionQueriesNV = MakeRegalProc( http_glDeleteOcclusionQueriesNV, layer );
  tbl.glEndOcclusionQueryNV = MakeRegalProc( http_glEndOcclusionQueryNV, layer );
  tbl.glGenOcclusionQueriesNV = MakeRegalProc( http_glGenOcclusionQueriesNV, layer );
  tbl.glGetOcclusionQueryivNV = MakeRegalProc( http_glGetOcclusionQueryivNV, layer );
  tbl.glGetOcclusionQueryuivNV = MakeRegalProc( http_glGetOcclusionQueryuivNV, layer );
  tbl.glIsOcclusionQueryNV = MakeRegalProc( http_glIsOcclusionQueryNV, layer );

  // GL_NV_parameter_buffer_object

  tbl.glProgramBufferParametersIivNV = MakeRegalProc( http_glProgramBufferParametersIivNV, layer );
  tbl.glProgramBufferParametersIuivNV = MakeRegalProc( http_glProgramBufferParametersIuivNV, layer );
  tbl.glProgramBufferParametersfvNV = MakeRegalProc( http_glProgramBufferParametersfvNV, layer );

  // GL_NV_path_rendering

  tbl.glCopyPathNV = MakeRegalProc( http_glCopyPathNV, layer );
  tbl.glCoverFillPathInstancedNV = MakeRegalProc( http_glCoverFillPathInstancedNV, layer );
  tbl.glCoverFillPathNV = MakeRegalProc( http_glCoverFillPathNV, layer );
  tbl.glCoverStrokePathInstancedNV = MakeRegalProc( http_glCoverStrokePathInstancedNV, layer );
  tbl.glCoverStrokePathNV = MakeRegalProc( http_glCoverStrokePathNV, layer );
  tbl.glDeletePathsNV = MakeRegalProc( http_glDeletePathsNV, layer );
  tbl.glGenPathsNV = MakeRegalProc( http_glGenPathsNV, layer );
  tbl.glGetPathColorGenfvNV = MakeRegalProc( http_glGetPathColorGenfvNV, layer );
  tbl.glGetPathColorGenivNV = MakeRegalProc( http_glGetPathColorGenivNV, layer );
  tbl.glGetPathCommandsNV = MakeRegalProc( http_glGetPathCommandsNV, layer );
  tbl.glGetPathCoordsNV = MakeRegalProc( http_glGetPathCoordsNV, layer );
  tbl.glGetPathDashArrayNV = MakeRegalProc( http_glGetPathDashArrayNV, layer );
  tbl.glGetPathLengthNV = MakeRegalProc( http_glGetPathLengthNV, layer );
  tbl.glGetPathMetricRangeNV = MakeRegalProc( http_glGetPathMetricRangeNV, layer );
  tbl.glGetPathMetricsNV = MakeRegalProc( http_glGetPathMetricsNV, layer );
  tbl.glGetPathParameterfvNV = MakeRegalProc( http_glGetPathParameterfvNV, layer );
  tbl.glGetPathParameterivNV = MakeRegalProc( http_glGetPathParameterivNV, layer );
  tbl.glGetPathSpacingNV = MakeRegalProc( http_glGetPathSpacingNV, layer );
  tbl.glGetPathTexGenfvNV = MakeRegalProc( http_glGetPathTexGenfvNV, layer );
  tbl.glGetPathTexGenivNV = MakeRegalProc( http_glGetPathTexGenivNV, layer );
  tbl.glInterpolatePathsNV = MakeRegalProc( http_glInterpolatePathsNV, layer );
  tbl.glIsPathNV = MakeRegalProc( http_glIsPathNV, layer );
  tbl.glIsPointInFillPathNV = MakeRegalProc( http_glIsPointInFillPathNV, layer );
  tbl.glIsPointInStrokePathNV = MakeRegalProc( http_glIsPointInStrokePathNV, layer );
  tbl.glPathColorGenNV = MakeRegalProc( http_glPathColorGenNV, layer );
  tbl.glPathCommandsNV = MakeRegalProc( http_glPathCommandsNV, layer );
  tbl.glPathCoordsNV = MakeRegalProc( http_glPathCoordsNV, layer );
  tbl.glPathCoverDepthFuncNV = MakeRegalProc( http_glPathCoverDepthFuncNV, layer );
  tbl.glPathDashArrayNV = MakeRegalProc( http_glPathDashArrayNV, layer );
  tbl.glPathFogGenNV = MakeRegalProc( http_glPathFogGenNV, layer );
  tbl.glPathGlyphRangeNV = MakeRegalProc( http_glPathGlyphRangeNV, layer );
  tbl.glPathGlyphsNV = MakeRegalProc( http_glPathGlyphsNV, layer );
  tbl.glPathParameterfNV = MakeRegalProc( http_glPathParameterfNV, layer );
  tbl.glPathParameterfvNV = MakeRegalProc( http_glPathParameterfvNV, layer );
  tbl.glPathParameteriNV = MakeRegalProc( http_glPathParameteriNV, layer );
  tbl.glPathParameterivNV = MakeRegalProc( http_glPathParameterivNV, layer );
  tbl.glPathStencilDepthOffsetNV = MakeRegalProc( http_glPathStencilDepthOffsetNV, layer );
  tbl.glPathStencilFuncNV = MakeRegalProc( http_glPathStencilFuncNV, layer );
  tbl.glPathStringNV = MakeRegalProc( http_glPathStringNV, layer );
  tbl.glPathSubCommandsNV = MakeRegalProc( http_glPathSubCommandsNV, layer );
  tbl.glPathSubCoordsNV = MakeRegalProc( http_glPathSubCoordsNV, layer );
  tbl.glPathTexGenNV = MakeRegalProc( http_glPathTexGenNV, layer );
  tbl.glPointAlongPathNV = MakeRegalProc( http_glPointAlongPathNV, layer );
  tbl.glStencilFillPathInstancedNV = MakeRegalProc( http_glStencilFillPathInstancedNV, layer );
  tbl.glStencilFillPathNV = MakeRegalProc( http_glStencilFillPathNV, layer );
  tbl.glStencilStrokePathInstancedNV = MakeRegalProc( http_glStencilStrokePathInstancedNV, layer );
  tbl.glStencilStrokePathNV = MakeRegalProc( http_glStencilStrokePathNV, layer );
  tbl.glTransformPathNV = MakeRegalProc( http_glTransformPathNV, layer );
  tbl.glWeightPathsNV = MakeRegalProc( http_glWeightPathsNV, layer );

  // GL_NV_pixel_data_range

  tbl.glFlushPixelDataRangeNV = MakeRegalProc( http_glFlushPixelDataRangeNV, layer );
  tbl.glPixelDataRangeNV = MakeRegalProc( http_glPixelDataRangeNV, layer );

  // GL_NV_point_sprite

  tbl.glPointParameteriNV = MakeRegalProc( http_glPointParameteriNV, layer );
  tbl.glPointParameterivNV = MakeRegalProc( http_glPointParameterivNV, layer );

  // GL_NV_present_video

  tbl.glGetVideoi64vNV = MakeRegalProc( http_glGetVideoi64vNV, layer );
  tbl.glGetVideoivNV = MakeRegalProc( http_glGetVideoivNV, layer );
  tbl.glGetVideoui64vNV = MakeRegalProc( http_glGetVideoui64vNV, layer );
  tbl.glGetVideouivNV = MakeRegalProc( http_glGetVideouivNV, layer );
  tbl.glPresentFrameDualFillNV = MakeRegalProc( http_glPresentFrameDualFillNV, layer );
  tbl.glPresentFrameKeyedNV = MakeRegalProc( http_glPresentFrameKeyedNV, layer );

  // GL_NV_primitive_restart

  tbl.glPrimitiveRestartIndexNV = MakeRegalProc( http_glPrimitiveRestartIndexNV, layer );
  tbl.glPrimitiveRestartNV = MakeRegalProc( http_glPrimitiveRestartNV, layer );

  // GL_NV_read_buffer

  tbl.glReadBufferNV = MakeRegalProc( http_glReadBufferNV, layer );

  // GL_NV_register_combiners

  tbl.glCombinerInputNV = MakeRegalProc( http_glCombinerInputNV, layer );
  tbl.glCombinerOutputNV = MakeRegalProc( http_glCombinerOutputNV, layer );
  tbl.glCombinerParameterfNV = MakeRegalProc( http_glCombinerParameterfNV, layer );
  tbl.glCombinerParameterfvNV = MakeRegalProc( http_glCombinerParameterfvNV, layer );
  tbl.glCombinerParameteriNV = MakeRegalProc( http_glCombinerParameteriNV, layer );
  tbl.glCombinerParameterivNV = MakeRegalProc( http_glCombinerParameterivNV, layer );
  tbl.glFinalCombinerInputNV = MakeRegalProc( http_glFinalCombinerInputNV, layer );
  tbl.glGetCombinerInputParameterfvNV = MakeRegalProc( http_glGetCombinerInputParameterfvNV, layer );
  tbl.glGetCombinerInputParameterivNV = MakeRegalProc( http_glGetCombinerInputParameterivNV, layer );
  tbl.glGetCombinerOutputParameterfvNV = MakeRegalProc( http_glGetCombinerOutputParameterfvNV, layer );
  tbl.glGetCombinerOutputParameterivNV = MakeRegalProc( http_glGetCombinerOutputParameterivNV, layer );
  tbl.glGetFinalCombinerInputParameterfvNV = MakeRegalProc( http_glGetFinalCombinerInputParameterfvNV, layer );
  tbl.glGetFinalCombinerInputParameterivNV = MakeRegalProc( http_glGetFinalCombinerInputParameterivNV, layer );

  // GL_NV_register_combiners2

  tbl.glCombinerStageParameterfvNV = MakeRegalProc( http_glCombinerStageParameterfvNV, layer );
  tbl.glGetCombinerStageParameterfvNV = MakeRegalProc( http_glGetCombinerStageParameterfvNV, layer );

  // GL_NV_shader_buffer_load

  tbl.glGetBufferParameterui64vNV = MakeRegalProc( http_glGetBufferParameterui64vNV, layer );
  tbl.glGetIntegerui64vNV = MakeRegalProc( http_glGetIntegerui64vNV, layer );
  tbl.glGetNamedBufferParameterui64vNV = MakeRegalProc( http_glGetNamedBufferParameterui64vNV, layer );
  tbl.glGetUniformui64vNV = MakeRegalProc( http_glGetUniformui64vNV, layer );
  tbl.glIsBufferResidentNV = MakeRegalProc( http_glIsBufferResidentNV, layer );
  tbl.glIsNamedBufferResidentNV = MakeRegalProc( http_glIsNamedBufferResidentNV, layer );
  tbl.glMakeBufferNonResidentNV = MakeRegalProc( http_glMakeBufferNonResidentNV, layer );
  tbl.glMakeBufferResidentNV = MakeRegalProc( http_glMakeBufferResidentNV, layer );
  tbl.glMakeNamedBufferNonResidentNV = MakeRegalProc( http_glMakeNamedBufferNonResidentNV, layer );
  tbl.glMakeNamedBufferResidentNV = MakeRegalProc( http_glMakeNamedBufferResidentNV, layer );
  tbl.glProgramUniformui64NV = MakeRegalProc( http_glProgramUniformui64NV, layer );
  tbl.glProgramUniformui64vNV = MakeRegalProc( http_glProgramUniformui64vNV, layer );
  tbl.glUniformui64NV = MakeRegalProc( http_glUniformui64NV, layer );
  tbl.glUniformui64vNV = MakeRegalProc( http_glUniformui64vNV, layer );

  // GL_NV_texture_barrier

  tbl.glTextureBarrierNV = MakeRegalProc( http_glTextureBarrierNV, layer );

  // GL_NV_texture_multisample

  tbl.glTexImage2DMultisampleCoverageNV = MakeRegalProc( http_glTexImage2DMultisampleCoverageNV, layer );
  tbl.glTexImage3DMultisampleCoverageNV = MakeRegalProc( http_glTexImage3DMultisampleCoverageNV, layer );
  tbl.glTextureImage2DMultisampleCoverageNV = MakeRegalProc( http_glTextureImage2DMultisampleCoverageNV, layer );
  tbl.glTextureImage2DMultisampleNV = MakeRegalProc( http_glTextureImage2DMultisampleNV, layer );
  tbl.glTextureImage3DMultisampleCoverageNV = MakeRegalProc( http_glTextureImage3DMultisampleCoverageNV, layer );
  tbl.glTextureImage3DMultisampleNV = MakeRegalProc( http_glTextureImage3DMultisampleNV, layer );

  // GL_NV_transform_feedback

  tbl.glActiveVaryingNV = MakeRegalProc( http_glActiveVaryingNV, layer );
  tbl.glBeginTransformFeedbackNV = MakeRegalProc( http_glBeginTransformFeedbackNV, layer );
  tbl.glBindBufferBaseNV = MakeRegalProc( http_glBindBufferBaseNV, layer );
  tbl.glBindBufferOffsetNV = MakeRegalProc( http_glBindBufferOffsetNV, layer );
  tbl.glBindBufferRangeNV = MakeRegalProc( http_glBindBufferRangeNV, layer );
  tbl.glEndTransformFeedbackNV = MakeRegalProc( http_glEndTransformFeedbackNV, layer );
  tbl.glGetActiveVaryingNV = MakeRegalProc( http_glGetActiveVaryingNV, layer );
  tbl.glGetTransformFeedbackVaryingNV = MakeRegalProc( http_glGetTransformFeedbackVaryingNV, layer );
  tbl.glGetVaryingLocationNV = MakeRegalProc( http_glGetVaryingLocationNV, layer );
  tbl.glTransformFeedbackAttribsNV = MakeRegalProc( http_glTransformFeedbackAttribsNV, layer );
  tbl.glTransformFeedbackVaryingsNV = MakeRegalProc( http_glTransformFeedbackVaryingsNV, layer );

  // GL_NV_transform_feedback2

  tbl.glBindTransformFeedbackNV = MakeRegalProc( http_glBindTransformFeedbackNV, layer );
  tbl.glDeleteTransformFeedbacksNV = MakeRegalProc( http_glDeleteTransformFeedbacksNV, layer );
  tbl.glDrawTransformFeedbackNV = MakeRegalProc( http_glDrawTransformFeedbackNV, layer );
  tbl.glGenTransformFeedbacksNV = MakeRegalProc( http_glGenTransformFeedbacksNV, layer );
  tbl.glIsTransformFeedbackNV = MakeRegalProc( http_glIsTransformFeedbackNV, layer );
  tbl.glPauseTransformFeedbackNV = MakeRegalProc( http_glPauseTransformFeedbackNV, layer );
  tbl.glResumeTransformFeedbackNV = MakeRegalProc( http_glResumeTransformFeedbackNV, layer );

  // GL_NV_vdpau_interop

  tbl.glVDPAUFiniNV = MakeRegalProc( http_glVDPAUFiniNV, layer );
  tbl.glVDPAUGetSurfaceivNV = MakeRegalProc( http_glVDPAUGetSurfaceivNV, layer );
  tbl.glVDPAUInitNV = MakeRegalProc( http_glVDPAUInitNV, layer );
  tbl.glVDPAUIsSurfaceNV = MakeRegalProc( http_glVDPAUIsSurfaceNV, layer );
  tbl.glVDPAUMapSurfacesNV = MakeRegalProc( http_glVDPAUMapSurfacesNV, layer );
  tbl.glVDPAURegisterOutputSurfaceNV = MakeRegalProc( http_glVDPAURegisterOutputSurfaceNV, layer );
  tbl.glVDPAURegisterVideoSurfaceNV = MakeRegalProc( http_glVDPAURegisterVideoSurfaceNV, layer );
  tbl.glVDPAUSurfaceAccessNV = MakeRegalProc( http_glVDPAUSurfaceAccessNV, layer );
  tbl.glVDPAUUnmapSurfacesNV = MakeRegalProc( http_glVDPAUUnmapSurfacesNV, layer );
  tbl.glVDPAUUnregisterSurfaceNV = MakeRegalProc( http_glVDPAUUnregisterSurfaceNV, layer );

  // GL_NV_vertex_array_range

  tbl.glFlushVertexArrayRangeNV = MakeRegalProc( http_glFlushVertexArrayRangeNV, layer );
  tbl.glVertexArrayRangeNV = MakeRegalProc( http_glVertexArrayRangeNV, layer );

  // GL_NV_vertex_attrib_integer_64bit

  tbl.glGetVertexAttribLi64vNV = MakeRegalProc( http_glGetVertexAttribLi64vNV, layer );
  tbl.glGetVertexAttribLui64vNV = MakeRegalProc( http_glGetVertexAttribLui64vNV, layer );
  tbl.glVertexAttribL1i64NV = MakeRegalProc( http_glVertexAttribL1i64NV, layer );
  tbl.glVertexAttribL1i64vNV = MakeRegalProc( http_glVertexAttribL1i64vNV, layer );
  tbl.glVertexAttribL1ui64NV = MakeRegalProc( http_glVertexAttribL1ui64NV, layer );
  tbl.glVertexAttribL1ui64vNV = MakeRegalProc( http_glVertexAttribL1ui64vNV, layer );
  tbl.glVertexAttribL2i64NV = MakeRegalProc( http_glVertexAttribL2i64NV, layer );
  tbl.glVertexAttribL2i64vNV = MakeRegalProc( http_glVertexAttribL2i64vNV, layer );
  tbl.glVertexAttribL2ui64NV = MakeRegalProc( http_glVertexAttribL2ui64NV, layer );
  tbl.glVertexAttribL2ui64vNV = MakeRegalProc( http_glVertexAttribL2ui64vNV, layer );
  tbl.glVertexAttribL3i64NV = MakeRegalProc( http_glVertexAttribL3i64NV, layer );
  tbl.glVertexAttribL3i64vNV = MakeRegalProc( http_glVertexAttribL3i64vNV, layer );
  tbl.glVertexAttribL3ui64NV = MakeRegalProc( http_glVertexAttribL3ui64NV, layer );
  tbl.glVertexAttribL3ui64vNV = MakeRegalProc( http_glVertexAttribL3ui64vNV, layer );
  tbl.glVertexAttribL4i64NV = MakeRegalProc( http_glVertexAttribL4i64NV, layer );
  tbl.glVertexAttribL4i64vNV = MakeRegalProc( http_glVertexAttribL4i64vNV, layer );
  tbl.glVertexAttribL4ui64NV = MakeRegalProc( http_glVertexAttribL4ui64NV, layer );
  tbl.glVertexAttribL4ui64vNV = MakeRegalProc( http_glVertexAttribL4ui64vNV, layer );
  tbl.glVertexAttribLFormatNV = MakeRegalProc( http_glVertexAttribLFormatNV, layer );

  // GL_NV_vertex_buffer_unified_memory

  tbl.glBufferAddressRangeNV = MakeRegalProc( http_glBufferAddressRangeNV, layer );
  tbl.glColorFormatNV = MakeRegalProc( http_glColorFormatNV, layer );
  tbl.glEdgeFlagFormatNV = MakeRegalProc( http_glEdgeFlagFormatNV, layer );
  tbl.glFogCoordFormatNV = MakeRegalProc( http_glFogCoordFormatNV, layer );
  tbl.glGetIntegerui64i_vNV = MakeRegalProc( http_glGetIntegerui64i_vNV, layer );
  tbl.glIndexFormatNV = MakeRegalProc( http_glIndexFormatNV, layer );
  tbl.glNormalFormatNV = MakeRegalProc( http_glNormalFormatNV, layer );
  tbl.glSecondaryColorFormatNV = MakeRegalProc( http_glSecondaryColorFormatNV, layer );
  tbl.glTexCoordFormatNV = MakeRegalProc( http_glTexCoordFormatNV, layer );
  tbl.glVertexAttribFormatNV = MakeRegalProc( http_glVertexAttribFormatNV, layer );
  tbl.glVertexAttribIFormatNV = MakeRegalProc( http_glVertexAttribIFormatNV, layer );
  tbl.glVertexFormatNV = MakeRegalProc( http_glVertexFormatNV, layer );

  // GL_NV_vertex_program

  tbl.glAreProgramsResidentNV = MakeRegalProc( http_glAreProgramsResidentNV, layer );
  tbl.glBindProgramNV = MakeRegalProc( http_glBindProgramNV, layer );
  tbl.glDeleteProgramsNV = MakeRegalProc( http_glDeleteProgramsNV, layer );
  tbl.glExecuteProgramNV = MakeRegalProc( http_glExecuteProgramNV, layer );
  tbl.glGenProgramsNV = MakeRegalProc( http_glGenProgramsNV, layer );
  tbl.glGetProgramParameterdvNV = MakeRegalProc( http_glGetProgramParameterdvNV, layer );
  tbl.glGetProgramParameterfvNV = MakeRegalProc( http_glGetProgramParameterfvNV, layer );
  tbl.glGetProgramStringNV = MakeRegalProc( http_glGetProgramStringNV, layer );
  tbl.glGetProgramivNV = MakeRegalProc( http_glGetProgramivNV, layer );
  tbl.glGetTrackMatrixivNV = MakeRegalProc( http_glGetTrackMatrixivNV, layer );
  tbl.glGetVertexAttribPointervNV = MakeRegalProc( http_glGetVertexAttribPointervNV, layer );
  tbl.glGetVertexAttribdvNV = MakeRegalProc( http_glGetVertexAttribdvNV, layer );
  tbl.glGetVertexAttribfvNV = MakeRegalProc( http_glGetVertexAttribfvNV, layer );
  tbl.glGetVertexAttribivNV = MakeRegalProc( http_glGetVertexAttribivNV, layer );
  tbl.glIsProgramNV = MakeRegalProc( http_glIsProgramNV, layer );
  tbl.glLoadProgramNV = MakeRegalProc( http_glLoadProgramNV, layer );
  tbl.glProgramParameter4dNV = MakeRegalProc( http_glProgramParameter4dNV, layer );
  tbl.glProgramParameter4dvNV = MakeRegalProc( http_glProgramParameter4dvNV, layer );
  tbl.glProgramParameter4fNV = MakeRegalProc( http_glProgramParameter4fNV, layer );
  tbl.glProgramParameter4fvNV = MakeRegalProc( http_glProgramParameter4fvNV, layer );
  tbl.glProgramParameters4dvNV = MakeRegalProc( http_glProgramParameters4dvNV, layer );
  tbl.glProgramParameters4fvNV = MakeRegalProc( http_glProgramParameters4fvNV, layer );
  tbl.glRequestResidentProgramsNV = MakeRegalProc( http_glRequestResidentProgramsNV, layer );
  tbl.glTrackMatrixNV = MakeRegalProc( http_glTrackMatrixNV, layer );
  tbl.glVertexAttrib1dNV = MakeRegalProc( http_glVertexAttrib1dNV, layer );
  tbl.glVertexAttrib1dvNV = MakeRegalProc( http_glVertexAttrib1dvNV, layer );
  tbl.glVertexAttrib1fNV = MakeRegalProc( http_glVertexAttrib1fNV, layer );
  tbl.glVertexAttrib1fvNV = MakeRegalProc( http_glVertexAttrib1fvNV, layer );
  tbl.glVertexAttrib1sNV = MakeRegalProc( http_glVertexAttrib1sNV, layer );
  tbl.glVertexAttrib1svNV = MakeRegalProc( http_glVertexAttrib1svNV, layer );
  tbl.glVertexAttrib2dNV = MakeRegalProc( http_glVertexAttrib2dNV, layer );
  tbl.glVertexAttrib2dvNV = MakeRegalProc( http_glVertexAttrib2dvNV, layer );
  tbl.glVertexAttrib2fNV = MakeRegalProc( http_glVertexAttrib2fNV, layer );
  tbl.glVertexAttrib2fvNV = MakeRegalProc( http_glVertexAttrib2fvNV, layer );
  tbl.glVertexAttrib2sNV = MakeRegalProc( http_glVertexAttrib2sNV, layer );
  tbl.glVertexAttrib2svNV = MakeRegalProc( http_glVertexAttrib2svNV, layer );
  tbl.glVertexAttrib3dNV = MakeRegalProc( http_glVertexAttrib3dNV, layer );
  tbl.glVertexAttrib3dvNV = MakeRegalProc( http_glVertexAttrib3dvNV, layer );
  tbl.glVertexAttrib3fNV = MakeRegalProc( http_glVertexAttrib3fNV, layer );
  tbl.glVertexAttrib3fvNV = MakeRegalProc( http_glVertexAttrib3fvNV, layer );
  tbl.glVertexAttrib3sNV = MakeRegalProc( http_glVertexAttrib3sNV, layer );
  tbl.glVertexAttrib3svNV = MakeRegalProc( http_glVertexAttrib3svNV, layer );
  tbl.glVertexAttrib4dNV = MakeRegalProc( http_glVertexAttrib4dNV, layer );
  tbl.glVertexAttrib4dvNV = MakeRegalProc( http_glVertexAttrib4dvNV, layer );
  tbl.glVertexAttrib4fNV = MakeRegalProc( http_glVertexAttrib4fNV, layer );
  tbl.glVertexAttrib4fvNV = MakeRegalProc( http_glVertexAttrib4fvNV, layer );
  tbl.glVertexAttrib4sNV = MakeRegalProc( http_glVertexAttrib4sNV, layer );
  tbl.glVertexAttrib4svNV = MakeRegalProc( http_glVertexAttrib4svNV, layer );
  tbl.glVertexAttrib4ubNV = MakeRegalProc( http_glVertexAttrib4ubNV, layer );
  tbl.glVertexAttrib4ubvNV = MakeRegalProc( http_glVertexAttrib4ubvNV, layer );
  tbl.glVertexAttribPointerNV = MakeRegalProc( http_glVertexAttribPointerNV, layer );
  tbl.glVertexAttribs1dvNV = MakeRegalProc( http_glVertexAttribs1dvNV, layer );
  tbl.glVertexAttribs1fvNV = MakeRegalProc( http_glVertexAttribs1fvNV, layer );
  tbl.glVertexAttribs1svNV = MakeRegalProc( http_glVertexAttribs1svNV, layer );
  tbl.glVertexAttribs2dvNV = MakeRegalProc( http_glVertexAttribs2dvNV, layer );
  tbl.glVertexAttribs2fvNV = MakeRegalProc( http_glVertexAttribs2fvNV, layer );
  tbl.glVertexAttribs2svNV = MakeRegalProc( http_glVertexAttribs2svNV, layer );
  tbl.glVertexAttribs3dvNV = MakeRegalProc( http_glVertexAttribs3dvNV, layer );
  tbl.glVertexAttribs3fvNV = MakeRegalProc( http_glVertexAttribs3fvNV, layer );
  tbl.glVertexAttribs3svNV = MakeRegalProc( http_glVertexAttribs3svNV, layer );
  tbl.glVertexAttribs4dvNV = MakeRegalProc( http_glVertexAttribs4dvNV, layer );
  tbl.glVertexAttribs4fvNV = MakeRegalProc( http_glVertexAttribs4fvNV, layer );
  tbl.glVertexAttribs4svNV = MakeRegalProc( http_glVertexAttribs4svNV, layer );
  tbl.glVertexAttribs4ubvNV = MakeRegalProc( http_glVertexAttribs4ubvNV, layer );

  // GL_NV_video_capture

  tbl.glBeginVideoCaptureNV = MakeRegalProc( http_glBeginVideoCaptureNV, layer );
  tbl.glBindVideoCaptureStreamBufferNV = MakeRegalProc( http_glBindVideoCaptureStreamBufferNV, layer );
  tbl.glBindVideoCaptureStreamTextureNV = MakeRegalProc( http_glBindVideoCaptureStreamTextureNV, layer );
  tbl.glEndVideoCaptureNV = MakeRegalProc( http_glEndVideoCaptureNV, layer );
  tbl.glGetVideoCaptureStreamdvNV = MakeRegalProc( http_glGetVideoCaptureStreamdvNV, layer );
  tbl.glGetVideoCaptureStreamfvNV = MakeRegalProc( http_glGetVideoCaptureStreamfvNV, layer );
  tbl.glGetVideoCaptureStreamivNV = MakeRegalProc( http_glGetVideoCaptureStreamivNV, layer );
  tbl.glGetVideoCaptureivNV = MakeRegalProc( http_glGetVideoCaptureivNV, layer );
  tbl.glVideoCaptureNV = MakeRegalProc( http_glVideoCaptureNV, layer );
  tbl.glVideoCaptureStreamParameterdvNV = MakeRegalProc( http_glVideoCaptureStreamParameterdvNV, layer );
  tbl.glVideoCaptureStreamParameterfvNV = MakeRegalProc( http_glVideoCaptureStreamParameterfvNV, layer );
  tbl.glVideoCaptureStreamParameterivNV = MakeRegalProc( http_glVideoCaptureStreamParameterivNV, layer );

  // GL_OES_blend_equation_separate

  tbl.glBlendEquationSeparateOES = MakeRegalProc( http_glBlendEquationSeparateOES, layer );

  // GL_OES_blend_func_separate

  tbl.glBlendFuncSeparateOES = MakeRegalProc( http_glBlendFuncSeparateOES, layer );

  // GL_OES_blend_subtract

  tbl.glBlendEquationOES = MakeRegalProc( http_glBlendEquationOES, layer );

  // GL_OES_framebuffer_object

  tbl.glBindFramebufferOES = MakeRegalProc( http_glBindFramebufferOES, layer );
  tbl.glBindRenderbufferOES = MakeRegalProc( http_glBindRenderbufferOES, layer );
  tbl.glCheckFramebufferStatusOES = MakeRegalProc( http_glCheckFramebufferStatusOES, layer );
  tbl.glDeleteFramebuffersOES = MakeRegalProc( http_glDeleteFramebuffersOES, layer );
  tbl.glDeleteRenderbuffersOES = MakeRegalProc( http_glDeleteRenderbuffersOES, layer );
  tbl.glFramebufferRenderbufferOES = MakeRegalProc( http_glFramebufferRenderbufferOES, layer );
  tbl.glFramebufferTexture2DOES = MakeRegalProc( http_glFramebufferTexture2DOES, layer );
  tbl.glGenFramebuffersOES = MakeRegalProc( http_glGenFramebuffersOES, layer );
  tbl.glGenRenderbuffersOES = MakeRegalProc( http_glGenRenderbuffersOES, layer );
  tbl.glGenerateMipmapOES = MakeRegalProc( http_glGenerateMipmapOES, layer );
  tbl.glGetFramebufferAttachmentParameterivOES = MakeRegalProc( http_glGetFramebufferAttachmentParameterivOES, layer );
  tbl.glGetRenderbufferParameterivOES = MakeRegalProc( http_glGetRenderbufferParameterivOES, layer );
  tbl.glIsFramebufferOES = MakeRegalProc( http_glIsFramebufferOES, layer );
  tbl.glIsRenderbufferOES = MakeRegalProc( http_glIsRenderbufferOES, layer );
  tbl.glRenderbufferStorageOES = MakeRegalProc( http_glRenderbufferStorageOES, layer );

  // GL_OES_get_program_binary

  tbl.glGetProgramBinaryOES = MakeRegalProc( http_glGetProgramBinaryOES, layer );
  tbl.glProgramBinaryOES = MakeRegalProc( http_glProgramBinaryOES, layer );

  // GL_OES_mapbuffer

  tbl.glGetBufferPointervOES = MakeRegalProc( http_glGetBufferPointervOES, layer );
  tbl.glMapBufferOES = MakeRegalProc( http_glMapBufferOES, layer );
  tbl.glUnmapBufferOES = MakeRegalProc( http_glUnmapBufferOES, layer );

  // GL_OES_matrix_palette

  tbl.glCurrentPaletteMatrixOES = MakeRegalProc( http_glCurrentPaletteMatrixOES, layer );
  tbl.glMatrixIndexPointerOES = MakeRegalProc( http_glMatrixIndexPointerOES, layer );
  tbl.glWeightPointerOES = MakeRegalProc( http_glWeightPointerOES, layer );

  // GL_OES_single_precision

  tbl.glClearDepthfOES = MakeRegalProc( http_glClearDepthfOES, layer );
  tbl.glClipPlanefOES = MakeRegalProc( http_glClipPlanefOES, layer );
  tbl.glDepthRangefOES = MakeRegalProc( http_glDepthRangefOES, layer );
  tbl.glFrustumfOES = MakeRegalProc( http_glFrustumfOES, layer );
  tbl.glGetClipPlanefOES = MakeRegalProc( http_glGetClipPlanefOES, layer );
  tbl.glOrthofOES = MakeRegalProc( http_glOrthofOES, layer );

  // GL_OES_texture_3D

  tbl.glCompressedTexImage3DOES = MakeRegalProc( http_glCompressedTexImage3DOES, layer );
  tbl.glCompressedTexSubImage3DOES = MakeRegalProc( http_glCompressedTexSubImage3DOES, layer );
  tbl.glCopyTexSubImage3DOES = MakeRegalProc( http_glCopyTexSubImage3DOES, layer );
  tbl.glFramebufferTexture3DOES = MakeRegalProc( http_glFramebufferTexture3DOES, layer );
  tbl.glTexImage3DOES = MakeRegalProc( http_glTexImage3DOES, layer );
  tbl.glTexSubImage3DOES = MakeRegalProc( http_glTexSubImage3DOES, layer );

  // GL_OES_texture_cube_map

  tbl.glGetTexGenfvOES = MakeRegalProc( http_glGetTexGenfvOES, layer );
  tbl.glGetTexGenivOES = MakeRegalProc( http_glGetTexGenivOES, layer );
  tbl.glGetTexGenxvOES = MakeRegalProc( http_glGetTexGenxvOES, layer );
  tbl.glTexGenfOES = MakeRegalProc( http_glTexGenfOES, layer );
  tbl.glTexGenfvOES = MakeRegalProc( http_glTexGenfvOES, layer );
  tbl.glTexGeniOES = MakeRegalProc( http_glTexGeniOES, layer );
  tbl.glTexGenivOES = MakeRegalProc( http_glTexGenivOES, layer );
  tbl.glTexGenxOES = MakeRegalProc( http_glTexGenxOES, layer );
  tbl.glTexGenxvOES = MakeRegalProc( http_glTexGenxvOES, layer );

  // GL_OES_vertex_array_object

  tbl.glBindVertexArrayOES = MakeRegalProc( http_glBindVertexArrayOES, layer );
  tbl.glDeleteVertexArraysOES = MakeRegalProc( http_glDeleteVertexArraysOES, layer );
  tbl.glGenVertexArraysOES = MakeRegalProc( http_glGenVertexArraysOES, layer );
  tbl.glIsVertexArrayOES = MakeRegalProc( http_glIsVertexArrayOES, layer );

  // GL_PGI_misc_hints

  tbl.glHintPGI = MakeRegalProc( http_glHintPGI, layer );

  // GL_QCOM_alpha_test

  tbl.glAlphaFuncQCOM = MakeRegalProc( http_glAlphaFuncQCOM, layer );

  // GL_QCOM_driver_control

  tbl.glDisableDriverControlQCOM = MakeRegalProc( http_glDisableDriverControlQCOM, layer );
  tbl.glEnableDriverControlQCOM = MakeRegalProc( http_glEnableDriverControlQCOM, layer );
  tbl.glGetDriverControlStringQCOM = MakeRegalProc( http_glGetDriverControlStringQCOM, layer );
  tbl.glGetDriverControlsQCOM = MakeRegalProc( http_glGetDriverControlsQCOM, layer );

  // GL_QCOM_extended_get

  tbl.glExtGetBufferPointervQCOM = MakeRegalProc( http_glExtGetBufferPointervQCOM, layer );
  tbl.glExtGetBuffersQCOM = MakeRegalProc( http_glExtGetBuffersQCOM, layer );
  tbl.glExtGetFramebuffersQCOM = MakeRegalProc( http_glExtGetFramebuffersQCOM, layer );
  tbl.glExtGetRenderbuffersQCOM = MakeRegalProc( http_glExtGetRenderbuffersQCOM, layer );
  tbl.glExtGetTexLevelParameterivQCOM = MakeRegalProc( http_glExtGetTexLevelParameterivQCOM, layer );
  tbl.glExtGetTexSubImageQCOM = MakeRegalProc( http_glExtGetTexSubImageQCOM, layer );
  tbl.glExtGetTexturesQCOM = MakeRegalProc( http_glExtGetTexturesQCOM, layer );
  tbl.glExtTexObjectStateOverrideiQCOM = MakeRegalProc( http_glExtTexObjectStateOverrideiQCOM, layer );

  // GL_QCOM_extended_get2

  tbl.glExtGetProgramBinarySourceQCOM = MakeRegalProc( http_glExtGetProgramBinarySourceQCOM, layer );
  tbl.glExtGetProgramsQCOM = MakeRegalProc( http_glExtGetProgramsQCOM, layer );
  tbl.glExtGetShadersQCOM = MakeRegalProc( http_glExtGetShadersQCOM, layer );
  tbl.glExtIsProgramBinaryQCOM = MakeRegalProc( http_glExtIsProgramBinaryQCOM, layer );

  // GL_QCOM_tiled_rendering

  tbl.glEndTilingQCOM = MakeRegalProc( http_glEndTilingQCOM, layer );
  tbl.glStartTilingQCOM = MakeRegalProc( http_glStartTilingQCOM, layer );

  // GL_REGAL_ES1_0_compatibility

  tbl.glAlphaFuncx = MakeRegalProc( http_glAlphaFuncx, layer );
  tbl.glClearColorx = MakeRegalProc( http_glClearColorx, layer );
  tbl.glClearDepthx = MakeRegalProc( http_glClearDepthx, layer );
  tbl.glColor4x = MakeRegalProc( http_glColor4x, layer );
  tbl.glDepthRangex = MakeRegalProc( http_glDepthRangex, layer );
  tbl.glFogx = MakeRegalProc( http_glFogx, layer );
  tbl.glFogxv = MakeRegalProc( http_glFogxv, layer );
  tbl.glFrustumf = MakeRegalProc( http_glFrustumf, layer );
  tbl.glFrustumx = MakeRegalProc( http_glFrustumx, layer );
  tbl.glLightModelx = MakeRegalProc( http_glLightModelx, layer );
  tbl.glLightModelxv = MakeRegalProc( http_glLightModelxv, layer );
  tbl.glLightx = MakeRegalProc( http_glLightx, layer );
  tbl.glLightxv = MakeRegalProc( http_glLightxv, layer );
  tbl.glLineWidthx = MakeRegalProc( http_glLineWidthx, layer );
  tbl.glLoadMatrixx = MakeRegalProc( http_glLoadMatrixx, layer );
  tbl.glMaterialx = MakeRegalProc( http_glMaterialx, layer );
  tbl.glMaterialxv = MakeRegalProc( http_glMaterialxv, layer );
  tbl.glMultMatrixx = MakeRegalProc( http_glMultMatrixx, layer );
  tbl.glMultiTexCoord4x = MakeRegalProc( http_glMultiTexCoord4x, layer );
  tbl.glNormal3x = MakeRegalProc( http_glNormal3x, layer );
  tbl.glOrthof = MakeRegalProc( http_glOrthof, layer );
  tbl.glOrthox = MakeRegalProc( http_glOrthox, layer );
  tbl.glPointSizex = MakeRegalProc( http_glPointSizex, layer );
  tbl.glPolygonOffsetx = MakeRegalProc( http_glPolygonOffsetx, layer );
  tbl.glRotatex = MakeRegalProc( http_glRotatex, layer );
  tbl.glSampleCoveragex = MakeRegalProc( http_glSampleCoveragex, layer );
  tbl.glScalex = MakeRegalProc( http_glScalex, layer );
  tbl.glTexEnvx = MakeRegalProc( http_glTexEnvx, layer );
  tbl.glTexEnvxv = MakeRegalProc( http_glTexEnvxv, layer );
  tbl.glTexParameterx = MakeRegalProc( http_glTexParameterx, layer );
  tbl.glTranslatex = MakeRegalProc( http_glTranslatex, layer );

  // GL_REGAL_ES1_1_compatibility

  tbl.glClipPlanef = MakeRegalProc( http_glClipPlanef, layer );
  tbl.glClipPlanex = MakeRegalProc( http_glClipPlanex, layer );
  tbl.glGetClipPlanef = MakeRegalProc( http_glGetClipPlanef, layer );
  tbl.glGetClipPlanex = MakeRegalProc( http_glGetClipPlanex, layer );
  tbl.glGetFixedv = MakeRegalProc( http_glGetFixedv, layer );
  tbl.glGetLightxv = MakeRegalProc( http_glGetLightxv, layer );
  tbl.glGetMaterialxv = MakeRegalProc( http_glGetMaterialxv, layer );
  tbl.glGetTexEnvxv = MakeRegalProc( http_glGetTexEnvxv, layer );
  tbl.glGetTexParameterxv = MakeRegalProc( http_glGetTexParameterxv, layer );
  tbl.glPointParameterx = MakeRegalProc( http_glPointParameterx, layer );
  tbl.glPointParameterxv = MakeRegalProc( http_glPointParameterxv, layer );
  tbl.glPointSizePointerOES = MakeRegalProc( http_glPointSizePointerOES, layer );
  tbl.glTexParameterxv = MakeRegalProc( http_glTexParameterxv, layer );

  // GL_REGAL_log

  tbl.glLogMessageCallbackREGAL = MakeRegalProc( http_glLogMessageCallbackREGAL, layer );

  // GL_SGIS_detail_texture

  tbl.glDetailTexFuncSGIS = MakeRegalProc( http_glDetailTexFuncSGIS, layer );
  tbl.glGetDetailTexFuncSGIS = MakeRegalProc( http_glGetDetailTexFuncSGIS, layer );

  // GL_SGIS_fog_function

  tbl.glFogFuncSGIS = MakeRegalProc( http_glFogFuncSGIS, layer );
  tbl.glGetFogFuncSGIS = MakeRegalProc( http_glGetFogFuncSGIS, layer );

  // GL_SGIS_multisample

  tbl.glSampleMaskSGIS = MakeRegalProc( http_glSampleMaskSGIS, layer );
  tbl.glSamplePatternSGIS = MakeRegalProc( http_glSamplePatternSGIS, layer );

  // GL_SGIS_pixel_texture

  tbl.glGetPixelTexGenParameterfvSGIS = MakeRegalProc( http_glGetPixelTexGenParameterfvSGIS, layer );
  tbl.glGetPixelTexGenParameterivSGIS = MakeRegalProc( http_glGetPixelTexGenParameterivSGIS, layer );
  tbl.glPixelTexGenParameterfSGIS = MakeRegalProc( http_glPixelTexGenParameterfSGIS, layer );
  tbl.glPixelTexGenParameterfvSGIS = MakeRegalProc( http_glPixelTexGenParameterfvSGIS, layer );
  tbl.glPixelTexGenParameteriSGIS = MakeRegalProc( http_glPixelTexGenParameteriSGIS, layer );
  tbl.glPixelTexGenParameterivSGIS = MakeRegalProc( http_glPixelTexGenParameterivSGIS, layer );

  // GL_SGIS_point_parameters

  tbl.glPointParameterfSGIS = MakeRegalProc( http_glPointParameterfSGIS, layer );
  tbl.glPointParameterfvSGIS = MakeRegalProc( http_glPointParameterfvSGIS, layer );

  // GL_SGIS_sharpen_texture

  tbl.glGetSharpenTexFuncSGIS = MakeRegalProc( http_glGetSharpenTexFuncSGIS, layer );
  tbl.glSharpenTexFuncSGIS = MakeRegalProc( http_glSharpenTexFuncSGIS, layer );

  // GL_SGIS_texture4D

  tbl.glTexImage4DSGIS = MakeRegalProc( http_glTexImage4DSGIS, layer );
  tbl.glTexSubImage4DSGIS = MakeRegalProc( http_glTexSubImage4DSGIS, layer );

  // GL_SGIS_texture_color_mask

  tbl.glTextureColorMaskSGIS = MakeRegalProc( http_glTextureColorMaskSGIS, layer );

  // GL_SGIS_texture_filter4

  tbl.glGetTexFilterFuncSGIS = MakeRegalProc( http_glGetTexFilterFuncSGIS, layer );
  tbl.glTexFilterFuncSGIS = MakeRegalProc( http_glTexFilterFuncSGIS, layer );

  // GL_SGIX_async

  tbl.glAsyncMarkerSGIX = MakeRegalProc( http_glAsyncMarkerSGIX, layer );
  tbl.glDeleteAsyncMarkersSGIX = MakeRegalProc( http_glDeleteAsyncMarkersSGIX, layer );
  tbl.glFinishAsyncSGIX = MakeRegalProc( http_glFinishAsyncSGIX, layer );
  tbl.glGenAsyncMarkersSGIX = MakeRegalProc( http_glGenAsyncMarkersSGIX, layer );
  tbl.glIsAsyncMarkerSGIX = MakeRegalProc( http_glIsAsyncMarkerSGIX, layer );
  tbl.glPollAsyncSGIX = MakeRegalProc( http_glPollAsyncSGIX, layer );

  // GL_SGIX_flush_raster

  tbl.glFlushRasterSGIX = MakeRegalProc( http_glFlushRasterSGIX, layer );

  // GL_SGIX_fog_texture

  tbl.glTextureFogSGIX = MakeRegalProc( http_glTextureFogSGIX, layer );

  // GL_SGIX_fragment_lighting

  tbl.glFragmentColorMaterialSGIX = MakeRegalProc( http_glFragmentColorMaterialSGIX, layer );
  tbl.glFragmentLightModelfSGIX = MakeRegalProc( http_glFragmentLightModelfSGIX, layer );
  tbl.glFragmentLightModelfvSGIX = MakeRegalProc( http_glFragmentLightModelfvSGIX, layer );
  tbl.glFragmentLightModeliSGIX = MakeRegalProc( http_glFragmentLightModeliSGIX, layer );
  tbl.glFragmentLightModelivSGIX = MakeRegalProc( http_glFragmentLightModelivSGIX, layer );
  tbl.glFragmentLightfSGIX = MakeRegalProc( http_glFragmentLightfSGIX, layer );
  tbl.glFragmentLightfvSGIX = MakeRegalProc( http_glFragmentLightfvSGIX, layer );
  tbl.glFragmentLightiSGIX = MakeRegalProc( http_glFragmentLightiSGIX, layer );
  tbl.glFragmentLightivSGIX = MakeRegalProc( http_glFragmentLightivSGIX, layer );
  tbl.glFragmentMaterialfSGIX = MakeRegalProc( http_glFragmentMaterialfSGIX, layer );
  tbl.glFragmentMaterialfvSGIX = MakeRegalProc( http_glFragmentMaterialfvSGIX, layer );
  tbl.glFragmentMaterialiSGIX = MakeRegalProc( http_glFragmentMaterialiSGIX, layer );
  tbl.glFragmentMaterialivSGIX = MakeRegalProc( http_glFragmentMaterialivSGIX, layer );
  tbl.glGetFragmentLightfvSGIX = MakeRegalProc( http_glGetFragmentLightfvSGIX, layer );
  tbl.glGetFragmentLightivSGIX = MakeRegalProc( http_glGetFragmentLightivSGIX, layer );
  tbl.glGetFragmentMaterialfvSGIX = MakeRegalProc( http_glGetFragmentMaterialfvSGIX, layer );
  tbl.glGetFragmentMaterialivSGIX = MakeRegalProc( http_glGetFragmentMaterialivSGIX, layer );
  tbl.glLightEnviSGIX = MakeRegalProc( http_glLightEnviSGIX, layer );

  // GL_SGIX_framezoom

  tbl.glFrameZoomSGIX = MakeRegalProc( http_glFrameZoomSGIX, layer );

  // GL_SGIX_igloo_interface

  tbl.glIglooInterfaceSGIX = MakeRegalProc( http_glIglooInterfaceSGIX, layer );

  // GL_SGIX_instruments

  tbl.glGetInstrumentsSGIX = MakeRegalProc( http_glGetInstrumentsSGIX, layer );
  tbl.glInstrumentsBufferSGIX = MakeRegalProc( http_glInstrumentsBufferSGIX, layer );
  tbl.glPollInstrumentsSGIX = MakeRegalProc( http_glPollInstrumentsSGIX, layer );
  tbl.glReadInstrumentsSGIX = MakeRegalProc( http_glReadInstrumentsSGIX, layer );
  tbl.glStartInstrumentsSGIX = MakeRegalProc( http_glStartInstrumentsSGIX, layer );
  tbl.glStopInstrumentsSGIX = MakeRegalProc( http_glStopInstrumentsSGIX, layer );

  // GL_SGIX_list_priority

  tbl.glGetListParameterfvSGIX = MakeRegalProc( http_glGetListParameterfvSGIX, layer );
  tbl.glGetListParameterivSGIX = MakeRegalProc( http_glGetListParameterivSGIX, layer );
  tbl.glListParameterfSGIX = MakeRegalProc( http_glListParameterfSGIX, layer );
  tbl.glListParameterfvSGIX = MakeRegalProc( http_glListParameterfvSGIX, layer );
  tbl.glListParameteriSGIX = MakeRegalProc( http_glListParameteriSGIX, layer );
  tbl.glListParameterivSGIX = MakeRegalProc( http_glListParameterivSGIX, layer );

  // GL_SGIX_pixel_texture

  tbl.glPixelTexGenSGIX = MakeRegalProc( http_glPixelTexGenSGIX, layer );

  // GL_SGIX_polynomial_ffd

  tbl.glDeformSGIX = MakeRegalProc( http_glDeformSGIX, layer );
  tbl.glDeformationMap3dSGIX = MakeRegalProc( http_glDeformationMap3dSGIX, layer );
  tbl.glDeformationMap3fSGIX = MakeRegalProc( http_glDeformationMap3fSGIX, layer );
  tbl.glLoadIdentityDeformationMapSGIX = MakeRegalProc( http_glLoadIdentityDeformationMapSGIX, layer );

  // GL_SGIX_reference_plane

  tbl.glReferencePlaneSGIX = MakeRegalProc( http_glReferencePlaneSGIX, layer );

  // GL_SGIX_sprite

  tbl.glSpriteParameterfSGIX = MakeRegalProc( http_glSpriteParameterfSGIX, layer );
  tbl.glSpriteParameterfvSGIX = MakeRegalProc( http_glSpriteParameterfvSGIX, layer );
  tbl.glSpriteParameteriSGIX = MakeRegalProc( http_glSpriteParameteriSGIX, layer );
  tbl.glSpriteParameterivSGIX = MakeRegalProc( http_glSpriteParameterivSGIX, layer );

  // GL_SGIX_tag_sample_buffer

  tbl.glTagSampleBufferSGIX = MakeRegalProc( http_glTagSampleBufferSGIX, layer );

  // GL_SGI_color_table

  tbl.glColorTableParameterfvSGI = MakeRegalProc( http_glColorTableParameterfvSGI, layer );
  tbl.glColorTableParameterivSGI = MakeRegalProc( http_glColorTableParameterivSGI, layer );
  tbl.glColorTableSGI = MakeRegalProc( http_glColorTableSGI, layer );
  tbl.glCopyColorTableSGI = MakeRegalProc( http_glCopyColorTableSGI, layer );
  tbl.glGetColorTableParameterfvSGI = MakeRegalProc( http_glGetColorTableParameterfvSGI, layer );
  tbl.glGetColorTableParameterivSGI = MakeRegalProc( http_glGetColorTableParameterivSGI, layer );
  tbl.glGetColorTableSGI = MakeRegalProc( http_glGetColorTableSGI, layer );

  // GL_SUNX_constant_data

  tbl.glFinishTextureSUNX = MakeRegalProc( http_glFinishTextureSUNX, layer );

  // GL_SUN_global_alpha

  tbl.glGlobalAlphaFactorbSUN = MakeRegalProc( http_glGlobalAlphaFactorbSUN, layer );
  tbl.glGlobalAlphaFactordSUN = MakeRegalProc( http_glGlobalAlphaFactordSUN, layer );
  tbl.glGlobalAlphaFactorfSUN = MakeRegalProc( http_glGlobalAlphaFactorfSUN, layer );
  tbl.glGlobalAlphaFactoriSUN = MakeRegalProc( http_glGlobalAlphaFactoriSUN, layer );
  tbl.glGlobalAlphaFactorsSUN = MakeRegalProc( http_glGlobalAlphaFactorsSUN, layer );
  tbl.glGlobalAlphaFactorubSUN = MakeRegalProc( http_glGlobalAlphaFactorubSUN, layer );
  tbl.glGlobalAlphaFactoruiSUN = MakeRegalProc( http_glGlobalAlphaFactoruiSUN, layer );
  tbl.glGlobalAlphaFactorusSUN = MakeRegalProc( http_glGlobalAlphaFactorusSUN, layer );

  // GL_SUN_mesh_array

  tbl.glDrawMeshArraysSUN = MakeRegalProc( http_glDrawMeshArraysSUN, layer );

  // GL_SUN_read_video_pixels

  tbl.glReadVideoPixelsSUN = MakeRegalProc( http_glReadVideoPixelsSUN, layer );

  // GL_SUN_triangle_list

  tbl.glReplacementCodePointerSUN = MakeRegalProc( http_glReplacementCodePointerSUN, layer );
  tbl.glReplacementCodeubSUN = MakeRegalProc( http_glReplacementCodeubSUN, layer );
  tbl.glReplacementCodeubvSUN = MakeRegalProc( http_glReplacementCodeubvSUN, layer );
  tbl.glReplacementCodeuiSUN = MakeRegalProc( http_glReplacementCodeuiSUN, layer );
  tbl.glReplacementCodeuivSUN = MakeRegalProc( http_glReplacementCodeuivSUN, layer );
  tbl.glReplacementCodeusSUN = MakeRegalProc( http_glReplacementCodeusSUN, layer );
  tbl.glReplacementCodeusvSUN = MakeRegalProc( http_glReplacementCodeusvSUN, layer );

  // GL_SUN_vertex

  tbl.glColor3fVertex3fSUN = MakeRegalProc( http_glColor3fVertex3fSUN, layer );
  tbl.glColor3fVertex3fvSUN = MakeRegalProc( http_glColor3fVertex3fvSUN, layer );
  tbl.glColor4fNormal3fVertex3fSUN = MakeRegalProc( http_glColor4fNormal3fVertex3fSUN, layer );
  tbl.glColor4fNormal3fVertex3fvSUN = MakeRegalProc( http_glColor4fNormal3fVertex3fvSUN, layer );
  tbl.glColor4ubVertex2fSUN = MakeRegalProc( http_glColor4ubVertex2fSUN, layer );
  tbl.glColor4ubVertex2fvSUN = MakeRegalProc( http_glColor4ubVertex2fvSUN, layer );
  tbl.glColor4ubVertex3fSUN = MakeRegalProc( http_glColor4ubVertex3fSUN, layer );
  tbl.glColor4ubVertex3fvSUN = MakeRegalProc( http_glColor4ubVertex3fvSUN, layer );
  tbl.glNormal3fVertex3fSUN = MakeRegalProc( http_glNormal3fVertex3fSUN, layer );
  tbl.glNormal3fVertex3fvSUN = MakeRegalProc( http_glNormal3fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiColor3fVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiColor3fVertex3fSUN, layer );
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiColor3fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiColor4fNormal3fVertex3fSUN, layer );
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiColor4fNormal3fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiColor4ubVertex3fSUN, layer );
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiColor4ubVertex3fvSUN, layer );
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiNormal3fVertex3fSUN, layer );
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiNormal3fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, layer );
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, layer );
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiTexCoord2fVertex3fSUN, layer );
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiTexCoord2fVertex3fvSUN, layer );
  tbl.glReplacementCodeuiVertex3fSUN = MakeRegalProc( http_glReplacementCodeuiVertex3fSUN, layer );
  tbl.glReplacementCodeuiVertex3fvSUN = MakeRegalProc( http_glReplacementCodeuiVertex3fvSUN, layer );
  tbl.glTexCoord2fColor3fVertex3fSUN = MakeRegalProc( http_glTexCoord2fColor3fVertex3fSUN, layer );
  tbl.glTexCoord2fColor3fVertex3fvSUN = MakeRegalProc( http_glTexCoord2fColor3fVertex3fvSUN, layer );
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = MakeRegalProc( http_glTexCoord2fColor4fNormal3fVertex3fSUN, layer );
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = MakeRegalProc( http_glTexCoord2fColor4fNormal3fVertex3fvSUN, layer );
  tbl.glTexCoord2fColor4ubVertex3fSUN = MakeRegalProc( http_glTexCoord2fColor4ubVertex3fSUN, layer );
  tbl.glTexCoord2fColor4ubVertex3fvSUN = MakeRegalProc( http_glTexCoord2fColor4ubVertex3fvSUN, layer );
  tbl.glTexCoord2fNormal3fVertex3fSUN = MakeRegalProc( http_glTexCoord2fNormal3fVertex3fSUN, layer );
  tbl.glTexCoord2fNormal3fVertex3fvSUN = MakeRegalProc( http_glTexCoord2fNormal3fVertex3fvSUN, layer );
  tbl.glTexCoord2fVertex3fSUN = MakeRegalProc( http_glTexCoord2fVertex3fSUN, layer );
  tbl.glTexCoord2fVertex3fvSUN = MakeRegalProc( http_glTexCoord2fVertex3fvSUN, layer );
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = MakeRegalProc( http_glTexCoord4fColor4fNormal3fVertex4fSUN, layer );
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = MakeRegalProc( http_glTexCoord4fColor4fNormal3fVertex4fvSUN, layer );
  tbl.glTexCoord4fVertex4fSUN = MakeRegalProc( http_glTexCoord4fVertex4fSUN, layer );
  tbl.glTexCoord4fVertex4fvSUN = MakeRegalProc( http_glTexCoord4fVertex4fvSUN, layer );

  // GL_WIN_swap_hint

  tbl.glAddSwapHintRectWIN = MakeRegalProc( http_glAddSwapHintRectWIN, layer );

}

void InitDispatchHttp( Layer * layer, Dispatch::Global &tbl)
{

#if REGAL_SYS_WGL
  // WGL_3DL_stereo_control

  tbl.wglSetStereoEmitterState3DL = MakeRegalProc(http_wglSetStereoEmitterState3DL, layer);

  // WGL_AMD_gpu_association

  tbl.wglBlitContextFramebufferAMD = MakeRegalProc(http_wglBlitContextFramebufferAMD, layer);
  tbl.wglCreateAssociatedContextAMD = MakeRegalProc(http_wglCreateAssociatedContextAMD, layer);
  tbl.wglCreateAssociatedContextAttribsAMD = MakeRegalProc(http_wglCreateAssociatedContextAttribsAMD, layer);
  tbl.wglDeleteAssociatedContextAMD = MakeRegalProc(http_wglDeleteAssociatedContextAMD, layer);
  tbl.wglGetContextGPUIDAMD = MakeRegalProc(http_wglGetContextGPUIDAMD, layer);
  tbl.wglGetCurrentAssociatedContextAMD = MakeRegalProc(http_wglGetCurrentAssociatedContextAMD, layer);
  tbl.wglGetGPUIDsAMD = MakeRegalProc(http_wglGetGPUIDsAMD, layer);
  tbl.wglGetGPUInfoAMD = MakeRegalProc(http_wglGetGPUInfoAMD, layer);
  tbl.wglMakeAssociatedContextCurrentAMD = MakeRegalProc(http_wglMakeAssociatedContextCurrentAMD, layer);

  // WGL_ARB_buffer_region

  tbl.wglCreateBufferRegionARB = MakeRegalProc(http_wglCreateBufferRegionARB, layer);
  tbl.wglDeleteBufferRegionARB = MakeRegalProc(http_wglDeleteBufferRegionARB, layer);
  tbl.wglRestoreBufferRegionARB = MakeRegalProc(http_wglRestoreBufferRegionARB, layer);
  tbl.wglSaveBufferRegionARB = MakeRegalProc(http_wglSaveBufferRegionARB, layer);

  // WGL_ARB_create_context

  tbl.wglCreateContextAttribsARB = MakeRegalProc(http_wglCreateContextAttribsARB, layer);

  // WGL_ARB_extensions_string

  tbl.wglGetExtensionsStringARB = MakeRegalProc(http_wglGetExtensionsStringARB, layer);

  // WGL_ARB_make_current_read

  tbl.wglGetCurrentReadDCARB = MakeRegalProc(http_wglGetCurrentReadDCARB, layer);
  tbl.wglMakeContextCurrentARB = MakeRegalProc(http_wglMakeContextCurrentARB, layer);

  // WGL_ARB_pbuffer

  tbl.wglCreatePbufferARB = MakeRegalProc(http_wglCreatePbufferARB, layer);
  tbl.wglDestroyPbufferARB = MakeRegalProc(http_wglDestroyPbufferARB, layer);
  tbl.wglGetPbufferDCARB = MakeRegalProc(http_wglGetPbufferDCARB, layer);
  tbl.wglQueryPbufferARB = MakeRegalProc(http_wglQueryPbufferARB, layer);
  tbl.wglReleasePbufferDCARB = MakeRegalProc(http_wglReleasePbufferDCARB, layer);

  // WGL_ARB_pixel_format

  tbl.wglChoosePixelFormatARB = MakeRegalProc(http_wglChoosePixelFormatARB, layer);
  tbl.wglGetPixelFormatAttribfvARB = MakeRegalProc(http_wglGetPixelFormatAttribfvARB, layer);
  tbl.wglGetPixelFormatAttribivARB = MakeRegalProc(http_wglGetPixelFormatAttribivARB, layer);

  // WGL_ARB_render_texture

  tbl.wglBindTexImageARB = MakeRegalProc(http_wglBindTexImageARB, layer);
  tbl.wglReleaseTexImageARB = MakeRegalProc(http_wglReleaseTexImageARB, layer);
  tbl.wglSetPbufferAttribARB = MakeRegalProc(http_wglSetPbufferAttribARB, layer);

  // WGL_EXT_display_color_table

  tbl.wglBindDisplayColorTableEXT = MakeRegalProc(http_wglBindDisplayColorTableEXT, layer);
  tbl.wglCreateDisplayColorTableEXT = MakeRegalProc(http_wglCreateDisplayColorTableEXT, layer);
  tbl.wglDestroyDisplayColorTableEXT = MakeRegalProc(http_wglDestroyDisplayColorTableEXT, layer);
  tbl.wglLoadDisplayColorTableEXT = MakeRegalProc(http_wglLoadDisplayColorTableEXT, layer);

  // WGL_EXT_extensions_string

  tbl.wglGetExtensionsStringEXT = MakeRegalProc(http_wglGetExtensionsStringEXT, layer);

  // WGL_EXT_make_current_read

  tbl.wglGetCurrentReadDCEXT = MakeRegalProc(http_wglGetCurrentReadDCEXT, layer);
  tbl.wglMakeContextCurrentEXT = MakeRegalProc(http_wglMakeContextCurrentEXT, layer);

  // WGL_EXT_pbuffer

  tbl.wglCreatePbufferEXT = MakeRegalProc(http_wglCreatePbufferEXT, layer);
  tbl.wglDestroyPbufferEXT = MakeRegalProc(http_wglDestroyPbufferEXT, layer);
  tbl.wglGetPbufferDCEXT = MakeRegalProc(http_wglGetPbufferDCEXT, layer);
  tbl.wglQueryPbufferEXT = MakeRegalProc(http_wglQueryPbufferEXT, layer);
  tbl.wglReleasePbufferDCEXT = MakeRegalProc(http_wglReleasePbufferDCEXT, layer);

  // WGL_EXT_pixel_format

  tbl.wglChoosePixelFormatEXT = MakeRegalProc(http_wglChoosePixelFormatEXT, layer);
  tbl.wglGetPixelFormatAttribfvEXT = MakeRegalProc(http_wglGetPixelFormatAttribfvEXT, layer);
  tbl.wglGetPixelFormatAttribivEXT = MakeRegalProc(http_wglGetPixelFormatAttribivEXT, layer);

  // WGL_EXT_swap_control

  tbl.wglGetSwapIntervalEXT = MakeRegalProc(http_wglGetSwapIntervalEXT, layer);
  tbl.wglSwapIntervalEXT = MakeRegalProc(http_wglSwapIntervalEXT, layer);

  // WGL_GDI

  tbl.SwapBuffers = MakeRegalProc(http_SwapBuffers, layer);
  tbl.wglChoosePixelFormat = MakeRegalProc(http_wglChoosePixelFormat, layer);
  tbl.wglDescribePixelFormat = MakeRegalProc(http_wglDescribePixelFormat, layer);
  tbl.wglGetPixelFormat = MakeRegalProc(http_wglGetPixelFormat, layer);
  tbl.wglSetPixelFormat = MakeRegalProc(http_wglSetPixelFormat, layer);
  tbl.wglSwapBuffers = MakeRegalProc(http_wglSwapBuffers, layer);

  // WGL_I3D_digital_video_control

  tbl.wglGetDigitalVideoParametersI3D = MakeRegalProc(http_wglGetDigitalVideoParametersI3D, layer);
  tbl.wglSetDigitalVideoParametersI3D = MakeRegalProc(http_wglSetDigitalVideoParametersI3D, layer);

  // WGL_I3D_gamma

  tbl.wglGetGammaTableI3D = MakeRegalProc(http_wglGetGammaTableI3D, layer);
  tbl.wglGetGammaTableParametersI3D = MakeRegalProc(http_wglGetGammaTableParametersI3D, layer);
  tbl.wglSetGammaTableI3D = MakeRegalProc(http_wglSetGammaTableI3D, layer);
  tbl.wglSetGammaTableParametersI3D = MakeRegalProc(http_wglSetGammaTableParametersI3D, layer);

  // WGL_I3D_genlock

  tbl.wglDisableGenlockI3D = MakeRegalProc(http_wglDisableGenlockI3D, layer);
  tbl.wglEnableGenlockI3D = MakeRegalProc(http_wglEnableGenlockI3D, layer);
  tbl.wglGenlockSampleRateI3D = MakeRegalProc(http_wglGenlockSampleRateI3D, layer);
  tbl.wglGenlockSourceDelayI3D = MakeRegalProc(http_wglGenlockSourceDelayI3D, layer);
  tbl.wglGenlockSourceEdgeI3D = MakeRegalProc(http_wglGenlockSourceEdgeI3D, layer);
  tbl.wglGenlockSourceI3D = MakeRegalProc(http_wglGenlockSourceI3D, layer);
  tbl.wglGetGenlockSampleRateI3D = MakeRegalProc(http_wglGetGenlockSampleRateI3D, layer);
  tbl.wglGetGenlockSourceDelayI3D = MakeRegalProc(http_wglGetGenlockSourceDelayI3D, layer);
  tbl.wglGetGenlockSourceEdgeI3D = MakeRegalProc(http_wglGetGenlockSourceEdgeI3D, layer);
  tbl.wglGetGenlockSourceI3D = MakeRegalProc(http_wglGetGenlockSourceI3D, layer);
  tbl.wglIsEnabledGenlockI3D = MakeRegalProc(http_wglIsEnabledGenlockI3D, layer);
  tbl.wglQueryGenlockMaxSourceDelayI3D = MakeRegalProc(http_wglQueryGenlockMaxSourceDelayI3D, layer);

  // WGL_I3D_image_buffer

  tbl.wglAssociateImageBufferEventsI3D = MakeRegalProc(http_wglAssociateImageBufferEventsI3D, layer);
  tbl.wglCreateImageBufferI3D = MakeRegalProc(http_wglCreateImageBufferI3D, layer);
  tbl.wglDestroyImageBufferI3D = MakeRegalProc(http_wglDestroyImageBufferI3D, layer);
  tbl.wglReleaseImageBufferEventsI3D = MakeRegalProc(http_wglReleaseImageBufferEventsI3D, layer);

  // WGL_I3D_swap_frame_lock

  tbl.wglDisableFrameLockI3D = MakeRegalProc(http_wglDisableFrameLockI3D, layer);
  tbl.wglEnableFrameLockI3D = MakeRegalProc(http_wglEnableFrameLockI3D, layer);
  tbl.wglIsEnabledFrameLockI3D = MakeRegalProc(http_wglIsEnabledFrameLockI3D, layer);
  tbl.wglQueryFrameLockMasterI3D = MakeRegalProc(http_wglQueryFrameLockMasterI3D, layer);

  // WGL_I3D_swap_frame_usage

  tbl.wglBeginFrameTrackingI3D = MakeRegalProc(http_wglBeginFrameTrackingI3D, layer);
  tbl.wglEndFrameTrackingI3D = MakeRegalProc(http_wglEndFrameTrackingI3D, layer);
  tbl.wglGetFrameUsageI3D = MakeRegalProc(http_wglGetFrameUsageI3D, layer);
  tbl.wglQueryFrameTrackingI3D = MakeRegalProc(http_wglQueryFrameTrackingI3D, layer);

  // WGL_NV_DX_interop

  tbl.wglDXCloseDeviceNV = MakeRegalProc(http_wglDXCloseDeviceNV, layer);
  tbl.wglDXLockObjectsNV = MakeRegalProc(http_wglDXLockObjectsNV, layer);
  tbl.wglDXObjectAccessNV = MakeRegalProc(http_wglDXObjectAccessNV, layer);
  tbl.wglDXOpenDeviceNV = MakeRegalProc(http_wglDXOpenDeviceNV, layer);
  tbl.wglDXRegisterObjectNV = MakeRegalProc(http_wglDXRegisterObjectNV, layer);
  tbl.wglDXSetResourceShareHandleNV = MakeRegalProc(http_wglDXSetResourceShareHandleNV, layer);
  tbl.wglDXUnlockObjectsNV = MakeRegalProc(http_wglDXUnlockObjectsNV, layer);
  tbl.wglDXUnregisterObjectNV = MakeRegalProc(http_wglDXUnregisterObjectNV, layer);

  // WGL_NV_copy_image

  tbl.wglCopyImageSubDataNV = MakeRegalProc(http_wglCopyImageSubDataNV, layer);

  // WGL_NV_gpu_affinity

  tbl.wglCreateAffinityDCNV = MakeRegalProc(http_wglCreateAffinityDCNV, layer);
  tbl.wglDeleteDCNV = MakeRegalProc(http_wglDeleteDCNV, layer);
  tbl.wglEnumGpuDevicesNV = MakeRegalProc(http_wglEnumGpuDevicesNV, layer);
  tbl.wglEnumGpusFromAffinityDCNV = MakeRegalProc(http_wglEnumGpusFromAffinityDCNV, layer);
  tbl.wglEnumGpusNV = MakeRegalProc(http_wglEnumGpusNV, layer);

  // WGL_NV_present_video

  tbl.wglBindVideoDeviceNV = MakeRegalProc(http_wglBindVideoDeviceNV, layer);
  tbl.wglEnumerateVideoDevicesNV = MakeRegalProc(http_wglEnumerateVideoDevicesNV, layer);
  tbl.wglQueryCurrentContextNV = MakeRegalProc(http_wglQueryCurrentContextNV, layer);

  // WGL_NV_swap_group

  tbl.wglBindSwapBarrierNV = MakeRegalProc(http_wglBindSwapBarrierNV, layer);
  tbl.wglJoinSwapGroupNV = MakeRegalProc(http_wglJoinSwapGroupNV, layer);
  tbl.wglQueryFrameCountNV = MakeRegalProc(http_wglQueryFrameCountNV, layer);
  tbl.wglQueryMaxSwapGroupsNV = MakeRegalProc(http_wglQueryMaxSwapGroupsNV, layer);
  tbl.wglQuerySwapGroupNV = MakeRegalProc(http_wglQuerySwapGroupNV, layer);
  tbl.wglResetFrameCountNV = MakeRegalProc(http_wglResetFrameCountNV, layer);

  // WGL_NV_vertex_array_range

  tbl.wglAllocateMemoryNV = MakeRegalProc(http_wglAllocateMemoryNV, layer);
  tbl.wglFreeMemoryNV = MakeRegalProc(http_wglFreeMemoryNV, layer);

  // WGL_NV_video_capture

  tbl.wglBindVideoCaptureDeviceNV = MakeRegalProc(http_wglBindVideoCaptureDeviceNV, layer);
  tbl.wglEnumerateVideoCaptureDevicesNV = MakeRegalProc(http_wglEnumerateVideoCaptureDevicesNV, layer);
  tbl.wglLockVideoCaptureDeviceNV = MakeRegalProc(http_wglLockVideoCaptureDeviceNV, layer);
  tbl.wglQueryVideoCaptureDeviceNV = MakeRegalProc(http_wglQueryVideoCaptureDeviceNV, layer);
  tbl.wglReleaseVideoCaptureDeviceNV = MakeRegalProc(http_wglReleaseVideoCaptureDeviceNV, layer);

  // WGL_NV_video_output

  tbl.wglBindVideoImageNV = MakeRegalProc(http_wglBindVideoImageNV, layer);
  tbl.wglGetVideoDeviceNV = MakeRegalProc(http_wglGetVideoDeviceNV, layer);
  tbl.wglGetVideoInfoNV = MakeRegalProc(http_wglGetVideoInfoNV, layer);
  tbl.wglReleaseVideoDeviceNV = MakeRegalProc(http_wglReleaseVideoDeviceNV, layer);
  tbl.wglReleaseVideoImageNV = MakeRegalProc(http_wglReleaseVideoImageNV, layer);
  tbl.wglSendPbufferToVideoNV = MakeRegalProc(http_wglSendPbufferToVideoNV, layer);

  // WGL_OML_sync_control

  tbl.wglGetMscRateOML = MakeRegalProc(http_wglGetMscRateOML, layer);
  tbl.wglGetSyncValuesOML = MakeRegalProc(http_wglGetSyncValuesOML, layer);
  tbl.wglSwapBuffersMscOML = MakeRegalProc(http_wglSwapBuffersMscOML, layer);
  tbl.wglSwapLayerBuffersMscOML = MakeRegalProc(http_wglSwapLayerBuffersMscOML, layer);
  tbl.wglWaitForMscOML = MakeRegalProc(http_wglWaitForMscOML, layer);
  tbl.wglWaitForSbcOML = MakeRegalProc(http_wglWaitForSbcOML, layer);

  // WGL_core

  tbl.wglCopyContext = MakeRegalProc(http_wglCopyContext, layer);
  tbl.wglCreateContext = MakeRegalProc(http_wglCreateContext, layer);
  tbl.wglCreateLayerContext = MakeRegalProc(http_wglCreateLayerContext, layer);
  tbl.wglDeleteContext = MakeRegalProc(http_wglDeleteContext, layer);
  tbl.wglDescribeLayerPlane = MakeRegalProc(http_wglDescribeLayerPlane, layer);
  tbl.wglGetCurrentContext = MakeRegalProc(http_wglGetCurrentContext, layer);
  tbl.wglGetCurrentDC = MakeRegalProc(http_wglGetCurrentDC, layer);
  tbl.wglGetDefaultProcAddress = MakeRegalProc(http_wglGetDefaultProcAddress, layer);
  tbl.wglGetLayerPaletteEntries = MakeRegalProc(http_wglGetLayerPaletteEntries, layer);
  tbl.wglGetProcAddress = MakeRegalProc(http_wglGetProcAddress, layer);
  tbl.wglMakeCurrent = MakeRegalProc(http_wglMakeCurrent, layer);
  tbl.wglRealizeLayerPalette = MakeRegalProc(http_wglRealizeLayerPalette, layer);
  tbl.wglSetLayerPaletteEntries = MakeRegalProc(http_wglSetLayerPaletteEntries, layer);
  tbl.wglShareLists = MakeRegalProc(http_wglShareLists, layer);
  tbl.wglSwapLayerBuffers = MakeRegalProc(http_wglSwapLayerBuffers, layer);
  tbl.wglSwapMultipleBuffers = MakeRegalProc(http_wglSwapMultipleBuffers, layer);
  tbl.wglUseFontBitmapsA = MakeRegalProc(http_wglUseFontBitmapsA, layer);
  tbl.wglUseFontBitmapsW = MakeRegalProc(http_wglUseFontBitmapsW, layer);
  tbl.wglUseFontOutlinesA = MakeRegalProc(http_wglUseFontOutlinesA, layer);
  tbl.wglUseFontOutlinesW = MakeRegalProc(http_wglUseFontOutlinesW, layer);
#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX

  // GLX_VERSION_1_0

  tbl.glXChooseVisual = MakeRegalProc(http_glXChooseVisual, layer);
  tbl.glXCopyContext = MakeRegalProc(http_glXCopyContext, layer);
  tbl.glXCreateContext = MakeRegalProc(http_glXCreateContext, layer);
  tbl.glXCreateGLXPixmap = MakeRegalProc(http_glXCreateGLXPixmap, layer);
  tbl.glXDestroyContext = MakeRegalProc(http_glXDestroyContext, layer);
  tbl.glXDestroyGLXPixmap = MakeRegalProc(http_glXDestroyGLXPixmap, layer);
  tbl.glXGetConfig = MakeRegalProc(http_glXGetConfig, layer);
  tbl.glXGetCurrentContext = MakeRegalProc(http_glXGetCurrentContext, layer);
  tbl.glXGetCurrentDrawable = MakeRegalProc(http_glXGetCurrentDrawable, layer);
  tbl.glXIsDirect = MakeRegalProc(http_glXIsDirect, layer);
  tbl.glXMakeCurrent = MakeRegalProc(http_glXMakeCurrent, layer);
  tbl.glXQueryExtension = MakeRegalProc(http_glXQueryExtension, layer);
  tbl.glXQueryVersion = MakeRegalProc(http_glXQueryVersion, layer);
  tbl.glXSwapBuffers = MakeRegalProc(http_glXSwapBuffers, layer);
  tbl.glXUseXFont = MakeRegalProc(http_glXUseXFont, layer);
  tbl.glXWaitGL = MakeRegalProc(http_glXWaitGL, layer);
  tbl.glXWaitX = MakeRegalProc(http_glXWaitX, layer);

  // GLX_VERSION_1_1

  tbl.glXGetClientString = MakeRegalProc(http_glXGetClientString, layer);
  tbl.glXQueryExtensionsString = MakeRegalProc(http_glXQueryExtensionsString, layer);
  tbl.glXQueryServerString = MakeRegalProc(http_glXQueryServerString, layer);

  // GLX_VERSION_1_2

  tbl.glXGetCurrentDisplay = MakeRegalProc(http_glXGetCurrentDisplay, layer);

  // GLX_VERSION_1_3

  tbl.glXChooseFBConfig = MakeRegalProc(http_glXChooseFBConfig, layer);
  tbl.glXCreateNewContext = MakeRegalProc(http_glXCreateNewContext, layer);
  tbl.glXCreatePbuffer = MakeRegalProc(http_glXCreatePbuffer, layer);
  tbl.glXCreatePixmap = MakeRegalProc(http_glXCreatePixmap, layer);
  tbl.glXCreateWindow = MakeRegalProc(http_glXCreateWindow, layer);
  tbl.glXDestroyPbuffer = MakeRegalProc(http_glXDestroyPbuffer, layer);
  tbl.glXDestroyPixmap = MakeRegalProc(http_glXDestroyPixmap, layer);
  tbl.glXDestroyWindow = MakeRegalProc(http_glXDestroyWindow, layer);
  tbl.glXGetCurrentReadDrawable = MakeRegalProc(http_glXGetCurrentReadDrawable, layer);
  tbl.glXGetFBConfigAttrib = MakeRegalProc(http_glXGetFBConfigAttrib, layer);
  tbl.glXGetFBConfigs = MakeRegalProc(http_glXGetFBConfigs, layer);
  tbl.glXGetSelectedEvent = MakeRegalProc(http_glXGetSelectedEvent, layer);
  tbl.glXGetVisualFromFBConfig = MakeRegalProc(http_glXGetVisualFromFBConfig, layer);
  tbl.glXMakeContextCurrent = MakeRegalProc(http_glXMakeContextCurrent, layer);
  tbl.glXQueryContext = MakeRegalProc(http_glXQueryContext, layer);
  tbl.glXQueryDrawable = MakeRegalProc(http_glXQueryDrawable, layer);
  tbl.glXSelectEvent = MakeRegalProc(http_glXSelectEvent, layer);

  // GLX_VERSION_1_4

  tbl.glXGetProcAddress = MakeRegalProc(http_glXGetProcAddress, layer);

  // GLX_AMD_gpu_association

  tbl.glXBlitContextFramebufferAMD = MakeRegalProc(http_glXBlitContextFramebufferAMD, layer);
  tbl.glXCreateAssociatedContextAMD = MakeRegalProc(http_glXCreateAssociatedContextAMD, layer);
  tbl.glXCreateAssociatedContextAttribsAMD = MakeRegalProc(http_glXCreateAssociatedContextAttribsAMD, layer);
  tbl.glXDeleteAssociatedContextAMD = MakeRegalProc(http_glXDeleteAssociatedContextAMD, layer);
  tbl.glXGetContextGPUIDAMD = MakeRegalProc(http_glXGetContextGPUIDAMD, layer);
  tbl.glXGetCurrentAssociatedContextAMD = MakeRegalProc(http_glXGetCurrentAssociatedContextAMD, layer);
  tbl.glXGetGPUIDsAMD = MakeRegalProc(http_glXGetGPUIDsAMD, layer);
  tbl.glXGetGPUInfoAMD = MakeRegalProc(http_glXGetGPUInfoAMD, layer);
  tbl.glXMakeAssociatedContextCurrentAMD = MakeRegalProc(http_glXMakeAssociatedContextCurrentAMD, layer);

  // GLX_ARB_create_context

  tbl.glXCreateContextAttribsARB = MakeRegalProc(http_glXCreateContextAttribsARB, layer);

  // GLX_ARB_get_proc_address

  tbl.glXGetProcAddressARB = MakeRegalProc(http_glXGetProcAddressARB, layer);

  // GLX_ATI_render_texture

  tbl.glXBindTexImageATI = MakeRegalProc(http_glXBindTexImageATI, layer);
  tbl.glXDrawableAttribATI = MakeRegalProc(http_glXDrawableAttribATI, layer);
  tbl.glXReleaseTexImageATI = MakeRegalProc(http_glXReleaseTexImageATI, layer);

  // GLX_EXT_import_context

  tbl.glXFreeContextEXT = MakeRegalProc(http_glXFreeContextEXT, layer);
  tbl.glXGetContextIDEXT = MakeRegalProc(http_glXGetContextIDEXT, layer);
  tbl.glXImportContextEXT = MakeRegalProc(http_glXImportContextEXT, layer);
  tbl.glXQueryContextInfoEXT = MakeRegalProc(http_glXQueryContextInfoEXT, layer);

  // GLX_EXT_swap_control

  tbl.glXSwapIntervalEXT = MakeRegalProc(http_glXSwapIntervalEXT, layer);

  // GLX_EXT_texture_from_pixmap

  tbl.glXBindTexImageEXT = MakeRegalProc(http_glXBindTexImageEXT, layer);
  tbl.glXReleaseTexImageEXT = MakeRegalProc(http_glXReleaseTexImageEXT, layer);

  // GLX_MESA_agp_offset

  tbl.glXGetAGPOffsetMESA = MakeRegalProc(http_glXGetAGPOffsetMESA, layer);

  // GLX_MESA_copy_sub_buffer

  tbl.glXCopySubBufferMESA = MakeRegalProc(http_glXCopySubBufferMESA, layer);

  // GLX_MESA_pixmap_colormap

  tbl.glXCreateGLXPixmapMESA = MakeRegalProc(http_glXCreateGLXPixmapMESA, layer);

  // GLX_MESA_release_buffers

  tbl.glXReleaseBuffersMESA = MakeRegalProc(http_glXReleaseBuffersMESA, layer);

  // GLX_MESA_set_3dfx_mode

  tbl.glXSet3DfxModeMESA = MakeRegalProc(http_glXSet3DfxModeMESA, layer);

  // GLX_MESA_swap_control

  tbl.glXGetSwapIntervalMESA = MakeRegalProc(http_glXGetSwapIntervalMESA, layer);
  tbl.glXSwapIntervalMESA = MakeRegalProc(http_glXSwapIntervalMESA, layer);

  // GLX_NV_copy_image

  tbl.glXCopyImageSubDataNV = MakeRegalProc(http_glXCopyImageSubDataNV, layer);

  // GLX_NV_present_video

  tbl.glXBindVideoDeviceNV = MakeRegalProc(http_glXBindVideoDeviceNV, layer);
  tbl.glXEnumerateVideoDevicesNV = MakeRegalProc(http_glXEnumerateVideoDevicesNV, layer);

  // GLX_NV_swap_group

  tbl.glXBindSwapBarrierNV = MakeRegalProc(http_glXBindSwapBarrierNV, layer);
  tbl.glXJoinSwapGroupNV = MakeRegalProc(http_glXJoinSwapGroupNV, layer);
  tbl.glXQueryFrameCountNV = MakeRegalProc(http_glXQueryFrameCountNV, layer);
  tbl.glXQueryMaxSwapGroupsNV = MakeRegalProc(http_glXQueryMaxSwapGroupsNV, layer);
  tbl.glXQuerySwapGroupNV = MakeRegalProc(http_glXQuerySwapGroupNV, layer);
  tbl.glXResetFrameCountNV = MakeRegalProc(http_glXResetFrameCountNV, layer);

  // GLX_NV_vertex_array_range

  tbl.glXAllocateMemoryNV = MakeRegalProc(http_glXAllocateMemoryNV, layer);
  tbl.glXFreeMemoryNV = MakeRegalProc(http_glXFreeMemoryNV, layer);

  // GLX_NV_video_capture

  tbl.glXBindVideoCaptureDeviceNV = MakeRegalProc(http_glXBindVideoCaptureDeviceNV, layer);
  tbl.glXEnumerateVideoCaptureDevicesNV = MakeRegalProc(http_glXEnumerateVideoCaptureDevicesNV, layer);
  tbl.glXLockVideoCaptureDeviceNV = MakeRegalProc(http_glXLockVideoCaptureDeviceNV, layer);
  tbl.glXQueryVideoCaptureDeviceNV = MakeRegalProc(http_glXQueryVideoCaptureDeviceNV, layer);
  tbl.glXReleaseVideoCaptureDeviceNV = MakeRegalProc(http_glXReleaseVideoCaptureDeviceNV, layer);

  // GLX_NV_video_output

  tbl.glXBindVideoImageNV = MakeRegalProc(http_glXBindVideoImageNV, layer);
  tbl.glXGetVideoDeviceNV = MakeRegalProc(http_glXGetVideoDeviceNV, layer);
  tbl.glXGetVideoInfoNV = MakeRegalProc(http_glXGetVideoInfoNV, layer);
  tbl.glXReleaseVideoDeviceNV = MakeRegalProc(http_glXReleaseVideoDeviceNV, layer);
  tbl.glXReleaseVideoImageNV = MakeRegalProc(http_glXReleaseVideoImageNV, layer);
  tbl.glXSendPbufferToVideoNV = MakeRegalProc(http_glXSendPbufferToVideoNV, layer);

  // GLX_OML_sync_control

  tbl.glXGetMscRateOML = MakeRegalProc(http_glXGetMscRateOML, layer);
  tbl.glXGetSyncValuesOML = MakeRegalProc(http_glXGetSyncValuesOML, layer);
  tbl.glXSwapBuffersMscOML = MakeRegalProc(http_glXSwapBuffersMscOML, layer);
  tbl.glXWaitForMscOML = MakeRegalProc(http_glXWaitForMscOML, layer);
  tbl.glXWaitForSbcOML = MakeRegalProc(http_glXWaitForSbcOML, layer);

  // GLX_SGIX_fbconfig

  tbl.glXChooseFBConfigSGIX = MakeRegalProc(http_glXChooseFBConfigSGIX, layer);
  tbl.glXCreateContextWithConfigSGIX = MakeRegalProc(http_glXCreateContextWithConfigSGIX, layer);
  tbl.glXCreateGLXPixmapWithConfigSGIX = MakeRegalProc(http_glXCreateGLXPixmapWithConfigSGIX, layer);
  tbl.glXGetFBConfigAttribSGIX = MakeRegalProc(http_glXGetFBConfigAttribSGIX, layer);
  tbl.glXGetFBConfigFromVisualSGIX = MakeRegalProc(http_glXGetFBConfigFromVisualSGIX, layer);
  tbl.glXGetVisualFromFBConfigSGIX = MakeRegalProc(http_glXGetVisualFromFBConfigSGIX, layer);

  // GLX_SGIX_pbuffer

  tbl.glXCreateGLXPbufferSGIX = MakeRegalProc(http_glXCreateGLXPbufferSGIX, layer);
  tbl.glXDestroyGLXPbufferSGIX = MakeRegalProc(http_glXDestroyGLXPbufferSGIX, layer);
  tbl.glXGetSelectedEventSGIX = MakeRegalProc(http_glXGetSelectedEventSGIX, layer);
  tbl.glXQueryGLXPbufferSGIX = MakeRegalProc(http_glXQueryGLXPbufferSGIX, layer);
  tbl.glXSelectEventSGIX = MakeRegalProc(http_glXSelectEventSGIX, layer);

  // GLX_SGIX_swap_barrier

  tbl.glXBindSwapBarrierSGIX = MakeRegalProc(http_glXBindSwapBarrierSGIX, layer);
  tbl.glXQueryMaxSwapBarriersSGIX = MakeRegalProc(http_glXQueryMaxSwapBarriersSGIX, layer);

  // GLX_SGIX_swap_group

  tbl.glXJoinSwapGroupSGIX = MakeRegalProc(http_glXJoinSwapGroupSGIX, layer);

  // GLX_SGIX_video_resize

  tbl.glXBindChannelToWindowSGIX = MakeRegalProc(http_glXBindChannelToWindowSGIX, layer);
  tbl.glXChannelRectSGIX = MakeRegalProc(http_glXChannelRectSGIX, layer);
  tbl.glXChannelRectSyncSGIX = MakeRegalProc(http_glXChannelRectSyncSGIX, layer);
  tbl.glXQueryChannelDeltasSGIX = MakeRegalProc(http_glXQueryChannelDeltasSGIX, layer);
  tbl.glXQueryChannelRectSGIX = MakeRegalProc(http_glXQueryChannelRectSGIX, layer);

  // GLX_SGI_cushion

  tbl.glXCushionSGI = MakeRegalProc(http_glXCushionSGI, layer);

  // GLX_SGI_make_current_read

  tbl.glXGetCurrentReadDrawableSGI = MakeRegalProc(http_glXGetCurrentReadDrawableSGI, layer);
  tbl.glXMakeCurrentReadSGI = MakeRegalProc(http_glXMakeCurrentReadSGI, layer);

  // GLX_SGI_swap_control

  tbl.glXSwapIntervalSGI = MakeRegalProc(http_glXSwapIntervalSGI, layer);

  // GLX_SGI_video_sync

  tbl.glXGetVideoSyncSGI = MakeRegalProc(http_glXGetVideoSyncSGI, layer);
  tbl.glXWaitVideoSyncSGI = MakeRegalProc(http_glXWaitVideoSyncSGI, layer);

  // GLX_SUN_get_transparent_index

  tbl.glXGetTransparentIndexSUN = MakeRegalProc(http_glXGetTransparentIndexSUN, layer);

  // GLX_SUN_video_resize

  tbl.glXGetVideoResizeSUN = MakeRegalProc(http_glXGetVideoResizeSUN, layer);
  tbl.glXVideoResizeSUN = MakeRegalProc(http_glXVideoResizeSUN, layer);
#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX

  // CGL_VERSION_1_0

  tbl.CGLChoosePixelFormat = MakeRegalProc(http_CGLChoosePixelFormat, layer);
  tbl.CGLClearDrawable = MakeRegalProc(http_CGLClearDrawable, layer);
  tbl.CGLCopyContext = MakeRegalProc(http_CGLCopyContext, layer);
  tbl.CGLCreateContext = MakeRegalProc(http_CGLCreateContext, layer);
  tbl.CGLDescribePixelFormat = MakeRegalProc(http_CGLDescribePixelFormat, layer);
  tbl.CGLDescribeRenderer = MakeRegalProc(http_CGLDescribeRenderer, layer);
  tbl.CGLDestroyContext = MakeRegalProc(http_CGLDestroyContext, layer);
  tbl.CGLDestroyPixelFormat = MakeRegalProc(http_CGLDestroyPixelFormat, layer);
  tbl.CGLDestroyRendererInfo = MakeRegalProc(http_CGLDestroyRendererInfo, layer);
  tbl.CGLDisable = MakeRegalProc(http_CGLDisable, layer);
  tbl.CGLEnable = MakeRegalProc(http_CGLEnable, layer);
  tbl.CGLErrorString = MakeRegalProc(http_CGLErrorString, layer);
  tbl.CGLFlushDrawable = MakeRegalProc(http_CGLFlushDrawable, layer);
  tbl.CGLGetOffScreen = MakeRegalProc(http_CGLGetOffScreen, layer);
  tbl.CGLGetOption = MakeRegalProc(http_CGLGetOption, layer);
  tbl.CGLGetParameter = MakeRegalProc(http_CGLGetParameter, layer);
  tbl.CGLGetVersion = MakeRegalProc(http_CGLGetVersion, layer);
  tbl.CGLGetVirtualScreen = MakeRegalProc(http_CGLGetVirtualScreen, layer);
  tbl.CGLIsEnabled = MakeRegalProc(http_CGLIsEnabled, layer);
  tbl.CGLQueryRendererInfo = MakeRegalProc(http_CGLQueryRendererInfo, layer);
  tbl.CGLSetFullScreen = MakeRegalProc(http_CGLSetFullScreen, layer);
  tbl.CGLSetOffScreen = MakeRegalProc(http_CGLSetOffScreen, layer);
  tbl.CGLSetOption = MakeRegalProc(http_CGLSetOption, layer);
  tbl.CGLSetParameter = MakeRegalProc(http_CGLSetParameter, layer);
  tbl.CGLSetVirtualScreen = MakeRegalProc(http_CGLSetVirtualScreen, layer);

  // CGL_VERSION_1_1

  tbl.CGLCreatePBuffer = MakeRegalProc(http_CGLCreatePBuffer, layer);
  tbl.CGLDescribePBuffer = MakeRegalProc(http_CGLDescribePBuffer, layer);
  tbl.CGLDestroyPBuffer = MakeRegalProc(http_CGLDestroyPBuffer, layer);
  tbl.CGLGetPBuffer = MakeRegalProc(http_CGLGetPBuffer, layer);
  tbl.CGLSetPBuffer = MakeRegalProc(http_CGLSetPBuffer, layer);
  tbl.CGLTexImagePBuffer = MakeRegalProc(http_CGLTexImagePBuffer, layer);

  // CGL_VERSION_1_2

  tbl.CGLGetContextRetainCount = MakeRegalProc(http_CGLGetContextRetainCount, layer);
  tbl.CGLGetGlobalOption = MakeRegalProc(http_CGLGetGlobalOption, layer);
  tbl.CGLGetPBufferRetainCount = MakeRegalProc(http_CGLGetPBufferRetainCount, layer);
  tbl.CGLGetPixelFormat = MakeRegalProc(http_CGLGetPixelFormat, layer);
  tbl.CGLGetPixelFormatRetainCount = MakeRegalProc(http_CGLGetPixelFormatRetainCount, layer);
  tbl.CGLLockContext = MakeRegalProc(http_CGLLockContext, layer);
  tbl.CGLReleaseContext = MakeRegalProc(http_CGLReleaseContext, layer);
  tbl.CGLReleasePBuffer = MakeRegalProc(http_CGLReleasePBuffer, layer);
  tbl.CGLReleasePixelFormat = MakeRegalProc(http_CGLReleasePixelFormat, layer);
  tbl.CGLRetainContext = MakeRegalProc(http_CGLRetainContext, layer);
  tbl.CGLRetainPBuffer = MakeRegalProc(http_CGLRetainPBuffer, layer);
  tbl.CGLRetainPixelFormat = MakeRegalProc(http_CGLRetainPixelFormat, layer);
  tbl.CGLSetGlobalOption = MakeRegalProc(http_CGLSetGlobalOption, layer);
  tbl.CGLUnlockContext = MakeRegalProc(http_CGLUnlockContext, layer);

  // CGL_VERSION_1_3

  tbl.CGLGetCurrentContext = MakeRegalProc(http_CGLGetCurrentContext, layer);
  tbl.CGLGetShareGroup = MakeRegalProc(http_CGLGetShareGroup, layer);
  tbl.CGLGetSurface = MakeRegalProc(http_CGLGetSurface, layer);
  tbl.CGLSetCurrentContext = MakeRegalProc(http_CGLSetCurrentContext, layer);
  tbl.CGLSetSurface = MakeRegalProc(http_CGLSetSurface, layer);
  tbl.CGLTexImageIOSurface2D = MakeRegalProc(http_CGLTexImageIOSurface2D, layer);
  tbl.CGLUpdateContext = MakeRegalProc(http_CGLUpdateContext, layer);
#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

  // EGL_ANGLE_query_surface_pointer

  tbl.eglQuerySurfacePointerANGLE = MakeRegalProc(http_eglQuerySurfacePointerANGLE, layer);

  // EGL_KHR_fence_sync

  tbl.eglClientWaitSyncKHR = MakeRegalProc(http_eglClientWaitSyncKHR, layer);
  tbl.eglCreateSyncKHR = MakeRegalProc(http_eglCreateSyncKHR, layer);
  tbl.eglDestroySyncKHR = MakeRegalProc(http_eglDestroySyncKHR, layer);
  tbl.eglGetSyncAttribKHR = MakeRegalProc(http_eglGetSyncAttribKHR, layer);

  // EGL_KHR_image_base

  tbl.eglCreateImageKHR = MakeRegalProc(http_eglCreateImageKHR, layer);
  tbl.eglDestroyImageKHR = MakeRegalProc(http_eglDestroyImageKHR, layer);

  // EGL_KHR_lock_surface

  tbl.eglLockSurfaceKHR = MakeRegalProc(http_eglLockSurfaceKHR, layer);
  tbl.eglUnlockSurfaceKHR = MakeRegalProc(http_eglUnlockSurfaceKHR, layer);

  // EGL_KHR_stream_consumer_gltexture

  tbl.eglStreamConsumerAcquireKHR = MakeRegalProc(http_eglStreamConsumerAcquireKHR, layer);
  tbl.eglStreamConsumerGLTextureExternalKHR = MakeRegalProc(http_eglStreamConsumerGLTextureExternalKHR, layer);
  tbl.eglStreamConsumerReleaseKHR = MakeRegalProc(http_eglStreamConsumerReleaseKHR, layer);

  // EGL_KHR_stream_cross_process_fd

  tbl.eglCreateStreamFromFileDescriptorKHR = MakeRegalProc(http_eglCreateStreamFromFileDescriptorKHR, layer);
  tbl.eglGetStreamFileDescriptorKHR = MakeRegalProc(http_eglGetStreamFileDescriptorKHR, layer);

  // EGL_KHR_stream_producer_eglsurface

  tbl.eglCreateStreamProducerSurfaceKHR = MakeRegalProc(http_eglCreateStreamProducerSurfaceKHR, layer);

  // EGL_KHR_wait_sync

  tbl.eglWaitSyncKHR = MakeRegalProc(http_eglWaitSyncKHR, layer);

  // EGL_MESA_drm_image

  tbl.eglCreateDRMImageMESA = MakeRegalProc(http_eglCreateDRMImageMESA, layer);
  tbl.eglExportDRMImageMESA = MakeRegalProc(http_eglExportDRMImageMESA, layer);

  // EGL_NV_coverage_sample

  tbl.eglCoverageMaskNV = MakeRegalProc(http_eglCoverageMaskNV, layer);
  tbl.eglCoverageOperationNV = MakeRegalProc(http_eglCoverageOperationNV, layer);

  // EGL_NV_post_sub_buffer

  tbl.eglPostSubBufferNV = MakeRegalProc(http_eglPostSubBufferNV, layer);

  // EGL_NV_sync

  tbl.eglClientWaitSyncNV = MakeRegalProc(http_eglClientWaitSyncNV, layer);
  tbl.eglCreateFenceSyncNV = MakeRegalProc(http_eglCreateFenceSyncNV, layer);
  tbl.eglDestroySyncNV = MakeRegalProc(http_eglDestroySyncNV, layer);
  tbl.eglFenceNV = MakeRegalProc(http_eglFenceNV, layer);
  tbl.eglGetSyncAttribNV = MakeRegalProc(http_eglGetSyncAttribNV, layer);
  tbl.eglSignalSyncNV = MakeRegalProc(http_eglSignalSyncNV, layer);

  // EGL_NV_system_time

  tbl.eglGetSystemTimeFrequencyNV = MakeRegalProc(http_eglGetSystemTimeFrequencyNV, layer);
  tbl.eglGetSystemTimeNV = MakeRegalProc(http_eglGetSystemTimeNV, layer);

  // EGL_VERSION_1_0

  tbl.eglChooseConfig = MakeRegalProc(http_eglChooseConfig, layer);
  tbl.eglCopyBuffers = MakeRegalProc(http_eglCopyBuffers, layer);
  tbl.eglCreateContext = MakeRegalProc(http_eglCreateContext, layer);
  tbl.eglCreatePbufferSurface = MakeRegalProc(http_eglCreatePbufferSurface, layer);
  tbl.eglCreatePixmapSurface = MakeRegalProc(http_eglCreatePixmapSurface, layer);
  tbl.eglCreateWindowSurface = MakeRegalProc(http_eglCreateWindowSurface, layer);
  tbl.eglDestroyContext = MakeRegalProc(http_eglDestroyContext, layer);
  tbl.eglDestroySurface = MakeRegalProc(http_eglDestroySurface, layer);
  tbl.eglGetConfigAttrib = MakeRegalProc(http_eglGetConfigAttrib, layer);
  tbl.eglGetConfigs = MakeRegalProc(http_eglGetConfigs, layer);
  tbl.eglGetCurrentContext = MakeRegalProc(http_eglGetCurrentContext, layer);
  tbl.eglGetCurrentDisplay = MakeRegalProc(http_eglGetCurrentDisplay, layer);
  tbl.eglGetCurrentSurface = MakeRegalProc(http_eglGetCurrentSurface, layer);
  tbl.eglGetDisplay = MakeRegalProc(http_eglGetDisplay, layer);
  tbl.eglGetError = MakeRegalProc(http_eglGetError, layer);
  tbl.eglGetProcAddress = MakeRegalProc(http_eglGetProcAddress, layer);
  tbl.eglInitialize = MakeRegalProc(http_eglInitialize, layer);
  tbl.eglMakeCurrent = MakeRegalProc(http_eglMakeCurrent, layer);
  tbl.eglQueryContext = MakeRegalProc(http_eglQueryContext, layer);
  tbl.eglQueryString = MakeRegalProc(http_eglQueryString, layer);
  tbl.eglQuerySurface = MakeRegalProc(http_eglQuerySurface, layer);
  tbl.eglSwapBuffers = MakeRegalProc(http_eglSwapBuffers, layer);
  tbl.eglTerminate = MakeRegalProc(http_eglTerminate, layer);
  tbl.eglWaitGL = MakeRegalProc(http_eglWaitGL, layer);
  tbl.eglWaitNative = MakeRegalProc(http_eglWaitNative, layer);

  // EGL_VERSION_1_1

  tbl.eglBindTexImage = MakeRegalProc(http_eglBindTexImage, layer);
  tbl.eglReleaseTexImage = MakeRegalProc(http_eglReleaseTexImage, layer);

  // EGL_VERSION_1_2

  tbl.eglBindAPI = MakeRegalProc(http_eglBindAPI, layer);
  tbl.eglCreatePbufferFromClientBuffer = MakeRegalProc(http_eglCreatePbufferFromClientBuffer, layer);
  tbl.eglQueryAPI = MakeRegalProc(http_eglQueryAPI, layer);
  tbl.eglReleaseThread = MakeRegalProc(http_eglReleaseThread, layer);
  tbl.eglSurfaceAttrib = MakeRegalProc(http_eglSurfaceAttrib, layer);
  tbl.eglSwapInterval = MakeRegalProc(http_eglSwapInterval, layer);
  tbl.eglWaitClient = MakeRegalProc(http_eglWaitClient, layer);
#endif // REGAL_SYS_EGL

}

REGAL_NAMESPACE_END

#endif
