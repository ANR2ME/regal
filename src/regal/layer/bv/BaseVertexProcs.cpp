/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "BaseVertex.h"
#include "BaseVertexProcs.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace Emu;

static void REGAL_CALL bv_glBindBuffer(Layer *_layer, GLenum target, GLuint buffer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glBindBuffer( target, buffer );

  RglBindBuffer( orig, target, buffer );

}

static void REGAL_CALL bv_glBindVertexArray(Layer *_layer, GLuint array)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glBindVertexArray( array );

  RglBindVertexArray( orig, array );

}

static void REGAL_CALL bv_glBindVertexBuffer(Layer *_layer, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glBindVertexBuffer( bindingindex, buffer, offset, stride );

  RglBindVertexBuffer( orig, bindingindex, buffer, offset, stride );

}

static void REGAL_CALL bv_glClientActiveTexture(Layer *_layer, GLenum texture)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glClientActiveTexture( texture );

  RglClientActiveTexture( orig, texture );

}

static void REGAL_CALL bv_glClientActiveTextureARB(Layer *_layer, GLenum texture)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glClientActiveTexture( texture );

  RglClientActiveTextureARB( orig, texture );

}

static void REGAL_CALL bv_glColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glColorPointer( size, type, stride, pointer );

  RglColorPointer( orig, size, type, stride, pointer );

}

static void REGAL_CALL bv_glDisable(Layer *_layer, GLenum cap)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisable( cap );

  RglDisable( orig, cap );

}

static void REGAL_CALL bv_glDisableClientState(Layer *_layer, GLenum cap)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableClientState( cap );

  RglDisableClientState( orig, cap );

}

static void REGAL_CALL bv_glDisableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableClientStateIndexedEXT( array, index );

  RglDisableClientStateIndexedEXT( orig, array, index );

}

static void REGAL_CALL bv_glDisableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableClientStateiEXT( array, index );

  RglDisableClientStateiEXT( orig, array, index );

}

static void REGAL_CALL bv_glDisableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableIndexedEXT( target, index );

  RglDisableIndexedEXT( orig, target, index );

}

static void REGAL_CALL bv_glDisableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableVertexArrayAttribEXT( vaobj, array );

  RglDisableVertexArrayAttribEXT( orig, vaobj, array );

}

static void REGAL_CALL bv_glDisableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableVertexArrayEXT( vaobj, array );

  RglDisableVertexArrayEXT( orig, vaobj, array );

}

static void REGAL_CALL bv_glDisableVertexAttribArray(Layer *_layer, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisableVertexAttribArray( index );

  RglDisableVertexAttribArray( orig, index );

}

static void REGAL_CALL bv_glDisablei(Layer *_layer, GLenum cap, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glDisablei( cap, index );

  RglDisablei( orig, cap, index );

}

static void REGAL_CALL bv_glDrawElementsBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // impl
  if( _context->bv->glDrawElementsBaseVertex( *_context, mode, count, type, indices, basevertex ) ) {
    return;
  }

  RglDrawElementsBaseVertex( orig, mode, count, type, indices, basevertex );

}

static void REGAL_CALL bv_glDrawElementsInstancedBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // impl
  if( _context->bv->glDrawElementsInstancedBaseVertex( *_context, mode, count, type, indices, primcount, basevertex ) ) {
    return;
  }

  RglDrawElementsInstancedBaseVertex( orig, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL bv_glDrawElementsInstancedBaseVertexBaseInstance(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // impl
  if( _context->bv->glDrawElementsInstancedBaseVertexBaseInstance( *_context, mode, count, type, indices, primcount, basevertex, baseinstance ) ) {
    return;
  }

  RglDrawElementsInstancedBaseVertexBaseInstance( orig, mode, count, type, indices, primcount, basevertex, baseinstance );

}

static void REGAL_CALL bv_glDrawRangeElementsBaseVertex(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // impl
  if( _context->bv->glDrawRangeElementsBaseVertex( *_context, mode, start, end, count, type, indices, basevertex ) ) {
    return;
  }

  RglDrawRangeElementsBaseVertex( orig, mode, start, end, count, type, indices, basevertex );

}

static void REGAL_CALL bv_glEdgeFlagPointer(Layer *_layer, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEdgeFlagPointer( stride, pointer );

  RglEdgeFlagPointer( orig, stride, pointer );

}

static void REGAL_CALL bv_glEnable(Layer *_layer, GLenum cap)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnable( cap );

  RglEnable( orig, cap );

}

static void REGAL_CALL bv_glEnableClientState(Layer *_layer, GLenum cap)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableClientState( cap );

  RglEnableClientState( orig, cap );

}

static void REGAL_CALL bv_glEnableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableClientStateIndexedEXT( array, index );

  RglEnableClientStateIndexedEXT( orig, array, index );

}

static void REGAL_CALL bv_glEnableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableClientStateiEXT( array, index );

  RglEnableClientStateiEXT( orig, array, index );

}

static void REGAL_CALL bv_glEnableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableIndexedEXT( target, index );

  RglEnableIndexedEXT( orig, target, index );

}

static void REGAL_CALL bv_glEnableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableVertexArrayAttribEXT( vaobj, array );

  RglEnableVertexArrayAttribEXT( orig, vaobj, array );

}

static void REGAL_CALL bv_glEnableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableVertexArrayEXT( vaobj, array );

  RglEnableVertexArrayEXT( orig, vaobj, array );

}

static void REGAL_CALL bv_glEnableVertexAttribArray(Layer *_layer, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnableVertexAttribArray( index );

  RglEnableVertexAttribArray( orig, index );

}

static void REGAL_CALL bv_glEnablei(Layer *_layer, GLenum cap, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glEnablei( cap, index );

  RglEnablei( orig, cap, index );

}

static void REGAL_CALL bv_glFogCoordPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glFogCoordPointer( type, stride, pointer );

  RglFogCoordPointer( orig, type, stride, pointer );

}

static void REGAL_CALL bv_glIndexPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glIndexPointer( type, stride, pointer );

  RglIndexPointer( orig, type, stride, pointer );

}

static void REGAL_CALL bv_glInterleavedArrays(Layer *_layer, GLenum format, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glInterleavedArrays( format, stride, pointer );

  RglInterleavedArrays( orig, format, stride, pointer );

}

static void REGAL_CALL bv_glMultiDrawElementsBaseVertex(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // impl
  if( _context->bv->glMultiDrawElementsBaseVertex( *_context, mode, count, type, indices, primcount, basevertex ) ) {
    return;
  }

  RglMultiDrawElementsBaseVertex( orig, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL bv_glMultiTexCoordPointerEXT(Layer *_layer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glMultiTexCoordPointerEXT( texunit, size, type, stride, pointer );

  RglMultiTexCoordPointerEXT( orig, texunit, size, type, stride, pointer );

}

static void REGAL_CALL bv_glNormalPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glNormalPointer( type, stride, pointer );

  RglNormalPointer( orig, type, stride, pointer );

}

static void REGAL_CALL bv_glPrimitiveRestartIndex(Layer *_layer, GLuint index)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glPrimitiveRestartIndex( index );

  RglPrimitiveRestartIndex( orig, index );

}

static void REGAL_CALL bv_glSecondaryColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glSecondaryColorPointer( size, type, stride, pointer );

  RglSecondaryColorPointer( orig, size, type, stride, pointer );

}

static void REGAL_CALL bv_glTexCoordPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glTexCoordPointer( size, type, stride, pointer );

  RglTexCoordPointer( orig, size, type, stride, pointer );

}

static void REGAL_CALL bv_glVertexArrayColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayColorOffsetEXT( vaobj, buffer, size, type, stride, offset );

  RglVertexArrayColorOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayEdgeFlagOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayEdgeFlagOffsetEXT( vaobj, buffer, stride, offset );

  RglVertexArrayEdgeFlagOffsetEXT( orig, vaobj, buffer, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayFogCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayFogCoordOffsetEXT( vaobj, buffer, type, stride, offset );

  RglVertexArrayFogCoordOffsetEXT( orig, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayIndexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayIndexOffsetEXT( vaobj, buffer, type, stride, offset );

  RglVertexArrayIndexOffsetEXT( orig, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayMultiTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayMultiTexCoordOffsetEXT( vaobj, buffer, texunit, size, type, stride, offset );

  RglVertexArrayMultiTexCoordOffsetEXT( orig, vaobj, buffer, texunit, size, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayNormalOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayNormalOffsetEXT( vaobj, buffer, type, stride, offset );

  RglVertexArrayNormalOffsetEXT( orig, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArraySecondaryColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArraySecondaryColorOffsetEXT( vaobj, buffer, size, type, stride, offset );

  RglVertexArraySecondaryColorOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayTexCoordOffsetEXT( vaobj, buffer, size, type, stride, offset );

  RglVertexArrayTexCoordOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayVertexAttribIOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayVertexAttribIOffsetEXT( vaobj, buffer, index, size, type, stride, offset );

  RglVertexArrayVertexAttribIOffsetEXT( orig, vaobj, buffer, index, size, type, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayVertexAttribOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayVertexAttribOffsetEXT( vaobj, buffer, index, size, type, normalized, stride, offset );

  RglVertexArrayVertexAttribOffsetEXT( orig, vaobj, buffer, index, size, type, normalized, stride, offset );

}

static void REGAL_CALL bv_glVertexArrayVertexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexArrayVertexOffsetEXT( vaobj, buffer, size, type, stride, offset );

  RglVertexArrayVertexOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL bv_glVertexAttribBinding(Layer *_layer, GLuint attribindex, GLuint bindingindex)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribBinding( attribindex, bindingindex );

  RglVertexAttribBinding( orig, attribindex, bindingindex );

}

static void REGAL_CALL bv_glVertexAttribDivisor(Layer *_layer, GLuint index, GLuint divisor)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribDivisor( index, divisor );

  RglVertexAttribDivisor( orig, index, divisor );

}

static void REGAL_CALL bv_glVertexAttribFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribFormat( attribindex, size, type, normalized, relativeoffset );

  RglVertexAttribFormat( orig, attribindex, size, type, normalized, relativeoffset );

}

static void REGAL_CALL bv_glVertexAttribIFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribIFormat( attribindex, size, type, relativeoffset );

  RglVertexAttribIFormat( orig, attribindex, size, type, relativeoffset );

}

static void REGAL_CALL bv_glVertexAttribIPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribIPointer( index, size, type, stride, pointer );

  RglVertexAttribIPointer( orig, index, size, type, stride, pointer );

}

static void REGAL_CALL bv_glVertexAttribLFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribLFormat( attribindex, size, type, relativeoffset );

  RglVertexAttribLFormat( orig, attribindex, size, type, relativeoffset );

}

static void REGAL_CALL bv_glVertexAttribLPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribLPointer( index, size, type, stride, pointer );

  RglVertexAttribLPointer( orig, index, size, type, stride, pointer );

}

static void REGAL_CALL bv_glVertexAttribPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexAttribPointer( index, size, type, normalized, stride, pointer );

  RglVertexAttribPointer( orig, index, size, type, normalized, stride, pointer );

}

static void REGAL_CALL bv_glVertexBindingDivisor(Layer *_layer, GLuint bindingindex, GLuint divisor)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexBindingDivisor( bindingindex, divisor );

  RglVertexBindingDivisor( orig, bindingindex, divisor );

}

static void REGAL_CALL bv_glVertexPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  BaseVertex * self = static_cast<BaseVertex *>(_layer);

  BaseVertexOriginate & orig = self->orig;

  // prefix
  _context->bv->glVertexPointer( size, type, stride, pointer );

  RglVertexPointer( orig, size, type, stride, pointer );

}

void BaseVertexIntercept( Layer *layer, Dispatch::GL & dt ) {
  dt.glBindBuffer                                  = MakeRegalProc(bv_glBindBuffer, layer);
  dt.glBindVertexArray                             = MakeRegalProc(bv_glBindVertexArray, layer);
  dt.glBindVertexBuffer                            = MakeRegalProc(bv_glBindVertexBuffer, layer);
  dt.glClientActiveTexture                         = MakeRegalProc(bv_glClientActiveTexture, layer);
  dt.glClientActiveTextureARB                      = MakeRegalProc(bv_glClientActiveTextureARB, layer);
  dt.glColorPointer                                = MakeRegalProc(bv_glColorPointer, layer);
  dt.glDisable                                     = MakeRegalProc(bv_glDisable, layer);
  dt.glDisableClientState                          = MakeRegalProc(bv_glDisableClientState, layer);
  dt.glDisableClientStateIndexedEXT                = MakeRegalProc(bv_glDisableClientStateIndexedEXT, layer);
  dt.glDisableClientStateiEXT                      = MakeRegalProc(bv_glDisableClientStateiEXT, layer);
  dt.glDisableIndexedEXT                           = MakeRegalProc(bv_glDisableIndexedEXT, layer);
  dt.glDisableVertexArrayAttribEXT                 = MakeRegalProc(bv_glDisableVertexArrayAttribEXT, layer);
  dt.glDisableVertexArrayEXT                       = MakeRegalProc(bv_glDisableVertexArrayEXT, layer);
  dt.glDisableVertexAttribArray                    = MakeRegalProc(bv_glDisableVertexAttribArray, layer);
  dt.glDisablei                                    = MakeRegalProc(bv_glDisablei, layer);
  dt.glDrawElementsBaseVertex                      = MakeRegalProc(bv_glDrawElementsBaseVertex, layer);
  dt.glDrawElementsInstancedBaseVertex             = MakeRegalProc(bv_glDrawElementsInstancedBaseVertex, layer);
  dt.glDrawElementsInstancedBaseVertexBaseInstance = MakeRegalProc(bv_glDrawElementsInstancedBaseVertexBaseInstance, layer);
  dt.glDrawRangeElementsBaseVertex                 = MakeRegalProc(bv_glDrawRangeElementsBaseVertex, layer);
  dt.glEdgeFlagPointer                             = MakeRegalProc(bv_glEdgeFlagPointer, layer);
  dt.glEnable                                      = MakeRegalProc(bv_glEnable, layer);
  dt.glEnableClientState                           = MakeRegalProc(bv_glEnableClientState, layer);
  dt.glEnableClientStateIndexedEXT                 = MakeRegalProc(bv_glEnableClientStateIndexedEXT, layer);
  dt.glEnableClientStateiEXT                       = MakeRegalProc(bv_glEnableClientStateiEXT, layer);
  dt.glEnableIndexedEXT                            = MakeRegalProc(bv_glEnableIndexedEXT, layer);
  dt.glEnableVertexArrayAttribEXT                  = MakeRegalProc(bv_glEnableVertexArrayAttribEXT, layer);
  dt.glEnableVertexArrayEXT                        = MakeRegalProc(bv_glEnableVertexArrayEXT, layer);
  dt.glEnableVertexAttribArray                     = MakeRegalProc(bv_glEnableVertexAttribArray, layer);
  dt.glEnablei                                     = MakeRegalProc(bv_glEnablei, layer);
  dt.glFogCoordPointer                             = MakeRegalProc(bv_glFogCoordPointer, layer);
  dt.glIndexPointer                                = MakeRegalProc(bv_glIndexPointer, layer);
  dt.glInterleavedArrays                           = MakeRegalProc(bv_glInterleavedArrays, layer);
  dt.glMultiDrawElementsBaseVertex                 = MakeRegalProc(bv_glMultiDrawElementsBaseVertex, layer);
  dt.glMultiTexCoordPointerEXT                     = MakeRegalProc(bv_glMultiTexCoordPointerEXT, layer);
  dt.glNormalPointer                               = MakeRegalProc(bv_glNormalPointer, layer);
  dt.glPrimitiveRestartIndex                       = MakeRegalProc(bv_glPrimitiveRestartIndex, layer);
  dt.glSecondaryColorPointer                       = MakeRegalProc(bv_glSecondaryColorPointer, layer);
  dt.glTexCoordPointer                             = MakeRegalProc(bv_glTexCoordPointer, layer);
  dt.glVertexArrayColorOffsetEXT                   = MakeRegalProc(bv_glVertexArrayColorOffsetEXT, layer);
  dt.glVertexArrayEdgeFlagOffsetEXT                = MakeRegalProc(bv_glVertexArrayEdgeFlagOffsetEXT, layer);
  dt.glVertexArrayFogCoordOffsetEXT                = MakeRegalProc(bv_glVertexArrayFogCoordOffsetEXT, layer);
  dt.glVertexArrayIndexOffsetEXT                   = MakeRegalProc(bv_glVertexArrayIndexOffsetEXT, layer);
  dt.glVertexArrayMultiTexCoordOffsetEXT           = MakeRegalProc(bv_glVertexArrayMultiTexCoordOffsetEXT, layer);
  dt.glVertexArrayNormalOffsetEXT                  = MakeRegalProc(bv_glVertexArrayNormalOffsetEXT, layer);
  dt.glVertexArraySecondaryColorOffsetEXT          = MakeRegalProc(bv_glVertexArraySecondaryColorOffsetEXT, layer);
  dt.glVertexArrayTexCoordOffsetEXT                = MakeRegalProc(bv_glVertexArrayTexCoordOffsetEXT, layer);
  dt.glVertexArrayVertexAttribIOffsetEXT           = MakeRegalProc(bv_glVertexArrayVertexAttribIOffsetEXT, layer);
  dt.glVertexArrayVertexAttribOffsetEXT            = MakeRegalProc(bv_glVertexArrayVertexAttribOffsetEXT, layer);
  dt.glVertexArrayVertexOffsetEXT                  = MakeRegalProc(bv_glVertexArrayVertexOffsetEXT, layer);
  dt.glVertexAttribBinding                         = MakeRegalProc(bv_glVertexAttribBinding, layer);
  dt.glVertexAttribDivisor                         = MakeRegalProc(bv_glVertexAttribDivisor, layer);
  dt.glVertexAttribFormat                          = MakeRegalProc(bv_glVertexAttribFormat, layer);
  dt.glVertexAttribIFormat                         = MakeRegalProc(bv_glVertexAttribIFormat, layer);
  dt.glVertexAttribIPointer                        = MakeRegalProc(bv_glVertexAttribIPointer, layer);
  dt.glVertexAttribLFormat                         = MakeRegalProc(bv_glVertexAttribLFormat, layer);
  dt.glVertexAttribLPointer                        = MakeRegalProc(bv_glVertexAttribLPointer, layer);
  dt.glVertexAttribPointer                         = MakeRegalProc(bv_glVertexAttribPointer, layer);
  dt.glVertexBindingDivisor                        = MakeRegalProc(bv_glVertexBindingDivisor, layer);
  dt.glVertexPointer                               = MakeRegalProc(bv_glVertexPointer, layer);
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
