/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "Dsa.h"
#include "DsaProcs.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace Emu;

static void REGAL_CALL dsa_glActiveTexture(Layer *_layer, GLenum texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if( _context->dsa->ShadowActiveTexture( texture ) ) {
      return;
  }

  RglActiveTexture( orig, texture );

}

static void REGAL_CALL dsa_glActiveTextureARB(Layer *_layer, GLenum texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if( _context->dsa->ShadowActiveTexture( texture ) ) {
      return;
  }

  RglActiveTextureARB( orig, texture );

}

static void REGAL_CALL dsa_glBegin(Layer *_layer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglBegin( orig, mode );

}

static void REGAL_CALL dsa_glBindBuffer(Layer *_layer, GLenum target, GLuint buffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowBuffer( target, buffer ) ) {
    return;
  }

  RglBindBuffer( orig, target, buffer );

}

static void REGAL_CALL dsa_glBindBufferARB(Layer *_layer, GLenum target, GLuint buffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowBuffer( target, buffer ) ) {
    return;
  }

  RglBindBufferARB( orig, target, buffer );

}

static void REGAL_CALL dsa_glBindFramebuffer(Layer *_layer, GLenum target, GLuint framebuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowFramebuffer( target, framebuffer ) ) {
    return;
  }

  RglBindFramebuffer( orig, target, framebuffer );

}

static void REGAL_CALL dsa_glBindFramebufferEXT(Layer *_layer, GLenum target, GLuint framebuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowFramebuffer( target, framebuffer ) ) {
    return;
  }

  RglBindFramebufferEXT( orig, target, framebuffer );

}

static void REGAL_CALL dsa_glBindMultiTextureEXT(Layer *_layer, GLenum texunit, GLenum target, GLuint texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  _context->dsa->ShadowDsaTexture( target, texture );
  orig.glBindTexture( _context, target, texture );
  return;

  RglBindMultiTextureEXT( orig, texunit, target, texture );

}

static void REGAL_CALL dsa_glBindProgramARB(Layer *_layer, GLenum target, GLuint program)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowAsmProgram( target, program ) ) {
    return;
  }

  RglBindProgramARB( orig, target, program );

}

static void REGAL_CALL dsa_glBindRenderbuffer(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowRenderbuffer( target, renderbuffer ) ) {
    return;
  }

  RglBindRenderbuffer( orig, target, renderbuffer );

}

static void REGAL_CALL dsa_glBindRenderbufferEXT(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowRenderbuffer( target, renderbuffer ) ) {
    return;
  }

  RglBindRenderbufferEXT( orig, target, renderbuffer );

}

static void REGAL_CALL dsa_glBindTexture(Layer *_layer, GLenum target, GLuint texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowTexture( target, texture )) {
    return;
  }

  RglBindTexture( orig, target, texture );

}

static void REGAL_CALL dsa_glBindTextureEXT(Layer *_layer, GLenum target, GLuint texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowTexture( target, texture )) {
    return;
  }

  RglBindTextureEXT( orig, target, texture );

}

static void REGAL_CALL dsa_glBindVertexArray(Layer *_layer, GLuint array)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowVao( array )) {
    return;
  }

  RglBindVertexArray( orig, array );

}

static void REGAL_CALL dsa_glBufferData(Layer *_layer, GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglBufferData( orig, target, size, data, usage );

}

static void REGAL_CALL dsa_glBufferSubData(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglBufferSubData( orig, target, offset, size, data );

}

static GLenum REGAL_CALL dsa_glCheckNamedFramebufferStatusEXT(Layer *_layer, GLuint framebuffer, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  return orig.glCheckFramebufferStatus( _context, target );

  return RglCheckNamedFramebufferStatusEXT( orig, framebuffer, target );

}

static void REGAL_CALL dsa_glClientActiveTexture(Layer *_layer, GLenum texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowClientActiveTexture( texture )) {
    return;
  }

  RglClientActiveTexture( orig, texture );

}

static void REGAL_CALL dsa_glClientActiveTextureARB(Layer *_layer, GLenum texture)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowClientActiveTexture( texture )) {
    return;
  }

  RglClientActiveTextureARB( orig, texture );

}

static void REGAL_CALL dsa_glClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->ClientAttribDefault( _context, mask ); return;

  RglClientAttribDefaultEXT( orig, mask );

}

static void REGAL_CALL dsa_glColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglColorPointer( orig, size, type, stride, pointer );

}

static void REGAL_CALL dsa_glCompressedMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCompressedTexImage1D( _context, target, level, internalformat, width, border, imageSize, data );
  return;

  RglCompressedMultiTexImage1DEXT( orig, texunit, target, level, internalformat, width, border, imageSize, data );

}

static void REGAL_CALL dsa_glCompressedMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCompressedTexImage2D( _context, target, level, internalformat, width, height, border, imageSize, bits );
  return;

  RglCompressedMultiTexImage2DEXT( orig, texunit, target, level, internalformat, width, height, border, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedMultiTexImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCompressedTexImage3D( _context, target, level, internalformat, width, height, depth, border, imageSize, bits );
  return;

  RglCompressedMultiTexImage3DEXT( orig, texunit, target, level, internalformat, width, height, depth, border, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCompressedTexSubImage1D( _context, target, level, xoffset, width, format, imageSize, data );
  return;

  RglCompressedMultiTexSubImage1DEXT( orig, texunit, target, level, xoffset, width, format, imageSize, data );

}

static void REGAL_CALL dsa_glCompressedMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCompressedTexSubImage2D( _context, target, level, xoffset, yoffset, width, height, format, imageSize, data );
  return;

  RglCompressedMultiTexSubImage2DEXT( orig, texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data );

}

static void REGAL_CALL dsa_glCompressedMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCompressedTexSubImage3D( _context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
  return;

  RglCompressedMultiTexSubImage3DEXT( orig, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );

}

static void REGAL_CALL dsa_glCompressedTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCompressedTexImage1D( _context, target, level, internalformat, width, border, imageSize, bits );
  return;

  RglCompressedTextureImage1DEXT( orig, texture, target, level, internalformat, width, border, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCompressedTexImage2D( _context, target, level, internalformat, width, height, border, imageSize, bits );
  return;

  RglCompressedTextureImage2DEXT( orig, texture, target, level, internalformat, width, height, border, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedTextureImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCompressedTexImage3D( _context, target, level, internalformat, width, height, depth, border, imageSize, bits );
  return;

  RglCompressedTextureImage3DEXT( orig, texture, target, level, internalformat, width, height, depth, border, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCompressedTexSubImage1D( _context, target, level, xoffset, width, format, imageSize, bits );
  return;

  RglCompressedTextureSubImage1DEXT( orig, texture, target, level, xoffset, width, format, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCompressedTexSubImage2D( _context, target, level, xoffset, yoffset, width, height, format, imageSize, bits );
  return;

  RglCompressedTextureSubImage2DEXT( orig, texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits );

}

static void REGAL_CALL dsa_glCompressedTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCompressedTexSubImage3D( _context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits );
  return;

  RglCompressedTextureSubImage3DEXT( orig, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits );

}

static void REGAL_CALL dsa_glCopyBufferSubData(Layer *_layer, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglCopyBufferSubData( orig, readtarget, writetarget, readoffset, writeoffset, size );

}

static void REGAL_CALL dsa_glCopyMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCopyTexImage1D( _context, target, level, internalformat, x, y, width, border );
  return;

  RglCopyMultiTexImage1DEXT( orig, texunit, target, level, internalformat, x, y, width, border );

}

static void REGAL_CALL dsa_glCopyMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCopyTexImage2D( _context, target, level, internalformat, x, y, width, height, border );
  return;

  RglCopyMultiTexImage2DEXT( orig, texunit, target, level, internalformat, x, y, width, height, border );

}

static void REGAL_CALL dsa_glCopyMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCopyTexSubImage1D( _context, target, level, xoffset, x, y, width );
  return;

  RglCopyMultiTexSubImage1DEXT( orig, texunit, target, level, xoffset, x, y, width );

}

static void REGAL_CALL dsa_glCopyMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCopyTexSubImage2D( _context, target, level, xoffset, yoffset, x, y, width, height );
  return;

  RglCopyMultiTexSubImage2DEXT( orig, texunit, target, level, xoffset, yoffset, x, y, width, height );

}

static void REGAL_CALL dsa_glCopyMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glCopyTexSubImage3D( _context, target, level, xoffset, yoffset, zoffset, x, y, width, height );
  return;

  RglCopyMultiTexSubImage3DEXT( orig, texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height );

}

static void REGAL_CALL dsa_glCopyTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCopyTexImage1D( _context, target, level, internalformat, x, y, width, border );
  return;

  RglCopyTextureImage1DEXT( orig, texture, target, level, internalformat, x, y, width, border );

}

static void REGAL_CALL dsa_glCopyTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCopyTexImage2D( _context, target, level, internalformat, x, y, width, height, border );
  return;

  RglCopyTextureImage2DEXT( orig, texture, target, level, internalformat, x, y, width, height, border );

}

static void REGAL_CALL dsa_glCopyTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCopyTexSubImage1D( _context, target, level, xoffset, x, y, width );
  return;

  RglCopyTextureSubImage1DEXT( orig, texture, target, level, xoffset, x, y, width );

}

static void REGAL_CALL dsa_glCopyTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCopyTexSubImage2D( _context, target, level, xoffset, yoffset, x, y, width, height );
  return;

  RglCopyTextureSubImage2DEXT( orig, texture, target, level, xoffset, yoffset, x, y, width, height );

}

static void REGAL_CALL dsa_glCopyTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glCopyTexSubImage3D( _context, target, level, xoffset, yoffset, zoffset, x, y, width, height );
  return;

  RglCopyTextureSubImage3DEXT( orig, texture, target, level, xoffset, yoffset, zoffset, x, y, width, height );

}

static void REGAL_CALL dsa_glDeleteBuffers(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteBuffers( _context, n, buffers );

  RglDeleteBuffers( orig, n, buffers );

}

static void REGAL_CALL dsa_glDeleteBuffersARB(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteBuffers( _context, n, buffers );

  RglDeleteBuffersARB( orig, n, buffers );

}

static void REGAL_CALL dsa_glDeleteFramebuffers(Layer *_layer, GLsizei n, const GLuint *framebuffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteFramebuffers( _context, n, framebuffers );

  RglDeleteFramebuffers( orig, n, framebuffers );

}

static void REGAL_CALL dsa_glDeleteFramebuffersEXT(Layer *_layer, GLsizei n, const GLuint *framebuffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteFramebuffers( _context, n, framebuffers );

  RglDeleteFramebuffersEXT( orig, n, framebuffers );

}

static void REGAL_CALL dsa_glDeleteFramebuffersOES(Layer *_layer, GLsizei n, const GLuint *framebuffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteFramebuffers( _context, n, framebuffers );

  RglDeleteFramebuffersOES( orig, n, framebuffers );

}

static void REGAL_CALL dsa_glDeleteProgram(Layer *_layer, GLuint program)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteGlslProgram( _context, program );

  RglDeleteProgram( orig, program );

}

static void REGAL_CALL dsa_glDeleteProgramsARB(Layer *_layer, GLsizei n, const GLuint *programs)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteAsmPrograms( _context, n, programs );

  RglDeleteProgramsARB( orig, n, programs );

}

static void REGAL_CALL dsa_glDeleteProgramsNV(Layer *_layer, GLsizei n, const GLuint *programs)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteAsmPrograms( _context, n, programs );

  RglDeleteProgramsNV( orig, n, programs );

}

static void REGAL_CALL dsa_glDeleteRenderbuffers(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteRenderbuffers( _context, n, renderbuffers );

  RglDeleteRenderbuffers( orig, n, renderbuffers );

}

static void REGAL_CALL dsa_glDeleteRenderbuffersEXT(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteRenderbuffers( _context, n, renderbuffers );

  RglDeleteRenderbuffersEXT( orig, n, renderbuffers );

}

static void REGAL_CALL dsa_glDeleteRenderbuffersOES(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteRenderbuffers( _context, n, renderbuffers );

  RglDeleteRenderbuffersOES( orig, n, renderbuffers );

}

static void REGAL_CALL dsa_glDeleteTextures(Layer *_layer, GLsizei n, const GLuint *textures)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteTextures( _context, n, textures );

  RglDeleteTextures( orig, n, textures );

}

static void REGAL_CALL dsa_glDeleteTexturesEXT(Layer *_layer, GLsizei n, const GLuint *textures)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteTextures( _context, n, textures );

  RglDeleteTexturesEXT( orig, n, textures );

}

static void REGAL_CALL dsa_glDeleteVertexArrays(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteVaos( _context, n, arrays );

  RglDeleteVertexArrays( orig, n, arrays );

}

static void REGAL_CALL dsa_glDeleteVertexArraysAPPLE(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteVaos( _context, n, arrays );

  RglDeleteVertexArraysAPPLE( orig, n, arrays );

}

static void REGAL_CALL dsa_glDeleteVertexArraysOES(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->DeleteVaos( _context, n, arrays );

  RglDeleteVertexArraysOES( orig, n, arrays );

}

static void REGAL_CALL dsa_glDisable(Layer *_layer, GLenum cap)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreActiveTexture( _context );

  RglDisable( orig, cap );

}

static void REGAL_CALL dsa_glDisableClientState(Layer *_layer, GLenum cap)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreClientActiveTexture( _context );
  _context->dsa->RestoreBuffer( _context );

  RglDisableClientState( orig, cap );

}

static void REGAL_CALL dsa_glDisableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
  orig.glDisableClientState( _context, array );
  return;

  RglDisableClientStateIndexedEXT( orig, array, index );

}

static void REGAL_CALL dsa_glDisableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
  orig.glDisableClientState( _context, array );
  return;

  RglDisableClientStateiEXT( orig, array, index );

}

static void REGAL_CALL dsa_glDisableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, index + GL_TEXTURE0 );
  orig.glDisable( _context, target );
  return;

  RglDisableIndexedEXT( orig, target, index );

}

static void REGAL_CALL dsa_glDisableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );
  orig.glDisableVertexAttribArray( _context, array );return;

  RglDisableVertexArrayAttribEXT( orig, vaobj, array );

}

static void REGAL_CALL dsa_glDisableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );
  if ( array >= GL_TEXTURE0 && array <= GL_TEXTURE31) {
    _context->dsa->DsaClientActiveTexture( _context, array );
    orig.glDisableClientState( _context, GL_TEXTURE_COORD_ARRAY );
  } else {
    orig.glDisableClientState( _context, array );
  }return;

  RglDisableVertexArrayEXT( orig, vaobj, array );

}

static void REGAL_CALL dsa_glDrawArrays(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawArrays( orig, mode, first, count );

}

static void REGAL_CALL dsa_glDrawArraysEXT(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawArraysEXT( orig, mode, first, count );

}

static void REGAL_CALL dsa_glDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawArraysIndirect( orig, mode, indirect );

}

static void REGAL_CALL dsa_glDrawArraysInstanced(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawArraysInstanced( orig, mode, start, count, primcount );

}

static void REGAL_CALL dsa_glDrawArraysInstancedARB(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawArraysInstancedARB( orig, mode, start, count, primcount );

}

static void REGAL_CALL dsa_glDrawArraysInstancedEXT(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawArraysInstancedEXT( orig, mode, start, count, primcount );

}

static void REGAL_CALL dsa_glDrawElementArrayAPPLE(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementArrayAPPLE( orig, mode, first, count );

}

static void REGAL_CALL dsa_glDrawElementArrayATI(Layer *_layer, GLenum mode, GLsizei count)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementArrayATI( orig, mode, count );

}

static void REGAL_CALL dsa_glDrawElements(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElements( orig, mode, count, type, indices );

}

static void REGAL_CALL dsa_glDrawElementsBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementsBaseVertex( orig, mode, count, type, indices, basevertex );

}

static void REGAL_CALL dsa_glDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementsIndirect( orig, mode, type, indirect );

}

static void REGAL_CALL dsa_glDrawElementsInstanced(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementsInstanced( orig, mode, count, type, indices, primcount );

}

static void REGAL_CALL dsa_glDrawElementsInstancedARB(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementsInstancedARB( orig, mode, count, type, indices, primcount );

}

static void REGAL_CALL dsa_glDrawElementsInstancedBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementsInstancedBaseVertex( orig, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL dsa_glDrawElementsInstancedEXT(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglDrawElementsInstancedEXT( orig, mode, count, type, indices, primcount );

}

static void REGAL_CALL dsa_glEnable(Layer *_layer, GLenum cap)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreActiveTexture( _context );

  RglEnable( orig, cap );

}

static void REGAL_CALL dsa_glEnableClientState(Layer *_layer, GLenum cap)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreClientActiveTexture( _context );
  _context->dsa->RestoreBuffer( _context );

  RglEnableClientState( orig, cap );

}

static void REGAL_CALL dsa_glEnableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
  orig.glEnableClientState( _context, array );
  return;

  RglEnableClientStateIndexedEXT( orig, array, index );

}

static void REGAL_CALL dsa_glEnableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
  orig.glEnableClientState( _context, array );
  return;

  RglEnableClientStateiEXT( orig, array, index );

}

static void REGAL_CALL dsa_glEnableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, index + GL_TEXTURE0 );
  orig.glEnable( _context, target );
  return;

  RglEnableIndexedEXT( orig, target, index );

}

static void REGAL_CALL dsa_glEnableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );
  orig.glEnableVertexAttribArray( _context, array );return;

  RglEnableVertexArrayAttribEXT( orig, vaobj, array );

}

static void REGAL_CALL dsa_glEnableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );
  if ( array >= GL_TEXTURE0 && array <= GL_TEXTURE31) {
    _context->dsa->DsaClientActiveTexture( _context, array );
    orig.glEnableClientState( _context, GL_TEXTURE_COORD_ARRAY );
  } else {
    orig.glEnableClientState( _context, array );
  }return;

  RglEnableVertexArrayEXT( orig, vaobj, array );

}

static void REGAL_CALL dsa_glFlushMappedBufferRange(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglFlushMappedBufferRange( orig, target, offset, length );

}

static void REGAL_CALL dsa_glFlushMappedBufferRangeEXT(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglFlushMappedBufferRangeEXT( orig, target, offset, length );

}

static void REGAL_CALL dsa_glFlushMappedNamedBufferRangeEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  orig.glFlushMappedBufferRange( _context, GL_ARRAY_BUFFER, offset, length );
  return;

  RglFlushMappedNamedBufferRangeEXT( orig, buffer, offset, length );

}

static void REGAL_CALL dsa_glFramebufferDrawBufferEXT(Layer *_layer, GLuint framebuffer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glDrawBuffer( _context, mode );
  return;

  RglFramebufferDrawBufferEXT( orig, framebuffer, mode );

}

static void REGAL_CALL dsa_glFramebufferDrawBuffersEXT(Layer *_layer, GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glDrawBuffers( _context, n, bufs );
  return;

  RglFramebufferDrawBuffersEXT( orig, framebuffer, n, bufs );

}

static void REGAL_CALL dsa_glFramebufferReadBufferEXT(Layer *_layer, GLuint framebuffer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glReadBuffer( _context, mode );
  return;

  RglFramebufferReadBufferEXT( orig, framebuffer, mode );

}

static void REGAL_CALL dsa_glFramebufferRenderbuffer(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferRenderbuffer( orig, target, attachment, renderbuffertarget, renderbuffer );

}

static void REGAL_CALL dsa_glFramebufferRenderbufferEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferRenderbufferEXT( orig, target, attachment, renderbuffertarget, renderbuffer );

}

static void REGAL_CALL dsa_glFramebufferTexture(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture( orig, target, attachment, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTexture1D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture1D( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTexture1DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture1DEXT( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTexture2D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture2D( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTexture2DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture2DEXT( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTexture3D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture3D( orig, target, attachment, textarget, texture, level, layer );

}

static void REGAL_CALL dsa_glFramebufferTexture3DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTexture3DEXT( orig, target, attachment, textarget, texture, level, zoffset );

}

static void REGAL_CALL dsa_glFramebufferTextureARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureARB( orig, target, attachment, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTextureEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureEXT( orig, target, attachment, texture, level );

}

static void REGAL_CALL dsa_glFramebufferTextureFace(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureFace( orig, target, attachment, texture, level, face );

}

static void REGAL_CALL dsa_glFramebufferTextureFaceARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureFaceARB( orig, target, attachment, texture, level, face );

}

static void REGAL_CALL dsa_glFramebufferTextureFaceEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureFaceEXT( orig, target, attachment, texture, level, face );

}

static void REGAL_CALL dsa_glFramebufferTextureLayer(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureLayer( orig, target, attachment, texture, level, layer );

}

static void REGAL_CALL dsa_glFramebufferTextureLayerARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureLayerARB( orig, target, attachment, texture, level, layer );

}

static void REGAL_CALL dsa_glFramebufferTextureLayerEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreFramebuffer( _context );

  RglFramebufferTextureLayerEXT( orig, target, attachment, texture, level, layer );

}

static void REGAL_CALL dsa_glGenerateMipmap(Layer *_layer, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglGenerateMipmap( orig, target );

}

static void REGAL_CALL dsa_glGenerateMipmapEXT(Layer *_layer, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglGenerateMipmapEXT( orig, target );

}

static void REGAL_CALL dsa_glGenerateMultiTexMipmapEXT(Layer *_layer, GLenum texunit, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGenerateMipmap( _context, target );
  return;

  RglGenerateMultiTexMipmapEXT( orig, texunit, target );

}

static void REGAL_CALL dsa_glGenerateTextureMipmapEXT(Layer *_layer, GLuint texture, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGenerateMipmap( _context, target );
  return;

  RglGenerateTextureMipmapEXT( orig, texture, target );

}

static void REGAL_CALL dsa_glGetBooleanv(Layer *_layer, GLenum pname, GLboolean *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGet( _context, pname );

  RglGetBooleanv( orig, pname, params );

}

static void REGAL_CALL dsa_glGetBufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglGetBufferParameteriv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetBufferPointerv(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglGetBufferPointerv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetBufferSubData(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglGetBufferSubData( orig, target, offset, size, data );

}

static void REGAL_CALL dsa_glGetCompressedMultiTexImageEXT(Layer *_layer, GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetCompressedTexImage( _context, target, lod, img );
  return;

  RglGetCompressedMultiTexImageEXT( orig, texunit, target, lod, img );

}

static void REGAL_CALL dsa_glGetCompressedTextureImageEXT(Layer *_layer, GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetCompressedTexImage( _context, target, lod, img );
  return;

  RglGetCompressedTextureImageEXT( orig, texture, target, lod, img );

}

static void REGAL_CALL dsa_glGetDoubleIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if ( _context->dsa->GetIndexedv( _context, target, index, data ) ) {
    return;
  }

  RglGetDoubleIndexedvEXT( orig, target, index, data );

}

static void REGAL_CALL dsa_glGetDoublei_v(Layer *_layer, GLenum target, GLuint index, GLdouble *v)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if ( _context->dsa->GetIndexedv( _context, target, index, v ) ) {
    return;
  }

  RglGetDoublei_v( orig, target, index, v );

}

static void REGAL_CALL dsa_glGetDoublei_vEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if ( _context->dsa->GetIndexedv( _context, target, index, data ) ) {
    return;
  }

  RglGetDoublei_vEXT( orig, target, index, data );

}

static void REGAL_CALL dsa_glGetDoublev(Layer *_layer, GLenum pname, GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGet( _context, pname );

  RglGetDoublev( orig, pname, params );

}

static void REGAL_CALL dsa_glGetFloatIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if ( _context->dsa->GetIndexedv( _context, target, index, data ) ) {
    return;
  }

  RglGetFloatIndexedvEXT( orig, target, index, data );

}

static void REGAL_CALL dsa_glGetFloati_v(Layer *_layer, GLenum target, GLuint index, GLfloat *v)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if ( _context->dsa->GetIndexedv( _context, target, index, v ) ) {
    return;
  }

  RglGetFloati_v( orig, target, index, v );

}

static void REGAL_CALL dsa_glGetFloati_vEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if ( _context->dsa->GetIndexedv( _context, target, index, data ) ) {
    return;
  }

  RglGetFloati_vEXT( orig, target, index, data );

}

static void REGAL_CALL dsa_glGetFloatv(Layer *_layer, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGet( _context, pname );

  RglGetFloatv( orig, pname, params );

}

static void REGAL_CALL dsa_glGetFramebufferParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer );
  orig.glGetIntegerv( _context, pname, params);
  return;

  RglGetFramebufferParameterivEXT( orig, framebuffer, pname, params );

}

static void REGAL_CALL dsa_glGetIntegerv(Layer *_layer, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGet( _context, pname );

  RglGetIntegerv( orig, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexEnvfv( _context, target, pname, params );
  return;

  RglGetMultiTexEnvfvEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexEnviv( _context, target, pname, params );
  return;

  RglGetMultiTexEnvivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexGendvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexGendv( _context, coord, pname, params );
  return;

  RglGetMultiTexGendvEXT( orig, texunit, coord, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexGenfvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexGenfv( _context, coord, pname, params );
  return;

  RglGetMultiTexGenfvEXT( orig, texunit, coord, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexGenivEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexGeniv( _context, coord, pname, params );
  return;

  RglGetMultiTexGenivEXT( orig, texunit, coord, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexImageEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexImage( _context, target, level, format, type, pixels );
  return;

  RglGetMultiTexImageEXT( orig, texunit, target, level, format, type, pixels );

}

static void REGAL_CALL dsa_glGetMultiTexLevelParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexLevelParameterfv( _context, target, level, pname, params );
  return;

  RglGetMultiTexLevelParameterfvEXT( orig, texunit, target, level, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexLevelParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexLevelParameteriv( _context, target, level, pname, params );
  return;

  RglGetMultiTexLevelParameterivEXT( orig, texunit, target, level, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexParameterIivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexParameterIiv( _context, target, pname, params );
  return;

  RglGetMultiTexParameterIivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexParameterIuivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexParameterIuiv( _context, target, pname, params );
  return;

  RglGetMultiTexParameterIuivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexParameterfv( _context, target, pname, params );
  return;

  RglGetMultiTexParameterfvEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glGetMultiTexParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glGetTexParameteriv( _context, target, pname, params );
  return;

  RglGetMultiTexParameterivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glGetNamedBufferParameterivEXT(Layer *_layer, GLuint buffer, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  orig.glGetBufferParameteriv( _context, GL_ARRAY_BUFFER, pname, params );
  return;

  RglGetNamedBufferParameterivEXT( orig, buffer, pname, params );

}

static void REGAL_CALL dsa_glGetNamedBufferPointervEXT(Layer *_layer, GLuint buffer, GLenum pname, GLvoid **params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  orig.glGetBufferPointerv( _context, GL_ARRAY_BUFFER, pname, params );
  return;

  RglGetNamedBufferPointervEXT( orig, buffer, pname, params );

}

static void REGAL_CALL dsa_glGetNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  orig.glGetBufferSubData( _context, GL_ARRAY_BUFFER, offset, size, data );
  return;

  RglGetNamedBufferSubDataEXT( orig, buffer, offset, size, data );

}

static void REGAL_CALL dsa_glGetNamedFramebufferAttachmentParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glGetFramebufferAttachmentParameteriv( _context, GL_FRAMEBUFFER, attachment, pname, params );
  return;

  RglGetNamedFramebufferAttachmentParameterivEXT( orig, framebuffer, attachment, pname, params );

}

static void REGAL_CALL dsa_glGetNamedProgramLocalParameterIivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glGetProgramLocalParameterIivNV( _context, target, index, params );
  return;

  RglGetNamedProgramLocalParameterIivEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glGetNamedProgramLocalParameterIuivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glGetProgramLocalParameterIuivNV( _context, target, index, params );
  return;

  RglGetNamedProgramLocalParameterIuivEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glGetNamedProgramLocalParameterdvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glGetProgramLocalParameterdvARB( _context, target, index, params );
  return;

  RglGetNamedProgramLocalParameterdvEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glGetNamedProgramLocalParameterfvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glGetProgramLocalParameterfvARB( _context, target, index, params );
  return;

  RglGetNamedProgramLocalParameterfvEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glGetNamedProgramStringEXT(Layer *_layer, GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glGetProgramStringARB( _context, target, pname, string );
  return;

  RglGetNamedProgramStringEXT( orig, program, target, pname, string );

}

static void REGAL_CALL dsa_glGetNamedProgramivEXT(Layer *_layer, GLuint program, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glGetProgramivARB( _context, target, pname, params );
  return;

  RglGetNamedProgramivEXT( orig, program, target, pname, params );

}

static void REGAL_CALL dsa_glGetNamedRenderbufferParameterivEXT(Layer *_layer, GLuint renderbuffer, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaRenderbuffer( _context, GL_RENDERBUFFER, renderbuffer);
  orig.glGetRenderbufferParameteriv( _context, GL_RENDERBUFFER, pname, params );
  return;

  RglGetNamedRenderbufferParameterivEXT( orig, renderbuffer, pname, params );

}

static void REGAL_CALL dsa_glGetPointerIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLvoid **data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  // if ( _context->dsa->GetIndexedv( _context, target, index, data ) ) {
  //   return;
  // }

  RglGetPointerIndexedvEXT( orig, target, index, data );

}

static void REGAL_CALL dsa_glGetProgramEnvParameterIivNV(Layer *_layer, GLenum target, GLuint index, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramEnvParameterIivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramEnvParameterIuivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramEnvParameterIuivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramEnvParameterdvARB(Layer *_layer, GLenum target, GLuint index, GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramEnvParameterdvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramEnvParameterfvARB(Layer *_layer, GLenum target, GLuint index, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramEnvParameterfvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramLocalParameterIivNV(Layer *_layer, GLenum target, GLuint index, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramLocalParameterIivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramLocalParameterIuivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramLocalParameterIuivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramLocalParameterdvARB(Layer *_layer, GLenum target, GLuint index, GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramLocalParameterdvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetProgramLocalParameterfvARB(Layer *_layer, GLenum target, GLuint index, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglGetProgramLocalParameterfvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glGetRenderbufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglGetRenderbufferParameteriv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetRenderbufferParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglGetRenderbufferParameterivEXT( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetTexEnvfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglGetTexEnvfv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetTexEnviv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglGetTexEnviv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetTexParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglGetTexParameterfv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetTexParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglGetTexParameteriv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glGetTextureImageEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexImage( _context, target, level, format, type, pixels );
  return;

  RglGetTextureImageEXT( orig, texture, target, level, format, type, pixels );

}

static void REGAL_CALL dsa_glGetTextureLevelParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexLevelParameterfv( _context, target, level, pname, params );
  return;

  RglGetTextureLevelParameterfvEXT( orig, texture, target, level, pname, params );

}

static void REGAL_CALL dsa_glGetTextureLevelParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexLevelParameteriv( _context, target, level, pname, params );
  return;

  RglGetTextureLevelParameterivEXT( orig, texture, target, level, pname, params );

}

static void REGAL_CALL dsa_glGetTextureParameterIivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexParameterIiv( _context, target, pname, params );
  return;

  RglGetTextureParameterIivEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL dsa_glGetTextureParameterIuivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexParameterIuiv( _context, target, pname, params );
  return;

  RglGetTextureParameterIuivEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL dsa_glGetTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexParameterfv( _context, target, pname, params );
  return;

  RglGetTextureParameterfvEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL dsa_glGetTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glGetTexParameteriv( _context, target, pname, params );
  return;

  RglGetTextureParameterivEXT( orig, texture, target, pname, params );

}

static GLboolean REGAL_CALL dsa_glIsEnabled(Layer *_layer, GLenum cap)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreIsEnabled( _context, cap );

  return RglIsEnabled( orig, cap );

}

static GLboolean REGAL_CALL dsa_glIsEnabledIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  GLboolean ret;
  ret = _context->dsa->IsEnabledIndexed( _context, target, index );
  return ret;

  return RglIsEnabledIndexedEXT( orig, target, index );

}

static void REGAL_CALL dsa_glLoadIdentity(Layer *_layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglLoadIdentity( orig );

}

static void REGAL_CALL dsa_glLoadMatrixd(Layer *_layer, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglLoadMatrixd( orig, m );

}

static void REGAL_CALL dsa_glLoadMatrixf(Layer *_layer, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglLoadMatrixf( orig, m );

}

static void REGAL_CALL dsa_glLoadTransposeMatrixd(Layer *_layer, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglLoadTransposeMatrixd( orig, m );

}

static void REGAL_CALL dsa_glLoadTransposeMatrixf(Layer *_layer, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglLoadTransposeMatrixf( orig, m );

}

static GLvoid *REGAL_CALL dsa_glMapBuffer(Layer *_layer, GLenum target, GLenum access)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  return RglMapBuffer( orig, target, access );

}

static GLvoid *REGAL_CALL dsa_glMapBufferARB(Layer *_layer, GLenum target, GLenum access)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  return RglMapBufferARB( orig, target, access );

}

static GLvoid *REGAL_CALL dsa_glMapBufferRange(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  return RglMapBufferRange( orig, target, offset, length, access );

}

static GLvoid *REGAL_CALL dsa_glMapBufferRangeEXT(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  return RglMapBufferRangeEXT( orig, target, offset, length, access );

}

static GLvoid *REGAL_CALL dsa_glMapNamedBufferEXT(Layer *_layer, GLuint buffer, GLenum access)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  return orig.glMapBuffer( _context, GL_ARRAY_BUFFER, access );

  return RglMapNamedBufferEXT( orig, buffer, access );

}

static GLvoid *REGAL_CALL dsa_glMapNamedBufferRangeEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  return orig.glMapBufferRange( _context, GL_ARRAY_BUFFER, offset, length, access );

  return RglMapNamedBufferRangeEXT( orig, buffer, offset, length, access );

}

static void REGAL_CALL dsa_glMatrixFrustumEXT(Layer *_layer, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glFrustum( _context, left, right, bottom, top, zNear, zFar);
  return;

  RglMatrixFrustumEXT( orig, mode, left, right, bottom, top, zNear, zFar );

}

static void REGAL_CALL dsa_glMatrixLoadIdentityEXT(Layer *_layer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glLoadIdentity( _context );
  return;

  RglMatrixLoadIdentityEXT( orig, mode );

}

static void REGAL_CALL dsa_glMatrixLoadTransposedEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glLoadTransposeMatrixd( _context, m);
  return;

  RglMatrixLoadTransposedEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixLoadTransposefEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glLoadTransposeMatrixf( _context, m);
  return;

  RglMatrixLoadTransposefEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixLoaddEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glLoadMatrixd( _context, m);
  return;

  RglMatrixLoaddEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixLoadfEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glLoadMatrixf( _context, m);
  return;

  RglMatrixLoadfEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixMode(Layer *_layer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if (_context->dsa->ShadowMatrixMode(mode)) {
    return;
  }

  RglMatrixMode( orig, mode );

}

static void REGAL_CALL dsa_glMatrixMultTransposedEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glMultTransposeMatrixd( _context, m);
  return;

  RglMatrixMultTransposedEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixMultTransposefEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glMultTransposeMatrixf( _context, m);
  return;

  RglMatrixMultTransposefEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixMultdEXT(Layer *_layer, GLenum mode, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glMultMatrixd( _context, m);
  return;

  RglMatrixMultdEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixMultfEXT(Layer *_layer, GLenum mode, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glMultMatrixf( _context, m);
  return;

  RglMatrixMultfEXT( orig, mode, m );

}

static void REGAL_CALL dsa_glMatrixOrthoEXT(Layer *_layer, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glOrtho( _context, left, right, bottom, top, zNear, zFar);
  return;

  RglMatrixOrthoEXT( orig, mode, left, right, bottom, top, zNear, zFar );

}

static void REGAL_CALL dsa_glMatrixPopEXT(Layer *_layer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glPopMatrix( _context );
  return;

  RglMatrixPopEXT( orig, mode );

}

static void REGAL_CALL dsa_glMatrixPushEXT(Layer *_layer, GLenum mode)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glPushMatrix( _context );
  return;

  RglMatrixPushEXT( orig, mode );

}

static void REGAL_CALL dsa_glMatrixRotatedEXT(Layer *_layer, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glRotated( _context, angle, x, y, z);
  return;

  RglMatrixRotatedEXT( orig, mode, angle, x, y, z );

}

static void REGAL_CALL dsa_glMatrixRotatefEXT(Layer *_layer, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glRotatef( _context, angle, x, y, z);
  return;

  RglMatrixRotatefEXT( orig, mode, angle, x, y, z );

}

static void REGAL_CALL dsa_glMatrixScaledEXT(Layer *_layer, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glScaled( _context, x, y, z);
  return;

  RglMatrixScaledEXT( orig, mode, x, y, z );

}

static void REGAL_CALL dsa_glMatrixScalefEXT(Layer *_layer, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glScalef( _context, x, y, z);
  return;

  RglMatrixScalefEXT( orig, mode, x, y, z );

}

static void REGAL_CALL dsa_glMatrixTranslatedEXT(Layer *_layer, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glTranslated( _context, x, y, z);
  return;

  RglMatrixTranslatedEXT( orig, mode, x, y, z );

}

static void REGAL_CALL dsa_glMatrixTranslatefEXT(Layer *_layer, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaMatrixMode( _context, mode );
  orig.glTranslatef( _context, x, y, z);
  return;

  RglMatrixTranslatefEXT( orig, mode, x, y, z );

}

static void REGAL_CALL dsa_glMultMatrixd(Layer *_layer, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglMultMatrixd( orig, m );

}

static void REGAL_CALL dsa_glMultMatrixf(Layer *_layer, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglMultMatrixf( orig, m );

}

static void REGAL_CALL dsa_glMultTransposeMatrixd(Layer *_layer, const GLdouble *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglMultTransposeMatrixd( orig, m );

}

static void REGAL_CALL dsa_glMultTransposeMatrixf(Layer *_layer, const GLfloat *m)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglMultTransposeMatrixf( orig, m );

}

static void REGAL_CALL dsa_glMultiDrawArrays(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawArrays( orig, mode, first, count, primcount );

}

static void REGAL_CALL dsa_glMultiDrawArraysEXT(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawArraysEXT( orig, mode, first, count, primcount );

}

static void REGAL_CALL dsa_glMultiDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawArraysIndirect( orig, mode, indirect, primcount, stride );

}

static void REGAL_CALL dsa_glMultiDrawArraysIndirectAMD(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawArraysIndirectAMD( orig, mode, indirect, primcount, stride );

}

static void REGAL_CALL dsa_glMultiDrawElementArrayAPPLE(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawElementArrayAPPLE( orig, mode, first, count, primcount );

}

static void REGAL_CALL dsa_glMultiDrawElements(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawElements( orig, mode, count, type, indices, primcount );

}

static void REGAL_CALL dsa_glMultiDrawElementsBaseVertex(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawElementsBaseVertex( orig, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL dsa_glMultiDrawElementsEXT(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawElementsEXT( orig, mode, count, type, indices, primcount );

}

static void REGAL_CALL dsa_glMultiDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawElementsIndirect( orig, mode, type, indirect, primcount, stride );

}

static void REGAL_CALL dsa_glMultiDrawElementsIndirectAMD(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->Restore( _context );

  RglMultiDrawElementsIndirectAMD( orig, mode, type, indirect, primcount, stride );

}

static void REGAL_CALL dsa_glMultiTexBufferEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexBuffer( _context, target, internalformat, buffer );
  return;

  RglMultiTexBufferEXT( orig, texunit, target, internalformat, buffer );

}

static void REGAL_CALL dsa_glMultiTexCoordPointerEXT(Layer *_layer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaClientActiveTexture( _context, texunit );
  orig.glTexCoordPointer( _context, size, type, stride, pointer );
  return;

  RglMultiTexCoordPointerEXT( orig, texunit, size, type, stride, pointer );

}

static void REGAL_CALL dsa_glMultiTexEnvfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexEnvf( _context, target, pname, param );
  return;

  RglMultiTexEnvfEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL dsa_glMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexEnvfv( _context, target, pname, params );
  return;

  RglMultiTexEnvfvEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glMultiTexEnviEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexEnvi( _context, target, pname, param );
  return;

  RglMultiTexEnviEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL dsa_glMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexEnviv( _context, target, pname, params );
  return;

  RglMultiTexEnvivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glMultiTexGendEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexGend( _context, coord, pname, param );
  return;

  RglMultiTexGendEXT( orig, texunit, coord, pname, param );

}

static void REGAL_CALL dsa_glMultiTexGendvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexGendv( _context, coord, pname, params );
  return;

  RglMultiTexGendvEXT( orig, texunit, coord, pname, params );

}

static void REGAL_CALL dsa_glMultiTexGenfEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexGenf( _context, coord, pname, param );
  return;

  RglMultiTexGenfEXT( orig, texunit, coord, pname, param );

}

static void REGAL_CALL dsa_glMultiTexGenfvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexGenfv( _context, coord, pname, params );
  return;

  RglMultiTexGenfvEXT( orig, texunit, coord, pname, params );

}

static void REGAL_CALL dsa_glMultiTexGeniEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexGeni( _context, coord, pname, param );
  return;

  RglMultiTexGeniEXT( orig, texunit, coord, pname, param );

}

static void REGAL_CALL dsa_glMultiTexGenivEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexGeniv( _context, coord, pname, params );
  return;

  RglMultiTexGenivEXT( orig, texunit, coord, pname, params );

}

static void REGAL_CALL dsa_glMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexImage1D( _context, target, level, internalformat, width, border, format, type, pixels );
  return;

  RglMultiTexImage1DEXT( orig, texunit, target, level, internalformat, width, border, format, type, pixels );

}

static void REGAL_CALL dsa_glMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexImage2D( _context, target, level, internalformat, width, height, border, format, type, pixels );
  return;

  RglMultiTexImage2DEXT( orig, texunit, target, level, internalformat, width, height, border, format, type, pixels );

}

static void REGAL_CALL dsa_glMultiTexImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexImage3D( _context, target, level, internalformat, width, height, depth, border, format, type, pixels );
  return;

  RglMultiTexImage3DEXT( orig, texunit, target, level, internalformat, width, height, depth, border, format, type, pixels );

}

static void REGAL_CALL dsa_glMultiTexParameterIivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexParameterIiv( _context, target, pname, params );
  return;

  RglMultiTexParameterIivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glMultiTexParameterIuivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexParameterIuiv( _context, target, pname, params );
  return;

  RglMultiTexParameterIuivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL dsa_glMultiTexParameterfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexParameterf( _context, target, pname, param );
  return;

  RglMultiTexParameterfEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL dsa_glMultiTexParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexParameterfv( _context, target, pname, param );
  return;

  RglMultiTexParameterfvEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL dsa_glMultiTexParameteriEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexParameteri( _context, target, pname, param );
  return;

  RglMultiTexParameteriEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL dsa_glMultiTexParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexParameteriv( _context, target, pname, param );
  return;

  RglMultiTexParameterivEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL dsa_glMultiTexRenderbufferEXT(Layer *_layer, GLenum texunit, GLenum target, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexRenderbufferNV( _context, target, renderbuffer );
  return;

  RglMultiTexRenderbufferEXT( orig, texunit, target, renderbuffer );

}

static void REGAL_CALL dsa_glMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexSubImage1D( _context, target, level, xoffset, width, format, type, pixels );
  return;

  RglMultiTexSubImage1DEXT( orig, texunit, target, level, xoffset, width, format, type, pixels );

}

static void REGAL_CALL dsa_glMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexSubImage2D( _context, target, level, xoffset, yoffset, width, height, format, type, pixels );
  return;

  RglMultiTexSubImage2DEXT( orig, texunit, target, level, xoffset, yoffset, width, height, format, type, pixels );

}

static void REGAL_CALL dsa_glMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaActiveTexture( _context, texunit );
  orig.glTexSubImage3D( _context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
  return;

  RglMultiTexSubImage3DEXT( orig, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );

}

static void REGAL_CALL dsa_glNamedBufferDataEXT(Layer *_layer, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  orig.glBufferData( _context, GL_ARRAY_BUFFER, size, data, usage );
  return;

  RglNamedBufferDataEXT( orig, buffer, size, data, usage );

}

static void REGAL_CALL dsa_glNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  orig.glBufferSubData( _context, GL_ARRAY_BUFFER, offset, size, data );
  return;

  RglNamedBufferSubDataEXT( orig, buffer, offset, size, data );

}

static void REGAL_CALL dsa_glNamedCopyBufferSubDataEXT(Layer *_layer, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, readBuffer);
  orig.glCopyBufferSubData( _context, GL_ARRAY_BUFFER, writeBuffer, readOffset, writeOffset, size );
  return;

  RglNamedCopyBufferSubDataEXT( orig, readBuffer, writeBuffer, readOffset, writeOffset, size );

}

static void REGAL_CALL dsa_glNamedFramebufferRenderbufferEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferRenderbuffer( _context, GL_FRAMEBUFFER, attachment, renderbuffertarget, renderbuffer );
  return;

  RglNamedFramebufferRenderbufferEXT( orig, framebuffer, attachment, renderbuffertarget, renderbuffer );

}

static void REGAL_CALL dsa_glNamedFramebufferTexture1DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferTexture1D( _context, GL_FRAMEBUFFER, attachment, textarget, texture, level );
  return;

  RglNamedFramebufferTexture1DEXT( orig, framebuffer, attachment, textarget, texture, level );

}

static void REGAL_CALL dsa_glNamedFramebufferTexture2DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferTexture2D( _context, GL_FRAMEBUFFER, attachment, textarget, texture, level );
  return;

  RglNamedFramebufferTexture2DEXT( orig, framebuffer, attachment, textarget, texture, level );

}

static void REGAL_CALL dsa_glNamedFramebufferTexture3DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferTexture3D( _context, GL_FRAMEBUFFER, attachment, textarget, texture, level, zoffset );
  return;

  RglNamedFramebufferTexture3DEXT( orig, framebuffer, attachment, textarget, texture, level, zoffset );

}

static void REGAL_CALL dsa_glNamedFramebufferTextureEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferTexture( _context, GL_FRAMEBUFFER, attachment, texture, level );
  return;

  RglNamedFramebufferTextureEXT( orig, framebuffer, attachment, texture, level );

}

static void REGAL_CALL dsa_glNamedFramebufferTextureFaceEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferTextureFaceARB( _context, GL_FRAMEBUFFER, attachment, texture, level, face );
  return;

  RglNamedFramebufferTextureFaceEXT( orig, framebuffer, attachment, texture, level, face );

}

static void REGAL_CALL dsa_glNamedFramebufferTextureLayerEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
  orig.glFramebufferTextureLayer( _context, GL_FRAMEBUFFER, attachment, texture, level, layer );
  return;

  RglNamedFramebufferTextureLayerEXT( orig, framebuffer, attachment, texture, level, layer );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameter4dEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameter4dARB( _context, target, index, x, y, z, w );
  return;

  RglNamedProgramLocalParameter4dEXT( orig, program, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameter4dvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameter4dvARB( _context, target, index, params );
  return;

  RglNamedProgramLocalParameter4dvEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameter4fEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameter4fARB( _context, target, index, x, y, z, w );
  return;

  RglNamedProgramLocalParameter4fEXT( orig, program, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameter4fvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameter4fvARB( _context, target, index, params );
  return;

  RglNamedProgramLocalParameter4fvEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameterI4iEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameterI4iNV( _context, target, index, x, y, z, w );
  return;

  RglNamedProgramLocalParameterI4iEXT( orig, program, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameterI4ivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameterI4ivNV( _context, target, index, params );
  return;

  RglNamedProgramLocalParameterI4ivEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameterI4uiEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameterI4uiNV( _context, target, index, x, y, z, w );
  return;

  RglNamedProgramLocalParameterI4uiEXT( orig, program, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameterI4uivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameterI4uivNV( _context, target, index, params );
  return;

  RglNamedProgramLocalParameterI4uivEXT( orig, program, target, index, params );

}

static void REGAL_CALL dsa_glNamedProgramLocalParameters4fvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParameters4fvEXT( _context, target, index, count, params );
  return;

  RglNamedProgramLocalParameters4fvEXT( orig, program, target, index, count, params );

}

static void REGAL_CALL dsa_glNamedProgramLocalParametersI4ivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParametersI4ivNV( _context, target, index, count, params );
  return;

  RglNamedProgramLocalParametersI4ivEXT( orig, program, target, index, count, params );

}

static void REGAL_CALL dsa_glNamedProgramLocalParametersI4uivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramLocalParametersI4uivNV( _context, target, index, count, params );
  return;

  RglNamedProgramLocalParametersI4uivEXT( orig, program, target, index, count, params );

}

static void REGAL_CALL dsa_glNamedProgramStringEXT(Layer *_layer, GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaAsmProgram( _context, target, program);
  orig.glProgramStringARB( _context, target, format, len, string );
  return;

  RglNamedProgramStringEXT( orig, program, target, format, len, string );

}

static void REGAL_CALL dsa_glNamedRenderbufferStorageEXT(Layer *_layer, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaRenderbuffer( _context, GL_RENDERBUFFER, renderbuffer);
  orig.glRenderbufferStorage( _context, GL_RENDERBUFFER, internalformat, width, height );
  return;

  RglNamedRenderbufferStorageEXT( orig, renderbuffer, internalformat, width, height );

}

static void REGAL_CALL dsa_glNamedRenderbufferStorageMultisampleCoverageEXT(Layer *_layer, GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaRenderbuffer( _context, GL_RENDERBUFFER, renderbuffer);
  orig.glRenderbufferStorageMultisampleCoverageNV( _context, GL_RENDERBUFFER, coverageSamples, colorSamples, internalformat, width, height );
  return;

  RglNamedRenderbufferStorageMultisampleCoverageEXT( orig, renderbuffer, coverageSamples, colorSamples, internalformat, width, height );

}

static void REGAL_CALL dsa_glNamedRenderbufferStorageMultisampleEXT(Layer *_layer, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaRenderbuffer( _context, GL_RENDERBUFFER, renderbuffer);
  orig.glRenderbufferStorageMultisample( _context, GL_RENDERBUFFER, samples, internalformat, width, height );
  return;

  RglNamedRenderbufferStorageMultisampleEXT( orig, renderbuffer, samples, internalformat, width, height );

}

static void REGAL_CALL dsa_glNormalPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglNormalPointer( orig, type, stride, pointer );

}

static void REGAL_CALL dsa_glPopMatrix(Layer *_layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglPopMatrix( orig );

}

static void REGAL_CALL dsa_glProgramEnvParameter4dARB(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameter4dARB( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramEnvParameter4dvARB(Layer *_layer, GLenum target, GLuint index, const GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameter4dvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramEnvParameter4fARB(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameter4fARB( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramEnvParameter4fvARB(Layer *_layer, GLenum target, GLuint index, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameter4fvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramEnvParameterI4iNV(Layer *_layer, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameterI4iNV( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramEnvParameterI4ivNV(Layer *_layer, GLenum target, GLuint index, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameterI4ivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramEnvParameterI4uiNV(Layer *_layer, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameterI4uiNV( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramEnvParameterI4uivNV(Layer *_layer, GLenum target, GLuint index, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParameterI4uivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramEnvParametersI4ivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParametersI4ivNV( orig, target, index, count, params );

}

static void REGAL_CALL dsa_glProgramEnvParametersI4uivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramEnvParametersI4uivNV( orig, target, index, count, params );

}

static void REGAL_CALL dsa_glProgramLocalParameter4dARB(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameter4dARB( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramLocalParameter4dvARB(Layer *_layer, GLenum target, GLuint index, const GLdouble *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameter4dvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramLocalParameter4fARB(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameter4fARB( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramLocalParameter4fvARB(Layer *_layer, GLenum target, GLuint index, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameter4fvARB( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramLocalParameterI4iNV(Layer *_layer, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameterI4iNV( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramLocalParameterI4ivNV(Layer *_layer, GLenum target, GLuint index, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameterI4ivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramLocalParameterI4uiNV(Layer *_layer, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameterI4uiNV( orig, target, index, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramLocalParameterI4uivNV(Layer *_layer, GLenum target, GLuint index, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParameterI4uivNV( orig, target, index, params );

}

static void REGAL_CALL dsa_glProgramLocalParametersI4ivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParametersI4ivNV( orig, target, index, count, params );

}

static void REGAL_CALL dsa_glProgramLocalParametersI4uivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreAsmProgram( _context, target );

  RglProgramLocalParametersI4uivNV( orig, target, index, count, params );

}

static void REGAL_CALL dsa_glProgramUniform1dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1d( _context, location, x );
  return;

  RglProgramUniform1dEXT( orig, program, location, x );

}

static void REGAL_CALL dsa_glProgramUniform1dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1dv( _context, location, count, value );
  return;

  RglProgramUniform1dvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform1fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1f( _context, location, v0 );
  return;

  RglProgramUniform1fEXT( orig, program, location, v0 );

}

static void REGAL_CALL dsa_glProgramUniform1fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1fv( _context, location, count, value );
  return;

  RglProgramUniform1fvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform1iEXT(Layer *_layer, GLuint program, GLint location, GLint v0)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1i( _context, location, v0 );
  return;

  RglProgramUniform1iEXT( orig, program, location, v0 );

}

static void REGAL_CALL dsa_glProgramUniform1ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1iv( _context, location, count, value );
  return;

  RglProgramUniform1ivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform1uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1ui( _context, location, v0 );
  return;

  RglProgramUniform1uiEXT( orig, program, location, v0 );

}

static void REGAL_CALL dsa_glProgramUniform1uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform1uiv( _context, location, count, value );
  return;

  RglProgramUniform1uivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform2dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2d( _context, location, x, y );
  return;

  RglProgramUniform2dEXT( orig, program, location, x, y );

}

static void REGAL_CALL dsa_glProgramUniform2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2dv( _context, location, count, value );
  return;

  RglProgramUniform2dvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform2fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2f( _context, location, v0, v1 );
  return;

  RglProgramUniform2fEXT( orig, program, location, v0, v1 );

}

static void REGAL_CALL dsa_glProgramUniform2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2fv( _context, location, count, value );
  return;

  RglProgramUniform2fvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform2iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2i( _context, location, v0, v1 );
  return;

  RglProgramUniform2iEXT( orig, program, location, v0, v1 );

}

static void REGAL_CALL dsa_glProgramUniform2ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2iv( _context, location, count, value );
  return;

  RglProgramUniform2ivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform2uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2ui( _context, location, v0, v1 );
  return;

  RglProgramUniform2uiEXT( orig, program, location, v0, v1 );

}

static void REGAL_CALL dsa_glProgramUniform2uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform2uiv( _context, location, count, value );
  return;

  RglProgramUniform2uivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform3dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3d( _context, location, x, y, z );
  return;

  RglProgramUniform3dEXT( orig, program, location, x, y, z );

}

static void REGAL_CALL dsa_glProgramUniform3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3dv( _context, location, count, value );
  return;

  RglProgramUniform3dvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform3fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3f( _context, location, v0, v1, v2 );
  return;

  RglProgramUniform3fEXT( orig, program, location, v0, v1, v2 );

}

static void REGAL_CALL dsa_glProgramUniform3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3fv( _context, location, count, value );
  return;

  RglProgramUniform3fvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform3iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3i( _context, location, v0, v1, v2 );
  return;

  RglProgramUniform3iEXT( orig, program, location, v0, v1, v2 );

}

static void REGAL_CALL dsa_glProgramUniform3ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3iv( _context, location, count, value );
  return;

  RglProgramUniform3ivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform3uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3ui( _context, location, v0, v1, v2 );
  return;

  RglProgramUniform3uiEXT( orig, program, location, v0, v1, v2 );

}

static void REGAL_CALL dsa_glProgramUniform3uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform3uiv( _context, location, count, value );
  return;

  RglProgramUniform3uivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform4dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4d( _context, location, x, y, z, w );
  return;

  RglProgramUniform4dEXT( orig, program, location, x, y, z, w );

}

static void REGAL_CALL dsa_glProgramUniform4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4dv( _context, location, count, value );
  return;

  RglProgramUniform4dvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform4fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4f( _context, location, v0, v1, v2, v3 );
  return;

  RglProgramUniform4fEXT( orig, program, location, v0, v1, v2, v3 );

}

static void REGAL_CALL dsa_glProgramUniform4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4fv( _context, location, count, value );
  return;

  RglProgramUniform4fvEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform4iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4i( _context, location, v0, v1, v2, v3 );
  return;

  RglProgramUniform4iEXT( orig, program, location, v0, v1, v2, v3 );

}

static void REGAL_CALL dsa_glProgramUniform4ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4iv( _context, location, count, value );
  return;

  RglProgramUniform4ivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniform4uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4ui( _context, location, v0, v1, v2, v3 );
  return;

  RglProgramUniform4uiEXT( orig, program, location, v0, v1, v2, v3 );

}

static void REGAL_CALL dsa_glProgramUniform4uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniform4uiv( _context, location, count, value );
  return;

  RglProgramUniform4uivEXT( orig, program, location, count, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix2dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix2dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix2fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix2fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix2x3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix2x3dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix2x3dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix2x3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix2x3fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix2x3fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix2x4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix2x4dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix2x4dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix2x4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix2x4fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix2x4fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix3dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix3dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix3fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix3fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix3x2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix3x2dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix3x2dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix3x2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix3x2fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix3x2fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix3x4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix3x4dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix3x4dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix3x4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix3x4fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix3x4fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix4dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix4dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix4fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix4fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix4x2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix4x2dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix4x2dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix4x2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix4x2fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix4x2fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix4x3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix4x3dv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix4x3dvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glProgramUniformMatrix4x3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaGlslProgram( _context, program);
  orig.glUniformMatrix4x3fv( _context, location, count, transpose, value );
  return;

  RglProgramUniformMatrix4x3fvEXT( orig, program, location, count, transpose, value );

}

static void REGAL_CALL dsa_glPushClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  orig.glPushClientAttrib( _context, mask);
  _context->dsa->ClientAttribDefault(_context, mask);
  return;

  RglPushClientAttribDefaultEXT( orig, mask );

}

static void REGAL_CALL dsa_glPushMatrix(Layer *_layer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglPushMatrix( orig );

}

static void REGAL_CALL dsa_glRenderbufferStorage(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglRenderbufferStorage( orig, target, internalformat, width, height );

}

static void REGAL_CALL dsa_glRenderbufferStorageEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglRenderbufferStorageEXT( orig, target, internalformat, width, height );

}

static void REGAL_CALL dsa_glRenderbufferStorageMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglRenderbufferStorageMultisample( orig, target, samples, internalformat, width, height );

}

static void REGAL_CALL dsa_glRenderbufferStorageMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglRenderbufferStorageMultisampleCoverageNV( orig, target, coverageSamples, colorSamples, internalformat, width, height );

}

static void REGAL_CALL dsa_glRenderbufferStorageMultisampleEXT(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreRenderbuffer( _context );

  RglRenderbufferStorageMultisampleEXT( orig, target, samples, internalformat, width, height );

}

static void REGAL_CALL dsa_glRotated(Layer *_layer, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglRotated( orig, angle, x, y, z );

}

static void REGAL_CALL dsa_glRotatef(Layer *_layer, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglRotatef( orig, angle, x, y, z );

}

static void REGAL_CALL dsa_glScaled(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglScaled( orig, x, y, z );

}

static void REGAL_CALL dsa_glScalef(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglScalef( orig, x, y, z );

}

static void REGAL_CALL dsa_glSecondaryColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglSecondaryColorPointer( orig, size, type, stride, pointer );

}

static void REGAL_CALL dsa_glTexBuffer(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexBuffer( orig, target, internalformat, buffer );

}

static void REGAL_CALL dsa_glTexCoordPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreClientActiveTexture( _context );
  _context->dsa->RestoreBuffer( _context );

  RglTexCoordPointer( orig, size, type, stride, pointer );

}

static void REGAL_CALL dsa_glTexEnvf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexEnvf( orig, target, pname, param );

}

static void REGAL_CALL dsa_glTexEnvfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexEnvfv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glTexEnvi(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexEnvi( orig, target, pname, param );

}

static void REGAL_CALL dsa_glTexEnviv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexEnviv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glTexGenf(Layer *_layer, GLenum coord, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreActiveTexture( _context );

  RglTexGenf( orig, coord, pname, param );

}

static void REGAL_CALL dsa_glTexGenfv(Layer *_layer, GLenum coord, GLenum pname, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreActiveTexture( _context );

  RglTexGenfv( orig, coord, pname, params );

}

static void REGAL_CALL dsa_glTexGeni(Layer *_layer, GLenum coord, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreActiveTexture( _context );

  RglTexGeni( orig, coord, pname, param );

}

static void REGAL_CALL dsa_glTexGeniv(Layer *_layer, GLenum coord, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreActiveTexture( _context );

  RglTexGeniv( orig, coord, pname, params );

}

static void REGAL_CALL dsa_glTexParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexParameterf( orig, target, pname, param );

}

static void REGAL_CALL dsa_glTexParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexParameterfv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glTexParameteri(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexParameteri( orig, target, pname, param );

}

static void REGAL_CALL dsa_glTexParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexParameteriv( orig, target, pname, params );

}

static void REGAL_CALL dsa_glTexRenderbufferNV(Layer *_layer, GLenum target, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreTexture( _context );
  _context->dsa->RestoreActiveTexture( _context );

  RglTexRenderbufferNV( orig, target, renderbuffer );

}

static void REGAL_CALL dsa_glTextureBufferEXT(Layer *_layer, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexBuffer( _context, target, internalformat, buffer );
  return;

  RglTextureBufferEXT( orig, texture, target, internalformat, buffer );

}

static void REGAL_CALL dsa_glTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexImage1D( _context, target, level, internalformat, width, border, format, type, pixels );
  return;

  RglTextureImage1DEXT( orig, texture, target, level, internalformat, width, border, format, type, pixels );

}

static void REGAL_CALL dsa_glTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexImage2D( _context, target, level, internalformat, width, height, border, format, type, pixels );
  return;

  RglTextureImage2DEXT( orig, texture, target, level, internalformat, width, height, border, format, type, pixels );

}

static void REGAL_CALL dsa_glTextureImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexImage3D( _context, target, level, internalformat, width, height, depth, border, format, type, pixels );
  return;

  RglTextureImage3DEXT( orig, texture, target, level, internalformat, width, height, depth, border, format, type, pixels );

}

static void REGAL_CALL dsa_glTextureParameterIivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexParameterIiv( _context, target, pname, params );
  return;

  RglTextureParameterIivEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL dsa_glTextureParameterIuivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexParameterIuiv( _context, target, pname, params );
  return;

  RglTextureParameterIuivEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL dsa_glTextureParameterfEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexParameterf( _context, target, pname, param );
  return;

  RglTextureParameterfEXT( orig, texture, target, pname, param );

}

static void REGAL_CALL dsa_glTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexParameterfv( _context, target, pname, param );
  return;

  RglTextureParameterfvEXT( orig, texture, target, pname, param );

}

static void REGAL_CALL dsa_glTextureParameteriEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexParameteri( _context, target, pname, param );
  return;

  RglTextureParameteriEXT( orig, texture, target, pname, param );

}

static void REGAL_CALL dsa_glTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexParameteriv( _context, target, pname, param );
  return;

  RglTextureParameterivEXT( orig, texture, target, pname, param );

}

static void REGAL_CALL dsa_glTextureRenderbufferEXT(Layer *_layer, GLuint texture, GLenum target, GLuint renderbuffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexRenderbufferNV( _context, target, renderbuffer );
  return;

  RglTextureRenderbufferEXT( orig, texture, target, renderbuffer );

}

static void REGAL_CALL dsa_glTextureStorage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexStorage1D( _context, target, levels, internalformat, width );
  return;

  RglTextureStorage1DEXT( orig, texture, target, levels, internalformat, width );

}

static void REGAL_CALL dsa_glTextureStorage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexStorage2D( _context, target, levels, internalformat, width, height );
  return;

  RglTextureStorage2DEXT( orig, texture, target, levels, internalformat, width, height );

}

static void REGAL_CALL dsa_glTextureStorage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexStorage3D( _context, target, levels, internalformat, width, height, depth );
  return;

  RglTextureStorage3DEXT( orig, texture, target, levels, internalformat, width, height, depth );

}

static void REGAL_CALL dsa_glTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexSubImage1D( _context, target, level, xoffset, width, format, type, pixels );
  return;

  RglTextureSubImage1DEXT( orig, texture, target, level, xoffset, width, format, type, pixels );

}

static void REGAL_CALL dsa_glTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexSubImage2D( _context, target, level, xoffset, yoffset, width, height, format, type, pixels );
  return;

  RglTextureSubImage2DEXT( orig, texture, target, level, xoffset, yoffset, width, height, format, type, pixels );

}

static void REGAL_CALL dsa_glTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaTexture( _context, target, texture );
  orig.glTexSubImage3D( _context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
  return;

  RglTextureSubImage3DEXT( orig, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );

}

static void REGAL_CALL dsa_glTranslated(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglTranslated( orig, x, y, z );

}

static void REGAL_CALL dsa_glTranslatef(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreMatrixMode( _context );

  RglTranslatef( orig, x, y, z );

}

static void REGAL_CALL dsa_glUniform1d(Layer *_layer, GLint location, GLdouble x)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1d( orig, location, x );

}

static void REGAL_CALL dsa_glUniform1dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1dv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform1f(Layer *_layer, GLint location, GLfloat v0)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1f( orig, location, v0 );

}

static void REGAL_CALL dsa_glUniform1fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1fv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform1i(Layer *_layer, GLint location, GLint v0)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1i( orig, location, v0 );

}

static void REGAL_CALL dsa_glUniform1iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1iv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform1ui(Layer *_layer, GLint location, GLuint v0)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1ui( orig, location, v0 );

}

static void REGAL_CALL dsa_glUniform1uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform1uiv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform2d(Layer *_layer, GLint location, GLdouble x, GLdouble y)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2d( orig, location, x, y );

}

static void REGAL_CALL dsa_glUniform2dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2dv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform2f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2f( orig, location, v0, v1 );

}

static void REGAL_CALL dsa_glUniform2fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2fv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform2i(Layer *_layer, GLint location, GLint v0, GLint v1)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2i( orig, location, v0, v1 );

}

static void REGAL_CALL dsa_glUniform2iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2iv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform2ui(Layer *_layer, GLint location, GLuint v0, GLuint v1)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2ui( orig, location, v0, v1 );

}

static void REGAL_CALL dsa_glUniform2uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform2uiv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform3d(Layer *_layer, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3d( orig, location, x, y, z );

}

static void REGAL_CALL dsa_glUniform3dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3dv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform3f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3f( orig, location, v0, v1, v2 );

}

static void REGAL_CALL dsa_glUniform3fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3fv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform3i(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3i( orig, location, v0, v1, v2 );

}

static void REGAL_CALL dsa_glUniform3iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3iv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform3ui(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3ui( orig, location, v0, v1, v2 );

}

static void REGAL_CALL dsa_glUniform3uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform3uiv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform4d(Layer *_layer, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4d( orig, location, x, y, z, w );

}

static void REGAL_CALL dsa_glUniform4dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4dv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform4f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4f( orig, location, v0, v1, v2, v3 );

}

static void REGAL_CALL dsa_glUniform4fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4fv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform4i(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4i( orig, location, v0, v1, v2, v3 );

}

static void REGAL_CALL dsa_glUniform4iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4iv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniform4ui(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4ui( orig, location, v0, v1, v2, v3 );

}

static void REGAL_CALL dsa_glUniform4uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniform4uiv( orig, location, count, value );

}

static void REGAL_CALL dsa_glUniformMatrix2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix2dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix2fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix2x3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix2x3dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix2x3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix2x3fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix2x4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix2x4dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix2x4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix2x4fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix3dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix3fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix3x2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix3x2dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix3x2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix3x2fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix3x4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix3x4dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix3x4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix3x4fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix4dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix4fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix4x2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix4x2dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix4x2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix4x2fv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix4x3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix4x3dv( orig, location, count, transpose, value );

}

static void REGAL_CALL dsa_glUniformMatrix4x3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreGlslProgram( _context );

  RglUniformMatrix4x3fv( orig, location, count, transpose, value );

}

static GLboolean REGAL_CALL dsa_glUnmapBuffer(Layer *_layer, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  return RglUnmapBuffer( orig, target );

}

static GLboolean REGAL_CALL dsa_glUnmapBufferARB(Layer *_layer, GLenum target)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  return RglUnmapBufferARB( orig, target );

}

static GLboolean REGAL_CALL dsa_glUnmapNamedBufferEXT(Layer *_layer, GLuint buffer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaBuffer( _context, buffer);
  return orig.glUnmapBuffer( _context, GL_ARRAY_BUFFER );

  return RglUnmapNamedBufferEXT( orig, buffer );

}

static void REGAL_CALL dsa_glUseProgram(Layer *_layer, GLuint program)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  if( _context->dsa->ShadowGlslProgram( program ) ) {
    return;
  }

  RglUseProgram( orig, program );

}

static void REGAL_CALL dsa_glVertexArrayColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glColorPointer( _context, size, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayColorOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayEdgeFlagOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glEdgeFlagPointer( _context, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayEdgeFlagOffsetEXT( orig, vaobj, buffer, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayFogCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glFogCoordPointer( _context, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayFogCoordOffsetEXT( orig, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayIndexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glIndexPointer( _context, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayIndexOffsetEXT( orig, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayMultiTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glMultiTexCoordPointerEXT( _context, texunit, size, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayMultiTexCoordOffsetEXT( orig, vaobj, buffer, texunit, size, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayNormalOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glNormalPointer( _context, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayNormalOffsetEXT( orig, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArraySecondaryColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glSecondaryColorPointer( _context, size, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArraySecondaryColorOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glTexCoordPointer( _context, size, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayTexCoordOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayVertexAttribIOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glVertexAttribIPointer( _context, index, size, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayVertexAttribIOffsetEXT( orig, vaobj, buffer, index, size, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayVertexAttribOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glVertexAttribPointer( _context, index, size, type, normalized, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayVertexAttribOffsetEXT( orig, vaobj, buffer, index, size, type, normalized, stride, offset );

}

static void REGAL_CALL dsa_glVertexArrayVertexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // impl
  _context->dsa->DsaVao( _context, vaobj );_context->dsa->DsaBuffer( _context, buffer );
  orig.glVertexPointer( _context, size, type, stride, reinterpret_cast<const GLvoid *>(offset) );
  return;

  RglVertexArrayVertexOffsetEXT( orig, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL dsa_glVertexPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Dsa * self = static_cast<Dsa *>(_layer);

  DsaOriginate & orig = self->orig;

  // prefix
  _context->dsa->RestoreBuffer( _context );

  RglVertexPointer( orig, size, type, stride, pointer );

}

void DsaIntercept( Layer *layer, Dispatch::GL & dt ) {
  dt.glActiveTexture                                  = MakeRegalProc(dsa_glActiveTexture, layer);
  dt.glActiveTextureARB                               = MakeRegalProc(dsa_glActiveTextureARB, layer);
  dt.glBegin                                          = MakeRegalProc(dsa_glBegin, layer);
  dt.glBindBuffer                                     = MakeRegalProc(dsa_glBindBuffer, layer);
  dt.glBindBufferARB                                  = MakeRegalProc(dsa_glBindBufferARB, layer);
  dt.glBindFramebuffer                                = MakeRegalProc(dsa_glBindFramebuffer, layer);
  dt.glBindFramebufferEXT                             = MakeRegalProc(dsa_glBindFramebufferEXT, layer);
  dt.glBindMultiTextureEXT                            = MakeRegalProc(dsa_glBindMultiTextureEXT, layer);
  dt.glBindProgramARB                                 = MakeRegalProc(dsa_glBindProgramARB, layer);
  dt.glBindRenderbuffer                               = MakeRegalProc(dsa_glBindRenderbuffer, layer);
  dt.glBindRenderbufferEXT                            = MakeRegalProc(dsa_glBindRenderbufferEXT, layer);
  dt.glBindTexture                                    = MakeRegalProc(dsa_glBindTexture, layer);
  dt.glBindTextureEXT                                 = MakeRegalProc(dsa_glBindTextureEXT, layer);
  dt.glBindVertexArray                                = MakeRegalProc(dsa_glBindVertexArray, layer);
  dt.glBufferData                                     = MakeRegalProc(dsa_glBufferData, layer);
  dt.glBufferSubData                                  = MakeRegalProc(dsa_glBufferSubData, layer);
  dt.glCheckNamedFramebufferStatusEXT                 = MakeRegalProc(dsa_glCheckNamedFramebufferStatusEXT, layer);
  dt.glClientActiveTexture                            = MakeRegalProc(dsa_glClientActiveTexture, layer);
  dt.glClientActiveTextureARB                         = MakeRegalProc(dsa_glClientActiveTextureARB, layer);
  dt.glClientAttribDefaultEXT                         = MakeRegalProc(dsa_glClientAttribDefaultEXT, layer);
  dt.glColorPointer                                   = MakeRegalProc(dsa_glColorPointer, layer);
  dt.glCompressedMultiTexImage1DEXT                   = MakeRegalProc(dsa_glCompressedMultiTexImage1DEXT, layer);
  dt.glCompressedMultiTexImage2DEXT                   = MakeRegalProc(dsa_glCompressedMultiTexImage2DEXT, layer);
  dt.glCompressedMultiTexImage3DEXT                   = MakeRegalProc(dsa_glCompressedMultiTexImage3DEXT, layer);
  dt.glCompressedMultiTexSubImage1DEXT                = MakeRegalProc(dsa_glCompressedMultiTexSubImage1DEXT, layer);
  dt.glCompressedMultiTexSubImage2DEXT                = MakeRegalProc(dsa_glCompressedMultiTexSubImage2DEXT, layer);
  dt.glCompressedMultiTexSubImage3DEXT                = MakeRegalProc(dsa_glCompressedMultiTexSubImage3DEXT, layer);
  dt.glCompressedTextureImage1DEXT                    = MakeRegalProc(dsa_glCompressedTextureImage1DEXT, layer);
  dt.glCompressedTextureImage2DEXT                    = MakeRegalProc(dsa_glCompressedTextureImage2DEXT, layer);
  dt.glCompressedTextureImage3DEXT                    = MakeRegalProc(dsa_glCompressedTextureImage3DEXT, layer);
  dt.glCompressedTextureSubImage1DEXT                 = MakeRegalProc(dsa_glCompressedTextureSubImage1DEXT, layer);
  dt.glCompressedTextureSubImage2DEXT                 = MakeRegalProc(dsa_glCompressedTextureSubImage2DEXT, layer);
  dt.glCompressedTextureSubImage3DEXT                 = MakeRegalProc(dsa_glCompressedTextureSubImage3DEXT, layer);
  dt.glCopyBufferSubData                              = MakeRegalProc(dsa_glCopyBufferSubData, layer);
  dt.glCopyMultiTexImage1DEXT                         = MakeRegalProc(dsa_glCopyMultiTexImage1DEXT, layer);
  dt.glCopyMultiTexImage2DEXT                         = MakeRegalProc(dsa_glCopyMultiTexImage2DEXT, layer);
  dt.glCopyMultiTexSubImage1DEXT                      = MakeRegalProc(dsa_glCopyMultiTexSubImage1DEXT, layer);
  dt.glCopyMultiTexSubImage2DEXT                      = MakeRegalProc(dsa_glCopyMultiTexSubImage2DEXT, layer);
  dt.glCopyMultiTexSubImage3DEXT                      = MakeRegalProc(dsa_glCopyMultiTexSubImage3DEXT, layer);
  dt.glCopyTextureImage1DEXT                          = MakeRegalProc(dsa_glCopyTextureImage1DEXT, layer);
  dt.glCopyTextureImage2DEXT                          = MakeRegalProc(dsa_glCopyTextureImage2DEXT, layer);
  dt.glCopyTextureSubImage1DEXT                       = MakeRegalProc(dsa_glCopyTextureSubImage1DEXT, layer);
  dt.glCopyTextureSubImage2DEXT                       = MakeRegalProc(dsa_glCopyTextureSubImage2DEXT, layer);
  dt.glCopyTextureSubImage3DEXT                       = MakeRegalProc(dsa_glCopyTextureSubImage3DEXT, layer);
  dt.glDeleteBuffers                                  = MakeRegalProc(dsa_glDeleteBuffers, layer);
  dt.glDeleteBuffersARB                               = MakeRegalProc(dsa_glDeleteBuffersARB, layer);
  dt.glDeleteFramebuffers                             = MakeRegalProc(dsa_glDeleteFramebuffers, layer);
  dt.glDeleteFramebuffersEXT                          = MakeRegalProc(dsa_glDeleteFramebuffersEXT, layer);
  dt.glDeleteFramebuffersOES                          = MakeRegalProc(dsa_glDeleteFramebuffersOES, layer);
  dt.glDeleteProgram                                  = MakeRegalProc(dsa_glDeleteProgram, layer);
  dt.glDeleteProgramsARB                              = MakeRegalProc(dsa_glDeleteProgramsARB, layer);
  dt.glDeleteProgramsNV                               = MakeRegalProc(dsa_glDeleteProgramsNV, layer);
  dt.glDeleteRenderbuffers                            = MakeRegalProc(dsa_glDeleteRenderbuffers, layer);
  dt.glDeleteRenderbuffersEXT                         = MakeRegalProc(dsa_glDeleteRenderbuffersEXT, layer);
  dt.glDeleteRenderbuffersOES                         = MakeRegalProc(dsa_glDeleteRenderbuffersOES, layer);
  dt.glDeleteTextures                                 = MakeRegalProc(dsa_glDeleteTextures, layer);
  dt.glDeleteTexturesEXT                              = MakeRegalProc(dsa_glDeleteTexturesEXT, layer);
  dt.glDeleteVertexArrays                             = MakeRegalProc(dsa_glDeleteVertexArrays, layer);
  dt.glDeleteVertexArraysAPPLE                        = MakeRegalProc(dsa_glDeleteVertexArraysAPPLE, layer);
  dt.glDeleteVertexArraysOES                          = MakeRegalProc(dsa_glDeleteVertexArraysOES, layer);
  dt.glDisable                                        = MakeRegalProc(dsa_glDisable, layer);
  dt.glDisableClientState                             = MakeRegalProc(dsa_glDisableClientState, layer);
  dt.glDisableClientStateIndexedEXT                   = MakeRegalProc(dsa_glDisableClientStateIndexedEXT, layer);
  dt.glDisableClientStateiEXT                         = MakeRegalProc(dsa_glDisableClientStateiEXT, layer);
  dt.glDisableIndexedEXT                              = MakeRegalProc(dsa_glDisableIndexedEXT, layer);
  dt.glDisableVertexArrayAttribEXT                    = MakeRegalProc(dsa_glDisableVertexArrayAttribEXT, layer);
  dt.glDisableVertexArrayEXT                          = MakeRegalProc(dsa_glDisableVertexArrayEXT, layer);
  dt.glDrawArrays                                     = MakeRegalProc(dsa_glDrawArrays, layer);
  dt.glDrawArraysEXT                                  = MakeRegalProc(dsa_glDrawArraysEXT, layer);
  dt.glDrawArraysIndirect                             = MakeRegalProc(dsa_glDrawArraysIndirect, layer);
  dt.glDrawArraysInstanced                            = MakeRegalProc(dsa_glDrawArraysInstanced, layer);
  dt.glDrawArraysInstancedARB                         = MakeRegalProc(dsa_glDrawArraysInstancedARB, layer);
  dt.glDrawArraysInstancedEXT                         = MakeRegalProc(dsa_glDrawArraysInstancedEXT, layer);
  dt.glDrawElementArrayAPPLE                          = MakeRegalProc(dsa_glDrawElementArrayAPPLE, layer);
  dt.glDrawElementArrayATI                            = MakeRegalProc(dsa_glDrawElementArrayATI, layer);
  dt.glDrawElements                                   = MakeRegalProc(dsa_glDrawElements, layer);
  dt.glDrawElementsBaseVertex                         = MakeRegalProc(dsa_glDrawElementsBaseVertex, layer);
  dt.glDrawElementsIndirect                           = MakeRegalProc(dsa_glDrawElementsIndirect, layer);
  dt.glDrawElementsInstanced                          = MakeRegalProc(dsa_glDrawElementsInstanced, layer);
  dt.glDrawElementsInstancedARB                       = MakeRegalProc(dsa_glDrawElementsInstancedARB, layer);
  dt.glDrawElementsInstancedBaseVertex                = MakeRegalProc(dsa_glDrawElementsInstancedBaseVertex, layer);
  dt.glDrawElementsInstancedEXT                       = MakeRegalProc(dsa_glDrawElementsInstancedEXT, layer);
  dt.glEnable                                         = MakeRegalProc(dsa_glEnable, layer);
  dt.glEnableClientState                              = MakeRegalProc(dsa_glEnableClientState, layer);
  dt.glEnableClientStateIndexedEXT                    = MakeRegalProc(dsa_glEnableClientStateIndexedEXT, layer);
  dt.glEnableClientStateiEXT                          = MakeRegalProc(dsa_glEnableClientStateiEXT, layer);
  dt.glEnableIndexedEXT                               = MakeRegalProc(dsa_glEnableIndexedEXT, layer);
  dt.glEnableVertexArrayAttribEXT                     = MakeRegalProc(dsa_glEnableVertexArrayAttribEXT, layer);
  dt.glEnableVertexArrayEXT                           = MakeRegalProc(dsa_glEnableVertexArrayEXT, layer);
  dt.glFlushMappedBufferRange                         = MakeRegalProc(dsa_glFlushMappedBufferRange, layer);
  dt.glFlushMappedBufferRangeEXT                      = MakeRegalProc(dsa_glFlushMappedBufferRangeEXT, layer);
  dt.glFlushMappedNamedBufferRangeEXT                 = MakeRegalProc(dsa_glFlushMappedNamedBufferRangeEXT, layer);
  dt.glFramebufferDrawBufferEXT                       = MakeRegalProc(dsa_glFramebufferDrawBufferEXT, layer);
  dt.glFramebufferDrawBuffersEXT                      = MakeRegalProc(dsa_glFramebufferDrawBuffersEXT, layer);
  dt.glFramebufferReadBufferEXT                       = MakeRegalProc(dsa_glFramebufferReadBufferEXT, layer);
  dt.glFramebufferRenderbuffer                        = MakeRegalProc(dsa_glFramebufferRenderbuffer, layer);
  dt.glFramebufferRenderbufferEXT                     = MakeRegalProc(dsa_glFramebufferRenderbufferEXT, layer);
  dt.glFramebufferTexture                             = MakeRegalProc(dsa_glFramebufferTexture, layer);
  dt.glFramebufferTexture1D                           = MakeRegalProc(dsa_glFramebufferTexture1D, layer);
  dt.glFramebufferTexture1DEXT                        = MakeRegalProc(dsa_glFramebufferTexture1DEXT, layer);
  dt.glFramebufferTexture2D                           = MakeRegalProc(dsa_glFramebufferTexture2D, layer);
  dt.glFramebufferTexture2DEXT                        = MakeRegalProc(dsa_glFramebufferTexture2DEXT, layer);
  dt.glFramebufferTexture3D                           = MakeRegalProc(dsa_glFramebufferTexture3D, layer);
  dt.glFramebufferTexture3DEXT                        = MakeRegalProc(dsa_glFramebufferTexture3DEXT, layer);
  dt.glFramebufferTextureARB                          = MakeRegalProc(dsa_glFramebufferTextureARB, layer);
  dt.glFramebufferTextureEXT                          = MakeRegalProc(dsa_glFramebufferTextureEXT, layer);
  dt.glFramebufferTextureFace                         = MakeRegalProc(dsa_glFramebufferTextureFace, layer);
  dt.glFramebufferTextureFaceARB                      = MakeRegalProc(dsa_glFramebufferTextureFaceARB, layer);
  dt.glFramebufferTextureFaceEXT                      = MakeRegalProc(dsa_glFramebufferTextureFaceEXT, layer);
  dt.glFramebufferTextureLayer                        = MakeRegalProc(dsa_glFramebufferTextureLayer, layer);
  dt.glFramebufferTextureLayerARB                     = MakeRegalProc(dsa_glFramebufferTextureLayerARB, layer);
  dt.glFramebufferTextureLayerEXT                     = MakeRegalProc(dsa_glFramebufferTextureLayerEXT, layer);
  dt.glGenerateMipmap                                 = MakeRegalProc(dsa_glGenerateMipmap, layer);
  dt.glGenerateMipmapEXT                              = MakeRegalProc(dsa_glGenerateMipmapEXT, layer);
  dt.glGenerateMultiTexMipmapEXT                      = MakeRegalProc(dsa_glGenerateMultiTexMipmapEXT, layer);
  dt.glGenerateTextureMipmapEXT                       = MakeRegalProc(dsa_glGenerateTextureMipmapEXT, layer);
  dt.glGetBooleanv                                    = MakeRegalProc(dsa_glGetBooleanv, layer);
  dt.glGetBufferParameteriv                           = MakeRegalProc(dsa_glGetBufferParameteriv, layer);
  dt.glGetBufferPointerv                              = MakeRegalProc(dsa_glGetBufferPointerv, layer);
  dt.glGetBufferSubData                               = MakeRegalProc(dsa_glGetBufferSubData, layer);
  dt.glGetCompressedMultiTexImageEXT                  = MakeRegalProc(dsa_glGetCompressedMultiTexImageEXT, layer);
  dt.glGetCompressedTextureImageEXT                   = MakeRegalProc(dsa_glGetCompressedTextureImageEXT, layer);
  dt.glGetDoubleIndexedvEXT                           = MakeRegalProc(dsa_glGetDoubleIndexedvEXT, layer);
  dt.glGetDoublei_v                                   = MakeRegalProc(dsa_glGetDoublei_v, layer);
  dt.glGetDoublei_vEXT                                = MakeRegalProc(dsa_glGetDoublei_vEXT, layer);
  dt.glGetDoublev                                     = MakeRegalProc(dsa_glGetDoublev, layer);
  dt.glGetFloatIndexedvEXT                            = MakeRegalProc(dsa_glGetFloatIndexedvEXT, layer);
  dt.glGetFloati_v                                    = MakeRegalProc(dsa_glGetFloati_v, layer);
  dt.glGetFloati_vEXT                                 = MakeRegalProc(dsa_glGetFloati_vEXT, layer);
  dt.glGetFloatv                                      = MakeRegalProc(dsa_glGetFloatv, layer);
  dt.glGetFramebufferParameterivEXT                   = MakeRegalProc(dsa_glGetFramebufferParameterivEXT, layer);
  dt.glGetIntegerv                                    = MakeRegalProc(dsa_glGetIntegerv, layer);
  dt.glGetMultiTexEnvfvEXT                            = MakeRegalProc(dsa_glGetMultiTexEnvfvEXT, layer);
  dt.glGetMultiTexEnvivEXT                            = MakeRegalProc(dsa_glGetMultiTexEnvivEXT, layer);
  dt.glGetMultiTexGendvEXT                            = MakeRegalProc(dsa_glGetMultiTexGendvEXT, layer);
  dt.glGetMultiTexGenfvEXT                            = MakeRegalProc(dsa_glGetMultiTexGenfvEXT, layer);
  dt.glGetMultiTexGenivEXT                            = MakeRegalProc(dsa_glGetMultiTexGenivEXT, layer);
  dt.glGetMultiTexImageEXT                            = MakeRegalProc(dsa_glGetMultiTexImageEXT, layer);
  dt.glGetMultiTexLevelParameterfvEXT                 = MakeRegalProc(dsa_glGetMultiTexLevelParameterfvEXT, layer);
  dt.glGetMultiTexLevelParameterivEXT                 = MakeRegalProc(dsa_glGetMultiTexLevelParameterivEXT, layer);
  dt.glGetMultiTexParameterIivEXT                     = MakeRegalProc(dsa_glGetMultiTexParameterIivEXT, layer);
  dt.glGetMultiTexParameterIuivEXT                    = MakeRegalProc(dsa_glGetMultiTexParameterIuivEXT, layer);
  dt.glGetMultiTexParameterfvEXT                      = MakeRegalProc(dsa_glGetMultiTexParameterfvEXT, layer);
  dt.glGetMultiTexParameterivEXT                      = MakeRegalProc(dsa_glGetMultiTexParameterivEXT, layer);
  dt.glGetNamedBufferParameterivEXT                   = MakeRegalProc(dsa_glGetNamedBufferParameterivEXT, layer);
  dt.glGetNamedBufferPointervEXT                      = MakeRegalProc(dsa_glGetNamedBufferPointervEXT, layer);
  dt.glGetNamedBufferSubDataEXT                       = MakeRegalProc(dsa_glGetNamedBufferSubDataEXT, layer);
  dt.glGetNamedFramebufferAttachmentParameterivEXT    = MakeRegalProc(dsa_glGetNamedFramebufferAttachmentParameterivEXT, layer);
  dt.glGetNamedProgramLocalParameterIivEXT            = MakeRegalProc(dsa_glGetNamedProgramLocalParameterIivEXT, layer);
  dt.glGetNamedProgramLocalParameterIuivEXT           = MakeRegalProc(dsa_glGetNamedProgramLocalParameterIuivEXT, layer);
  dt.glGetNamedProgramLocalParameterdvEXT             = MakeRegalProc(dsa_glGetNamedProgramLocalParameterdvEXT, layer);
  dt.glGetNamedProgramLocalParameterfvEXT             = MakeRegalProc(dsa_glGetNamedProgramLocalParameterfvEXT, layer);
  dt.glGetNamedProgramStringEXT                       = MakeRegalProc(dsa_glGetNamedProgramStringEXT, layer);
  dt.glGetNamedProgramivEXT                           = MakeRegalProc(dsa_glGetNamedProgramivEXT, layer);
  dt.glGetNamedRenderbufferParameterivEXT             = MakeRegalProc(dsa_glGetNamedRenderbufferParameterivEXT, layer);
  dt.glGetPointerIndexedvEXT                          = MakeRegalProc(dsa_glGetPointerIndexedvEXT, layer);
  dt.glGetProgramEnvParameterIivNV                    = MakeRegalProc(dsa_glGetProgramEnvParameterIivNV, layer);
  dt.glGetProgramEnvParameterIuivNV                   = MakeRegalProc(dsa_glGetProgramEnvParameterIuivNV, layer);
  dt.glGetProgramEnvParameterdvARB                    = MakeRegalProc(dsa_glGetProgramEnvParameterdvARB, layer);
  dt.glGetProgramEnvParameterfvARB                    = MakeRegalProc(dsa_glGetProgramEnvParameterfvARB, layer);
  dt.glGetProgramLocalParameterIivNV                  = MakeRegalProc(dsa_glGetProgramLocalParameterIivNV, layer);
  dt.glGetProgramLocalParameterIuivNV                 = MakeRegalProc(dsa_glGetProgramLocalParameterIuivNV, layer);
  dt.glGetProgramLocalParameterdvARB                  = MakeRegalProc(dsa_glGetProgramLocalParameterdvARB, layer);
  dt.glGetProgramLocalParameterfvARB                  = MakeRegalProc(dsa_glGetProgramLocalParameterfvARB, layer);
  dt.glGetRenderbufferParameteriv                     = MakeRegalProc(dsa_glGetRenderbufferParameteriv, layer);
  dt.glGetRenderbufferParameterivEXT                  = MakeRegalProc(dsa_glGetRenderbufferParameterivEXT, layer);
  dt.glGetTexEnvfv                                    = MakeRegalProc(dsa_glGetTexEnvfv, layer);
  dt.glGetTexEnviv                                    = MakeRegalProc(dsa_glGetTexEnviv, layer);
  dt.glGetTexParameterfv                              = MakeRegalProc(dsa_glGetTexParameterfv, layer);
  dt.glGetTexParameteriv                              = MakeRegalProc(dsa_glGetTexParameteriv, layer);
  dt.glGetTextureImageEXT                             = MakeRegalProc(dsa_glGetTextureImageEXT, layer);
  dt.glGetTextureLevelParameterfvEXT                  = MakeRegalProc(dsa_glGetTextureLevelParameterfvEXT, layer);
  dt.glGetTextureLevelParameterivEXT                  = MakeRegalProc(dsa_glGetTextureLevelParameterivEXT, layer);
  dt.glGetTextureParameterIivEXT                      = MakeRegalProc(dsa_glGetTextureParameterIivEXT, layer);
  dt.glGetTextureParameterIuivEXT                     = MakeRegalProc(dsa_glGetTextureParameterIuivEXT, layer);
  dt.glGetTextureParameterfvEXT                       = MakeRegalProc(dsa_glGetTextureParameterfvEXT, layer);
  dt.glGetTextureParameterivEXT                       = MakeRegalProc(dsa_glGetTextureParameterivEXT, layer);
  dt.glIsEnabled                                      = MakeRegalProc(dsa_glIsEnabled, layer);
  dt.glIsEnabledIndexedEXT                            = MakeRegalProc(dsa_glIsEnabledIndexedEXT, layer);
  dt.glLoadIdentity                                   = MakeRegalProc(dsa_glLoadIdentity, layer);
  dt.glLoadMatrixd                                    = MakeRegalProc(dsa_glLoadMatrixd, layer);
  dt.glLoadMatrixf                                    = MakeRegalProc(dsa_glLoadMatrixf, layer);
  dt.glLoadTransposeMatrixd                           = MakeRegalProc(dsa_glLoadTransposeMatrixd, layer);
  dt.glLoadTransposeMatrixf                           = MakeRegalProc(dsa_glLoadTransposeMatrixf, layer);
  dt.glMapBuffer                                      = MakeRegalProc(dsa_glMapBuffer, layer);
  dt.glMapBufferARB                                   = MakeRegalProc(dsa_glMapBufferARB, layer);
  dt.glMapBufferRange                                 = MakeRegalProc(dsa_glMapBufferRange, layer);
  dt.glMapBufferRangeEXT                              = MakeRegalProc(dsa_glMapBufferRangeEXT, layer);
  dt.glMapNamedBufferEXT                              = MakeRegalProc(dsa_glMapNamedBufferEXT, layer);
  dt.glMapNamedBufferRangeEXT                         = MakeRegalProc(dsa_glMapNamedBufferRangeEXT, layer);
  dt.glMatrixFrustumEXT                               = MakeRegalProc(dsa_glMatrixFrustumEXT, layer);
  dt.glMatrixLoadIdentityEXT                          = MakeRegalProc(dsa_glMatrixLoadIdentityEXT, layer);
  dt.glMatrixLoadTransposedEXT                        = MakeRegalProc(dsa_glMatrixLoadTransposedEXT, layer);
  dt.glMatrixLoadTransposefEXT                        = MakeRegalProc(dsa_glMatrixLoadTransposefEXT, layer);
  dt.glMatrixLoaddEXT                                 = MakeRegalProc(dsa_glMatrixLoaddEXT, layer);
  dt.glMatrixLoadfEXT                                 = MakeRegalProc(dsa_glMatrixLoadfEXT, layer);
  dt.glMatrixMode                                     = MakeRegalProc(dsa_glMatrixMode, layer);
  dt.glMatrixMultTransposedEXT                        = MakeRegalProc(dsa_glMatrixMultTransposedEXT, layer);
  dt.glMatrixMultTransposefEXT                        = MakeRegalProc(dsa_glMatrixMultTransposefEXT, layer);
  dt.glMatrixMultdEXT                                 = MakeRegalProc(dsa_glMatrixMultdEXT, layer);
  dt.glMatrixMultfEXT                                 = MakeRegalProc(dsa_glMatrixMultfEXT, layer);
  dt.glMatrixOrthoEXT                                 = MakeRegalProc(dsa_glMatrixOrthoEXT, layer);
  dt.glMatrixPopEXT                                   = MakeRegalProc(dsa_glMatrixPopEXT, layer);
  dt.glMatrixPushEXT                                  = MakeRegalProc(dsa_glMatrixPushEXT, layer);
  dt.glMatrixRotatedEXT                               = MakeRegalProc(dsa_glMatrixRotatedEXT, layer);
  dt.glMatrixRotatefEXT                               = MakeRegalProc(dsa_glMatrixRotatefEXT, layer);
  dt.glMatrixScaledEXT                                = MakeRegalProc(dsa_glMatrixScaledEXT, layer);
  dt.glMatrixScalefEXT                                = MakeRegalProc(dsa_glMatrixScalefEXT, layer);
  dt.glMatrixTranslatedEXT                            = MakeRegalProc(dsa_glMatrixTranslatedEXT, layer);
  dt.glMatrixTranslatefEXT                            = MakeRegalProc(dsa_glMatrixTranslatefEXT, layer);
  dt.glMultMatrixd                                    = MakeRegalProc(dsa_glMultMatrixd, layer);
  dt.glMultMatrixf                                    = MakeRegalProc(dsa_glMultMatrixf, layer);
  dt.glMultTransposeMatrixd                           = MakeRegalProc(dsa_glMultTransposeMatrixd, layer);
  dt.glMultTransposeMatrixf                           = MakeRegalProc(dsa_glMultTransposeMatrixf, layer);
  dt.glMultiDrawArrays                                = MakeRegalProc(dsa_glMultiDrawArrays, layer);
  dt.glMultiDrawArraysEXT                             = MakeRegalProc(dsa_glMultiDrawArraysEXT, layer);
  dt.glMultiDrawArraysIndirect                        = MakeRegalProc(dsa_glMultiDrawArraysIndirect, layer);
  dt.glMultiDrawArraysIndirectAMD                     = MakeRegalProc(dsa_glMultiDrawArraysIndirectAMD, layer);
  dt.glMultiDrawElementArrayAPPLE                     = MakeRegalProc(dsa_glMultiDrawElementArrayAPPLE, layer);
  dt.glMultiDrawElements                              = MakeRegalProc(dsa_glMultiDrawElements, layer);
  dt.glMultiDrawElementsBaseVertex                    = MakeRegalProc(dsa_glMultiDrawElementsBaseVertex, layer);
  dt.glMultiDrawElementsEXT                           = MakeRegalProc(dsa_glMultiDrawElementsEXT, layer);
  dt.glMultiDrawElementsIndirect                      = MakeRegalProc(dsa_glMultiDrawElementsIndirect, layer);
  dt.glMultiDrawElementsIndirectAMD                   = MakeRegalProc(dsa_glMultiDrawElementsIndirectAMD, layer);
  dt.glMultiTexBufferEXT                              = MakeRegalProc(dsa_glMultiTexBufferEXT, layer);
  dt.glMultiTexCoordPointerEXT                        = MakeRegalProc(dsa_glMultiTexCoordPointerEXT, layer);
  dt.glMultiTexEnvfEXT                                = MakeRegalProc(dsa_glMultiTexEnvfEXT, layer);
  dt.glMultiTexEnvfvEXT                               = MakeRegalProc(dsa_glMultiTexEnvfvEXT, layer);
  dt.glMultiTexEnviEXT                                = MakeRegalProc(dsa_glMultiTexEnviEXT, layer);
  dt.glMultiTexEnvivEXT                               = MakeRegalProc(dsa_glMultiTexEnvivEXT, layer);
  dt.glMultiTexGendEXT                                = MakeRegalProc(dsa_glMultiTexGendEXT, layer);
  dt.glMultiTexGendvEXT                               = MakeRegalProc(dsa_glMultiTexGendvEXT, layer);
  dt.glMultiTexGenfEXT                                = MakeRegalProc(dsa_glMultiTexGenfEXT, layer);
  dt.glMultiTexGenfvEXT                               = MakeRegalProc(dsa_glMultiTexGenfvEXT, layer);
  dt.glMultiTexGeniEXT                                = MakeRegalProc(dsa_glMultiTexGeniEXT, layer);
  dt.glMultiTexGenivEXT                               = MakeRegalProc(dsa_glMultiTexGenivEXT, layer);
  dt.glMultiTexImage1DEXT                             = MakeRegalProc(dsa_glMultiTexImage1DEXT, layer);
  dt.glMultiTexImage2DEXT                             = MakeRegalProc(dsa_glMultiTexImage2DEXT, layer);
  dt.glMultiTexImage3DEXT                             = MakeRegalProc(dsa_glMultiTexImage3DEXT, layer);
  dt.glMultiTexParameterIivEXT                        = MakeRegalProc(dsa_glMultiTexParameterIivEXT, layer);
  dt.glMultiTexParameterIuivEXT                       = MakeRegalProc(dsa_glMultiTexParameterIuivEXT, layer);
  dt.glMultiTexParameterfEXT                          = MakeRegalProc(dsa_glMultiTexParameterfEXT, layer);
  dt.glMultiTexParameterfvEXT                         = MakeRegalProc(dsa_glMultiTexParameterfvEXT, layer);
  dt.glMultiTexParameteriEXT                          = MakeRegalProc(dsa_glMultiTexParameteriEXT, layer);
  dt.glMultiTexParameterivEXT                         = MakeRegalProc(dsa_glMultiTexParameterivEXT, layer);
  dt.glMultiTexRenderbufferEXT                        = MakeRegalProc(dsa_glMultiTexRenderbufferEXT, layer);
  dt.glMultiTexSubImage1DEXT                          = MakeRegalProc(dsa_glMultiTexSubImage1DEXT, layer);
  dt.glMultiTexSubImage2DEXT                          = MakeRegalProc(dsa_glMultiTexSubImage2DEXT, layer);
  dt.glMultiTexSubImage3DEXT                          = MakeRegalProc(dsa_glMultiTexSubImage3DEXT, layer);
  dt.glNamedBufferDataEXT                             = MakeRegalProc(dsa_glNamedBufferDataEXT, layer);
  dt.glNamedBufferSubDataEXT                          = MakeRegalProc(dsa_glNamedBufferSubDataEXT, layer);
  dt.glNamedCopyBufferSubDataEXT                      = MakeRegalProc(dsa_glNamedCopyBufferSubDataEXT, layer);
  dt.glNamedFramebufferRenderbufferEXT                = MakeRegalProc(dsa_glNamedFramebufferRenderbufferEXT, layer);
  dt.glNamedFramebufferTexture1DEXT                   = MakeRegalProc(dsa_glNamedFramebufferTexture1DEXT, layer);
  dt.glNamedFramebufferTexture2DEXT                   = MakeRegalProc(dsa_glNamedFramebufferTexture2DEXT, layer);
  dt.glNamedFramebufferTexture3DEXT                   = MakeRegalProc(dsa_glNamedFramebufferTexture3DEXT, layer);
  dt.glNamedFramebufferTextureEXT                     = MakeRegalProc(dsa_glNamedFramebufferTextureEXT, layer);
  dt.glNamedFramebufferTextureFaceEXT                 = MakeRegalProc(dsa_glNamedFramebufferTextureFaceEXT, layer);
  dt.glNamedFramebufferTextureLayerEXT                = MakeRegalProc(dsa_glNamedFramebufferTextureLayerEXT, layer);
  dt.glNamedProgramLocalParameter4dEXT                = MakeRegalProc(dsa_glNamedProgramLocalParameter4dEXT, layer);
  dt.glNamedProgramLocalParameter4dvEXT               = MakeRegalProc(dsa_glNamedProgramLocalParameter4dvEXT, layer);
  dt.glNamedProgramLocalParameter4fEXT                = MakeRegalProc(dsa_glNamedProgramLocalParameter4fEXT, layer);
  dt.glNamedProgramLocalParameter4fvEXT               = MakeRegalProc(dsa_glNamedProgramLocalParameter4fvEXT, layer);
  dt.glNamedProgramLocalParameterI4iEXT               = MakeRegalProc(dsa_glNamedProgramLocalParameterI4iEXT, layer);
  dt.glNamedProgramLocalParameterI4ivEXT              = MakeRegalProc(dsa_glNamedProgramLocalParameterI4ivEXT, layer);
  dt.glNamedProgramLocalParameterI4uiEXT              = MakeRegalProc(dsa_glNamedProgramLocalParameterI4uiEXT, layer);
  dt.glNamedProgramLocalParameterI4uivEXT             = MakeRegalProc(dsa_glNamedProgramLocalParameterI4uivEXT, layer);
  dt.glNamedProgramLocalParameters4fvEXT              = MakeRegalProc(dsa_glNamedProgramLocalParameters4fvEXT, layer);
  dt.glNamedProgramLocalParametersI4ivEXT             = MakeRegalProc(dsa_glNamedProgramLocalParametersI4ivEXT, layer);
  dt.glNamedProgramLocalParametersI4uivEXT            = MakeRegalProc(dsa_glNamedProgramLocalParametersI4uivEXT, layer);
  dt.glNamedProgramStringEXT                          = MakeRegalProc(dsa_glNamedProgramStringEXT, layer);
  dt.glNamedRenderbufferStorageEXT                    = MakeRegalProc(dsa_glNamedRenderbufferStorageEXT, layer);
  dt.glNamedRenderbufferStorageMultisampleCoverageEXT = MakeRegalProc(dsa_glNamedRenderbufferStorageMultisampleCoverageEXT, layer);
  dt.glNamedRenderbufferStorageMultisampleEXT         = MakeRegalProc(dsa_glNamedRenderbufferStorageMultisampleEXT, layer);
  dt.glNormalPointer                                  = MakeRegalProc(dsa_glNormalPointer, layer);
  dt.glPopMatrix                                      = MakeRegalProc(dsa_glPopMatrix, layer);
  dt.glProgramEnvParameter4dARB                       = MakeRegalProc(dsa_glProgramEnvParameter4dARB, layer);
  dt.glProgramEnvParameter4dvARB                      = MakeRegalProc(dsa_glProgramEnvParameter4dvARB, layer);
  dt.glProgramEnvParameter4fARB                       = MakeRegalProc(dsa_glProgramEnvParameter4fARB, layer);
  dt.glProgramEnvParameter4fvARB                      = MakeRegalProc(dsa_glProgramEnvParameter4fvARB, layer);
  dt.glProgramEnvParameterI4iNV                       = MakeRegalProc(dsa_glProgramEnvParameterI4iNV, layer);
  dt.glProgramEnvParameterI4ivNV                      = MakeRegalProc(dsa_glProgramEnvParameterI4ivNV, layer);
  dt.glProgramEnvParameterI4uiNV                      = MakeRegalProc(dsa_glProgramEnvParameterI4uiNV, layer);
  dt.glProgramEnvParameterI4uivNV                     = MakeRegalProc(dsa_glProgramEnvParameterI4uivNV, layer);
  dt.glProgramEnvParametersI4ivNV                     = MakeRegalProc(dsa_glProgramEnvParametersI4ivNV, layer);
  dt.glProgramEnvParametersI4uivNV                    = MakeRegalProc(dsa_glProgramEnvParametersI4uivNV, layer);
  dt.glProgramLocalParameter4dARB                     = MakeRegalProc(dsa_glProgramLocalParameter4dARB, layer);
  dt.glProgramLocalParameter4dvARB                    = MakeRegalProc(dsa_glProgramLocalParameter4dvARB, layer);
  dt.glProgramLocalParameter4fARB                     = MakeRegalProc(dsa_glProgramLocalParameter4fARB, layer);
  dt.glProgramLocalParameter4fvARB                    = MakeRegalProc(dsa_glProgramLocalParameter4fvARB, layer);
  dt.glProgramLocalParameterI4iNV                     = MakeRegalProc(dsa_glProgramLocalParameterI4iNV, layer);
  dt.glProgramLocalParameterI4ivNV                    = MakeRegalProc(dsa_glProgramLocalParameterI4ivNV, layer);
  dt.glProgramLocalParameterI4uiNV                    = MakeRegalProc(dsa_glProgramLocalParameterI4uiNV, layer);
  dt.glProgramLocalParameterI4uivNV                   = MakeRegalProc(dsa_glProgramLocalParameterI4uivNV, layer);
  dt.glProgramLocalParametersI4ivNV                   = MakeRegalProc(dsa_glProgramLocalParametersI4ivNV, layer);
  dt.glProgramLocalParametersI4uivNV                  = MakeRegalProc(dsa_glProgramLocalParametersI4uivNV, layer);
  dt.glProgramUniform1dEXT                            = MakeRegalProc(dsa_glProgramUniform1dEXT, layer);
  dt.glProgramUniform1dvEXT                           = MakeRegalProc(dsa_glProgramUniform1dvEXT, layer);
  dt.glProgramUniform1fEXT                            = MakeRegalProc(dsa_glProgramUniform1fEXT, layer);
  dt.glProgramUniform1fvEXT                           = MakeRegalProc(dsa_glProgramUniform1fvEXT, layer);
  dt.glProgramUniform1iEXT                            = MakeRegalProc(dsa_glProgramUniform1iEXT, layer);
  dt.glProgramUniform1ivEXT                           = MakeRegalProc(dsa_glProgramUniform1ivEXT, layer);
  dt.glProgramUniform1uiEXT                           = MakeRegalProc(dsa_glProgramUniform1uiEXT, layer);
  dt.glProgramUniform1uivEXT                          = MakeRegalProc(dsa_glProgramUniform1uivEXT, layer);
  dt.glProgramUniform2dEXT                            = MakeRegalProc(dsa_glProgramUniform2dEXT, layer);
  dt.glProgramUniform2dvEXT                           = MakeRegalProc(dsa_glProgramUniform2dvEXT, layer);
  dt.glProgramUniform2fEXT                            = MakeRegalProc(dsa_glProgramUniform2fEXT, layer);
  dt.glProgramUniform2fvEXT                           = MakeRegalProc(dsa_glProgramUniform2fvEXT, layer);
  dt.glProgramUniform2iEXT                            = MakeRegalProc(dsa_glProgramUniform2iEXT, layer);
  dt.glProgramUniform2ivEXT                           = MakeRegalProc(dsa_glProgramUniform2ivEXT, layer);
  dt.glProgramUniform2uiEXT                           = MakeRegalProc(dsa_glProgramUniform2uiEXT, layer);
  dt.glProgramUniform2uivEXT                          = MakeRegalProc(dsa_glProgramUniform2uivEXT, layer);
  dt.glProgramUniform3dEXT                            = MakeRegalProc(dsa_glProgramUniform3dEXT, layer);
  dt.glProgramUniform3dvEXT                           = MakeRegalProc(dsa_glProgramUniform3dvEXT, layer);
  dt.glProgramUniform3fEXT                            = MakeRegalProc(dsa_glProgramUniform3fEXT, layer);
  dt.glProgramUniform3fvEXT                           = MakeRegalProc(dsa_glProgramUniform3fvEXT, layer);
  dt.glProgramUniform3iEXT                            = MakeRegalProc(dsa_glProgramUniform3iEXT, layer);
  dt.glProgramUniform3ivEXT                           = MakeRegalProc(dsa_glProgramUniform3ivEXT, layer);
  dt.glProgramUniform3uiEXT                           = MakeRegalProc(dsa_glProgramUniform3uiEXT, layer);
  dt.glProgramUniform3uivEXT                          = MakeRegalProc(dsa_glProgramUniform3uivEXT, layer);
  dt.glProgramUniform4dEXT                            = MakeRegalProc(dsa_glProgramUniform4dEXT, layer);
  dt.glProgramUniform4dvEXT                           = MakeRegalProc(dsa_glProgramUniform4dvEXT, layer);
  dt.glProgramUniform4fEXT                            = MakeRegalProc(dsa_glProgramUniform4fEXT, layer);
  dt.glProgramUniform4fvEXT                           = MakeRegalProc(dsa_glProgramUniform4fvEXT, layer);
  dt.glProgramUniform4iEXT                            = MakeRegalProc(dsa_glProgramUniform4iEXT, layer);
  dt.glProgramUniform4ivEXT                           = MakeRegalProc(dsa_glProgramUniform4ivEXT, layer);
  dt.glProgramUniform4uiEXT                           = MakeRegalProc(dsa_glProgramUniform4uiEXT, layer);
  dt.glProgramUniform4uivEXT                          = MakeRegalProc(dsa_glProgramUniform4uivEXT, layer);
  dt.glProgramUniformMatrix2dvEXT                     = MakeRegalProc(dsa_glProgramUniformMatrix2dvEXT, layer);
  dt.glProgramUniformMatrix2fvEXT                     = MakeRegalProc(dsa_glProgramUniformMatrix2fvEXT, layer);
  dt.glProgramUniformMatrix2x3dvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix2x3dvEXT, layer);
  dt.glProgramUniformMatrix2x3fvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix2x3fvEXT, layer);
  dt.glProgramUniformMatrix2x4dvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix2x4dvEXT, layer);
  dt.glProgramUniformMatrix2x4fvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix2x4fvEXT, layer);
  dt.glProgramUniformMatrix3dvEXT                     = MakeRegalProc(dsa_glProgramUniformMatrix3dvEXT, layer);
  dt.glProgramUniformMatrix3fvEXT                     = MakeRegalProc(dsa_glProgramUniformMatrix3fvEXT, layer);
  dt.glProgramUniformMatrix3x2dvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix3x2dvEXT, layer);
  dt.glProgramUniformMatrix3x2fvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix3x2fvEXT, layer);
  dt.glProgramUniformMatrix3x4dvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix3x4dvEXT, layer);
  dt.glProgramUniformMatrix3x4fvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix3x4fvEXT, layer);
  dt.glProgramUniformMatrix4dvEXT                     = MakeRegalProc(dsa_glProgramUniformMatrix4dvEXT, layer);
  dt.glProgramUniformMatrix4fvEXT                     = MakeRegalProc(dsa_glProgramUniformMatrix4fvEXT, layer);
  dt.glProgramUniformMatrix4x2dvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix4x2dvEXT, layer);
  dt.glProgramUniformMatrix4x2fvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix4x2fvEXT, layer);
  dt.glProgramUniformMatrix4x3dvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix4x3dvEXT, layer);
  dt.glProgramUniformMatrix4x3fvEXT                   = MakeRegalProc(dsa_glProgramUniformMatrix4x3fvEXT, layer);
  dt.glPushClientAttribDefaultEXT                     = MakeRegalProc(dsa_glPushClientAttribDefaultEXT, layer);
  dt.glPushMatrix                                     = MakeRegalProc(dsa_glPushMatrix, layer);
  dt.glRenderbufferStorage                            = MakeRegalProc(dsa_glRenderbufferStorage, layer);
  dt.glRenderbufferStorageEXT                         = MakeRegalProc(dsa_glRenderbufferStorageEXT, layer);
  dt.glRenderbufferStorageMultisample                 = MakeRegalProc(dsa_glRenderbufferStorageMultisample, layer);
  dt.glRenderbufferStorageMultisampleCoverageNV       = MakeRegalProc(dsa_glRenderbufferStorageMultisampleCoverageNV, layer);
  dt.glRenderbufferStorageMultisampleEXT              = MakeRegalProc(dsa_glRenderbufferStorageMultisampleEXT, layer);
  dt.glRotated                                        = MakeRegalProc(dsa_glRotated, layer);
  dt.glRotatef                                        = MakeRegalProc(dsa_glRotatef, layer);
  dt.glScaled                                         = MakeRegalProc(dsa_glScaled, layer);
  dt.glScalef                                         = MakeRegalProc(dsa_glScalef, layer);
  dt.glSecondaryColorPointer                          = MakeRegalProc(dsa_glSecondaryColorPointer, layer);
  dt.glTexBuffer                                      = MakeRegalProc(dsa_glTexBuffer, layer);
  dt.glTexCoordPointer                                = MakeRegalProc(dsa_glTexCoordPointer, layer);
  dt.glTexEnvf                                        = MakeRegalProc(dsa_glTexEnvf, layer);
  dt.glTexEnvfv                                       = MakeRegalProc(dsa_glTexEnvfv, layer);
  dt.glTexEnvi                                        = MakeRegalProc(dsa_glTexEnvi, layer);
  dt.glTexEnviv                                       = MakeRegalProc(dsa_glTexEnviv, layer);
  dt.glTexGenf                                        = MakeRegalProc(dsa_glTexGenf, layer);
  dt.glTexGenfv                                       = MakeRegalProc(dsa_glTexGenfv, layer);
  dt.glTexGeni                                        = MakeRegalProc(dsa_glTexGeni, layer);
  dt.glTexGeniv                                       = MakeRegalProc(dsa_glTexGeniv, layer);
  dt.glTexParameterf                                  = MakeRegalProc(dsa_glTexParameterf, layer);
  dt.glTexParameterfv                                 = MakeRegalProc(dsa_glTexParameterfv, layer);
  dt.glTexParameteri                                  = MakeRegalProc(dsa_glTexParameteri, layer);
  dt.glTexParameteriv                                 = MakeRegalProc(dsa_glTexParameteriv, layer);
  dt.glTexRenderbufferNV                              = MakeRegalProc(dsa_glTexRenderbufferNV, layer);
  dt.glTextureBufferEXT                               = MakeRegalProc(dsa_glTextureBufferEXT, layer);
  dt.glTextureImage1DEXT                              = MakeRegalProc(dsa_glTextureImage1DEXT, layer);
  dt.glTextureImage2DEXT                              = MakeRegalProc(dsa_glTextureImage2DEXT, layer);
  dt.glTextureImage3DEXT                              = MakeRegalProc(dsa_glTextureImage3DEXT, layer);
  dt.glTextureParameterIivEXT                         = MakeRegalProc(dsa_glTextureParameterIivEXT, layer);
  dt.glTextureParameterIuivEXT                        = MakeRegalProc(dsa_glTextureParameterIuivEXT, layer);
  dt.glTextureParameterfEXT                           = MakeRegalProc(dsa_glTextureParameterfEXT, layer);
  dt.glTextureParameterfvEXT                          = MakeRegalProc(dsa_glTextureParameterfvEXT, layer);
  dt.glTextureParameteriEXT                           = MakeRegalProc(dsa_glTextureParameteriEXT, layer);
  dt.glTextureParameterivEXT                          = MakeRegalProc(dsa_glTextureParameterivEXT, layer);
  dt.glTextureRenderbufferEXT                         = MakeRegalProc(dsa_glTextureRenderbufferEXT, layer);
  dt.glTextureStorage1DEXT                            = MakeRegalProc(dsa_glTextureStorage1DEXT, layer);
  dt.glTextureStorage2DEXT                            = MakeRegalProc(dsa_glTextureStorage2DEXT, layer);
  dt.glTextureStorage3DEXT                            = MakeRegalProc(dsa_glTextureStorage3DEXT, layer);
  dt.glTextureSubImage1DEXT                           = MakeRegalProc(dsa_glTextureSubImage1DEXT, layer);
  dt.glTextureSubImage2DEXT                           = MakeRegalProc(dsa_glTextureSubImage2DEXT, layer);
  dt.glTextureSubImage3DEXT                           = MakeRegalProc(dsa_glTextureSubImage3DEXT, layer);
  dt.glTranslated                                     = MakeRegalProc(dsa_glTranslated, layer);
  dt.glTranslatef                                     = MakeRegalProc(dsa_glTranslatef, layer);
  dt.glUniform1d                                      = MakeRegalProc(dsa_glUniform1d, layer);
  dt.glUniform1dv                                     = MakeRegalProc(dsa_glUniform1dv, layer);
  dt.glUniform1f                                      = MakeRegalProc(dsa_glUniform1f, layer);
  dt.glUniform1fv                                     = MakeRegalProc(dsa_glUniform1fv, layer);
  dt.glUniform1i                                      = MakeRegalProc(dsa_glUniform1i, layer);
  dt.glUniform1iv                                     = MakeRegalProc(dsa_glUniform1iv, layer);
  dt.glUniform1ui                                     = MakeRegalProc(dsa_glUniform1ui, layer);
  dt.glUniform1uiv                                    = MakeRegalProc(dsa_glUniform1uiv, layer);
  dt.glUniform2d                                      = MakeRegalProc(dsa_glUniform2d, layer);
  dt.glUniform2dv                                     = MakeRegalProc(dsa_glUniform2dv, layer);
  dt.glUniform2f                                      = MakeRegalProc(dsa_glUniform2f, layer);
  dt.glUniform2fv                                     = MakeRegalProc(dsa_glUniform2fv, layer);
  dt.glUniform2i                                      = MakeRegalProc(dsa_glUniform2i, layer);
  dt.glUniform2iv                                     = MakeRegalProc(dsa_glUniform2iv, layer);
  dt.glUniform2ui                                     = MakeRegalProc(dsa_glUniform2ui, layer);
  dt.glUniform2uiv                                    = MakeRegalProc(dsa_glUniform2uiv, layer);
  dt.glUniform3d                                      = MakeRegalProc(dsa_glUniform3d, layer);
  dt.glUniform3dv                                     = MakeRegalProc(dsa_glUniform3dv, layer);
  dt.glUniform3f                                      = MakeRegalProc(dsa_glUniform3f, layer);
  dt.glUniform3fv                                     = MakeRegalProc(dsa_glUniform3fv, layer);
  dt.glUniform3i                                      = MakeRegalProc(dsa_glUniform3i, layer);
  dt.glUniform3iv                                     = MakeRegalProc(dsa_glUniform3iv, layer);
  dt.glUniform3ui                                     = MakeRegalProc(dsa_glUniform3ui, layer);
  dt.glUniform3uiv                                    = MakeRegalProc(dsa_glUniform3uiv, layer);
  dt.glUniform4d                                      = MakeRegalProc(dsa_glUniform4d, layer);
  dt.glUniform4dv                                     = MakeRegalProc(dsa_glUniform4dv, layer);
  dt.glUniform4f                                      = MakeRegalProc(dsa_glUniform4f, layer);
  dt.glUniform4fv                                     = MakeRegalProc(dsa_glUniform4fv, layer);
  dt.glUniform4i                                      = MakeRegalProc(dsa_glUniform4i, layer);
  dt.glUniform4iv                                     = MakeRegalProc(dsa_glUniform4iv, layer);
  dt.glUniform4ui                                     = MakeRegalProc(dsa_glUniform4ui, layer);
  dt.glUniform4uiv                                    = MakeRegalProc(dsa_glUniform4uiv, layer);
  dt.glUniformMatrix2dv                               = MakeRegalProc(dsa_glUniformMatrix2dv, layer);
  dt.glUniformMatrix2fv                               = MakeRegalProc(dsa_glUniformMatrix2fv, layer);
  dt.glUniformMatrix2x3dv                             = MakeRegalProc(dsa_glUniformMatrix2x3dv, layer);
  dt.glUniformMatrix2x3fv                             = MakeRegalProc(dsa_glUniformMatrix2x3fv, layer);
  dt.glUniformMatrix2x4dv                             = MakeRegalProc(dsa_glUniformMatrix2x4dv, layer);
  dt.glUniformMatrix2x4fv                             = MakeRegalProc(dsa_glUniformMatrix2x4fv, layer);
  dt.glUniformMatrix3dv                               = MakeRegalProc(dsa_glUniformMatrix3dv, layer);
  dt.glUniformMatrix3fv                               = MakeRegalProc(dsa_glUniformMatrix3fv, layer);
  dt.glUniformMatrix3x2dv                             = MakeRegalProc(dsa_glUniformMatrix3x2dv, layer);
  dt.glUniformMatrix3x2fv                             = MakeRegalProc(dsa_glUniformMatrix3x2fv, layer);
  dt.glUniformMatrix3x4dv                             = MakeRegalProc(dsa_glUniformMatrix3x4dv, layer);
  dt.glUniformMatrix3x4fv                             = MakeRegalProc(dsa_glUniformMatrix3x4fv, layer);
  dt.glUniformMatrix4dv                               = MakeRegalProc(dsa_glUniformMatrix4dv, layer);
  dt.glUniformMatrix4fv                               = MakeRegalProc(dsa_glUniformMatrix4fv, layer);
  dt.glUniformMatrix4x2dv                             = MakeRegalProc(dsa_glUniformMatrix4x2dv, layer);
  dt.glUniformMatrix4x2fv                             = MakeRegalProc(dsa_glUniformMatrix4x2fv, layer);
  dt.glUniformMatrix4x3dv                             = MakeRegalProc(dsa_glUniformMatrix4x3dv, layer);
  dt.glUniformMatrix4x3fv                             = MakeRegalProc(dsa_glUniformMatrix4x3fv, layer);
  dt.glUnmapBuffer                                    = MakeRegalProc(dsa_glUnmapBuffer, layer);
  dt.glUnmapBufferARB                                 = MakeRegalProc(dsa_glUnmapBufferARB, layer);
  dt.glUnmapNamedBufferEXT                            = MakeRegalProc(dsa_glUnmapNamedBufferEXT, layer);
  dt.glUseProgram                                     = MakeRegalProc(dsa_glUseProgram, layer);
  dt.glVertexArrayColorOffsetEXT                      = MakeRegalProc(dsa_glVertexArrayColorOffsetEXT, layer);
  dt.glVertexArrayEdgeFlagOffsetEXT                   = MakeRegalProc(dsa_glVertexArrayEdgeFlagOffsetEXT, layer);
  dt.glVertexArrayFogCoordOffsetEXT                   = MakeRegalProc(dsa_glVertexArrayFogCoordOffsetEXT, layer);
  dt.glVertexArrayIndexOffsetEXT                      = MakeRegalProc(dsa_glVertexArrayIndexOffsetEXT, layer);
  dt.glVertexArrayMultiTexCoordOffsetEXT              = MakeRegalProc(dsa_glVertexArrayMultiTexCoordOffsetEXT, layer);
  dt.glVertexArrayNormalOffsetEXT                     = MakeRegalProc(dsa_glVertexArrayNormalOffsetEXT, layer);
  dt.glVertexArraySecondaryColorOffsetEXT             = MakeRegalProc(dsa_glVertexArraySecondaryColorOffsetEXT, layer);
  dt.glVertexArrayTexCoordOffsetEXT                   = MakeRegalProc(dsa_glVertexArrayTexCoordOffsetEXT, layer);
  dt.glVertexArrayVertexAttribIOffsetEXT              = MakeRegalProc(dsa_glVertexArrayVertexAttribIOffsetEXT, layer);
  dt.glVertexArrayVertexAttribOffsetEXT               = MakeRegalProc(dsa_glVertexArrayVertexAttribOffsetEXT, layer);
  dt.glVertexArrayVertexOffsetEXT                     = MakeRegalProc(dsa_glVertexArrayVertexOffsetEXT, layer);
  dt.glVertexPointer                                  = MakeRegalProc(dsa_glVertexPointer, layer);
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
