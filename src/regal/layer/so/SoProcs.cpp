/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalSo.h"
#include "RegalEmuProcsSo.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

static void REGAL_CALL So_glActiveTexture(Layer *_layer, GLenum texture)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->ActiveTexture( *_context, texture ) ) {
     return;
  }

  orig.glActiveTexture( orig.glActiveTexture_layer, texture );

}

static void REGAL_CALL So_glActiveTextureARB(Layer *_layer, GLenum texture)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->ActiveTexture( *_context, texture ) ) {
     return;
  }

  orig.glActiveTextureARB( orig.glActiveTextureARB_layer, texture );

}

static void REGAL_CALL So_glBindSampler(Layer *_layer, GLuint unit, GLuint sampler)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  _context->so->BindSampler( unit, sampler ); return;

  orig.glBindSampler( orig.glBindSampler_layer, unit, sampler );

}

static void REGAL_CALL So_glBindTexture(Layer *_layer, GLenum target, GLuint texture)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->BindTexture( *_context, target, texture ) ) {
     return;
  }

  orig.glBindTexture( orig.glBindTexture_layer, target, texture );

}

static void REGAL_CALL So_glDeleteSamplers(Layer *_layer, GLsizei count, const GLuint *samplers)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  _context->so->DeleteSamplers( count, samplers ); return;

  orig.glDeleteSamplers( orig.glDeleteSamplers_layer, count, samplers );

}

static void REGAL_CALL So_glDeleteTextures(Layer *_layer, GLsizei n, const GLuint *textures)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->DeleteTextures( *_context, n, textures );

  orig.glDeleteTextures( orig.glDeleteTextures_layer, n, textures );

}

static void REGAL_CALL So_glDrawArrays(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawArrays( orig.glDrawArrays_layer, mode, first, count );

}

static void REGAL_CALL So_glDrawArraysEXT(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawArraysEXT( orig.glDrawArraysEXT_layer, mode, first, count );

}

static void REGAL_CALL So_glDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawArraysIndirect( orig.glDrawArraysIndirect_layer, mode, indirect );

}

static void REGAL_CALL So_glDrawArraysInstanced(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawArraysInstanced( orig.glDrawArraysInstanced_layer, mode, start, count, primcount );

}

static void REGAL_CALL So_glDrawArraysInstancedARB(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawArraysInstancedARB( orig.glDrawArraysInstancedARB_layer, mode, start, count, primcount );

}

static void REGAL_CALL So_glDrawArraysInstancedEXT(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawArraysInstancedEXT( orig.glDrawArraysInstancedEXT_layer, mode, start, count, primcount );

}

static void REGAL_CALL So_glDrawElementArrayAPPLE(Layer *_layer, GLenum mode, GLint first, GLsizei count)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementArrayAPPLE( orig.glDrawElementArrayAPPLE_layer, mode, first, count );

}

static void REGAL_CALL So_glDrawElementArrayATI(Layer *_layer, GLenum mode, GLsizei count)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementArrayATI( orig.glDrawElementArrayATI_layer, mode, count );

}

static void REGAL_CALL So_glDrawElements(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElements( orig.glDrawElements_layer, mode, count, type, indices );

}

static void REGAL_CALL So_glDrawElementsBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementsBaseVertex( orig.glDrawElementsBaseVertex_layer, mode, count, type, indices, basevertex );

}

static void REGAL_CALL So_glDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementsIndirect( orig.glDrawElementsIndirect_layer, mode, type, indirect );

}

static void REGAL_CALL So_glDrawElementsInstanced(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementsInstanced( orig.glDrawElementsInstanced_layer, mode, count, type, indices, primcount );

}

static void REGAL_CALL So_glDrawElementsInstancedARB(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementsInstancedARB( orig.glDrawElementsInstancedARB_layer, mode, count, type, indices, primcount );

}

static void REGAL_CALL So_glDrawElementsInstancedBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementsInstancedBaseVertex( orig.glDrawElementsInstancedBaseVertex_layer, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL So_glDrawElementsInstancedEXT(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawElementsInstancedEXT( orig.glDrawElementsInstancedEXT_layer, mode, count, type, indices, primcount );

}

static void REGAL_CALL So_glDrawRangeElementArrayAPPLE(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawRangeElementArrayAPPLE( orig.glDrawRangeElementArrayAPPLE_layer, mode, start, end, first, count );

}

static void REGAL_CALL So_glDrawRangeElementArrayATI(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawRangeElementArrayATI( orig.glDrawRangeElementArrayATI_layer, mode, start, end, count );

}

static void REGAL_CALL So_glDrawRangeElements(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawRangeElements( orig.glDrawRangeElements_layer, mode, start, end, count, type, indices );

}

static void REGAL_CALL So_glDrawRangeElementsBaseVertex(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawRangeElementsBaseVertex( orig.glDrawRangeElementsBaseVertex_layer, mode, start, end, count, type, indices, basevertex );

}

static void REGAL_CALL So_glDrawRangeElementsEXT(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glDrawRangeElementsEXT( orig.glDrawRangeElementsEXT_layer, mode, start, end, count, type, indices );

}

static void REGAL_CALL So_glGenSamplers(Layer *_layer, GLsizei count, GLuint *samplers)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  _context->so->GenSamplers( count, samplers ); return;

  orig.glGenSamplers( orig.glGenSamplers_layer, count, samplers );

}

static void REGAL_CALL So_glGenTextures(Layer *_layer, GLsizei n, GLuint *textures)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  _context->so->GenTextures( *_context, n, textures ); return;

  orig.glGenTextures( orig.glGenTextures_layer, n, textures );

}

static void REGAL_CALL So_glGetDoublev(Layer *_layer, GLenum pname, GLdouble *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->Get( pname, params ) ) {
     return;
  }

  orig.glGetDoublev( orig.glGetDoublev_layer, pname, params );

}

static void REGAL_CALL So_glGetFloatv(Layer *_layer, GLenum pname, GLfloat *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->Get( pname, params ) ) {
     return;
  }

  orig.glGetFloatv( orig.glGetFloatv_layer, pname, params );

}

static void REGAL_CALL So_glGetInteger64v(Layer *_layer, GLenum pname, GLint64 *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->Get( pname, params ) ) {
     return;
  }

  orig.glGetInteger64v( orig.glGetInteger64v_layer, pname, params );

}

static void REGAL_CALL So_glGetIntegerv(Layer *_layer, GLenum pname, GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->Get( pname, params ) ) {
     return;
  }

  orig.glGetIntegerv( orig.glGetIntegerv_layer, pname, params );

}

static void REGAL_CALL So_glGetSamplerParameterIiv(Layer *_layer, GLuint sampler, GLenum pname, GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetSamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glGetSamplerParameterIiv( orig.glGetSamplerParameterIiv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glGetSamplerParameterIuiv(Layer *_layer, GLuint sampler, GLenum pname, GLuint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetSamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glGetSamplerParameterIuiv( orig.glGetSamplerParameterIuiv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glGetSamplerParameterfv(Layer *_layer, GLuint sampler, GLenum pname, GLfloat *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetSamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glGetSamplerParameterfv( orig.glGetSamplerParameterfv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glGetSamplerParameteriv(Layer *_layer, GLuint sampler, GLenum pname, GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetSamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glGetSamplerParameteriv( orig.glGetSamplerParameteriv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glGetTexParameterIiv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetTexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glGetTexParameterIiv( orig.glGetTexParameterIiv_layer, target, pname, params );

}

static void REGAL_CALL So_glGetTexParameterIuiv(Layer *_layer, GLenum target, GLenum pname, GLuint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetTexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glGetTexParameterIuiv( orig.glGetTexParameterIuiv_layer, target, pname, params );

}

static void REGAL_CALL So_glGetTexParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetTexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glGetTexParameterfv( orig.glGetTexParameterfv_layer, target, pname, params );

}

static void REGAL_CALL So_glGetTexParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->GetTexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glGetTexParameteriv( orig.glGetTexParameteriv_layer, target, pname, params );

}

static GLboolean REGAL_CALL So_glIsSampler(Layer *_layer, GLuint sampler)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  return _context->so->IsSampler( sampler );

  return orig.glIsSampler( orig.glIsSampler_layer, sampler );

}

static void REGAL_CALL So_glMultiDrawArrays(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawArrays( orig.glMultiDrawArrays_layer, mode, first, count, primcount );

}

static void REGAL_CALL So_glMultiDrawArraysEXT(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawArraysEXT( orig.glMultiDrawArraysEXT_layer, mode, first, count, primcount );

}

static void REGAL_CALL So_glMultiDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawArraysIndirect( orig.glMultiDrawArraysIndirect_layer, mode, indirect, primcount, stride );

}

static void REGAL_CALL So_glMultiDrawArraysIndirectAMD(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawArraysIndirectAMD( orig.glMultiDrawArraysIndirectAMD_layer, mode, indirect, primcount, stride );

}

static void REGAL_CALL So_glMultiDrawElementArrayAPPLE(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawElementArrayAPPLE( orig.glMultiDrawElementArrayAPPLE_layer, mode, first, count, primcount );

}

static void REGAL_CALL So_glMultiDrawElements(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawElements( orig.glMultiDrawElements_layer, mode, count, type, indices, primcount );

}

static void REGAL_CALL So_glMultiDrawElementsBaseVertex(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawElementsBaseVertex( orig.glMultiDrawElementsBaseVertex_layer, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL So_glMultiDrawElementsEXT(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawElementsEXT( orig.glMultiDrawElementsEXT_layer, mode, count, type, indices, primcount );

}

static void REGAL_CALL So_glMultiDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawElementsIndirect( orig.glMultiDrawElementsIndirect_layer, mode, type, indirect, primcount, stride );

}

static void REGAL_CALL So_glMultiDrawElementsIndirectAMD(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawElementsIndirectAMD( orig.glMultiDrawElementsIndirectAMD_layer, mode, type, indirect, primcount, stride );

}

static void REGAL_CALL So_glMultiDrawRangeElementArrayAPPLE(Layer *_layer, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // prefix
  _context->so->PreDraw( *_context );

  orig.glMultiDrawRangeElementArrayAPPLE( orig.glMultiDrawRangeElementArrayAPPLE_layer, mode, start, end, first, count, primcount );

}

static void REGAL_CALL So_glSamplerParameterIiv(Layer *_layer, GLuint sampler, GLenum pname, const GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->SamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glSamplerParameterIiv( orig.glSamplerParameterIiv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glSamplerParameterIuiv(Layer *_layer, GLuint sampler, GLenum pname, const GLuint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->SamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glSamplerParameterIuiv( orig.glSamplerParameterIuiv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glSamplerParameterf(Layer *_layer, GLuint sampler, GLenum pname, GLfloat param)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->SamplerParameter( *_context, sampler, pname, param )) {
     return;
  }

  orig.glSamplerParameterf( orig.glSamplerParameterf_layer, sampler, pname, param );

}

static void REGAL_CALL So_glSamplerParameterfv(Layer *_layer, GLuint sampler, GLenum pname, const GLfloat *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->SamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glSamplerParameterfv( orig.glSamplerParameterfv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glSamplerParameteri(Layer *_layer, GLuint sampler, GLenum pname, GLint param)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->SamplerParameter( *_context, sampler, pname, param )) {
     return;
  }

  orig.glSamplerParameteri( orig.glSamplerParameteri_layer, sampler, pname, param );

}

static void REGAL_CALL So_glSamplerParameteriv(Layer *_layer, GLuint sampler, GLenum pname, const GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->SamplerParameterv( *_context, sampler, pname, params )) {
     return;
  }

  orig.glSamplerParameteriv( orig.glSamplerParameteriv_layer, sampler, pname, params );

}

static void REGAL_CALL So_glTexParameterIiv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glTexParameterIiv( orig.glTexParameterIiv_layer, target, pname, params );

}

static void REGAL_CALL So_glTexParameterIivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glTexParameterIivEXT( orig.glTexParameterIivEXT_layer, target, pname, params );

}

static void REGAL_CALL So_glTexParameterIuiv(Layer *_layer, GLenum target, GLenum pname, const GLuint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glTexParameterIuiv( orig.glTexParameterIuiv_layer, target, pname, params );

}

static void REGAL_CALL So_glTexParameterIuivEXT(Layer *_layer, GLenum target, GLenum pname, const GLuint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glTexParameterIuivEXT( orig.glTexParameterIuivEXT_layer, target, pname, params );

}

static void REGAL_CALL So_glTexParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameter( *_context, target, pname, param ) ) {
     return;
  }

  orig.glTexParameterf( orig.glTexParameterf_layer, target, pname, param );

}

static void REGAL_CALL So_glTexParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glTexParameterfv( orig.glTexParameterfv_layer, target, pname, params );

}

static void REGAL_CALL So_glTexParameteri(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameter( *_context, target, pname, param ) ) {
     return;
  }

  orig.glTexParameteri( orig.glTexParameteri_layer, target, pname, param );

}

static void REGAL_CALL So_glTexParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  So * self = static_cast<So *>(_layer);

  SoOriginate & orig = self->orig;

  // impl
  if ( _context->so->TexParameterv( *_context, target, pname, params ) ) {
     return;
  }

  orig.glTexParameteriv( orig.glTexParameteriv_layer, target, pname, params );

}

void SoIntercept( Dispatch::GL & dt ) {
  dt.glActiveTexture                        = So_glActiveTexture;
  dt.glActiveTexture_layer                   = So_glActiveTexture;
  dt.glActiveTextureARB                     = So_glActiveTextureARB;
  dt.glActiveTextureARB_layer                = So_glActiveTextureARB;
  dt.glBindSampler                          = So_glBindSampler;
  dt.glBindSampler_layer                     = So_glBindSampler;
  dt.glBindTexture                          = So_glBindTexture;
  dt.glBindTexture_layer                     = So_glBindTexture;
  dt.glDeleteSamplers                       = So_glDeleteSamplers;
  dt.glDeleteSamplers_layer                  = So_glDeleteSamplers;
  dt.glDeleteTextures                       = So_glDeleteTextures;
  dt.glDeleteTextures_layer                  = So_glDeleteTextures;
  dt.glDrawArrays                           = So_glDrawArrays;
  dt.glDrawArrays_layer                      = So_glDrawArrays;
  dt.glDrawArraysEXT                        = So_glDrawArraysEXT;
  dt.glDrawArraysEXT_layer                   = So_glDrawArraysEXT;
  dt.glDrawArraysIndirect                   = So_glDrawArraysIndirect;
  dt.glDrawArraysIndirect_layer              = So_glDrawArraysIndirect;
  dt.glDrawArraysInstanced                  = So_glDrawArraysInstanced;
  dt.glDrawArraysInstanced_layer             = So_glDrawArraysInstanced;
  dt.glDrawArraysInstancedARB               = So_glDrawArraysInstancedARB;
  dt.glDrawArraysInstancedARB_layer          = So_glDrawArraysInstancedARB;
  dt.glDrawArraysInstancedEXT               = So_glDrawArraysInstancedEXT;
  dt.glDrawArraysInstancedEXT_layer          = So_glDrawArraysInstancedEXT;
  dt.glDrawElementArrayAPPLE                = So_glDrawElementArrayAPPLE;
  dt.glDrawElementArrayAPPLE_layer           = So_glDrawElementArrayAPPLE;
  dt.glDrawElementArrayATI                  = So_glDrawElementArrayATI;
  dt.glDrawElementArrayATI_layer             = So_glDrawElementArrayATI;
  dt.glDrawElements                         = So_glDrawElements;
  dt.glDrawElements_layer                    = So_glDrawElements;
  dt.glDrawElementsBaseVertex               = So_glDrawElementsBaseVertex;
  dt.glDrawElementsBaseVertex_layer          = So_glDrawElementsBaseVertex;
  dt.glDrawElementsIndirect                 = So_glDrawElementsIndirect;
  dt.glDrawElementsIndirect_layer            = So_glDrawElementsIndirect;
  dt.glDrawElementsInstanced                = So_glDrawElementsInstanced;
  dt.glDrawElementsInstanced_layer           = So_glDrawElementsInstanced;
  dt.glDrawElementsInstancedARB             = So_glDrawElementsInstancedARB;
  dt.glDrawElementsInstancedARB_layer        = So_glDrawElementsInstancedARB;
  dt.glDrawElementsInstancedBaseVertex      = So_glDrawElementsInstancedBaseVertex;
  dt.glDrawElementsInstancedBaseVertex_layer = So_glDrawElementsInstancedBaseVertex;
  dt.glDrawElementsInstancedEXT             = So_glDrawElementsInstancedEXT;
  dt.glDrawElementsInstancedEXT_layer        = So_glDrawElementsInstancedEXT;
  dt.glDrawRangeElementArrayAPPLE           = So_glDrawRangeElementArrayAPPLE;
  dt.glDrawRangeElementArrayAPPLE_layer      = So_glDrawRangeElementArrayAPPLE;
  dt.glDrawRangeElementArrayATI             = So_glDrawRangeElementArrayATI;
  dt.glDrawRangeElementArrayATI_layer        = So_glDrawRangeElementArrayATI;
  dt.glDrawRangeElements                    = So_glDrawRangeElements;
  dt.glDrawRangeElements_layer               = So_glDrawRangeElements;
  dt.glDrawRangeElementsBaseVertex          = So_glDrawRangeElementsBaseVertex;
  dt.glDrawRangeElementsBaseVertex_layer     = So_glDrawRangeElementsBaseVertex;
  dt.glDrawRangeElementsEXT                 = So_glDrawRangeElementsEXT;
  dt.glDrawRangeElementsEXT_layer            = So_glDrawRangeElementsEXT;
  dt.glGenSamplers                          = So_glGenSamplers;
  dt.glGenSamplers_layer                     = So_glGenSamplers;
  dt.glGenTextures                          = So_glGenTextures;
  dt.glGenTextures_layer                     = So_glGenTextures;
  dt.glGetDoublev                           = So_glGetDoublev;
  dt.glGetDoublev_layer                      = So_glGetDoublev;
  dt.glGetFloatv                            = So_glGetFloatv;
  dt.glGetFloatv_layer                       = So_glGetFloatv;
  dt.glGetInteger64v                        = So_glGetInteger64v;
  dt.glGetInteger64v_layer                   = So_glGetInteger64v;
  dt.glGetIntegerv                          = So_glGetIntegerv;
  dt.glGetIntegerv_layer                     = So_glGetIntegerv;
  dt.glGetSamplerParameterIiv               = So_glGetSamplerParameterIiv;
  dt.glGetSamplerParameterIiv_layer          = So_glGetSamplerParameterIiv;
  dt.glGetSamplerParameterIuiv              = So_glGetSamplerParameterIuiv;
  dt.glGetSamplerParameterIuiv_layer         = So_glGetSamplerParameterIuiv;
  dt.glGetSamplerParameterfv                = So_glGetSamplerParameterfv;
  dt.glGetSamplerParameterfv_layer           = So_glGetSamplerParameterfv;
  dt.glGetSamplerParameteriv                = So_glGetSamplerParameteriv;
  dt.glGetSamplerParameteriv_layer           = So_glGetSamplerParameteriv;
  dt.glGetTexParameterIiv                   = So_glGetTexParameterIiv;
  dt.glGetTexParameterIiv_layer              = So_glGetTexParameterIiv;
  dt.glGetTexParameterIuiv                  = So_glGetTexParameterIuiv;
  dt.glGetTexParameterIuiv_layer             = So_glGetTexParameterIuiv;
  dt.glGetTexParameterfv                    = So_glGetTexParameterfv;
  dt.glGetTexParameterfv_layer               = So_glGetTexParameterfv;
  dt.glGetTexParameteriv                    = So_glGetTexParameteriv;
  dt.glGetTexParameteriv_layer               = So_glGetTexParameteriv;
  dt.glIsSampler                            = So_glIsSampler;
  dt.glIsSampler_layer                       = So_glIsSampler;
  dt.glMultiDrawArrays                      = So_glMultiDrawArrays;
  dt.glMultiDrawArrays_layer                 = So_glMultiDrawArrays;
  dt.glMultiDrawArraysEXT                   = So_glMultiDrawArraysEXT;
  dt.glMultiDrawArraysEXT_layer              = So_glMultiDrawArraysEXT;
  dt.glMultiDrawArraysIndirect              = So_glMultiDrawArraysIndirect;
  dt.glMultiDrawArraysIndirect_layer         = So_glMultiDrawArraysIndirect;
  dt.glMultiDrawArraysIndirectAMD           = So_glMultiDrawArraysIndirectAMD;
  dt.glMultiDrawArraysIndirectAMD_layer      = So_glMultiDrawArraysIndirectAMD;
  dt.glMultiDrawElementArrayAPPLE           = So_glMultiDrawElementArrayAPPLE;
  dt.glMultiDrawElementArrayAPPLE_layer      = So_glMultiDrawElementArrayAPPLE;
  dt.glMultiDrawElements                    = So_glMultiDrawElements;
  dt.glMultiDrawElements_layer               = So_glMultiDrawElements;
  dt.glMultiDrawElementsBaseVertex          = So_glMultiDrawElementsBaseVertex;
  dt.glMultiDrawElementsBaseVertex_layer     = So_glMultiDrawElementsBaseVertex;
  dt.glMultiDrawElementsEXT                 = So_glMultiDrawElementsEXT;
  dt.glMultiDrawElementsEXT_layer            = So_glMultiDrawElementsEXT;
  dt.glMultiDrawElementsIndirect            = So_glMultiDrawElementsIndirect;
  dt.glMultiDrawElementsIndirect_layer       = So_glMultiDrawElementsIndirect;
  dt.glMultiDrawElementsIndirectAMD         = So_glMultiDrawElementsIndirectAMD;
  dt.glMultiDrawElementsIndirectAMD_layer    = So_glMultiDrawElementsIndirectAMD;
  dt.glMultiDrawRangeElementArrayAPPLE      = So_glMultiDrawRangeElementArrayAPPLE;
  dt.glMultiDrawRangeElementArrayAPPLE_layer = So_glMultiDrawRangeElementArrayAPPLE;
  dt.glSamplerParameterIiv                  = So_glSamplerParameterIiv;
  dt.glSamplerParameterIiv_layer             = So_glSamplerParameterIiv;
  dt.glSamplerParameterIuiv                 = So_glSamplerParameterIuiv;
  dt.glSamplerParameterIuiv_layer            = So_glSamplerParameterIuiv;
  dt.glSamplerParameterf                    = So_glSamplerParameterf;
  dt.glSamplerParameterf_layer               = So_glSamplerParameterf;
  dt.glSamplerParameterfv                   = So_glSamplerParameterfv;
  dt.glSamplerParameterfv_layer              = So_glSamplerParameterfv;
  dt.glSamplerParameteri                    = So_glSamplerParameteri;
  dt.glSamplerParameteri_layer               = So_glSamplerParameteri;
  dt.glSamplerParameteriv                   = So_glSamplerParameteriv;
  dt.glSamplerParameteriv_layer              = So_glSamplerParameteriv;
  dt.glTexParameterIiv                      = So_glTexParameterIiv;
  dt.glTexParameterIiv_layer                 = So_glTexParameterIiv;
  dt.glTexParameterIivEXT                   = So_glTexParameterIivEXT;
  dt.glTexParameterIivEXT_layer              = So_glTexParameterIivEXT;
  dt.glTexParameterIuiv                     = So_glTexParameterIuiv;
  dt.glTexParameterIuiv_layer                = So_glTexParameterIuiv;
  dt.glTexParameterIuivEXT                  = So_glTexParameterIuivEXT;
  dt.glTexParameterIuivEXT_layer             = So_glTexParameterIuivEXT;
  dt.glTexParameterf                        = So_glTexParameterf;
  dt.glTexParameterf_layer                   = So_glTexParameterf;
  dt.glTexParameterfv                       = So_glTexParameterfv;
  dt.glTexParameterfv_layer                  = So_glTexParameterfv;
  dt.glTexParameteri                        = So_glTexParameteri;
  dt.glTexParameteri_layer                   = So_glTexParameteri;
  dt.glTexParameteriv                       = So_glTexParameteriv;
  dt.glTexParameteriv_layer                  = So_glTexParameteriv;
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
