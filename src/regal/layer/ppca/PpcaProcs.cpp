/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalPpca.h"
#include "RegalEmuProcsPpca.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

static void REGAL_CALL Ppca_glBindBuffer(Layer *_layer, GLenum target, GLuint buffer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glBindBuffer( target, buffer );

  orig.glBindBuffer( orig.glBindBuffer_layer, target, buffer );

}

static void REGAL_CALL Ppca_glBindVertexArray(Layer *_layer, GLuint array)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glBindVertexArray( array );

  orig.glBindVertexArray( orig.glBindVertexArray_layer, array );

}

static void REGAL_CALL Ppca_glBindVertexBuffer(Layer *_layer, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glBindVertexBuffer( bindingindex, buffer, offset, stride );

  orig.glBindVertexBuffer( orig.glBindVertexBuffer_layer, bindingindex, buffer, offset, stride );

}

static void REGAL_CALL Ppca_glBindVertexBuffers(Layer *_layer, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glBindVertexBuffers( first, count, buffers, offsets, strides );

  orig.glBindVertexBuffers( orig.glBindVertexBuffers_layer, first, count, buffers, offsets, strides );

}

static void REGAL_CALL Ppca_glClientActiveTexture(Layer *_layer, GLenum texture)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glClientActiveTexture( texture );

  orig.glClientActiveTexture( orig.glClientActiveTexture_layer, texture );

}

static void REGAL_CALL Ppca_glClientActiveTextureARB(Layer *_layer, GLenum texture)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glClientActiveTexture( texture );

  orig.glClientActiveTextureARB( orig.glClientActiveTextureARB_layer, texture );

}

static void REGAL_CALL Ppca_glClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  _context->ppca->glClientAttribDefaultEXT( *_context, mask ); return;

  orig.glClientAttribDefaultEXT( orig.glClientAttribDefaultEXT_layer, mask );

}

static void REGAL_CALL Ppca_glColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glColorPointer( size, type, stride, pointer );

  orig.glColorPointer( orig.glColorPointer_layer, size, type, stride, pointer );

}

static void REGAL_CALL Ppca_glDeleteBuffers(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDeleteBuffers( n, buffers );

  orig.glDeleteBuffers( orig.glDeleteBuffers_layer, n, buffers );

}

static void REGAL_CALL Ppca_glDeleteVertexArrays(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDeleteVertexArrays( n, arrays );

  orig.glDeleteVertexArrays( orig.glDeleteVertexArrays_layer, n, arrays );

}

static void REGAL_CALL Ppca_glDisable(Layer *_layer, GLenum cap)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisable( cap );

  orig.glDisable( orig.glDisable_layer, cap );

}

static void REGAL_CALL Ppca_glDisableClientState(Layer *_layer, GLenum cap)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableClientState( cap );

  orig.glDisableClientState( orig.glDisableClientState_layer, cap );

}

static void REGAL_CALL Ppca_glDisableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableClientStateIndexedEXT( array, index );

  orig.glDisableClientStateIndexedEXT( orig.glDisableClientStateIndexedEXT_layer, array, index );

}

static void REGAL_CALL Ppca_glDisableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableClientStateiEXT( array, index );

  orig.glDisableClientStateiEXT( orig.glDisableClientStateiEXT_layer, array, index );

}

static void REGAL_CALL Ppca_glDisableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableIndexedEXT( target, index );

  orig.glDisableIndexedEXT( orig.glDisableIndexedEXT_layer, target, index );

}

static void REGAL_CALL Ppca_glDisableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableVertexArrayAttribEXT( vaobj, array );

  orig.glDisableVertexArrayAttribEXT( orig.glDisableVertexArrayAttribEXT_layer, vaobj, array );

}

static void REGAL_CALL Ppca_glDisableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableVertexArrayEXT( vaobj, array );

  orig.glDisableVertexArrayEXT( orig.glDisableVertexArrayEXT_layer, vaobj, array );

}

static void REGAL_CALL Ppca_glDisableVertexAttribArray(Layer *_layer, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisableVertexAttribArray( index );

  orig.glDisableVertexAttribArray( orig.glDisableVertexAttribArray_layer, index );

}

static void REGAL_CALL Ppca_glDisablei(Layer *_layer, GLenum cap, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glDisablei( cap, index );

  orig.glDisablei( orig.glDisablei_layer, cap, index );

}

static void REGAL_CALL Ppca_glEdgeFlagPointer(Layer *_layer, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEdgeFlagPointer( stride, pointer );

  orig.glEdgeFlagPointer( orig.glEdgeFlagPointer_layer, stride, pointer );

}

static void REGAL_CALL Ppca_glEnable(Layer *_layer, GLenum cap)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnable( cap );

  orig.glEnable( orig.glEnable_layer, cap );

}

static void REGAL_CALL Ppca_glEnableClientState(Layer *_layer, GLenum cap)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableClientState( cap );

  orig.glEnableClientState( orig.glEnableClientState_layer, cap );

}

static void REGAL_CALL Ppca_glEnableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableClientStateIndexedEXT( array, index );

  orig.glEnableClientStateIndexedEXT( orig.glEnableClientStateIndexedEXT_layer, array, index );

}

static void REGAL_CALL Ppca_glEnableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableClientStateiEXT( array, index );

  orig.glEnableClientStateiEXT( orig.glEnableClientStateiEXT_layer, array, index );

}

static void REGAL_CALL Ppca_glEnableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableIndexedEXT( target, index );

  orig.glEnableIndexedEXT( orig.glEnableIndexedEXT_layer, target, index );

}

static void REGAL_CALL Ppca_glEnableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableVertexArrayAttribEXT( vaobj, array );

  orig.glEnableVertexArrayAttribEXT( orig.glEnableVertexArrayAttribEXT_layer, vaobj, array );

}

static void REGAL_CALL Ppca_glEnableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableVertexArrayEXT( vaobj, array );

  orig.glEnableVertexArrayEXT( orig.glEnableVertexArrayEXT_layer, vaobj, array );

}

static void REGAL_CALL Ppca_glEnableVertexAttribArray(Layer *_layer, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnableVertexAttribArray( index );

  orig.glEnableVertexAttribArray( orig.glEnableVertexAttribArray_layer, index );

}

static void REGAL_CALL Ppca_glEnablei(Layer *_layer, GLenum cap, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glEnablei( cap, index );

  orig.glEnablei( orig.glEnablei_layer, cap, index );

}

static void REGAL_CALL Ppca_glFogCoordPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glFogCoordPointer( type, stride, pointer );

  orig.glFogCoordPointer( orig.glFogCoordPointer_layer, type, stride, pointer );

}

static void REGAL_CALL Ppca_glGetBooleanv(Layer *_layer, GLenum pname, GLboolean *params)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  if ( _context->ppca->glGetv( *_context, pname, params ) ) {
    return;
  }

  orig.glGetBooleanv( orig.glGetBooleanv_layer, pname, params );

}

static void REGAL_CALL Ppca_glGetDoublev(Layer *_layer, GLenum pname, GLdouble *params)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  if ( _context->ppca->glGetv( *_context, pname, params ) ) {
    return;
  }

  orig.glGetDoublev( orig.glGetDoublev_layer, pname, params );

}

static void REGAL_CALL Ppca_glGetFloatv(Layer *_layer, GLenum pname, GLfloat *params)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  if ( _context->ppca->glGetv( *_context, pname, params ) ) {
    return;
  }

  orig.glGetFloatv( orig.glGetFloatv_layer, pname, params );

}

static void REGAL_CALL Ppca_glGetIntegerv(Layer *_layer, GLenum pname, GLint *params)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  if ( _context->ppca->glGetv( *_context, pname, params ) ) {
    return;
  }

  orig.glGetIntegerv( orig.glGetIntegerv_layer, pname, params );

}

static void REGAL_CALL Ppca_glIndexPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glIndexPointer( type, stride, pointer );

  orig.glIndexPointer( orig.glIndexPointer_layer, type, stride, pointer );

}

static void REGAL_CALL Ppca_glInterleavedArrays(Layer *_layer, GLenum format, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glInterleavedArrays( format, stride, pointer );

  orig.glInterleavedArrays( orig.glInterleavedArrays_layer, format, stride, pointer );

}

static void REGAL_CALL Ppca_glMultiTexCoordPointerEXT(Layer *_layer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glMultiTexCoordPointerEXT( texunit, size, type, stride, pointer );

  orig.glMultiTexCoordPointerEXT( orig.glMultiTexCoordPointerEXT_layer, texunit, size, type, stride, pointer );

}

static void REGAL_CALL Ppca_glNormalPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glNormalPointer( type, stride, pointer );

  orig.glNormalPointer( orig.glNormalPointer_layer, type, stride, pointer );

}

static void REGAL_CALL Ppca_glPixelStoref(Layer *_layer, GLenum pname, GLfloat param)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glPixelStore( pname, param );

  orig.glPixelStoref( orig.glPixelStoref_layer, pname, param );

}

static void REGAL_CALL Ppca_glPixelStorei(Layer *_layer, GLenum pname, GLint param)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glPixelStore( pname, param );

  orig.glPixelStorei( orig.glPixelStorei_layer, pname, param );

}

static void REGAL_CALL Ppca_glPopClientAttrib(Layer *_layer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  _context->ppca->glPopClientAttrib( *_context ); return;

  orig.glPopClientAttrib( orig.glPopClientAttrib_layer );

}

static void REGAL_CALL Ppca_glPrimitiveRestartIndex(Layer *_layer, GLuint index)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glPrimitiveRestartIndex( index );

  orig.glPrimitiveRestartIndex( orig.glPrimitiveRestartIndex_layer, index );

}

static void REGAL_CALL Ppca_glPushClientAttrib(Layer *_layer, GLbitfield mask)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  _context->ppca->glPushClientAttrib( *_context, mask ); return;

  orig.glPushClientAttrib( orig.glPushClientAttrib_layer, mask );

}

static void REGAL_CALL Ppca_glPushClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // impl
  _context->ppca->glPushClientAttribDefaultEXT( *_context, mask ); return;

  orig.glPushClientAttribDefaultEXT( orig.glPushClientAttribDefaultEXT_layer, mask );

}

static void REGAL_CALL Ppca_glSecondaryColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glSecondaryColorPointer( size, type, stride, pointer );

  orig.glSecondaryColorPointer( orig.glSecondaryColorPointer_layer, size, type, stride, pointer );

}

static void REGAL_CALL Ppca_glTexCoordPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glTexCoordPointer( size, type, stride, pointer );

  orig.glTexCoordPointer( orig.glTexCoordPointer_layer, size, type, stride, pointer );

}

static void REGAL_CALL Ppca_glVertexArrayColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayColorOffsetEXT( vaobj, buffer, size, type, stride, offset );

  orig.glVertexArrayColorOffsetEXT( orig.glVertexArrayColorOffsetEXT_layer, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayEdgeFlagOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayEdgeFlagOffsetEXT( vaobj, buffer, stride, offset );

  orig.glVertexArrayEdgeFlagOffsetEXT( orig.glVertexArrayEdgeFlagOffsetEXT_layer, vaobj, buffer, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayFogCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayFogCoordOffsetEXT( vaobj, buffer, type, stride, offset );

  orig.glVertexArrayFogCoordOffsetEXT( orig.glVertexArrayFogCoordOffsetEXT_layer, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayIndexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayIndexOffsetEXT( vaobj, buffer, type, stride, offset );

  orig.glVertexArrayIndexOffsetEXT( orig.glVertexArrayIndexOffsetEXT_layer, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayMultiTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayMultiTexCoordOffsetEXT( vaobj, buffer, texunit, size, type, stride, offset );

  orig.glVertexArrayMultiTexCoordOffsetEXT( orig.glVertexArrayMultiTexCoordOffsetEXT_layer, vaobj, buffer, texunit, size, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayNormalOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayNormalOffsetEXT( vaobj, buffer, type, stride, offset );

  orig.glVertexArrayNormalOffsetEXT( orig.glVertexArrayNormalOffsetEXT_layer, vaobj, buffer, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArraySecondaryColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArraySecondaryColorOffsetEXT( vaobj, buffer, size, type, stride, offset );

  orig.glVertexArraySecondaryColorOffsetEXT( orig.glVertexArraySecondaryColorOffsetEXT_layer, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayTexCoordOffsetEXT( vaobj, buffer, size, type, stride, offset );

  orig.glVertexArrayTexCoordOffsetEXT( orig.glVertexArrayTexCoordOffsetEXT_layer, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayVertexAttribIOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayVertexAttribIOffsetEXT( vaobj, buffer, index, size, type, stride, offset );

  orig.glVertexArrayVertexAttribIOffsetEXT( orig.glVertexArrayVertexAttribIOffsetEXT_layer, vaobj, buffer, index, size, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayVertexAttribOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayVertexAttribOffsetEXT( vaobj, buffer, index, size, type, normalized, stride, offset );

  orig.glVertexArrayVertexAttribOffsetEXT( orig.glVertexArrayVertexAttribOffsetEXT_layer, vaobj, buffer, index, size, type, normalized, stride, offset );

}

static void REGAL_CALL Ppca_glVertexArrayVertexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexArrayVertexOffsetEXT( vaobj, buffer, size, type, stride, offset );

  orig.glVertexArrayVertexOffsetEXT( orig.glVertexArrayVertexOffsetEXT_layer, vaobj, buffer, size, type, stride, offset );

}

static void REGAL_CALL Ppca_glVertexAttribBinding(Layer *_layer, GLuint attribindex, GLuint bindingindex)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribBinding( attribindex, bindingindex );

  orig.glVertexAttribBinding( orig.glVertexAttribBinding_layer, attribindex, bindingindex );

}

static void REGAL_CALL Ppca_glVertexAttribDivisor(Layer *_layer, GLuint index, GLuint divisor)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribDivisor( index, divisor );

  orig.glVertexAttribDivisor( orig.glVertexAttribDivisor_layer, index, divisor );

}

static void REGAL_CALL Ppca_glVertexAttribFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribFormat( attribindex, size, type, normalized, relativeoffset );

  orig.glVertexAttribFormat( orig.glVertexAttribFormat_layer, attribindex, size, type, normalized, relativeoffset );

}

static void REGAL_CALL Ppca_glVertexAttribIFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribIFormat( attribindex, size, type, relativeoffset );

  orig.glVertexAttribIFormat( orig.glVertexAttribIFormat_layer, attribindex, size, type, relativeoffset );

}

static void REGAL_CALL Ppca_glVertexAttribIPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribIPointer( index, size, type, stride, pointer );

  orig.glVertexAttribIPointer( orig.glVertexAttribIPointer_layer, index, size, type, stride, pointer );

}

static void REGAL_CALL Ppca_glVertexAttribLFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribLFormat( attribindex, size, type, relativeoffset );

  orig.glVertexAttribLFormat( orig.glVertexAttribLFormat_layer, attribindex, size, type, relativeoffset );

}

static void REGAL_CALL Ppca_glVertexAttribLPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribLPointer( index, size, type, stride, pointer );

  orig.glVertexAttribLPointer( orig.glVertexAttribLPointer_layer, index, size, type, stride, pointer );

}

static void REGAL_CALL Ppca_glVertexAttribPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexAttribPointer( index, size, type, normalized, stride, pointer );

  orig.glVertexAttribPointer( orig.glVertexAttribPointer_layer, index, size, type, normalized, stride, pointer );

}

static void REGAL_CALL Ppca_glVertexBindingDivisor(Layer *_layer, GLuint bindingindex, GLuint divisor)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexBindingDivisor( bindingindex, divisor );

  orig.glVertexBindingDivisor( orig.glVertexBindingDivisor_layer, bindingindex, divisor );

}

static void REGAL_CALL Ppca_glVertexPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Ppca * self = static_cast<Ppca *>(_layer);

  PpcaOriginate & orig = self->orig;

  // prefix
  _context->ppca->glVertexPointer( size, type, stride, pointer );

  orig.glVertexPointer( orig.glVertexPointer_layer, size, type, stride, pointer );

}

void PpcaIntercept( Dispatch::GL & dt ) {
  dt.glBindBuffer                         = RPpca_glBindBuffer;
  dt.glBindVertexArray                    = RPpca_glBindVertexArray;
  dt.glBindVertexBuffer                   = RPpca_glBindVertexBuffer;
  dt.glBindVertexBuffers                  = RPpca_glBindVertexBuffers;
  dt.glClientActiveTexture                = RPpca_glClientActiveTexture;
  dt.glClientActiveTextureARB             = RPpca_glClientActiveTextureARB;
  dt.glClientAttribDefaultEXT             = RPpca_glClientAttribDefaultEXT;
  dt.glColorPointer                       = RPpca_glColorPointer;
  dt.glDeleteBuffers                      = RPpca_glDeleteBuffers;
  dt.glDeleteVertexArrays                 = RPpca_glDeleteVertexArrays;
  dt.glDisable                            = RPpca_glDisable;
  dt.glDisableClientState                 = RPpca_glDisableClientState;
  dt.glDisableClientStateIndexedEXT       = RPpca_glDisableClientStateIndexedEXT;
  dt.glDisableClientStateiEXT             = RPpca_glDisableClientStateiEXT;
  dt.glDisableIndexedEXT                  = RPpca_glDisableIndexedEXT;
  dt.glDisableVertexArrayAttribEXT        = RPpca_glDisableVertexArrayAttribEXT;
  dt.glDisableVertexArrayEXT              = RPpca_glDisableVertexArrayEXT;
  dt.glDisableVertexAttribArray           = RPpca_glDisableVertexAttribArray;
  dt.glDisablei                           = RPpca_glDisablei;
  dt.glEdgeFlagPointer                    = RPpca_glEdgeFlagPointer;
  dt.glEnable                             = RPpca_glEnable;
  dt.glEnableClientState                  = RPpca_glEnableClientState;
  dt.glEnableClientStateIndexedEXT        = RPpca_glEnableClientStateIndexedEXT;
  dt.glEnableClientStateiEXT              = RPpca_glEnableClientStateiEXT;
  dt.glEnableIndexedEXT                   = RPpca_glEnableIndexedEXT;
  dt.glEnableVertexArrayAttribEXT         = RPpca_glEnableVertexArrayAttribEXT;
  dt.glEnableVertexArrayEXT               = RPpca_glEnableVertexArrayEXT;
  dt.glEnableVertexAttribArray            = RPpca_glEnableVertexAttribArray;
  dt.glEnablei                            = RPpca_glEnablei;
  dt.glFogCoordPointer                    = RPpca_glFogCoordPointer;
  dt.glGetBooleanv                        = RPpca_glGetBooleanv;
  dt.glGetDoublev                         = RPpca_glGetDoublev;
  dt.glGetFloatv                          = RPpca_glGetFloatv;
  dt.glGetIntegerv                        = RPpca_glGetIntegerv;
  dt.glIndexPointer                       = RPpca_glIndexPointer;
  dt.glInterleavedArrays                  = RPpca_glInterleavedArrays;
  dt.glMultiTexCoordPointerEXT            = RPpca_glMultiTexCoordPointerEXT;
  dt.glNormalPointer                      = RPpca_glNormalPointer;
  dt.glPixelStoref                        = RPpca_glPixelStoref;
  dt.glPixelStorei                        = RPpca_glPixelStorei;
  dt.glPopClientAttrib                    = RPpca_glPopClientAttrib;
  dt.glPrimitiveRestartIndex              = RPpca_glPrimitiveRestartIndex;
  dt.glPushClientAttrib                   = RPpca_glPushClientAttrib;
  dt.glPushClientAttribDefaultEXT         = RPpca_glPushClientAttribDefaultEXT;
  dt.glSecondaryColorPointer              = RPpca_glSecondaryColorPointer;
  dt.glTexCoordPointer                    = RPpca_glTexCoordPointer;
  dt.glVertexArrayColorOffsetEXT          = RPpca_glVertexArrayColorOffsetEXT;
  dt.glVertexArrayEdgeFlagOffsetEXT       = RPpca_glVertexArrayEdgeFlagOffsetEXT;
  dt.glVertexArrayFogCoordOffsetEXT       = RPpca_glVertexArrayFogCoordOffsetEXT;
  dt.glVertexArrayIndexOffsetEXT          = RPpca_glVertexArrayIndexOffsetEXT;
  dt.glVertexArrayMultiTexCoordOffsetEXT  = RPpca_glVertexArrayMultiTexCoordOffsetEXT;
  dt.glVertexArrayNormalOffsetEXT         = RPpca_glVertexArrayNormalOffsetEXT;
  dt.glVertexArraySecondaryColorOffsetEXT = RPpca_glVertexArraySecondaryColorOffsetEXT;
  dt.glVertexArrayTexCoordOffsetEXT       = RPpca_glVertexArrayTexCoordOffsetEXT;
  dt.glVertexArrayVertexAttribIOffsetEXT  = RPpca_glVertexArrayVertexAttribIOffsetEXT;
  dt.glVertexArrayVertexAttribOffsetEXT   = RPpca_glVertexArrayVertexAttribOffsetEXT;
  dt.glVertexArrayVertexOffsetEXT         = RPpca_glVertexArrayVertexOffsetEXT;
  dt.glVertexAttribBinding                = RPpca_glVertexAttribBinding;
  dt.glVertexAttribDivisor                = RPpca_glVertexAttribDivisor;
  dt.glVertexAttribFormat                 = RPpca_glVertexAttribFormat;
  dt.glVertexAttribIFormat                = RPpca_glVertexAttribIFormat;
  dt.glVertexAttribIPointer               = RPpca_glVertexAttribIPointer;
  dt.glVertexAttribLFormat                = RPpca_glVertexAttribLFormat;
  dt.glVertexAttribLPointer               = RPpca_glVertexAttribLPointer;
  dt.glVertexAttribPointer                = RPpca_glVertexAttribPointer;
  dt.glVertexBindingDivisor               = RPpca_glVertexBindingDivisor;
  dt.glVertexPointer                      = RPpca_glVertexPointer;
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
