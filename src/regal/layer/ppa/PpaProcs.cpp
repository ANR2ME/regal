/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "Ppa.h"
#include "PpaProcs.h"

extern "C" Regal::Layer * createPpa( Regal::RegalContext * ctx ) {
  return new Regal::Emu::Ppa( ctx );
}

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace Emu;

static void REGAL_CALL ppa_glActiveTexture(Layer *_layer, GLenum texture)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glActiveTexture( texture );

  RglActiveTexture( orig, texture );

}

static void REGAL_CALL ppa_glActiveTextureARB(Layer *_layer, GLenum texture)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glActiveTexture( texture );

  RglActiveTextureARB( orig, texture );

}

static void REGAL_CALL ppa_glAlphaFunc(Layer *_layer, GLenum func, GLclampf ref)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glAlphaFunc( func, ref );

  RglAlphaFunc( orig, func, ref );

}

static void REGAL_CALL ppa_glBlendColor(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendColor( red, green, blue, alpha );

  RglBlendColor( orig, red, green, blue, alpha );

}

static void REGAL_CALL ppa_glBlendEquation(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendEquation( mode );

  RglBlendEquation( orig, mode );

}

static void REGAL_CALL ppa_glBlendEquationSeparate(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendEquationSeparate( modeRGB, modeAlpha );

  RglBlendEquationSeparate( orig, modeRGB, modeAlpha );

}

static void REGAL_CALL ppa_glBlendEquationSeparatei(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendEquationSeparatei( buf, modeRGB, modeAlpha );

  RglBlendEquationSeparatei( orig, buf, modeRGB, modeAlpha );

}

static void REGAL_CALL ppa_glBlendEquationi(Layer *_layer, GLuint buf, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendEquationi( buf, mode );

  RglBlendEquationi( orig, buf, mode );

}

static void REGAL_CALL ppa_glBlendFunc(Layer *_layer, GLenum sfactor, GLenum dfactor)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendFunc( sfactor, dfactor );

  RglBlendFunc( orig, sfactor, dfactor );

}

static void REGAL_CALL ppa_glBlendFuncSeparate(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendFuncSeparate( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );

  RglBlendFuncSeparate( orig, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );

}

static void REGAL_CALL ppa_glBlendFuncSeparatei(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendFuncSeparatei( buf, srcRGB, dstRGB, srcAlpha, dstAlpha );

  RglBlendFuncSeparatei( orig, buf, srcRGB, dstRGB, srcAlpha, dstAlpha );

}

static void REGAL_CALL ppa_glBlendFunci(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glBlendFunci( buf, src, dst );

  RglBlendFunci( orig, buf, src, dst );

}

static void REGAL_CALL ppa_glClampColor(Layer *_layer, GLenum target, GLenum clamp)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClampColor( target, clamp );

  RglClampColor( orig, target, clamp );

}

static void REGAL_CALL ppa_glClearAccum(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClearAccum( red, green, blue, alpha );

  RglClearAccum( orig, red, green, blue, alpha );

}

static void REGAL_CALL ppa_glClearColor(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClearColor( red, green, blue, alpha );

  RglClearColor( orig, red, green, blue, alpha );

}

static void REGAL_CALL ppa_glClearDepth(Layer *_layer, GLclampd depth)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClearDepth( depth );

  RglClearDepth( orig, depth );

}

static void REGAL_CALL ppa_glClearDepthf(Layer *_layer, GLclampf d)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClearDepth( d );

  RglClearDepthf( orig, d );

}

static void REGAL_CALL ppa_glClearIndex(Layer *_layer, GLfloat c)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClearIndex( c );

  RglClearIndex( orig, c );

}

static void REGAL_CALL ppa_glClearStencil(Layer *_layer, GLint s)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClearStencil( s );

  RglClearStencil( orig, s );

}

static void REGAL_CALL ppa_glClipPlane(Layer *_layer, GLenum plane, const GLdouble *equation)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glClipPlane( plane, equation );

  RglClipPlane( orig, plane, equation );

}

static void REGAL_CALL ppa_glColorMask(Layer *_layer, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glColorMask( red, green, blue, alpha );

  RglColorMask( orig, red, green, blue, alpha );

}

static void REGAL_CALL ppa_glColorMaski(Layer *_layer, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glColorMaski( index, r, g, b, a );

  RglColorMaski( orig, index, r, g, b, a );

}

static void REGAL_CALL ppa_glColorMaterial(Layer *_layer, GLenum face, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glColorMaterial( face, mode );

  RglColorMaterial( orig, face, mode );

}

static void REGAL_CALL ppa_glColorTableParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glColorTableParameterv( target, pname, params );

  RglColorTableParameterfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glColorTableParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glColorTableParameterv( target, pname, params );

  RglColorTableParameteriv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glConvolutionParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glConvolutionParameter( target, pname, params );

  RglConvolutionParameterf( orig, target, pname, params );

}

static void REGAL_CALL ppa_glConvolutionParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glConvolutionParameterv( target, pname, params );

  RglConvolutionParameterfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glConvolutionParameteri(Layer *_layer, GLenum target, GLenum pname, GLint params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glConvolutionParameter( target, pname, params );

  RglConvolutionParameteri( orig, target, pname, params );

}

static void REGAL_CALL ppa_glConvolutionParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glConvolutionParameterv( target, pname, params );

  RglConvolutionParameteriv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glCullFace(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glCullFace( mode );

  RglCullFace( orig, mode );

}

static void REGAL_CALL ppa_glDepthFunc(Layer *_layer, GLenum func)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glDepthFunc( func );

  RglDepthFunc( orig, func );

}

static void REGAL_CALL ppa_glDepthMask(Layer *_layer, GLboolean flag)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glDepthMask( flag );

  RglDepthMask( orig, flag );

}

static void REGAL_CALL ppa_glDepthRange(Layer *_layer, GLclampd zNear, GLclampd zFar)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glDepthRange( zNear, zFar );

  RglDepthRange( orig, zNear, zFar );

}

static void REGAL_CALL ppa_glDepthRangeArrayv(Layer *_layer, GLuint first, GLsizei count, const GLclampd *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glDepthRangeArrayv( first, count, v );

  RglDepthRangeArrayv( orig, first, count, v );

}

static void REGAL_CALL ppa_glDepthRangeIndexed(Layer *_layer, GLuint index, GLclampd n, GLclampd f)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glDepthRangeIndexed( index, n, f );

  RglDepthRangeIndexed( orig, index, n, f );

}

static void REGAL_CALL ppa_glDepthRangef(Layer *_layer, GLclampf n, GLclampf f)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glDepthRange( n, f );

  RglDepthRangef( orig, n, f );

}

static void REGAL_CALL ppa_glDisable(Layer *_layer, GLenum cap)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->Disable(cap ) ) {
    return;
  }

  RglDisable( orig, cap );

}

static void REGAL_CALL ppa_glDisablei(Layer *_layer, GLenum cap, GLuint index)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->Disablei(cap, index ) ) {
    return;
  }

  RglDisablei( orig, cap, index );

}

static void REGAL_CALL ppa_glDrawBuffer(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
    self->glDrawBuffer( mode );

  RglDrawBuffer( orig, mode );

}

static void REGAL_CALL ppa_glDrawBuffers(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
    self->glDrawBuffers( n, bufs );

  RglDrawBuffers( orig, n, bufs );

}

static void REGAL_CALL ppa_glDrawBuffersARB(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
    self->glDrawBuffers( n, bufs );

  RglDrawBuffersARB( orig, n, bufs );

}

static void REGAL_CALL ppa_glDrawBuffersNV(Layer *_layer, GLsizei n, const GLenum *bufs)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
    self->glDrawBuffers( n, bufs );

  RglDrawBuffersNV( orig, n, bufs );

}

static void REGAL_CALL ppa_glEnable(Layer *_layer, GLenum cap)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->Enable(cap ) ) {
    return;
  }

  RglEnable( orig, cap );

}

static void REGAL_CALL ppa_glEnablei(Layer *_layer, GLenum cap, GLuint index)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->Enablei(cap, index ) ) {
    return;
  }

  RglEnablei( orig, cap, index );

}

static void REGAL_CALL ppa_glFrontFace(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glFrontFace( mode );

  RglFrontFace( orig, mode );

}

static void REGAL_CALL ppa_glGetBooleani_v(Layer *_layer, GLenum target, GLuint index, GLboolean *data)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, data ) ) {
    return;
  }

  RglGetBooleani_v( orig, target, index, data );

}

static void REGAL_CALL ppa_glGetBooleanv(Layer *_layer, GLenum pname, GLboolean *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetv(pname, params ) ) {
    return;
  }

  RglGetBooleanv( orig, pname, params );

}

static void REGAL_CALL ppa_glGetColorTableParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetColorTableParameterv(target, pname, params ) ) {
    return;
  }

  RglGetColorTableParameterfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetColorTableParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetColorTableParameterv(target, pname, params ) ) {
    return;
  }

  RglGetColorTableParameteriv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetConvolutionParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetConvolutionParameterv(target, pname, params ) ) {
    return;
  }

  RglGetConvolutionParameterfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetConvolutionParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetConvolutionParameterv(target, pname, params ) ) {
    return;
  }

  RglGetConvolutionParameteriv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetDoublei_v(Layer *_layer, GLenum target, GLuint index, GLdouble *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, v ) ) {
    return;
  }

  RglGetDoublei_v( orig, target, index, v );

}

static void REGAL_CALL ppa_glGetDoublei_vEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, data ) ) {
    return;
  }

  RglGetDoublei_vEXT( orig, target, index, data );

}

static void REGAL_CALL ppa_glGetDoublev(Layer *_layer, GLenum pname, GLdouble *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetv(pname, params ) ) {
    return;
  }

  RglGetDoublev( orig, pname, params );

}

static void REGAL_CALL ppa_glGetFloati_v(Layer *_layer, GLenum target, GLuint index, GLfloat *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, v ) ) {
    return;
  }

  RglGetFloati_v( orig, target, index, v );

}

static void REGAL_CALL ppa_glGetFloati_vEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, data ) ) {
    return;
  }

  RglGetFloati_vEXT( orig, target, index, data );

}

static void REGAL_CALL ppa_glGetFloatv(Layer *_layer, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetv(pname, params ) ) {
    return;
  }

  RglGetFloatv( orig, pname, params );

}

static void REGAL_CALL ppa_glGetIntegeri_v(Layer *_layer, GLenum target, GLuint index, GLint *data)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, data ) ) {
    return;
  }

  RglGetIntegeri_v( orig, target, index, data );

}

static void REGAL_CALL ppa_glGetIntegeri_vEXT(Layer *_layer, GLenum target, GLuint index, GLint *data)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGeti_v(target, index, data ) ) {
    return;
  }

  RglGetIntegeri_vEXT( orig, target, index, data );

}

static void REGAL_CALL ppa_glGetIntegerv(Layer *_layer, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetv(pname, params ) ) {
    return;
  }

  RglGetIntegerv( orig, pname, params );

}

static void REGAL_CALL ppa_glGetLightfv(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetLightv(light, pname, params ) ) {
    return;
  }

  RglGetLightfv( orig, light, pname, params );

}

static void REGAL_CALL ppa_glGetLightiv(Layer *_layer, GLenum light, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetLightv(light, pname, params ) ) {
    return;
  }

  RglGetLightiv( orig, light, pname, params );

}

static void REGAL_CALL ppa_glGetLightxv(Layer *_layer, GLenum light, GLenum pname, GLfixed *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetLightv(light, pname, params ) ) {
    return;
  }

  RglGetLightxv( orig, light, pname, params );

}

static void REGAL_CALL ppa_glGetMaterialfv(Layer *_layer, GLenum face, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetMaterialv(face, pname, params ) ) {
    return;
  }

  RglGetMaterialfv( orig, face, pname, params );

}

static void REGAL_CALL ppa_glGetMaterialiv(Layer *_layer, GLenum face, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetMaterialv(face, pname, params ) ) {
    return;
  }

  RglGetMaterialiv( orig, face, pname, params );

}

static void REGAL_CALL ppa_glGetMaterialxv(Layer *_layer, GLenum face, GLenum pname, GLfixed *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetMaterialv(face, pname, params ) ) {
    return;
  }

  RglGetMaterialxv( orig, face, pname, params );

}

static void REGAL_CALL ppa_glGetMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetMultiTexEnvv(texunit, target, pname, params ) ) {
    return;
  }

  RglGetMultiTexEnvfvEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL ppa_glGetMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetMultiTexEnvv(texunit, target, pname, params ) ) {
    return;
  }

  RglGetMultiTexEnvivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL ppa_glGetPolygonStipple(Layer *_layer, GLubyte *mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetPolygonStipple(mask ) ) {
    return;
  }

  RglGetPolygonStipple( orig, mask );

}

static void REGAL_CALL ppa_glGetTexEnvfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTexEnvv(target, pname, params ) ) {
    return;
  }

  RglGetTexEnvfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetTexEnviv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTexEnvv(target, pname, params ) ) {
    return;
  }

  RglGetTexEnviv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetTexLevelParameterfv(Layer *_layer, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTexLevelParameter(target, level, pname, params ) ) {
    return;
  }

  RglGetTexLevelParameterfv( orig, target, level, pname, params );

}

static void REGAL_CALL ppa_glGetTexLevelParameteriv(Layer *_layer, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTexLevelParameter(target, level, pname, params ) ) {
    return;
  }

  RglGetTexLevelParameteriv( orig, target, level, pname, params );

}

static void REGAL_CALL ppa_glGetTexParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTexParameter(target, pname, params ) ) {
    return;
  }

  RglGetTexParameterfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetTexParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTexParameter(target, pname, params ) ) {
    return;
  }

  RglGetTexParameteriv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glGetTextureLevelParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTextureLevelParameter(texture, target, level, pname, params ) ) {
    return;
  }

  RglGetTextureLevelParameterfvEXT( orig, texture, target, level, pname, params );

}

static void REGAL_CALL ppa_glGetTextureLevelParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTextureLevelParameter(texture, target, level, pname, params ) ) {
    return;
  }

  RglGetTextureLevelParameterivEXT( orig, texture, target, level, pname, params );

}

static void REGAL_CALL ppa_glGetTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTextureParameter(texture, target, pname, params ) ) {
    return;
  }

  RglGetTextureParameterfvEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL ppa_glGetTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  if( self->glGetTextureParameter(texture, target, pname, params ) ) {
    return;
  }

  RglGetTextureParameterivEXT( orig, texture, target, pname, params );

}

static void REGAL_CALL ppa_glHint(Layer *_layer, GLenum target, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glHint( target, mode );

  RglHint( orig, target, mode );

}

static void REGAL_CALL ppa_glIndexMask(Layer *_layer, GLuint mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glIndexMask( mask );

  RglIndexMask( orig, mask );

}

static GLboolean REGAL_CALL ppa_glIsEnabled(Layer *_layer, GLenum cap)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  GLboolean enabled;
  if( self->glIsEnabled(enabled, cap ) ) {
    return enabled;
  }

  return RglIsEnabled( orig, cap );

}

static GLboolean REGAL_CALL ppa_glIsEnabledi(Layer *_layer, GLenum target, GLuint index)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  GLboolean enabled;
  if( self->glIsEnabledi(enabled, target, index ) ) {
    return enabled;
  }

  return RglIsEnabledi( orig, target, index );

}

static void REGAL_CALL ppa_glLightModelf(Layer *_layer, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLightModel( pname, param );

  RglLightModelf( orig, pname, param );

}

static void REGAL_CALL ppa_glLightModelfv(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLightModelv( pname, params );

  RglLightModelfv( orig, pname, params );

}

static void REGAL_CALL ppa_glLightModeli(Layer *_layer, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLightModel( pname, param );

  RglLightModeli( orig, pname, param );

}

static void REGAL_CALL ppa_glLightModeliv(Layer *_layer, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLightModelv( pname, params );

  RglLightModeliv( orig, pname, params );

}

static void REGAL_CALL ppa_glLightf(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLight( light, pname, param );

  RglLightf( orig, light, pname, param );

}

static void REGAL_CALL ppa_glLightfv(Layer *_layer, GLenum light, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLightv( light, pname, params );

  RglLightfv( orig, light, pname, params );

}

static void REGAL_CALL ppa_glLighti(Layer *_layer, GLenum light, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLight( light, pname, param );

  RglLighti( orig, light, pname, param );

}

static void REGAL_CALL ppa_glLightiv(Layer *_layer, GLenum light, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLightv( light, pname, params );

  RglLightiv( orig, light, pname, params );

}

static void REGAL_CALL ppa_glLineStipple(Layer *_layer, GLint factor, GLushort pattern)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLineStipple( factor, pattern );

  RglLineStipple( orig, factor, pattern );

}

static void REGAL_CALL ppa_glLineWidth(Layer *_layer, GLfloat width)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLineWidth( width );

  RglLineWidth( orig, width );

}

static void REGAL_CALL ppa_glListBase(Layer *_layer, GLuint base)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glListBase( base );

  RglListBase( orig, base );

}

static void REGAL_CALL ppa_glLogicOp(Layer *_layer, GLenum opcode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glLogicOp( opcode );

  RglLogicOp( orig, opcode );

}

static void REGAL_CALL ppa_glMapGrid1d(Layer *_layer, GLint un, GLdouble u1, GLdouble u2)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMapGrid1( un, u1, u2 );

  RglMapGrid1d( orig, un, u1, u2 );

}

static void REGAL_CALL ppa_glMapGrid1f(Layer *_layer, GLint un, GLfloat u1, GLfloat u2)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMapGrid1( un, u1, u2 );

  RglMapGrid1f( orig, un, u1, u2 );

}

static void REGAL_CALL ppa_glMapGrid2d(Layer *_layer, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMapGrid2( un, u1, u2, vn, v1, v2 );

  RglMapGrid2d( orig, un, u1, u2, vn, v1, v2 );

}

static void REGAL_CALL ppa_glMapGrid2f(Layer *_layer, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMapGrid2( un, u1, u2, vn, v1, v2 );

  RglMapGrid2f( orig, un, u1, u2, vn, v1, v2 );

}

static void REGAL_CALL ppa_glMaterialf(Layer *_layer, GLenum face, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMaterial( face, pname, param );

  RglMaterialf( orig, face, pname, param );

}

static void REGAL_CALL ppa_glMaterialfv(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMaterialv( face, pname, params );

  RglMaterialfv( orig, face, pname, params );

}

static void REGAL_CALL ppa_glMateriali(Layer *_layer, GLenum face, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMaterial( face, pname, param );

  RglMateriali( orig, face, pname, param );

}

static void REGAL_CALL ppa_glMaterialiv(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMaterialv( face, pname, params );

  RglMaterialiv( orig, face, pname, params );

}

static void REGAL_CALL ppa_glMatrixMode(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMatrixMode( mode );

  RglMatrixMode( orig, mode );

}

static void REGAL_CALL ppa_glMinSampleShading(Layer *_layer, GLclampf value)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMinSampleShading( value );

  RglMinSampleShading( orig, value );

}

static void REGAL_CALL ppa_glMultiTexEnvfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMultiTexEnv( texunit, target, pname, param );

  RglMultiTexEnvfEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL ppa_glMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMultiTexEnvv( texunit, target, pname, params );

  RglMultiTexEnvfvEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL ppa_glMultiTexEnviEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMultiTexEnv( texunit, target, pname, param );

  RglMultiTexEnviEXT( orig, texunit, target, pname, param );

}

static void REGAL_CALL ppa_glMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glMultiTexEnvv( texunit, target, pname, params );

  RglMultiTexEnvivEXT( orig, texunit, target, pname, params );

}

static void REGAL_CALL ppa_glPixelTransferf(Layer *_layer, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPixelTransfer( pname, param );

  RglPixelTransferf( orig, pname, param );

}

static void REGAL_CALL ppa_glPixelTransferi(Layer *_layer, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPixelTransfer( pname, param );

  RglPixelTransferi( orig, pname, param );

}

static void REGAL_CALL ppa_glPixelZoom(Layer *_layer, GLfloat xfactor, GLfloat yfactor)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPixelZoom( xfactor, yfactor );

  RglPixelZoom( orig, xfactor, yfactor );

}

static void REGAL_CALL ppa_glPointParameterf(Layer *_layer, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPointParameter( pname, param );

  RglPointParameterf( orig, pname, param );

}

static void REGAL_CALL ppa_glPointParameterfv(Layer *_layer, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPointParameterv( pname, params );

  RglPointParameterfv( orig, pname, params );

}

static void REGAL_CALL ppa_glPointParameteri(Layer *_layer, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPointParameter( pname, param );

  RglPointParameteri( orig, pname, param );

}

static void REGAL_CALL ppa_glPointParameteriv(Layer *_layer, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPointParameterv( pname, params );

  RglPointParameteriv( orig, pname, params );

}

static void REGAL_CALL ppa_glPointSize(Layer *_layer, GLfloat size)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPointSize( size );

  RglPointSize( orig, size );

}

static void REGAL_CALL ppa_glPolygonMode(Layer *_layer, GLenum face, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPolygonMode( face, mode );

  RglPolygonMode( orig, face, mode );

}

static void REGAL_CALL ppa_glPolygonOffset(Layer *_layer, GLfloat factor, GLfloat units)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPolygonOffset( factor, units );

  RglPolygonOffset( orig, factor, units );

}

static void REGAL_CALL ppa_glPolygonStipple(Layer *_layer, const GLubyte *mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glPolygonStipple( mask );

  RglPolygonStipple( orig, mask );

}

static void REGAL_CALL ppa_glPopAttrib(Layer *_layer)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  self->PopAttrib(); return;

  RglPopAttrib( orig );

}

static void REGAL_CALL ppa_glProvokingVertex(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glProvokingVertex( mode );

  RglProvokingVertex( orig, mode );

}

static void REGAL_CALL ppa_glPushAttrib(Layer *_layer, GLbitfield mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // impl
  self->PushAttrib(mask ); return;

  RglPushAttrib( orig, mask );

}

static void REGAL_CALL ppa_glReadBuffer(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glReadBuffer( mode );

  RglReadBuffer( orig, mode );

}

static void REGAL_CALL ppa_glSampleCoverage(Layer *_layer, GLclampf value, GLboolean invert)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glSampleCoverage( value, invert );

  RglSampleCoverage( orig, value, invert );

}

static void REGAL_CALL ppa_glScissor(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glScissor( x, y, width, height );

  RglScissor( orig, x, y, width, height );

}

static void REGAL_CALL ppa_glScissorArrayv(Layer *_layer, GLuint first, GLsizei count, const GLint *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glScissorArrayv( first, count, v );

  RglScissorArrayv( orig, first, count, v );

}

static void REGAL_CALL ppa_glScissorIndexed(Layer *_layer, GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glScissorIndexed( index, left, bottom, width, height );

  RglScissorIndexed( orig, index, left, bottom, width, height );

}

static void REGAL_CALL ppa_glScissorIndexedv(Layer *_layer, GLuint index, const GLint *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glScissorIndexedv( index, v );

  RglScissorIndexedv( orig, index, v );

}

static void REGAL_CALL ppa_glShadeModel(Layer *_layer, GLenum mode)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glShadeModel( mode );

  RglShadeModel( orig, mode );

}

static void REGAL_CALL ppa_glStencilFunc(Layer *_layer, GLenum func, GLint ref, GLuint mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glStencilFunc( func, ref, mask );

  RglStencilFunc( orig, func, ref, mask );

}

static void REGAL_CALL ppa_glStencilFuncSeparate(Layer *_layer, GLenum face, GLenum func, GLint ref, GLuint mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glStencilFuncSeparate( face, func, ref, mask );

  RglStencilFuncSeparate( orig, face, func, ref, mask );

}

static void REGAL_CALL ppa_glStencilMask(Layer *_layer, GLuint mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glStencilMask( mask );

  RglStencilMask( orig, mask );

}

static void REGAL_CALL ppa_glStencilMaskSeparate(Layer *_layer, GLenum face, GLuint mask)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glStencilMaskSeparate( face, mask );

  RglStencilMaskSeparate( orig, face, mask );

}

static void REGAL_CALL ppa_glStencilOp(Layer *_layer, GLenum fail, GLenum zfail, GLenum zpass)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glStencilOp( fail, zfail, zpass );

  RglStencilOp( orig, fail, zfail, zpass );

}

static void REGAL_CALL ppa_glStencilOpSeparate(Layer *_layer, GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glStencilOpSeparate( face, fail, zfail, zpass );

  RglStencilOpSeparate( orig, face, fail, zfail, zpass );

}

static void REGAL_CALL ppa_glTexEnvf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glTexEnv( target, pname, param );

  RglTexEnvf( orig, target, pname, param );

}

static void REGAL_CALL ppa_glTexEnvfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glTexEnvv( target, pname, params );

  RglTexEnvfv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glTexEnvi(Layer *_layer, GLenum target, GLenum pname, GLint param)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glTexEnv( target, pname, param );

  RglTexEnvi( orig, target, pname, param );

}

static void REGAL_CALL ppa_glTexEnviv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glTexEnvv( target, pname, params );

  RglTexEnviv( orig, target, pname, params );

}

static void REGAL_CALL ppa_glViewport(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glViewport( x, y, width, height );

  RglViewport( orig, x, y, width, height );

}

static void REGAL_CALL ppa_glViewportArrayv(Layer *_layer, GLuint first, GLsizei count, const GLfloat *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glViewportArrayv( first, count, v );

  RglViewportArrayv( orig, first, count, v );

}

static void REGAL_CALL ppa_glViewportIndexedf(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glViewportIndexedf( index, x, y, w, h );

  RglViewportIndexedf( orig, index, x, y, w, h );

}

static void REGAL_CALL ppa_glViewportIndexedfv(Layer *_layer, GLuint index, const GLfloat *v)
{
  Ppa * self = static_cast<Ppa *>(_layer);

  PpaOriginate & orig = self->orig;

  // prefix
  self->glViewportIndexedfv( index, v );

  RglViewportIndexedfv( orig, index, v );

}

void PpaIntercept( Layer *layer, Dispatch::GL & dt ) {
  dt.glActiveTexture                 = MakeRegalProc(ppa_glActiveTexture, layer);
  dt.glActiveTextureARB              = MakeRegalProc(ppa_glActiveTextureARB, layer);
  dt.glAlphaFunc                     = MakeRegalProc(ppa_glAlphaFunc, layer);
  dt.glBlendColor                    = MakeRegalProc(ppa_glBlendColor, layer);
  dt.glBlendEquation                 = MakeRegalProc(ppa_glBlendEquation, layer);
  dt.glBlendEquationSeparate         = MakeRegalProc(ppa_glBlendEquationSeparate, layer);
  dt.glBlendEquationSeparatei        = MakeRegalProc(ppa_glBlendEquationSeparatei, layer);
  dt.glBlendEquationi                = MakeRegalProc(ppa_glBlendEquationi, layer);
  dt.glBlendFunc                     = MakeRegalProc(ppa_glBlendFunc, layer);
  dt.glBlendFuncSeparate             = MakeRegalProc(ppa_glBlendFuncSeparate, layer);
  dt.glBlendFuncSeparatei            = MakeRegalProc(ppa_glBlendFuncSeparatei, layer);
  dt.glBlendFunci                    = MakeRegalProc(ppa_glBlendFunci, layer);
  dt.glClampColor                    = MakeRegalProc(ppa_glClampColor, layer);
  dt.glClearAccum                    = MakeRegalProc(ppa_glClearAccum, layer);
  dt.glClearColor                    = MakeRegalProc(ppa_glClearColor, layer);
  dt.glClearDepth                    = MakeRegalProc(ppa_glClearDepth, layer);
  dt.glClearDepthf                   = MakeRegalProc(ppa_glClearDepthf, layer);
  dt.glClearIndex                    = MakeRegalProc(ppa_glClearIndex, layer);
  dt.glClearStencil                  = MakeRegalProc(ppa_glClearStencil, layer);
  dt.glClipPlane                     = MakeRegalProc(ppa_glClipPlane, layer);
  dt.glColorMask                     = MakeRegalProc(ppa_glColorMask, layer);
  dt.glColorMaski                    = MakeRegalProc(ppa_glColorMaski, layer);
  dt.glColorMaterial                 = MakeRegalProc(ppa_glColorMaterial, layer);
  dt.glColorTableParameterfv         = MakeRegalProc(ppa_glColorTableParameterfv, layer);
  dt.glColorTableParameteriv         = MakeRegalProc(ppa_glColorTableParameteriv, layer);
  dt.glConvolutionParameterf         = MakeRegalProc(ppa_glConvolutionParameterf, layer);
  dt.glConvolutionParameterfv        = MakeRegalProc(ppa_glConvolutionParameterfv, layer);
  dt.glConvolutionParameteri         = MakeRegalProc(ppa_glConvolutionParameteri, layer);
  dt.glConvolutionParameteriv        = MakeRegalProc(ppa_glConvolutionParameteriv, layer);
  dt.glCullFace                      = MakeRegalProc(ppa_glCullFace, layer);
  dt.glDepthFunc                     = MakeRegalProc(ppa_glDepthFunc, layer);
  dt.glDepthMask                     = MakeRegalProc(ppa_glDepthMask, layer);
  dt.glDepthRange                    = MakeRegalProc(ppa_glDepthRange, layer);
  dt.glDepthRangeArrayv              = MakeRegalProc(ppa_glDepthRangeArrayv, layer);
  dt.glDepthRangeIndexed             = MakeRegalProc(ppa_glDepthRangeIndexed, layer);
  dt.glDepthRangef                   = MakeRegalProc(ppa_glDepthRangef, layer);
  dt.glDisable                       = MakeRegalProc(ppa_glDisable, layer);
  dt.glDisablei                      = MakeRegalProc(ppa_glDisablei, layer);
  dt.glDrawBuffer                    = MakeRegalProc(ppa_glDrawBuffer, layer);
  dt.glDrawBuffers                   = MakeRegalProc(ppa_glDrawBuffers, layer);
  dt.glDrawBuffersARB                = MakeRegalProc(ppa_glDrawBuffersARB, layer);
  dt.glDrawBuffersNV                 = MakeRegalProc(ppa_glDrawBuffersNV, layer);
  dt.glEnable                        = MakeRegalProc(ppa_glEnable, layer);
  dt.glEnablei                       = MakeRegalProc(ppa_glEnablei, layer);
  dt.glFrontFace                     = MakeRegalProc(ppa_glFrontFace, layer);
  dt.glGetBooleani_v                 = MakeRegalProc(ppa_glGetBooleani_v, layer);
  dt.glGetBooleanv                   = MakeRegalProc(ppa_glGetBooleanv, layer);
  dt.glGetColorTableParameterfv      = MakeRegalProc(ppa_glGetColorTableParameterfv, layer);
  dt.glGetColorTableParameteriv      = MakeRegalProc(ppa_glGetColorTableParameteriv, layer);
  dt.glGetConvolutionParameterfv     = MakeRegalProc(ppa_glGetConvolutionParameterfv, layer);
  dt.glGetConvolutionParameteriv     = MakeRegalProc(ppa_glGetConvolutionParameteriv, layer);
  dt.glGetDoublei_v                  = MakeRegalProc(ppa_glGetDoublei_v, layer);
  dt.glGetDoublei_vEXT               = MakeRegalProc(ppa_glGetDoublei_vEXT, layer);
  dt.glGetDoublev                    = MakeRegalProc(ppa_glGetDoublev, layer);
  dt.glGetFloati_v                   = MakeRegalProc(ppa_glGetFloati_v, layer);
  dt.glGetFloati_vEXT                = MakeRegalProc(ppa_glGetFloati_vEXT, layer);
  dt.glGetFloatv                     = MakeRegalProc(ppa_glGetFloatv, layer);
  dt.glGetIntegeri_v                 = MakeRegalProc(ppa_glGetIntegeri_v, layer);
  dt.glGetIntegeri_vEXT              = MakeRegalProc(ppa_glGetIntegeri_vEXT, layer);
  dt.glGetIntegerv                   = MakeRegalProc(ppa_glGetIntegerv, layer);
  dt.glGetLightfv                    = MakeRegalProc(ppa_glGetLightfv, layer);
  dt.glGetLightiv                    = MakeRegalProc(ppa_glGetLightiv, layer);
  dt.glGetLightxv                    = MakeRegalProc(ppa_glGetLightxv, layer);
  dt.glGetMaterialfv                 = MakeRegalProc(ppa_glGetMaterialfv, layer);
  dt.glGetMaterialiv                 = MakeRegalProc(ppa_glGetMaterialiv, layer);
  dt.glGetMaterialxv                 = MakeRegalProc(ppa_glGetMaterialxv, layer);
  dt.glGetMultiTexEnvfvEXT           = MakeRegalProc(ppa_glGetMultiTexEnvfvEXT, layer);
  dt.glGetMultiTexEnvivEXT           = MakeRegalProc(ppa_glGetMultiTexEnvivEXT, layer);
  dt.glGetPolygonStipple             = MakeRegalProc(ppa_glGetPolygonStipple, layer);
  dt.glGetTexEnvfv                   = MakeRegalProc(ppa_glGetTexEnvfv, layer);
  dt.glGetTexEnviv                   = MakeRegalProc(ppa_glGetTexEnviv, layer);
  dt.glGetTexLevelParameterfv        = MakeRegalProc(ppa_glGetTexLevelParameterfv, layer);
  dt.glGetTexLevelParameteriv        = MakeRegalProc(ppa_glGetTexLevelParameteriv, layer);
  dt.glGetTexParameterfv             = MakeRegalProc(ppa_glGetTexParameterfv, layer);
  dt.glGetTexParameteriv             = MakeRegalProc(ppa_glGetTexParameteriv, layer);
  dt.glGetTextureLevelParameterfvEXT = MakeRegalProc(ppa_glGetTextureLevelParameterfvEXT, layer);
  dt.glGetTextureLevelParameterivEXT = MakeRegalProc(ppa_glGetTextureLevelParameterivEXT, layer);
  dt.glGetTextureParameterfvEXT      = MakeRegalProc(ppa_glGetTextureParameterfvEXT, layer);
  dt.glGetTextureParameterivEXT      = MakeRegalProc(ppa_glGetTextureParameterivEXT, layer);
  dt.glHint                          = MakeRegalProc(ppa_glHint, layer);
  dt.glIndexMask                     = MakeRegalProc(ppa_glIndexMask, layer);
  dt.glIsEnabled                     = MakeRegalProc(ppa_glIsEnabled, layer);
  dt.glIsEnabledi                    = MakeRegalProc(ppa_glIsEnabledi, layer);
  dt.glLightModelf                   = MakeRegalProc(ppa_glLightModelf, layer);
  dt.glLightModelfv                  = MakeRegalProc(ppa_glLightModelfv, layer);
  dt.glLightModeli                   = MakeRegalProc(ppa_glLightModeli, layer);
  dt.glLightModeliv                  = MakeRegalProc(ppa_glLightModeliv, layer);
  dt.glLightf                        = MakeRegalProc(ppa_glLightf, layer);
  dt.glLightfv                       = MakeRegalProc(ppa_glLightfv, layer);
  dt.glLighti                        = MakeRegalProc(ppa_glLighti, layer);
  dt.glLightiv                       = MakeRegalProc(ppa_glLightiv, layer);
  dt.glLineStipple                   = MakeRegalProc(ppa_glLineStipple, layer);
  dt.glLineWidth                     = MakeRegalProc(ppa_glLineWidth, layer);
  dt.glListBase                      = MakeRegalProc(ppa_glListBase, layer);
  dt.glLogicOp                       = MakeRegalProc(ppa_glLogicOp, layer);
  dt.glMapGrid1d                     = MakeRegalProc(ppa_glMapGrid1d, layer);
  dt.glMapGrid1f                     = MakeRegalProc(ppa_glMapGrid1f, layer);
  dt.glMapGrid2d                     = MakeRegalProc(ppa_glMapGrid2d, layer);
  dt.glMapGrid2f                     = MakeRegalProc(ppa_glMapGrid2f, layer);
  dt.glMaterialf                     = MakeRegalProc(ppa_glMaterialf, layer);
  dt.glMaterialfv                    = MakeRegalProc(ppa_glMaterialfv, layer);
  dt.glMateriali                     = MakeRegalProc(ppa_glMateriali, layer);
  dt.glMaterialiv                    = MakeRegalProc(ppa_glMaterialiv, layer);
  dt.glMatrixMode                    = MakeRegalProc(ppa_glMatrixMode, layer);
  dt.glMinSampleShading              = MakeRegalProc(ppa_glMinSampleShading, layer);
  dt.glMultiTexEnvfEXT               = MakeRegalProc(ppa_glMultiTexEnvfEXT, layer);
  dt.glMultiTexEnvfvEXT              = MakeRegalProc(ppa_glMultiTexEnvfvEXT, layer);
  dt.glMultiTexEnviEXT               = MakeRegalProc(ppa_glMultiTexEnviEXT, layer);
  dt.glMultiTexEnvivEXT              = MakeRegalProc(ppa_glMultiTexEnvivEXT, layer);
  dt.glPixelTransferf                = MakeRegalProc(ppa_glPixelTransferf, layer);
  dt.glPixelTransferi                = MakeRegalProc(ppa_glPixelTransferi, layer);
  dt.glPixelZoom                     = MakeRegalProc(ppa_glPixelZoom, layer);
  dt.glPointParameterf               = MakeRegalProc(ppa_glPointParameterf, layer);
  dt.glPointParameterfv              = MakeRegalProc(ppa_glPointParameterfv, layer);
  dt.glPointParameteri               = MakeRegalProc(ppa_glPointParameteri, layer);
  dt.glPointParameteriv              = MakeRegalProc(ppa_glPointParameteriv, layer);
  dt.glPointSize                     = MakeRegalProc(ppa_glPointSize, layer);
  dt.glPolygonMode                   = MakeRegalProc(ppa_glPolygonMode, layer);
  dt.glPolygonOffset                 = MakeRegalProc(ppa_glPolygonOffset, layer);
  dt.glPolygonStipple                = MakeRegalProc(ppa_glPolygonStipple, layer);
  dt.glPopAttrib                     = MakeRegalProc(ppa_glPopAttrib, layer);
  dt.glProvokingVertex               = MakeRegalProc(ppa_glProvokingVertex, layer);
  dt.glPushAttrib                    = MakeRegalProc(ppa_glPushAttrib, layer);
  dt.glReadBuffer                    = MakeRegalProc(ppa_glReadBuffer, layer);
  dt.glSampleCoverage                = MakeRegalProc(ppa_glSampleCoverage, layer);
  dt.glScissor                       = MakeRegalProc(ppa_glScissor, layer);
  dt.glScissorArrayv                 = MakeRegalProc(ppa_glScissorArrayv, layer);
  dt.glScissorIndexed                = MakeRegalProc(ppa_glScissorIndexed, layer);
  dt.glScissorIndexedv               = MakeRegalProc(ppa_glScissorIndexedv, layer);
  dt.glShadeModel                    = MakeRegalProc(ppa_glShadeModel, layer);
  dt.glStencilFunc                   = MakeRegalProc(ppa_glStencilFunc, layer);
  dt.glStencilFuncSeparate           = MakeRegalProc(ppa_glStencilFuncSeparate, layer);
  dt.glStencilMask                   = MakeRegalProc(ppa_glStencilMask, layer);
  dt.glStencilMaskSeparate           = MakeRegalProc(ppa_glStencilMaskSeparate, layer);
  dt.glStencilOp                     = MakeRegalProc(ppa_glStencilOp, layer);
  dt.glStencilOpSeparate             = MakeRegalProc(ppa_glStencilOpSeparate, layer);
  dt.glTexEnvf                       = MakeRegalProc(ppa_glTexEnvf, layer);
  dt.glTexEnvfv                      = MakeRegalProc(ppa_glTexEnvfv, layer);
  dt.glTexEnvi                       = MakeRegalProc(ppa_glTexEnvi, layer);
  dt.glTexEnviv                      = MakeRegalProc(ppa_glTexEnviv, layer);
  dt.glViewport                      = MakeRegalProc(ppa_glViewport, layer);
  dt.glViewportArrayv                = MakeRegalProc(ppa_glViewportArrayv, layer);
  dt.glViewportIndexedf              = MakeRegalProc(ppa_glViewportIndexedf, layer);
  dt.glViewportIndexedfv             = MakeRegalProc(ppa_glViewportIndexedfv, layer);
}

REGAL_NAMESPACE_END
