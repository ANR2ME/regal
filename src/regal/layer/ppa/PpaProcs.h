/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#ifndef REGAL_EMU_PROCS_PPA_H
#define REGAL_EMU_PROCS_PPA_H

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

void EmuProcsInterceptPpa( Dispatch::GL & dt );

struct EmuProcsOriginatePpa {

  EmuProcsOriginatePpa() {
    memset(this, 0, sizeof( *this ) );
  }

  REGALGLACTIVETEXTUREPROC glActiveTexture;
  REGALGLACTIVETEXTUREARBPROC glActiveTextureARB;
  REGALGLALPHAFUNCPROC glAlphaFunc;
  REGALGLBLENDCOLORPROC glBlendColor;
  REGALGLBLENDEQUATIONPROC glBlendEquation;
  REGALGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
  REGALGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
  REGALGLBLENDEQUATIONIPROC glBlendEquationi;
  REGALGLBLENDFUNCPROC glBlendFunc;
  REGALGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
  REGALGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
  REGALGLBLENDFUNCIPROC glBlendFunci;
  REGALGLCLAMPCOLORPROC glClampColor;
  REGALGLCLEARACCUMPROC glClearAccum;
  REGALGLCLEARCOLORPROC glClearColor;
  REGALGLCLEARDEPTHPROC glClearDepth;
  REGALGLCLEARDEPTHFPROC glClearDepthf;
  REGALGLCLEARINDEXPROC glClearIndex;
  REGALGLCLEARSTENCILPROC glClearStencil;
  REGALGLCLIPPLANEPROC glClipPlane;
  REGALGLCOLORMASKPROC glColorMask;
  REGALGLCOLORMASKIPROC glColorMaski;
  REGALGLCOLORMATERIALPROC glColorMaterial;
  REGALGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
  REGALGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
  REGALGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
  REGALGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
  REGALGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
  REGALGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
  REGALGLCULLFACEPROC glCullFace;
  REGALGLDEPTHFUNCPROC glDepthFunc;
  REGALGLDEPTHMASKPROC glDepthMask;
  REGALGLDEPTHRANGEPROC glDepthRange;
  REGALGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
  REGALGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
  REGALGLDEPTHRANGEFPROC glDepthRangef;
  REGALGLDISABLEPROC glDisable;
  REGALGLDISABLEIPROC glDisablei;
  REGALGLDRAWBUFFERPROC glDrawBuffer;
  REGALGLDRAWBUFFERSPROC glDrawBuffers;
  REGALGLDRAWBUFFERSARBPROC glDrawBuffersARB;
  REGALGLDRAWBUFFERSNVPROC glDrawBuffersNV;
  REGALGLENABLEPROC glEnable;
  REGALGLENABLEIPROC glEnablei;
  REGALGLFOGFPROC glFogf;
  REGALGLFOGFVPROC glFogfv;
  REGALGLFOGIPROC glFogi;
  REGALGLFRONTFACEPROC glFrontFace;
  REGALGLGETBOOLEANI_VPROC glGetBooleani_v;
  REGALGLGETBOOLEANVPROC glGetBooleanv;
  REGALGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
  REGALGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
  REGALGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
  REGALGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
  REGALGLGETDOUBLEI_VPROC glGetDoublei_v;
  REGALGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
  REGALGLGETDOUBLEVPROC glGetDoublev;
  REGALGLGETFLOATI_VPROC glGetFloati_v;
  REGALGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
  REGALGLGETFLOATVPROC glGetFloatv;
  REGALGLGETINTEGERI_VPROC glGetIntegeri_v;
  REGALGLGETINTEGERI_VEXTPROC glGetIntegeri_vEXT;
  REGALGLGETINTEGERVPROC glGetIntegerv;
  REGALGLGETLIGHTFVPROC glGetLightfv;
  REGALGLGETLIGHTIVPROC glGetLightiv;
  REGALGLGETLIGHTXVPROC glGetLightxv;
  REGALGLGETMATERIALFVPROC glGetMaterialfv;
  REGALGLGETMATERIALIVPROC glGetMaterialiv;
  REGALGLGETMATERIALXVPROC glGetMaterialxv;
  REGALGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
  REGALGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
  REGALGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
  REGALGLGETTEXENVFVPROC glGetTexEnvfv;
  REGALGLGETTEXENVIVPROC glGetTexEnviv;
  REGALGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
  REGALGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
  REGALGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
  REGALGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
  REGALGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
  REGALGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
  REGALGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
  REGALGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
  REGALGLHINTPROC glHint;
  REGALGLINDEXMASKPROC glIndexMask;
  REGALGLISENABLEDPROC glIsEnabled;
  REGALGLISENABLEDIPROC glIsEnabledi;
  REGALGLLIGHTMODELFPROC glLightModelf;
  REGALGLLIGHTMODELFVPROC glLightModelfv;
  REGALGLLIGHTMODELIPROC glLightModeli;
  REGALGLLIGHTMODELIVPROC glLightModeliv;
  REGALGLLIGHTFPROC glLightf;
  REGALGLLIGHTFVPROC glLightfv;
  REGALGLLIGHTIPROC glLighti;
  REGALGLLIGHTIVPROC glLightiv;
  REGALGLLINESTIPPLEPROC glLineStipple;
  REGALGLLINEWIDTHPROC glLineWidth;
  REGALGLLISTBASEPROC glListBase;
  REGALGLLOGICOPPROC glLogicOp;
  REGALGLMAPGRID1DPROC glMapGrid1d;
  REGALGLMAPGRID1FPROC glMapGrid1f;
  REGALGLMAPGRID2DPROC glMapGrid2d;
  REGALGLMAPGRID2FPROC glMapGrid2f;
  REGALGLMATERIALFPROC glMaterialf;
  REGALGLMATERIALFVPROC glMaterialfv;
  REGALGLMATERIALIPROC glMateriali;
  REGALGLMATERIALIVPROC glMaterialiv;
  REGALGLMATRIXMODEPROC glMatrixMode;
  REGALGLMINSAMPLESHADINGPROC glMinSampleShading;
  REGALGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
  REGALGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
  REGALGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
  REGALGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
  REGALGLPIXELTRANSFERFPROC glPixelTransferf;
  REGALGLPIXELTRANSFERIPROC glPixelTransferi;
  REGALGLPIXELZOOMPROC glPixelZoom;
  REGALGLPOINTPARAMETERFPROC glPointParameterf;
  REGALGLPOINTPARAMETERFVPROC glPointParameterfv;
  REGALGLPOINTPARAMETERIPROC glPointParameteri;
  REGALGLPOINTPARAMETERIVPROC glPointParameteriv;
  REGALGLPOINTSIZEPROC glPointSize;
  REGALGLPOLYGONMODEPROC glPolygonMode;
  REGALGLPOLYGONOFFSETPROC glPolygonOffset;
  REGALGLPOLYGONSTIPPLEPROC glPolygonStipple;
  REGALGLPOPATTRIBPROC glPopAttrib;
  REGALGLPROVOKINGVERTEXPROC glProvokingVertex;
  REGALGLPUSHATTRIBPROC glPushAttrib;
  REGALGLREADBUFFERPROC glReadBuffer;
  REGALGLSAMPLECOVERAGEPROC glSampleCoverage;
  REGALGLSCISSORPROC glScissor;
  REGALGLSCISSORARRAYVPROC glScissorArrayv;
  REGALGLSCISSORINDEXEDPROC glScissorIndexed;
  REGALGLSCISSORINDEXEDVPROC glScissorIndexedv;
  REGALGLSHADEMODELPROC glShadeModel;
  REGALGLSTENCILFUNCPROC glStencilFunc;
  REGALGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
  REGALGLSTENCILMASKPROC glStencilMask;
  REGALGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
  REGALGLSTENCILOPPROC glStencilOp;
  REGALGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
  REGALGLTEXENVFPROC glTexEnvf;
  REGALGLTEXENVFVPROC glTexEnvfv;
  REGALGLTEXENVIPROC glTexEnvi;
  REGALGLTEXENVIVPROC glTexEnviv;
  REGALGLVIEWPORTPROC glViewport;
  REGALGLVIEWPORTARRAYVPROC glViewportArrayv;
  REGALGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
  REGALGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;

  void Initialize( Dispatch::GL & dt ) {
    glActiveTexture = dt.glActiveTexture;
    glActiveTextureARB = dt.glActiveTextureARB;
    glAlphaFunc = dt.glAlphaFunc;
    glBlendColor = dt.glBlendColor;
    glBlendEquation = dt.glBlendEquation;
    glBlendEquationSeparate = dt.glBlendEquationSeparate;
    glBlendEquationSeparatei = dt.glBlendEquationSeparatei;
    glBlendEquationi = dt.glBlendEquationi;
    glBlendFunc = dt.glBlendFunc;
    glBlendFuncSeparate = dt.glBlendFuncSeparate;
    glBlendFuncSeparatei = dt.glBlendFuncSeparatei;
    glBlendFunci = dt.glBlendFunci;
    glClampColor = dt.glClampColor;
    glClearAccum = dt.glClearAccum;
    glClearColor = dt.glClearColor;
    glClearDepth = dt.glClearDepth;
    glClearDepthf = dt.glClearDepthf;
    glClearIndex = dt.glClearIndex;
    glClearStencil = dt.glClearStencil;
    glClipPlane = dt.glClipPlane;
    glColorMask = dt.glColorMask;
    glColorMaski = dt.glColorMaski;
    glColorMaterial = dt.glColorMaterial;
    glColorTableParameterfv = dt.glColorTableParameterfv;
    glColorTableParameteriv = dt.glColorTableParameteriv;
    glConvolutionParameterf = dt.glConvolutionParameterf;
    glConvolutionParameterfv = dt.glConvolutionParameterfv;
    glConvolutionParameteri = dt.glConvolutionParameteri;
    glConvolutionParameteriv = dt.glConvolutionParameteriv;
    glCullFace = dt.glCullFace;
    glDepthFunc = dt.glDepthFunc;
    glDepthMask = dt.glDepthMask;
    glDepthRange = dt.glDepthRange;
    glDepthRangeArrayv = dt.glDepthRangeArrayv;
    glDepthRangeIndexed = dt.glDepthRangeIndexed;
    glDepthRangef = dt.glDepthRangef;
    glDisable = dt.glDisable;
    glDisablei = dt.glDisablei;
    glDrawBuffer = dt.glDrawBuffer;
    glDrawBuffers = dt.glDrawBuffers;
    glDrawBuffersARB = dt.glDrawBuffersARB;
    glDrawBuffersNV = dt.glDrawBuffersNV;
    glEnable = dt.glEnable;
    glEnablei = dt.glEnablei;
    glFogf = dt.glFogf;
    glFogfv = dt.glFogfv;
    glFogi = dt.glFogi;
    glFrontFace = dt.glFrontFace;
    glGetBooleani_v = dt.glGetBooleani_v;
    glGetBooleanv = dt.glGetBooleanv;
    glGetColorTableParameterfv = dt.glGetColorTableParameterfv;
    glGetColorTableParameteriv = dt.glGetColorTableParameteriv;
    glGetConvolutionParameterfv = dt.glGetConvolutionParameterfv;
    glGetConvolutionParameteriv = dt.glGetConvolutionParameteriv;
    glGetDoublei_v = dt.glGetDoublei_v;
    glGetDoublei_vEXT = dt.glGetDoublei_vEXT;
    glGetDoublev = dt.glGetDoublev;
    glGetFloati_v = dt.glGetFloati_v;
    glGetFloati_vEXT = dt.glGetFloati_vEXT;
    glGetFloatv = dt.glGetFloatv;
    glGetIntegeri_v = dt.glGetIntegeri_v;
    glGetIntegeri_vEXT = dt.glGetIntegeri_vEXT;
    glGetIntegerv = dt.glGetIntegerv;
    glGetLightfv = dt.glGetLightfv;
    glGetLightiv = dt.glGetLightiv;
    glGetLightxv = dt.glGetLightxv;
    glGetMaterialfv = dt.glGetMaterialfv;
    glGetMaterialiv = dt.glGetMaterialiv;
    glGetMaterialxv = dt.glGetMaterialxv;
    glGetMultiTexEnvfvEXT = dt.glGetMultiTexEnvfvEXT;
    glGetMultiTexEnvivEXT = dt.glGetMultiTexEnvivEXT;
    glGetPolygonStipple = dt.glGetPolygonStipple;
    glGetTexEnvfv = dt.glGetTexEnvfv;
    glGetTexEnviv = dt.glGetTexEnviv;
    glGetTexLevelParameterfv = dt.glGetTexLevelParameterfv;
    glGetTexLevelParameteriv = dt.glGetTexLevelParameteriv;
    glGetTexParameterfv = dt.glGetTexParameterfv;
    glGetTexParameteriv = dt.glGetTexParameteriv;
    glGetTextureLevelParameterfvEXT = dt.glGetTextureLevelParameterfvEXT;
    glGetTextureLevelParameterivEXT = dt.glGetTextureLevelParameterivEXT;
    glGetTextureParameterfvEXT = dt.glGetTextureParameterfvEXT;
    glGetTextureParameterivEXT = dt.glGetTextureParameterivEXT;
    glHint = dt.glHint;
    glIndexMask = dt.glIndexMask;
    glIsEnabled = dt.glIsEnabled;
    glIsEnabledi = dt.glIsEnabledi;
    glLightModelf = dt.glLightModelf;
    glLightModelfv = dt.glLightModelfv;
    glLightModeli = dt.glLightModeli;
    glLightModeliv = dt.glLightModeliv;
    glLightf = dt.glLightf;
    glLightfv = dt.glLightfv;
    glLighti = dt.glLighti;
    glLightiv = dt.glLightiv;
    glLineStipple = dt.glLineStipple;
    glLineWidth = dt.glLineWidth;
    glListBase = dt.glListBase;
    glLogicOp = dt.glLogicOp;
    glMapGrid1d = dt.glMapGrid1d;
    glMapGrid1f = dt.glMapGrid1f;
    glMapGrid2d = dt.glMapGrid2d;
    glMapGrid2f = dt.glMapGrid2f;
    glMaterialf = dt.glMaterialf;
    glMaterialfv = dt.glMaterialfv;
    glMateriali = dt.glMateriali;
    glMaterialiv = dt.glMaterialiv;
    glMatrixMode = dt.glMatrixMode;
    glMinSampleShading = dt.glMinSampleShading;
    glMultiTexEnvfEXT = dt.glMultiTexEnvfEXT;
    glMultiTexEnvfvEXT = dt.glMultiTexEnvfvEXT;
    glMultiTexEnviEXT = dt.glMultiTexEnviEXT;
    glMultiTexEnvivEXT = dt.glMultiTexEnvivEXT;
    glPixelTransferf = dt.glPixelTransferf;
    glPixelTransferi = dt.glPixelTransferi;
    glPixelZoom = dt.glPixelZoom;
    glPointParameterf = dt.glPointParameterf;
    glPointParameterfv = dt.glPointParameterfv;
    glPointParameteri = dt.glPointParameteri;
    glPointParameteriv = dt.glPointParameteriv;
    glPointSize = dt.glPointSize;
    glPolygonMode = dt.glPolygonMode;
    glPolygonOffset = dt.glPolygonOffset;
    glPolygonStipple = dt.glPolygonStipple;
    glPopAttrib = dt.glPopAttrib;
    glProvokingVertex = dt.glProvokingVertex;
    glPushAttrib = dt.glPushAttrib;
    glReadBuffer = dt.glReadBuffer;
    glSampleCoverage = dt.glSampleCoverage;
    glScissor = dt.glScissor;
    glScissorArrayv = dt.glScissorArrayv;
    glScissorIndexed = dt.glScissorIndexed;
    glScissorIndexedv = dt.glScissorIndexedv;
    glShadeModel = dt.glShadeModel;
    glStencilFunc = dt.glStencilFunc;
    glStencilFuncSeparate = dt.glStencilFuncSeparate;
    glStencilMask = dt.glStencilMask;
    glStencilMaskSeparate = dt.glStencilMaskSeparate;
    glStencilOp = dt.glStencilOp;
    glStencilOpSeparate = dt.glStencilOpSeparate;
    glTexEnvf = dt.glTexEnvf;
    glTexEnvfv = dt.glTexEnvfv;
    glTexEnvi = dt.glTexEnvi;
    glTexEnviv = dt.glTexEnviv;
    glViewport = dt.glViewport;
    glViewportArrayv = dt.glViewportArrayv;
    glViewportIndexedf = dt.glViewportIndexedf;
    glViewportIndexedfv = dt.glViewportIndexedfv;
  }
};

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION

#endif // REGAL_EMU_PROCS_PPA_H
