/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_DRIVER && REGAL_LOADER

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalBreak.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatcherGL.h"
#include "RegalDispatcherGlobal.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

#if REGAL_SYS_WGL
#undef Warning
#define Warning(...)
#endif

// GL_VERSION_1_0

  static void REGAL_CALL missing_glAccum(GLenum op, GLfloat value)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(value);
    Warning( "glAccum", " not available." );
  }

  static void REGAL_CALL missing_glAlphaFunc(GLenum func, GLclampf ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glAlphaFunc", " not available." );
  }

  static void REGAL_CALL missing_glBegin(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBegin", " not available." );
  }

  static void REGAL_CALL missing_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
  {
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(xorig);
    UNUSED_PARAMETER(yorig);
    UNUSED_PARAMETER(xmove);
    UNUSED_PARAMETER(ymove);
    UNUSED_PARAMETER(bitmap);
    Warning( "glBitmap", " not available." );
  }

  static void REGAL_CALL missing_glBlendFunc(GLenum sfactor, GLenum dfactor)
  {
    UNUSED_PARAMETER(sfactor);
    UNUSED_PARAMETER(dfactor);
    Warning( "glBlendFunc", " not available." );
  }

  static void REGAL_CALL missing_glCallList(GLuint list)
  {
    UNUSED_PARAMETER(list);
    Warning( "glCallList", " not available." );
  }

  static void REGAL_CALL missing_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(lists);
    Warning( "glCallLists", " not available." );
  }

  static void REGAL_CALL missing_glClear(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glClear", " not available." );
  }

  static void REGAL_CALL missing_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearAccum", " not available." );
  }

  static void REGAL_CALL missing_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColor", " not available." );
  }

  static void REGAL_CALL missing_glClearDepth(GLclampd depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepth", " not available." );
  }

  static void REGAL_CALL missing_glClearIndex(GLfloat c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glClearIndex", " not available." );
  }

  static void REGAL_CALL missing_glClearStencil(GLint s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glClearStencil", " not available." );
  }

  static void REGAL_CALL missing_glClipPlane(GLenum plane, const GLdouble *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlane", " not available." );
  }

  static void REGAL_CALL missing_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3b", " not available." );
  }

  static void REGAL_CALL missing_glColor3bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3bv", " not available." );
  }

  static void REGAL_CALL missing_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3d", " not available." );
  }

  static void REGAL_CALL missing_glColor3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3dv", " not available." );
  }

  static void REGAL_CALL missing_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3f", " not available." );
  }

  static void REGAL_CALL missing_glColor3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3fv", " not available." );
  }

  static void REGAL_CALL missing_glColor3i(GLint red, GLint green, GLint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3i", " not available." );
  }

  static void REGAL_CALL missing_glColor3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3iv", " not available." );
  }

  static void REGAL_CALL missing_glColor3s(GLshort red, GLshort green, GLshort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3s", " not available." );
  }

  static void REGAL_CALL missing_glColor3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3sv", " not available." );
  }

  static void REGAL_CALL missing_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3ub", " not available." );
  }

  static void REGAL_CALL missing_glColor3ubv(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3ubv", " not available." );
  }

  static void REGAL_CALL missing_glColor3ui(GLuint red, GLuint green, GLuint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3ui", " not available." );
  }

  static void REGAL_CALL missing_glColor3uiv(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3uiv", " not available." );
  }

  static void REGAL_CALL missing_glColor3us(GLushort red, GLushort green, GLushort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3us", " not available." );
  }

  static void REGAL_CALL missing_glColor3usv(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3usv", " not available." );
  }

  static void REGAL_CALL missing_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4b", " not available." );
  }

  static void REGAL_CALL missing_glColor4bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4bv", " not available." );
  }

  static void REGAL_CALL missing_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4d", " not available." );
  }

  static void REGAL_CALL missing_glColor4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4dv", " not available." );
  }

  static void REGAL_CALL missing_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4f", " not available." );
  }

  static void REGAL_CALL missing_glColor4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4fv", " not available." );
  }

  static void REGAL_CALL missing_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4i", " not available." );
  }

  static void REGAL_CALL missing_glColor4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4iv", " not available." );
  }

  static void REGAL_CALL missing_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4s", " not available." );
  }

  static void REGAL_CALL missing_glColor4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4sv", " not available." );
  }

  static void REGAL_CALL missing_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4ub", " not available." );
  }

  static void REGAL_CALL missing_glColor4ubv(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4ubv", " not available." );
  }

  static void REGAL_CALL missing_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4ui", " not available." );
  }

  static void REGAL_CALL missing_glColor4uiv(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4uiv", " not available." );
  }

  static void REGAL_CALL missing_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4us", " not available." );
  }

  static void REGAL_CALL missing_glColor4usv(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4usv", " not available." );
  }

  static void REGAL_CALL missing_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColorMask", " not available." );
  }

  static void REGAL_CALL missing_glColorMaterial(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glColorMaterial", " not available." );
  }

  static void REGAL_CALL missing_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(type);
    Warning( "glCopyPixels", " not available." );
  }

  static void REGAL_CALL missing_glCullFace(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glCullFace", " not available." );
  }

  static void REGAL_CALL missing_glDeleteLists(GLuint list, GLsizei range)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(range);
    Warning( "glDeleteLists", " not available." );
  }

  static void REGAL_CALL missing_glDepthFunc(GLenum func)
  {
    UNUSED_PARAMETER(func);
    Warning( "glDepthFunc", " not available." );
  }

  static void REGAL_CALL missing_glDepthMask(GLboolean flag)
  {
    UNUSED_PARAMETER(flag);
    Warning( "glDepthMask", " not available." );
  }

  static void REGAL_CALL missing_glDepthRange(GLclampd zNear, GLclampd zFar)
  {
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glDepthRange", " not available." );
  }

  static void REGAL_CALL missing_glDisable(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glDisable", " not available." );
  }

  static void REGAL_CALL missing_glDrawBuffer(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glDrawBuffer", " not available." );
  }

  static void REGAL_CALL missing_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glDrawPixels", " not available." );
  }

  static void REGAL_CALL missing_glEdgeFlag(GLboolean flag)
  {
    UNUSED_PARAMETER(flag);
    Warning( "glEdgeFlag", " not available." );
  }

  static void REGAL_CALL missing_glEdgeFlagv(const GLboolean *flag)
  {
    UNUSED_PARAMETER(flag);
    Warning( "glEdgeFlagv", " not available." );
  }

  static void REGAL_CALL missing_glEnable(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glEnable", " not available." );
  }

  static void REGAL_CALL missing_glEnd(void)
  {
    Warning( "glEnd", " not available." );
  }

  static void REGAL_CALL missing_glEndList(void)
  {
    Warning( "glEndList", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord1d(GLdouble u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1d", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord1dv(const GLdouble *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1dv", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord1f(GLfloat u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1f", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord1fv(const GLfloat *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1fv", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord2d(GLdouble u, GLdouble v)
  {
    UNUSED_PARAMETER(u);
    UNUSED_PARAMETER(v);
    Warning( "glEvalCoord2d", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord2dv(const GLdouble *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord2dv", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord2f(GLfloat u, GLfloat v)
  {
    UNUSED_PARAMETER(u);
    UNUSED_PARAMETER(v);
    Warning( "glEvalCoord2f", " not available." );
  }

  static void REGAL_CALL missing_glEvalCoord2fv(const GLfloat *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord2fv", " not available." );
  }

  static void REGAL_CALL missing_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(i1);
    UNUSED_PARAMETER(i2);
    Warning( "glEvalMesh1", " not available." );
  }

  static void REGAL_CALL missing_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(i1);
    UNUSED_PARAMETER(i2);
    UNUSED_PARAMETER(j1);
    UNUSED_PARAMETER(j2);
    Warning( "glEvalMesh2", " not available." );
  }

  static void REGAL_CALL missing_glEvalPoint1(GLint i)
  {
    UNUSED_PARAMETER(i);
    Warning( "glEvalPoint1", " not available." );
  }

  static void REGAL_CALL missing_glEvalPoint2(GLint i, GLint j)
  {
    UNUSED_PARAMETER(i);
    UNUSED_PARAMETER(j);
    Warning( "glEvalPoint2", " not available." );
  }

  static void REGAL_CALL missing_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(buffer);
    Warning( "glFeedbackBuffer", " not available." );
  }

  static void REGAL_CALL missing_glFinish(void)
  {
    Warning( "glFinish", " not available." );
  }

  static void REGAL_CALL missing_glFlush(void)
  {
    Warning( "glFlush", " not available." );
  }

  static void REGAL_CALL missing_glFogf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFogf", " not available." );
  }

  static void REGAL_CALL missing_glFogfv(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFogfv", " not available." );
  }

  static void REGAL_CALL missing_glFogi(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFogi", " not available." );
  }

  static void REGAL_CALL missing_glFogiv(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFogiv", " not available." );
  }

  static void REGAL_CALL missing_glFrontFace(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glFrontFace", " not available." );
  }

  static void REGAL_CALL missing_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glFrustum", " not available." );
  }

  static GLuint REGAL_CALL missing_glGenLists(GLsizei range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenLists", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetBooleanv(GLenum pname, GLboolean *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBooleanv", " not available." );
  }

  static void REGAL_CALL missing_glGetClipPlane(GLenum plane, GLdouble *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glGetClipPlane", " not available." );
  }

  static void REGAL_CALL missing_glGetDoublev(GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetDoublev", " not available." );
  }

  static GLenum REGAL_CALL missing_glGetError(void)
  {
    Warning( "glGetError", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetFloatv(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFloatv", " not available." );
  }

  static void REGAL_CALL missing_glGetIntegerv(GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetIntegerv", " not available." );
  }

  static void REGAL_CALL missing_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetLightfv", " not available." );
  }

  static void REGAL_CALL missing_glGetLightiv(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetLightiv", " not available." );
  }

  static void REGAL_CALL missing_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(v);
    Warning( "glGetMapdv", " not available." );
  }

  static void REGAL_CALL missing_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(v);
    Warning( "glGetMapfv", " not available." );
  }

  static void REGAL_CALL missing_glGetMapiv(GLenum target, GLenum query, GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(v);
    Warning( "glGetMapiv", " not available." );
  }

  static void REGAL_CALL missing_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMaterialfv", " not available." );
  }

  static void REGAL_CALL missing_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMaterialiv", " not available." );
  }

  static void REGAL_CALL missing_glGetPixelMapfv(GLenum map, GLfloat *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(values);
    Warning( "glGetPixelMapfv", " not available." );
  }

  static void REGAL_CALL missing_glGetPixelMapuiv(GLenum map, GLuint *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(values);
    Warning( "glGetPixelMapuiv", " not available." );
  }

  static void REGAL_CALL missing_glGetPixelMapusv(GLenum map, GLushort *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(values);
    Warning( "glGetPixelMapusv", " not available." );
  }

  static void REGAL_CALL missing_glGetPolygonStipple(GLubyte *mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glGetPolygonStipple", " not available." );
  }

  static const GLubyte *REGAL_CALL missing_glGetString(GLenum name)
  {
    UNUSED_PARAMETER(name);
    Warning( "glGetString", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexEnvfv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexEnviv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGendv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenfv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGeniv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glGetTexImage", " not available." );
  }

  static void REGAL_CALL missing_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexLevelParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexLevelParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glHint(GLenum target, GLenum mode)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(mode);
    Warning( "glHint", " not available." );
  }

  static void REGAL_CALL missing_glIndexMask(GLuint mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glIndexMask", " not available." );
  }

  static void REGAL_CALL missing_glIndexd(GLdouble c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexd", " not available." );
  }

  static void REGAL_CALL missing_glIndexdv(const GLdouble *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexdv", " not available." );
  }

  static void REGAL_CALL missing_glIndexf(GLfloat c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexf", " not available." );
  }

  static void REGAL_CALL missing_glIndexfv(const GLfloat *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexfv", " not available." );
  }

  static void REGAL_CALL missing_glIndexi(GLint c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexi", " not available." );
  }

  static void REGAL_CALL missing_glIndexiv(const GLint *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexiv", " not available." );
  }

  static void REGAL_CALL missing_glIndexs(GLshort c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexs", " not available." );
  }

  static void REGAL_CALL missing_glIndexsv(const GLshort *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexsv", " not available." );
  }

  static void REGAL_CALL missing_glInitNames(void)
  {
    Warning( "glInitNames", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsEnabled(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glIsEnabled", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsList(GLuint list)
  {
    UNUSED_PARAMETER(list);
    Warning( "glIsList", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glLightModelf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightModelf", " not available." );
  }

  static void REGAL_CALL missing_glLightModelfv(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightModelfv", " not available." );
  }

  static void REGAL_CALL missing_glLightModeli(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightModeli", " not available." );
  }

  static void REGAL_CALL missing_glLightModeliv(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightModeliv", " not available." );
  }

  static void REGAL_CALL missing_glLightf(GLenum light, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightf", " not available." );
  }

  static void REGAL_CALL missing_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightfv", " not available." );
  }

  static void REGAL_CALL missing_glLighti(GLenum light, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLighti", " not available." );
  }

  static void REGAL_CALL missing_glLightiv(GLenum light, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightiv", " not available." );
  }

  static void REGAL_CALL missing_glLineStipple(GLint factor, GLushort pattern)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(pattern);
    Warning( "glLineStipple", " not available." );
  }

  static void REGAL_CALL missing_glLineWidth(GLfloat width)
  {
    UNUSED_PARAMETER(width);
    Warning( "glLineWidth", " not available." );
  }

  static void REGAL_CALL missing_glListBase(GLuint base)
  {
    UNUSED_PARAMETER(base);
    Warning( "glListBase", " not available." );
  }

  static void REGAL_CALL missing_glLoadIdentity(void)
  {
    Warning( "glLoadIdentity", " not available." );
  }

  static void REGAL_CALL missing_glLoadMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadMatrixd", " not available." );
  }

  static void REGAL_CALL missing_glLoadMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadMatrixf", " not available." );
  }

  static void REGAL_CALL missing_glLoadName(GLuint name)
  {
    UNUSED_PARAMETER(name);
    Warning( "glLoadName", " not available." );
  }

  static void REGAL_CALL missing_glLogicOp(GLenum opcode)
  {
    UNUSED_PARAMETER(opcode);
    Warning( "glLogicOp", " not available." );
  }

  static void REGAL_CALL missing_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMap1d", " not available." );
  }

  static void REGAL_CALL missing_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMap1f", " not available." );
  }

  static void REGAL_CALL missing_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMap2d", " not available." );
  }

  static void REGAL_CALL missing_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMap2f", " not available." );
  }

  static void REGAL_CALL missing_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    Warning( "glMapGrid1d", " not available." );
  }

  static void REGAL_CALL missing_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    Warning( "glMapGrid1f", " not available." );
  }

  static void REGAL_CALL missing_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(vn);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glMapGrid2d", " not available." );
  }

  static void REGAL_CALL missing_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(vn);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glMapGrid2f", " not available." );
  }

  static void REGAL_CALL missing_glMaterialf(GLenum face, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMaterialf", " not available." );
  }

  static void REGAL_CALL missing_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMaterialfv", " not available." );
  }

  static void REGAL_CALL missing_glMateriali(GLenum face, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMateriali", " not available." );
  }

  static void REGAL_CALL missing_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMaterialiv", " not available." );
  }

  static void REGAL_CALL missing_glMatrixMode(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixMode", " not available." );
  }

  static void REGAL_CALL missing_glMultMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultMatrixd", " not available." );
  }

  static void REGAL_CALL missing_glMultMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultMatrixf", " not available." );
  }

  static void REGAL_CALL missing_glNewList(GLuint list, GLenum mode)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(mode);
    Warning( "glNewList", " not available." );
  }

  static void REGAL_CALL missing_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3b", " not available." );
  }

  static void REGAL_CALL missing_glNormal3bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3bv", " not available." );
  }

  static void REGAL_CALL missing_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3d", " not available." );
  }

  static void REGAL_CALL missing_glNormal3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3dv", " not available." );
  }

  static void REGAL_CALL missing_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3f", " not available." );
  }

  static void REGAL_CALL missing_glNormal3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3fv", " not available." );
  }

  static void REGAL_CALL missing_glNormal3i(GLint nx, GLint ny, GLint nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3i", " not available." );
  }

  static void REGAL_CALL missing_glNormal3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3iv", " not available." );
  }

  static void REGAL_CALL missing_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3s", " not available." );
  }

  static void REGAL_CALL missing_glNormal3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3sv", " not available." );
  }

  static void REGAL_CALL missing_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glOrtho", " not available." );
  }

  static void REGAL_CALL missing_glPassThrough(GLfloat token)
  {
    UNUSED_PARAMETER(token);
    Warning( "glPassThrough", " not available." );
  }

  static void REGAL_CALL missing_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(mapsize);
    UNUSED_PARAMETER(values);
    Warning( "glPixelMapfv", " not available." );
  }

  static void REGAL_CALL missing_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(mapsize);
    UNUSED_PARAMETER(values);
    Warning( "glPixelMapuiv", " not available." );
  }

  static void REGAL_CALL missing_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(mapsize);
    UNUSED_PARAMETER(values);
    Warning( "glPixelMapusv", " not available." );
  }

  static void REGAL_CALL missing_glPixelStoref(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelStoref", " not available." );
  }

  static void REGAL_CALL missing_glPixelStorei(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelStorei", " not available." );
  }

  static void REGAL_CALL missing_glPixelTransferf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransferf", " not available." );
  }

  static void REGAL_CALL missing_glPixelTransferi(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransferi", " not available." );
  }

  static void REGAL_CALL missing_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
  {
    UNUSED_PARAMETER(xfactor);
    UNUSED_PARAMETER(yfactor);
    Warning( "glPixelZoom", " not available." );
  }

  static void REGAL_CALL missing_glPointSize(GLfloat size)
  {
    UNUSED_PARAMETER(size);
    Warning( "glPointSize", " not available." );
  }

  static void REGAL_CALL missing_glPolygonMode(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glPolygonMode", " not available." );
  }

  static void REGAL_CALL missing_glPolygonStipple(const GLubyte *mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPolygonStipple", " not available." );
  }

  static void REGAL_CALL missing_glPopAttrib(void)
  {
    Warning( "glPopAttrib", " not available." );
  }

  static void REGAL_CALL missing_glPopMatrix(void)
  {
    Warning( "glPopMatrix", " not available." );
  }

  static void REGAL_CALL missing_glPopName(void)
  {
    Warning( "glPopName", " not available." );
  }

  static void REGAL_CALL missing_glPushAttrib(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPushAttrib", " not available." );
  }

  static void REGAL_CALL missing_glPushMatrix(void)
  {
    Warning( "glPushMatrix", " not available." );
  }

  static void REGAL_CALL missing_glPushName(GLuint name)
  {
    UNUSED_PARAMETER(name);
    Warning( "glPushName", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2d(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2d", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2dv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2f(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2f", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2fv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2i(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2i", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2iv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2s(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2s", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos2sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2sv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3d", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3dv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3f", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3fv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3i(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3i", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3iv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3s(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3s", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3sv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4d", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4dv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4f", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4fv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4i", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4iv", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4s", " not available." );
  }

  static void REGAL_CALL missing_glRasterPos4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4sv", " not available." );
  }

  static void REGAL_CALL missing_glReadBuffer(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glReadBuffer", " not available." );
  }

  static void REGAL_CALL missing_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glReadPixels", " not available." );
  }

  static void REGAL_CALL missing_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRectd", " not available." );
  }

  static void REGAL_CALL missing_glRectdv(const GLdouble *v1, const GLdouble *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectdv", " not available." );
  }

  static void REGAL_CALL missing_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRectf", " not available." );
  }

  static void REGAL_CALL missing_glRectfv(const GLfloat *v1, const GLfloat *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectfv", " not available." );
  }

  static void REGAL_CALL missing_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRecti", " not available." );
  }

  static void REGAL_CALL missing_glRectiv(const GLint *v1, const GLint *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectiv", " not available." );
  }

  static void REGAL_CALL missing_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRects", " not available." );
  }

  static void REGAL_CALL missing_glRectsv(const GLshort *v1, const GLshort *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectsv", " not available." );
  }

  static GLint REGAL_CALL missing_glRenderMode(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glRenderMode", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRotated", " not available." );
  }

  static void REGAL_CALL missing_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRotatef", " not available." );
  }

  static void REGAL_CALL missing_glScaled(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glScaled", " not available." );
  }

  static void REGAL_CALL missing_glScalef(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glScalef", " not available." );
  }

  static void REGAL_CALL missing_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glScissor", " not available." );
  }

  static void REGAL_CALL missing_glSelectBuffer(GLsizei size, GLuint *buffer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(buffer);
    Warning( "glSelectBuffer", " not available." );
  }

  static void REGAL_CALL missing_glShadeModel(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glShadeModel", " not available." );
  }

  static void REGAL_CALL missing_glStencilFunc(GLenum func, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFunc", " not available." );
  }

  static void REGAL_CALL missing_glStencilMask(GLuint mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glStencilMask", " not available." );
  }

  static void REGAL_CALL missing_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
  {
    UNUSED_PARAMETER(fail);
    UNUSED_PARAMETER(zfail);
    UNUSED_PARAMETER(zpass);
    Warning( "glStencilOp", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1d(GLdouble s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1d", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1dv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1f(GLfloat s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1f", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1fv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1i(GLint s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1i", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1iv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1s(GLshort s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1s", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1sv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2d(GLdouble s, GLdouble t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2d", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2dv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2f(GLfloat s, GLfloat t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2f", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2i(GLint s, GLint t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2i", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2iv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2s(GLshort s, GLshort t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2s", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2sv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3d", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3dv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3f", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3fv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3i(GLint s, GLint t, GLint r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3i", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3iv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3s(GLshort s, GLshort t, GLshort r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3s", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3sv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4d", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4dv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4f", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4fv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4i", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4iv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4s", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4sv", " not available." );
  }

  static void REGAL_CALL missing_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexEnvf", " not available." );
  }

  static void REGAL_CALL missing_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexEnvfv", " not available." );
  }

  static void REGAL_CALL missing_glTexEnvi(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexEnvi", " not available." );
  }

  static void REGAL_CALL missing_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexEnviv", " not available." );
  }

  static void REGAL_CALL missing_glTexGend(GLenum coord, GLenum pname, GLdouble param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGend", " not available." );
  }

  static void REGAL_CALL missing_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGendv", " not available." );
  }

  static void REGAL_CALL missing_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGenf", " not available." );
  }

  static void REGAL_CALL missing_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenfv", " not available." );
  }

  static void REGAL_CALL missing_glTexGeni(GLenum coord, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGeni", " not available." );
  }

  static void REGAL_CALL missing_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGeniv", " not available." );
  }

  static void REGAL_CALL missing_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage1D", " not available." );
  }

  static void REGAL_CALL missing_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage2D", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexParameterf", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glTexParameteri(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexParameteri", " not available." );
  }

  static void REGAL_CALL missing_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glTranslated(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTranslated", " not available." );
  }

  static void REGAL_CALL missing_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTranslatef", " not available." );
  }

  static void REGAL_CALL missing_glVertex2d(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2d", " not available." );
  }

  static void REGAL_CALL missing_glVertex2dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2dv", " not available." );
  }

  static void REGAL_CALL missing_glVertex2f(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2f", " not available." );
  }

  static void REGAL_CALL missing_glVertex2fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2fv", " not available." );
  }

  static void REGAL_CALL missing_glVertex2i(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2i", " not available." );
  }

  static void REGAL_CALL missing_glVertex2iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2iv", " not available." );
  }

  static void REGAL_CALL missing_glVertex2s(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2s", " not available." );
  }

  static void REGAL_CALL missing_glVertex2sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2sv", " not available." );
  }

  static void REGAL_CALL missing_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3d", " not available." );
  }

  static void REGAL_CALL missing_glVertex3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3dv", " not available." );
  }

  static void REGAL_CALL missing_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3f", " not available." );
  }

  static void REGAL_CALL missing_glVertex3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3fv", " not available." );
  }

  static void REGAL_CALL missing_glVertex3i(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3i", " not available." );
  }

  static void REGAL_CALL missing_glVertex3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3iv", " not available." );
  }

  static void REGAL_CALL missing_glVertex3s(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3s", " not available." );
  }

  static void REGAL_CALL missing_glVertex3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3sv", " not available." );
  }

  static void REGAL_CALL missing_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4d", " not available." );
  }

  static void REGAL_CALL missing_glVertex4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4dv", " not available." );
  }

  static void REGAL_CALL missing_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4f", " not available." );
  }

  static void REGAL_CALL missing_glVertex4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4fv", " not available." );
  }

  static void REGAL_CALL missing_glVertex4i(GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4i", " not available." );
  }

  static void REGAL_CALL missing_glVertex4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4iv", " not available." );
  }

  static void REGAL_CALL missing_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4s", " not available." );
  }

  static void REGAL_CALL missing_glVertex4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4sv", " not available." );
  }

  static void REGAL_CALL missing_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glViewport", " not available." );
  }

// GL_VERSION_1_1

  static GLboolean REGAL_CALL missing_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(residences);
    Warning( "glAreTexturesResident", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glArrayElement(GLint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glArrayElement", " not available." );
  }

  static void REGAL_CALL missing_glBindTexture(GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindTexture", " not available." );
  }

  static void REGAL_CALL missing_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glColorPointer", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage1D", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage2D", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyTexSubImage1D", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage2D", " not available." );
  }

  static void REGAL_CALL missing_glDeleteTextures(GLsizei n, const GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glDeleteTextures", " not available." );
  }

  static void REGAL_CALL missing_glDisableClientState(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glDisableClientState", " not available." );
  }

  static void REGAL_CALL missing_glDrawArrays(GLenum mode, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawArrays", " not available." );
  }

  static void REGAL_CALL missing_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawElements", " not available." );
  }

  static void REGAL_CALL missing_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glEdgeFlagPointer", " not available." );
  }

  static void REGAL_CALL missing_glEnableClientState(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glEnableClientState", " not available." );
  }

  static void REGAL_CALL missing_glGenTextures(GLsizei n, GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glGenTextures", " not available." );
  }

  static void REGAL_CALL missing_glGetPointerv(GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPointerv", " not available." );
  }

  static void REGAL_CALL missing_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glIndexPointer", " not available." );
  }

  static void REGAL_CALL missing_glIndexub(GLubyte c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexub", " not available." );
  }

  static void REGAL_CALL missing_glIndexubv(const GLubyte *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexubv", " not available." );
  }

  static void REGAL_CALL missing_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glInterleavedArrays", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsTexture(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glIsTexture", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glNormalPointer", " not available." );
  }

  static void REGAL_CALL missing_glPolygonOffset(GLfloat factor, GLfloat units)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(units);
    Warning( "glPolygonOffset", " not available." );
  }

  static void REGAL_CALL missing_glPopClientAttrib(void)
  {
    Warning( "glPopClientAttrib", " not available." );
  }

  static void REGAL_CALL missing_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(priorities);
    Warning( "glPrioritizeTextures", " not available." );
  }

  static void REGAL_CALL missing_glPushClientAttrib(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPushClientAttrib", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glTexCoordPointer", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage1D", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage2D", " not available." );
  }

  static void REGAL_CALL missing_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexPointer", " not available." );
  }

// GL_VERSION_1_2

  static void REGAL_CALL missing_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glBlendColor", " not available." );
  }

  static void REGAL_CALL missing_glBlendEquation(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquation", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage3D", " not available." );
  }

  static void REGAL_CALL missing_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawRangeElements", " not available." );
  }

  static void REGAL_CALL missing_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage3D", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage3D", " not available." );
  }

// GL_VERSION_1_3

  static void REGAL_CALL missing_glActiveTexture(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glActiveTexture", " not available." );
  }

  static void REGAL_CALL missing_glClientActiveTexture(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glClientActiveTexture", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage1D", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage2D", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage3D", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage1D", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage2D", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage3D", " not available." );
  }

  static void REGAL_CALL missing_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedTexImage", " not available." );
  }

  static void REGAL_CALL missing_glLoadTransposeMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixd", " not available." );
  }

  static void REGAL_CALL missing_glLoadTransposeMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixf", " not available." );
  }

  static void REGAL_CALL missing_glMultTransposeMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixd", " not available." );
  }

  static void REGAL_CALL missing_glMultTransposeMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixf", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1d(GLenum target, GLdouble s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1d", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1dv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1f(GLenum target, GLfloat s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1f", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1fv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1i(GLenum target, GLint s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1i", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1iv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1s(GLenum target, GLshort s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1s", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1sv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2d", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2dv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2f", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2fv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2i", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2iv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2s", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2sv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3d", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3dv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3f", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3fv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3i", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3iv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3s", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3sv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4d", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4dv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4f", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4fv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4i", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4iv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4s", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4sv", " not available." );
  }

  static void REGAL_CALL missing_glSampleCoverage(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleCoverage", " not available." );
  }

// GL_VERSION_1_4

  static void REGAL_CALL missing_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparate", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glFogCoordPointer", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordd(GLdouble coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordd", " not available." );
  }

  static void REGAL_CALL missing_glFogCoorddv(const GLdouble *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoorddv", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordf(GLfloat coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordf", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordfv(const GLfloat *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordfv", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawArrays", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawElements", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterf", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterfv(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glPointParameteri(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameteri", " not available." );
  }

  static void REGAL_CALL missing_glPointParameteriv(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3b", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3bv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3d", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3dv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3f", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3fv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3i(GLint red, GLint green, GLint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3i", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3iv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3s", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3sv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3ub", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3ubv(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3ubv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3ui", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3uiv(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3uiv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3us", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3usv(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3usv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glSecondaryColorPointer", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2d(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2d", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2dv(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2dv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2f(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2f", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2fv(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2fv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2i(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2i", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2iv(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2iv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2s(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2s", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2sv(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2sv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3d", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3dv(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3dv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3f", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3fv(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3fv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3i(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3i", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3iv(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3iv", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3s(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3s", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3sv(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3sv", " not available." );
  }

// GL_VERSION_1_5

  static void REGAL_CALL missing_glBeginQuery(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQuery", " not available." );
  }

  static void REGAL_CALL missing_glBindBuffer(GLenum target, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBuffer", " not available." );
  }

  static void REGAL_CALL missing_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(usage);
    Warning( "glBufferData", " not available." );
  }

  static void REGAL_CALL missing_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glBufferSubData", " not available." );
  }

  static void REGAL_CALL missing_glDeleteBuffers(GLsizei n, const GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glDeleteBuffers", " not available." );
  }

  static void REGAL_CALL missing_glDeleteQueries(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueries", " not available." );
  }

  static void REGAL_CALL missing_glEndQuery(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQuery", " not available." );
  }

  static void REGAL_CALL missing_glGenBuffers(GLsizei n, GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glGenBuffers", " not available." );
  }

  static void REGAL_CALL missing_glGenQueries(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueries", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferPointerv", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glGetBufferSubData", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectiv", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuiv", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryiv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsBuffer(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsBuffer", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsQuery(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQuery", " not available." );
    return GL_FALSE;
  }

  static GLvoid *REGAL_CALL missing_glMapBuffer(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMapBuffer", " not available." );
    return NULL;
  }

  static GLboolean REGAL_CALL missing_glUnmapBuffer(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glUnmapBuffer", " not available." );
    return GL_FALSE;
  }

// GL_VERSION_2_0

  static void REGAL_CALL missing_glAttachShader(GLuint program, GLuint shader)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shader);
    Warning( "glAttachShader", " not available." );
  }

  static void REGAL_CALL missing_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(name);
    Warning( "glBindAttribLocation", " not available." );
  }

  static void REGAL_CALL missing_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparate", " not available." );
  }

  static void REGAL_CALL missing_glCompileShader(GLuint shader)
  {
    UNUSED_PARAMETER(shader);
    Warning( "glCompileShader", " not available." );
  }

  static GLuint REGAL_CALL missing_glCreateProgram(void)
  {
    Warning( "glCreateProgram", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glCreateShader(GLenum type)
  {
    UNUSED_PARAMETER(type);
    Warning( "glCreateShader", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glDeleteProgram", " not available." );
  }

  static void REGAL_CALL missing_glDeleteShader(GLuint shader)
  {
    UNUSED_PARAMETER(shader);
    Warning( "glDeleteShader", " not available." );
  }

  static void REGAL_CALL missing_glDetachShader(GLuint program, GLuint shader)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shader);
    Warning( "glDetachShader", " not available." );
  }

  static void REGAL_CALL missing_glDisableVertexAttribArray(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glDisableVertexAttribArray", " not available." );
  }

  static void REGAL_CALL missing_glDrawBuffers(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffers", " not available." );
  }

  static void REGAL_CALL missing_glEnableVertexAttribArray(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glEnableVertexAttribArray", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveAttrib", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveUniform", " not available." );
  }

  static void REGAL_CALL missing_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(shaders);
    Warning( "glGetAttachedShaders", " not available." );
  }

  static GLint REGAL_CALL missing_glGetAttribLocation(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetAttribLocation", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetProgramInfoLog", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramiv", " not available." );
  }

  static void REGAL_CALL missing_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetShaderInfoLog", " not available." );
  }

  static void REGAL_CALL missing_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(source);
    Warning( "glGetShaderSource", " not available." );
  }

  static void REGAL_CALL missing_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetShaderiv", " not available." );
  }

  static GLint REGAL_CALL missing_glGetUniformLocation(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetUniformLocation", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformfv", " not available." );
  }

  static void REGAL_CALL missing_glGetUniformiv(GLuint program, GLint location, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformiv", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(pointer);
    Warning( "glGetVertexAttribPointerv", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribdv", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribfv", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribiv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glIsProgram", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsShader(GLuint shader)
  {
    UNUSED_PARAMETER(shader);
    Warning( "glIsShader", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glLinkProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glLinkProgram", " not available." );
  }

  static void REGAL_CALL missing_glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(string);
    UNUSED_PARAMETER(length);
    Warning( "glShaderSource", " not available." );
  }

  static void REGAL_CALL missing_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFuncSeparate", " not available." );
  }

  static void REGAL_CALL missing_glStencilMaskSeparate(GLenum face, GLuint mask)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilMaskSeparate", " not available." );
  }

  static void REGAL_CALL missing_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(fail);
    UNUSED_PARAMETER(zfail);
    UNUSED_PARAMETER(zpass);
    Warning( "glStencilOpSeparate", " not available." );
  }

  static void REGAL_CALL missing_glUniform1f(GLint location, GLfloat v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1f", " not available." );
  }

  static void REGAL_CALL missing_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1fv", " not available." );
  }

  static void REGAL_CALL missing_glUniform1i(GLint location, GLint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1i", " not available." );
  }

  static void REGAL_CALL missing_glUniform1iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1iv", " not available." );
  }

  static void REGAL_CALL missing_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2f", " not available." );
  }

  static void REGAL_CALL missing_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2fv", " not available." );
  }

  static void REGAL_CALL missing_glUniform2i(GLint location, GLint v0, GLint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2i", " not available." );
  }

  static void REGAL_CALL missing_glUniform2iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2iv", " not available." );
  }

  static void REGAL_CALL missing_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3f", " not available." );
  }

  static void REGAL_CALL missing_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3fv", " not available." );
  }

  static void REGAL_CALL missing_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3i", " not available." );
  }

  static void REGAL_CALL missing_glUniform3iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3iv", " not available." );
  }

  static void REGAL_CALL missing_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4f", " not available." );
  }

  static void REGAL_CALL missing_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4fv", " not available." );
  }

  static void REGAL_CALL missing_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4i", " not available." );
  }

  static void REGAL_CALL missing_glUniform4iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4iv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4fv", " not available." );
  }

  static void REGAL_CALL missing_glUseProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glUseProgram", " not available." );
  }

  static void REGAL_CALL missing_glValidateProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glValidateProgram", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1d(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1f(GLuint index, GLfloat x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1f", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1fv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1s(GLuint index, GLshort x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1s", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1sv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2f", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2fv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2s", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2sv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3f", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3fv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3s", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3sv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nbv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Niv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Niv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nsv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4Nub", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nubv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nuiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nusv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4bv(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4bv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4f", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4fv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4iv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4s", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4sv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ubv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4usv(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4usv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribPointer", " not available." );
  }

// GL_VERSION_2_1

  static void REGAL_CALL missing_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x3fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x4fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x2fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x4fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x2fv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x3fv", " not available." );
  }

// GL_VERSION_3_0

  static void REGAL_CALL missing_glBeginConditionalRender(GLuint id, GLenum mode)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(mode);
    Warning( "glBeginConditionalRender", " not available." );
  }

  static void REGAL_CALL missing_glBeginTransformFeedback(GLenum primitiveMode)
  {
    UNUSED_PARAMETER(primitiveMode);
    Warning( "glBeginTransformFeedback", " not available." );
  }

  static void REGAL_CALL missing_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(name);
    Warning( "glBindFragDataLocation", " not available." );
  }

  static void REGAL_CALL missing_glClampColor(GLenum target, GLenum clamp)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(clamp);
    Warning( "glClampColor", " not available." );
  }

  static void REGAL_CALL missing_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(stencil);
    Warning( "glClearBufferfi", " not available." );
  }

  static void REGAL_CALL missing_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(value);
    Warning( "glClearBufferfv", " not available." );
  }

  static void REGAL_CALL missing_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(value);
    Warning( "glClearBufferiv", " not available." );
  }

  static void REGAL_CALL missing_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(value);
    Warning( "glClearBufferuiv", " not available." );
  }

  static void REGAL_CALL missing_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    Warning( "glColorMaski", " not available." );
  }

  static void REGAL_CALL missing_glDisablei(GLenum cap, GLuint index)
  {
    UNUSED_PARAMETER(cap);
    UNUSED_PARAMETER(index);
    Warning( "glDisablei", " not available." );
  }

  static void REGAL_CALL missing_glEnablei(GLenum cap, GLuint index)
  {
    UNUSED_PARAMETER(cap);
    UNUSED_PARAMETER(index);
    Warning( "glEnablei", " not available." );
  }

  static void REGAL_CALL missing_glEndConditionalRender(void)
  {
    Warning( "glEndConditionalRender", " not available." );
  }

  static void REGAL_CALL missing_glEndTransformFeedback(void)
  {
    Warning( "glEndTransformFeedback", " not available." );
  }

  static void REGAL_CALL missing_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetBooleani_v", " not available." );
  }

  static GLint REGAL_CALL missing_glGetFragDataLocation(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetFragDataLocation", " not available." );
    return 0;
  }

  static const GLubyte *REGAL_CALL missing_glGetStringi(GLenum name, GLuint index)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(index);
    Warning( "glGetStringi", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIiv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIuiv", " not available." );
  }

  static void REGAL_CALL missing_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetTransformFeedbackVarying", " not available." );
  }

  static void REGAL_CALL missing_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformuiv", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIiv", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIuiv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsEnabledi(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glIsEnabledi", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIiv", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIuiv", " not available." );
  }

  static void REGAL_CALL missing_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(varyings);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackVaryings", " not available." );
  }

  static void REGAL_CALL missing_glUniform1ui(GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1ui", " not available." );
  }

  static void REGAL_CALL missing_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1uiv", " not available." );
  }

  static void REGAL_CALL missing_glUniform2ui(GLint location, GLuint v0, GLuint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2ui", " not available." );
  }

  static void REGAL_CALL missing_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2uiv", " not available." );
  }

  static void REGAL_CALL missing_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3ui", " not available." );
  }

  static void REGAL_CALL missing_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3uiv", " not available." );
  }

  static void REGAL_CALL missing_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4ui", " not available." );
  }

  static void REGAL_CALL missing_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1i(GLuint index, GLint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1i", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1iv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1ui(GLuint index, GLuint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2i(GLuint index, GLint x, GLint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2i", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2iv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3i", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3iv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4bv(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4bv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4i", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4iv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4sv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4ubv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4usv(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4usv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribIPointer", " not available." );
  }

// GL_VERSION_3_1

  static void REGAL_CALL missing_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstanced", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstanced", " not available." );
  }

  static void REGAL_CALL missing_glPrimitiveRestartIndex(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glPrimitiveRestartIndex", " not available." );
  }

  static void REGAL_CALL missing_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTexBuffer", " not available." );
  }

// GL_VERSION_3_2

  static void REGAL_CALL missing_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glFramebufferTextureFace", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameteri64v", " not available." );
  }

  static void REGAL_CALL missing_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetInteger64i_v", " not available." );
  }

// GL_VERSION_3_3

  static void REGAL_CALL missing_glVertexAttribDivisor(GLuint index, GLuint divisor)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexAttribDivisor", " not available." );
  }

// GL_VERSION_4_0

  static void REGAL_CALL missing_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparatei", " not available." );
  }

  static void REGAL_CALL missing_glBlendEquationi(GLuint buf, GLenum mode)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationi", " not available." );
  }

  static void REGAL_CALL missing_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(srcRGB);
    UNUSED_PARAMETER(dstRGB);
    UNUSED_PARAMETER(srcAlpha);
    UNUSED_PARAMETER(dstAlpha);
    Warning( "glBlendFuncSeparatei", " not available." );
  }

  static void REGAL_CALL missing_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    Warning( "glBlendFunci", " not available." );
  }

// GL_3DFX_tbuffer

  static void REGAL_CALL missing_glTbufferMask3DFX(GLuint mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glTbufferMask3DFX", " not available." );
  }

// GL_AMD_debug_output

  static void REGAL_CALL missing_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
  {
    UNUSED_PARAMETER(callback);
    UNUSED_PARAMETER(userParam);
    Warning( "glDebugMessageCallbackAMD", " not available." );
  }

  static void REGAL_CALL missing_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    UNUSED_PARAMETER(category);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(enabled);
    Warning( "glDebugMessageEnableAMD", " not available." );
  }

  static void REGAL_CALL missing_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
  {
    UNUSED_PARAMETER(category);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(buf);
    Warning( "glDebugMessageInsertAMD", " not available." );
  }

  static GLuint REGAL_CALL missing_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(categories);
    UNUSED_PARAMETER(severities);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(lengths);
    UNUSED_PARAMETER(message);
    Warning( "glGetDebugMessageLogAMD", " not available." );
    return 0;
  }

// GL_AMD_draw_buffers_blend

  static void REGAL_CALL missing_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationIndexedAMD", " not available." );
  }

  static void REGAL_CALL missing_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateIndexedAMD", " not available." );
  }

  static void REGAL_CALL missing_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    Warning( "glBlendFuncIndexedAMD", " not available." );
  }

  static void REGAL_CALL missing_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(srcRGB);
    UNUSED_PARAMETER(dstRGB);
    UNUSED_PARAMETER(srcAlpha);
    UNUSED_PARAMETER(dstAlpha);
    Warning( "glBlendFuncSeparateIndexedAMD", " not available." );
  }

// GL_AMD_interleaved_elements

  static void REGAL_CALL missing_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexAttribParameteriAMD", " not available." );
  }

// GL_AMD_multi_draw_indirect

  static void REGAL_CALL missing_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawArraysIndirectAMD", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawElementsIndirectAMD", " not available." );
  }

// GL_AMD_name_gen_delete

  static void REGAL_CALL missing_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(num);
    UNUSED_PARAMETER(names);
    Warning( "glDeleteNamesAMD", " not available." );
  }

  static void REGAL_CALL missing_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(num);
    UNUSED_PARAMETER(names);
    Warning( "glGenNamesAMD", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsNameAMD(GLenum identifier, GLuint name)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(name);
    Warning( "glIsNameAMD", " not available." );
    return GL_FALSE;
  }

// GL_AMD_performance_monitor

  static void REGAL_CALL missing_glBeginPerfMonitorAMD(GLuint monitor)
  {
    UNUSED_PARAMETER(monitor);
    Warning( "glBeginPerfMonitorAMD", " not available." );
  }

  static void REGAL_CALL missing_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(monitors);
    Warning( "glDeletePerfMonitorsAMD", " not available." );
  }

  static void REGAL_CALL missing_glEndPerfMonitorAMD(GLuint monitor)
  {
    UNUSED_PARAMETER(monitor);
    Warning( "glEndPerfMonitorAMD", " not available." );
  }

  static void REGAL_CALL missing_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(monitors);
    Warning( "glGenPerfMonitorsAMD", " not available." );
  }

  static void REGAL_CALL missing_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
  {
    UNUSED_PARAMETER(monitor);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(dataSize);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(bytesWritten);
    Warning( "glGetPerfMonitorCounterDataAMD", " not available." );
  }

  static void REGAL_CALL missing_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(counter);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(data);
    Warning( "glGetPerfMonitorCounterInfoAMD", " not available." );
  }

  static void REGAL_CALL missing_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(counter);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(counterString);
    Warning( "glGetPerfMonitorCounterStringAMD", " not available." );
  }

  static void REGAL_CALL missing_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(numCounters);
    UNUSED_PARAMETER(maxActiveCounters);
    UNUSED_PARAMETER(countersSize);
    UNUSED_PARAMETER(counters);
    Warning( "glGetPerfMonitorCountersAMD", " not available." );
  }

  static void REGAL_CALL missing_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(groupString);
    Warning( "glGetPerfMonitorGroupStringAMD", " not available." );
  }

  static void REGAL_CALL missing_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
  {
    UNUSED_PARAMETER(numGroups);
    UNUSED_PARAMETER(groupsSize);
    UNUSED_PARAMETER(groups);
    Warning( "glGetPerfMonitorGroupsAMD", " not available." );
  }

  static void REGAL_CALL missing_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
  {
    UNUSED_PARAMETER(monitor);
    UNUSED_PARAMETER(enable);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(numCounters);
    UNUSED_PARAMETER(counterList);
    Warning( "glSelectPerfMonitorCountersAMD", " not available." );
  }

// GL_AMD_sample_positions

  static void REGAL_CALL missing_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(val);
    Warning( "glSetMultisamplefvAMD", " not available." );
  }

// GL_AMD_sparse_texture

  static void REGAL_CALL missing_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(layers);
    UNUSED_PARAMETER(flags);
    Warning( "glTexStorageSparseAMD", " not available." );
  }

  static void REGAL_CALL missing_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(layers);
    UNUSED_PARAMETER(flags);
    Warning( "glTextureStorageSparseAMD", " not available." );
  }

// GL_AMD_stencil_operation_extended

  static void REGAL_CALL missing_glStencilOpValueAMD(GLenum face, GLuint value)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(value);
    Warning( "glStencilOpValueAMD", " not available." );
  }

// GL_AMD_vertex_shader_tessellator

  static void REGAL_CALL missing_glTessellationFactorAMD(GLfloat factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glTessellationFactorAMD", " not available." );
  }

  static void REGAL_CALL missing_glTessellationModeAMD(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glTessellationModeAMD", " not available." );
  }

// GL_ANGLE_framebuffer_blit

  static void REGAL_CALL missing_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebufferANGLE", " not available." );
  }

// GL_ANGLE_framebuffer_multisample

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleANGLE", " not available." );
  }

// GL_ANGLE_instanced_arrays

  static void REGAL_CALL missing_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstancedANGLE", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstancedANGLE", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexAttribDivisorANGLE", " not available." );
  }

// GL_ANGLE_timer_query

  static void REGAL_CALL missing_glBeginQueryANGLE(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryANGLE", " not available." );
  }

  static void REGAL_CALL missing_glDeleteQueriesANGLE(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueriesANGLE", " not available." );
  }

  static void REGAL_CALL missing_glEndQueryANGLE(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQueryANGLE", " not available." );
  }

  static void REGAL_CALL missing_glGenQueriesANGLE(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueriesANGLE", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjecti64vANGLE(GLuint id, GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjecti64vANGLE", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectivANGLE(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectivANGLE", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectui64vANGLE(GLuint id, GLenum pname, GLuint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectui64vANGLE", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectuivANGLE(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuivANGLE", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryivANGLE(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryivANGLE", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsQueryANGLE(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQueryANGLE", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glQueryCounterANGLE(GLuint id, GLenum target)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(target);
    Warning( "glQueryCounterANGLE", " not available." );
  }

// GL_ANGLE_translated_shader_source

  static void REGAL_CALL missing_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(source);
    Warning( "glGetTranslatedShaderSourceANGLE", " not available." );
  }

// GL_APPLE_copy_texture_levels

  static void REGAL_CALL missing_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
  {
    UNUSED_PARAMETER(destinationTexture);
    UNUSED_PARAMETER(sourceTexture);
    UNUSED_PARAMETER(sourceBaseLevel);
    UNUSED_PARAMETER(sourceLevelCount);
    Warning( "glCopyTextureLevelsAPPLE", " not available." );
  }

// GL_APPLE_element_array

  static void REGAL_CALL missing_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawElementArrayAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawRangeElementArrayAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glElementPointerAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawElementArrayAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawRangeElementArrayAPPLE", " not available." );
  }

// GL_APPLE_fence

  static void REGAL_CALL missing_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glDeleteFencesAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glFinishFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glFinishFenceAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glFinishObjectAPPLE(GLenum object, GLint name)
  {
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(name);
    Warning( "glFinishObjectAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glGenFencesAPPLE(GLsizei n, GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glGenFencesAPPLE", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glIsFenceAPPLE", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glSetFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glSetFenceAPPLE", " not available." );
  }

  static GLboolean REGAL_CALL missing_glTestFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glTestFenceAPPLE", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glTestObjectAPPLE(GLenum object, GLuint name)
  {
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(name);
    Warning( "glTestObjectAPPLE", " not available." );
    return GL_FALSE;
  }

// GL_APPLE_flush_buffer_range

  static void REGAL_CALL missing_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glBufferParameteriAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glFlushMappedBufferRangeAPPLE", " not available." );
  }

// GL_APPLE_flush_render

  static void REGAL_CALL missing_glFinishRenderAPPLE(void)
  {
    Warning( "glFinishRenderAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glFlushRenderAPPLE(void)
  {
    Warning( "glFlushRenderAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glSwapAPPLE(void)
  {
    Warning( "glSwapAPPLE", " not available." );
  }

// GL_APPLE_framebuffer_multisample

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glResolveMultisampleFramebufferAPPLE(void)
  {
    Warning( "glResolveMultisampleFramebufferAPPLE", " not available." );
  }

// GL_APPLE_object_purgeable

  static void REGAL_CALL missing_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(objectType);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectParameterivAPPLE", " not available." );
  }

  static GLenum REGAL_CALL missing_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
  {
    UNUSED_PARAMETER(objectType);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(option);
    Warning( "glObjectPurgeableAPPLE", " not available." );
    return 0;
  }

  static GLenum REGAL_CALL missing_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
  {
    UNUSED_PARAMETER(objectType);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(option);
    Warning( "glObjectUnpurgeableAPPLE", " not available." );
    return 0;
  }

// GL_APPLE_sync

  static GLenum REGAL_CALL missing_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glClientWaitSyncAPPLE", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteSyncAPPLE(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glDeleteSyncAPPLE", " not available." );
  }

  static GLsync REGAL_CALL missing_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
  {
    UNUSED_PARAMETER(condition);
    UNUSED_PARAMETER(flags);
    Warning( "glFenceSyncAPPLE", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetInteger64vAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(values);
    Warning( "glGetSyncivAPPLE", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsSyncAPPLE(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glIsSyncAPPLE", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glWaitSyncAPPLE", " not available." );
  }

// GL_APPLE_texture_range

  static void REGAL_CALL missing_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterPointervAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pointer);
    Warning( "glTextureRangeAPPLE", " not available." );
  }

// GL_APPLE_vertex_array_object

  static void REGAL_CALL missing_glBindVertexArrayAPPLE(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glBindVertexArrayAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glDeleteVertexArraysAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glGenVertexArraysAPPLE", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsVertexArrayAPPLE(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glIsVertexArrayAPPLE", " not available." );
    return GL_FALSE;
  }

// GL_APPLE_vertex_array_range

  static void REGAL_CALL missing_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pointer);
    Warning( "glFlushVertexArrayRangeAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexArrayParameteriAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexArrayRangeAPPLE", " not available." );
  }

// GL_APPLE_vertex_program_evaluators

  static void REGAL_CALL missing_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    Warning( "glDisableVertexAttribAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    Warning( "glEnableVertexAttribAPPLE", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    Warning( "glIsVertexAttribEnabledAPPLE", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib1dAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib1fAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib2dAPPLE", " not available." );
  }

  static void REGAL_CALL missing_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib2fAPPLE", " not available." );
  }

// GL_ARB_ES2_compatibility

  static void REGAL_CALL missing_glClearDepthf(GLclampf d)
  {
    UNUSED_PARAMETER(d);
    Warning( "glClearDepthf", " not available." );
  }

  static void REGAL_CALL missing_glDepthRangef(GLclampf n, GLclampf f)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glDepthRangef", " not available." );
  }

  static void REGAL_CALL missing_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
  {
    UNUSED_PARAMETER(shadertype);
    UNUSED_PARAMETER(precisiontype);
    UNUSED_PARAMETER(range);
    UNUSED_PARAMETER(precision);
    Warning( "glGetShaderPrecisionFormat", " not available." );
  }

  static void REGAL_CALL missing_glReleaseShaderCompiler(void)
  {
    Warning( "glReleaseShaderCompiler", " not available." );
  }

  static void REGAL_CALL missing_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(shaders);
    UNUSED_PARAMETER(binaryformat);
    UNUSED_PARAMETER(binary);
    UNUSED_PARAMETER(length);
    Warning( "glShaderBinary", " not available." );
  }

// GL_ARB_base_instance

  static void REGAL_CALL missing_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(baseinstance);
    Warning( "glDrawArraysInstancedBaseInstance", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(baseinstance);
    Warning( "glDrawElementsInstancedBaseInstance", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(basevertex);
    UNUSED_PARAMETER(baseinstance);
    Warning( "glDrawElementsInstancedBaseVertexBaseInstance", " not available." );
  }

// GL_ARB_bindless_texture

  static GLuint64 REGAL_CALL missing_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(format);
    Warning( "glGetImageHandleARB", " not available." );
    return 0;
  }

  static GLuint64 REGAL_CALL missing_glGetTextureHandleARB(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glGetTextureHandleARB", " not available." );
    return 0;
  }

  static GLuint64 REGAL_CALL missing_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(sampler);
    Warning( "glGetTextureSamplerHandleARB", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLui64vARB", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsImageHandleResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsImageHandleResidentARB", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsTextureHandleResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsTextureHandleResidentARB", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glMakeImageHandleNonResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeImageHandleNonResidentARB", " not available." );
  }

  static void REGAL_CALL missing_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
  {
    UNUSED_PARAMETER(handle);
    UNUSED_PARAMETER(access);
    Warning( "glMakeImageHandleResidentARB", " not available." );
  }

  static void REGAL_CALL missing_glMakeTextureHandleNonResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleNonResidentARB", " not available." );
  }

  static void REGAL_CALL missing_glMakeTextureHandleResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleResidentARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformHandleui64ARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(values);
    Warning( "glProgramUniformHandleui64vARB", " not available." );
  }

  static void REGAL_CALL missing_glUniformHandleui64ARB(GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64ARB", " not available." );
  }

  static void REGAL_CALL missing_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64vARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1ui64ARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1ui64vARB", " not available." );
  }

// GL_ARB_blend_func_extended

  static void REGAL_CALL missing_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(colorNumber);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(name);
    Warning( "glBindFragDataLocationIndexed", " not available." );
  }

  static GLint REGAL_CALL missing_glGetFragDataIndex(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetFragDataIndex", " not available." );
    return 0;
  }

// GL_ARB_buffer_storage

  static void REGAL_CALL missing_glBufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(flags);
    Warning( "glBufferStorage", " not available." );
  }

  static void REGAL_CALL missing_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(flags);
    Warning( "glNamedBufferStorageEXT", " not available." );
  }

// GL_ARB_cl_event

  static GLsync REGAL_CALL missing_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
  {
    UNUSED_PARAMETER(context);
    UNUSED_PARAMETER(event);
    UNUSED_PARAMETER(flags);
    Warning( "glCreateSyncFromCLeventARB", " not available." );
    return NULL;
  }

// GL_ARB_clear_buffer_object

  static void REGAL_CALL missing_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearBufferData", " not available." );
  }

  static void REGAL_CALL missing_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearBufferSubData", " not available." );
  }

  static void REGAL_CALL missing_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearNamedBufferDataEXT", " not available." );
  }

  static void REGAL_CALL missing_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearNamedBufferSubDataEXT", " not available." );
  }

// GL_ARB_clear_texture

  static void REGAL_CALL missing_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearTexImage", " not available." );
  }

  static void REGAL_CALL missing_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearTexSubImage", " not available." );
  }

// GL_ARB_color_buffer_float

  static void REGAL_CALL missing_glClampColorARB(GLenum target, GLenum clamp)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(clamp);
    Warning( "glClampColorARB", " not available." );
  }

// GL_ARB_compute_shader

  static void REGAL_CALL missing_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
  {
    UNUSED_PARAMETER(num_groups_x);
    UNUSED_PARAMETER(num_groups_y);
    UNUSED_PARAMETER(num_groups_z);
    Warning( "glDispatchCompute", " not available." );
  }

  static void REGAL_CALL missing_glDispatchComputeIndirect(GLintptr indirect)
  {
    UNUSED_PARAMETER(indirect);
    Warning( "glDispatchComputeIndirect", " not available." );
  }

// GL_ARB_compute_variable_group_size

  static void REGAL_CALL missing_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
  {
    UNUSED_PARAMETER(num_groups_x);
    UNUSED_PARAMETER(num_groups_y);
    UNUSED_PARAMETER(num_groups_z);
    UNUSED_PARAMETER(group_size_x);
    UNUSED_PARAMETER(group_size_y);
    UNUSED_PARAMETER(group_size_z);
    Warning( "glDispatchComputeGroupSizeARB", " not available." );
  }

// GL_ARB_copy_buffer

  static void REGAL_CALL missing_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(readtarget);
    UNUSED_PARAMETER(writetarget);
    UNUSED_PARAMETER(readoffset);
    UNUSED_PARAMETER(writeoffset);
    UNUSED_PARAMETER(size);
    Warning( "glCopyBufferSubData", " not available." );
  }

// GL_ARB_copy_image

  static void REGAL_CALL missing_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
  {
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(srcWidth);
    UNUSED_PARAMETER(srcHeight);
    UNUSED_PARAMETER(srcDepth);
    Warning( "glCopyImageSubData", " not available." );
  }

// GL_ARB_debug_output

  static void REGAL_CALL missing_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam)
  {
    UNUSED_PARAMETER(callback);
    UNUSED_PARAMETER(userParam);
    Warning( "glDebugMessageCallbackARB", " not available." );
  }

  static void REGAL_CALL missing_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(enabled);
    Warning( "glDebugMessageControlARB", " not available." );
  }

  static void REGAL_CALL missing_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(buf);
    Warning( "glDebugMessageInsertARB", " not available." );
  }

  static GLuint REGAL_CALL missing_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(sources);
    UNUSED_PARAMETER(types);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(severities);
    UNUSED_PARAMETER(lengths);
    UNUSED_PARAMETER(messageLog);
    Warning( "glGetDebugMessageLogARB", " not available." );
    return 0;
  }

// GL_ARB_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffersARB", " not available." );
  }

// GL_ARB_draw_buffers_blend

  static void REGAL_CALL missing_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateiARB", " not available." );
  }

  static void REGAL_CALL missing_glBlendEquationiARB(GLuint buf, GLenum mode)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationiARB", " not available." );
  }

  static void REGAL_CALL missing_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(srcRGB);
    UNUSED_PARAMETER(dstRGB);
    UNUSED_PARAMETER(srcAlpha);
    UNUSED_PARAMETER(dstAlpha);
    Warning( "glBlendFuncSeparateiARB", " not available." );
  }

  static void REGAL_CALL missing_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    Warning( "glBlendFunciARB", " not available." );
  }

// GL_ARB_draw_elements_base_vertex

  static void REGAL_CALL missing_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(basevertex);
    Warning( "glDrawElementsBaseVertex", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(basevertex);
    Warning( "glDrawElementsInstancedBaseVertex", " not available." );
  }

  static void REGAL_CALL missing_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(basevertex);
    Warning( "glDrawRangeElementsBaseVertex", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(basevertex);
    Warning( "glMultiDrawElementsBaseVertex", " not available." );
  }

// GL_ARB_draw_indirect

  static void REGAL_CALL missing_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    Warning( "glDrawArraysIndirect", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    Warning( "glDrawElementsIndirect", " not available." );
  }

// GL_ARB_draw_instanced

  static void REGAL_CALL missing_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstancedARB", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstancedARB", " not available." );
  }

// GL_ARB_framebuffer_no_attachments

  static void REGAL_CALL missing_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFramebufferParameteri", " not available." );
  }

  static void REGAL_CALL missing_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedFramebufferParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glNamedFramebufferParameteriEXT", " not available." );
  }

// GL_ARB_framebuffer_object

  static void REGAL_CALL missing_glBindFramebuffer(GLenum target, GLuint framebuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(framebuffer);
    Warning( "glBindFramebuffer", " not available." );
  }

  static void REGAL_CALL missing_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glBindRenderbuffer", " not available." );
  }

  static void REGAL_CALL missing_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebuffer", " not available." );
  }

  static GLenum REGAL_CALL missing_glCheckFramebufferStatus(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glCheckFramebufferStatus", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glDeleteFramebuffers", " not available." );
  }

  static void REGAL_CALL missing_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glDeleteRenderbuffers", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glFramebufferRenderbuffer", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture1D", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture2D", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTexture3D", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTextureLayer", " not available." );
  }

  static void REGAL_CALL missing_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glGenFramebuffers", " not available." );
  }

  static void REGAL_CALL missing_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glGenRenderbuffers", " not available." );
  }

  static void REGAL_CALL missing_glGenerateMipmap(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMipmap", " not available." );
  }

  static void REGAL_CALL missing_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferAttachmentParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetRenderbufferParameteriv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsFramebuffer(GLuint framebuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    Warning( "glIsFramebuffer", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsRenderbuffer(GLuint renderbuffer)
  {
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glIsRenderbuffer", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorage", " not available." );
  }

  static void REGAL_CALL missing_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisample", " not available." );
  }

// GL_ARB_geometry_shader4

  static void REGAL_CALL missing_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTextureARB", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glFramebufferTextureFaceARB", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTextureLayerARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glProgramParameteriARB", " not available." );
  }

// GL_ARB_get_program_binary

  static void REGAL_CALL missing_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    Warning( "glGetProgramBinary", " not available." );
  }

  static void REGAL_CALL missing_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    UNUSED_PARAMETER(length);
    Warning( "glProgramBinary", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameteri(GLuint program, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glProgramParameteri", " not available." );
  }

// GL_ARB_gpu_shader_fp64

  static void REGAL_CALL missing_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformdv", " not available." );
  }

  static void REGAL_CALL missing_glUniform1d(GLint location, GLdouble x)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glUniform1d", " not available." );
  }

  static void REGAL_CALL missing_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1dv", " not available." );
  }

  static void REGAL_CALL missing_glUniform2d(GLint location, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glUniform2d", " not available." );
  }

  static void REGAL_CALL missing_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2dv", " not available." );
  }

  static void REGAL_CALL missing_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glUniform3d", " not available." );
  }

  static void REGAL_CALL missing_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3dv", " not available." );
  }

  static void REGAL_CALL missing_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glUniform4d", " not available." );
  }

  static void REGAL_CALL missing_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x3dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x4dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x2dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x4dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x2dv", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x3dv", " not available." );
  }

// GL_ARB_imaging

  static void REGAL_CALL missing_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glColorSubTable", " not available." );
  }

  static void REGAL_CALL missing_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorTable", " not available." );
  }

  static void REGAL_CALL missing_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter1D", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter2D", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterf", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameteri", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorSubTable", " not available." );
  }

  static void REGAL_CALL missing_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorTable", " not available." );
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyConvolutionFilter1D", " not available." );
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyConvolutionFilter2D", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glGetColorTable", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glGetConvolutionFilter", " not available." );
  }

  static void REGAL_CALL missing_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(values);
    Warning( "glGetHistogram", " not available." );
  }

  static void REGAL_CALL missing_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(types);
    UNUSED_PARAMETER(values);
    Warning( "glGetMinmax", " not available." );
  }

  static void REGAL_CALL missing_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameteriv", " not available." );
  }

  static void REGAL_CALL missing_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    UNUSED_PARAMETER(span);
    Warning( "glGetSeparableFilter", " not available." );
  }

  static void REGAL_CALL missing_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glHistogram", " not available." );
  }

  static void REGAL_CALL missing_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glMinmax", " not available." );
  }

  static void REGAL_CALL missing_glResetHistogram(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetHistogram", " not available." );
  }

  static void REGAL_CALL missing_glResetMinmax(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetMinmax", " not available." );
  }

  static void REGAL_CALL missing_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    Warning( "glSeparableFilter2D", " not available." );
  }

// GL_ARB_indirect_parameters

  static void REGAL_CALL missing_glMultiDrawArraysIndirectCountARB(GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(drawcount);
    UNUSED_PARAMETER(maxdrawcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawArraysIndirectCountARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(drawcount);
    UNUSED_PARAMETER(maxdrawcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawElementsIndirectCountARB", " not available." );
  }

// GL_ARB_instanced_arrays

  static void REGAL_CALL missing_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexAttribDivisorARB", " not available." );
  }

// GL_ARB_internalformat_query

  static void REGAL_CALL missing_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetInternalformativ", " not available." );
  }

// GL_ARB_internalformat_query2

  static void REGAL_CALL missing_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetInternalformati64v", " not available." );
  }

// GL_ARB_invalidate_subdata

  static void REGAL_CALL missing_glInvalidateBufferData(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glInvalidateBufferData", " not available." );
  }

  static void REGAL_CALL missing_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glInvalidateBufferSubData", " not available." );
  }

  static void REGAL_CALL missing_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numAttachments);
    UNUSED_PARAMETER(attachments);
    Warning( "glInvalidateFramebuffer", " not available." );
  }

  static void REGAL_CALL missing_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numAttachments);
    UNUSED_PARAMETER(attachments);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glInvalidateSubFramebuffer", " not available." );
  }

  static void REGAL_CALL missing_glInvalidateTexImage(GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glInvalidateTexImage", " not available." );
  }

  static void REGAL_CALL missing_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glInvalidateTexSubImage", " not available." );
  }

// GL_ARB_map_buffer_range

  static void REGAL_CALL missing_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glFlushMappedBufferRange", " not available." );
  }

  static GLvoid *REGAL_CALL missing_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferRange", " not available." );
    return NULL;
  }

// GL_ARB_matrix_palette

  static void REGAL_CALL missing_glCurrentPaletteMatrixARB(GLint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glCurrentPaletteMatrixARB", " not available." );
  }

  static void REGAL_CALL missing_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glMatrixIndexPointerARB", " not available." );
  }

  static void REGAL_CALL missing_glMatrixIndexubvARB(GLint size, const GLubyte *indices)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(indices);
    Warning( "glMatrixIndexubvARB", " not available." );
  }

  static void REGAL_CALL missing_glMatrixIndexuivARB(GLint size, const GLuint *indices)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(indices);
    Warning( "glMatrixIndexuivARB", " not available." );
  }

  static void REGAL_CALL missing_glMatrixIndexusvARB(GLint size, const GLushort *indices)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(indices);
    Warning( "glMatrixIndexusvARB", " not available." );
  }

// GL_ARB_multi_bind

  static void REGAL_CALL missing_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(buffers);
    Warning( "glBindBuffersBase", " not available." );
  }

  static void REGAL_CALL missing_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(buffers);
    UNUSED_PARAMETER(offsets);
    UNUSED_PARAMETER(sizes);
    Warning( "glBindBuffersRange", " not available." );
  }

  static void REGAL_CALL missing_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(textures);
    Warning( "glBindImageTextures", " not available." );
  }

  static void REGAL_CALL missing_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(samplers);
    Warning( "glBindSamplers", " not available." );
  }

  static void REGAL_CALL missing_glBindTextures(GLuint first, GLsizei count, const GLuint *textures)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(textures);
    Warning( "glBindTextures", " not available." );
  }

  static void REGAL_CALL missing_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(buffers);
    UNUSED_PARAMETER(offsets);
    UNUSED_PARAMETER(strides);
    Warning( "glBindVertexBuffers", " not available." );
  }

// GL_ARB_multi_draw_indirect

  static void REGAL_CALL missing_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawArraysIndirect", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawElementsIndirect", " not available." );
  }

// GL_ARB_multisample

  static void REGAL_CALL missing_glSampleCoverageARB(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleCoverageARB", " not available." );
  }

// GL_ARB_multitexture

  static void REGAL_CALL missing_glActiveTextureARB(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glActiveTextureARB", " not available." );
  }

  static void REGAL_CALL missing_glClientActiveTextureARB(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glClientActiveTextureARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1dARB(GLenum target, GLdouble s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1dARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1dvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1fARB(GLenum target, GLfloat s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1fARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1fvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1iARB(GLenum target, GLint s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1iARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1ivARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1sARB(GLenum target, GLshort s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1sARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1svARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2dARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2dvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2fARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2fvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2iARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2ivARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2sARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2svARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3dARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3dvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3fARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3fvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3iARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3ivARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3sARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3svARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4dARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4dvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4fARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4fvARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4iARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4ivARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4sARB", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4svARB", " not available." );
  }

// GL_ARB_occlusion_query

  static void REGAL_CALL missing_glBeginQueryARB(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryARB", " not available." );
  }

  static void REGAL_CALL missing_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueriesARB", " not available." );
  }

  static void REGAL_CALL missing_glEndQueryARB(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQueryARB", " not available." );
  }

  static void REGAL_CALL missing_glGenQueriesARB(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueriesARB", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryivARB", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsQueryARB(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQueryARB", " not available." );
    return GL_FALSE;
  }

// GL_ARB_point_parameters

  static void REGAL_CALL missing_glPointParameterfARB(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterfARB", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterfvARB(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfvARB", " not available." );
  }

// GL_ARB_program_interface_query

  static void REGAL_CALL missing_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramInterfaceiv", " not available." );
  }

  static GLuint REGAL_CALL missing_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceIndex", " not available." );
    return 0;
  }

  static GLint REGAL_CALL missing_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceLocation", " not available." );
    return 0;
  }

  static GLint REGAL_CALL missing_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceLocationIndex", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceName", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(propCount);
    UNUSED_PARAMETER(props);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramResourceiv", " not available." );
  }

// GL_ARB_provoking_vertex

  static void REGAL_CALL missing_glProvokingVertex(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glProvokingVertex", " not available." );
  }

// GL_ARB_robustness

  static GLenum REGAL_CALL missing_glGetGraphicsResetStatusARB(void)
  {
    Warning( "glGetGraphicsResetStatusARB", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(table);
    Warning( "glGetnColorTableARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(img);
    Warning( "glGetnCompressedTexImageARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(image);
    Warning( "glGetnConvolutionFilterARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnHistogramARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(v);
    Warning( "glGetnMapdvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(v);
    Warning( "glGetnMapfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(v);
    Warning( "glGetnMapivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnMinmaxARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnPixelMapfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnPixelMapuivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnPixelMapusvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
  {
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(pattern);
    Warning( "glGetnPolygonStippleARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(rowBufSize);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(columnBufSize);
    UNUSED_PARAMETER(column);
    UNUSED_PARAMETER(span);
    Warning( "glGetnSeparableFilterARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(img);
    Warning( "glGetnTexImageARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformdvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformuivARB", " not available." );
  }

  static void REGAL_CALL missing_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(data);
    Warning( "glReadnPixelsARB", " not available." );
  }

// GL_ARB_sample_shading

  static void REGAL_CALL missing_glMinSampleShading(GLclampf value)
  {
    UNUSED_PARAMETER(value);
    Warning( "glMinSampleShading", " not available." );
  }

  static void REGAL_CALL missing_glMinSampleShadingARB(GLclampf value)
  {
    UNUSED_PARAMETER(value);
    Warning( "glMinSampleShadingARB", " not available." );
  }

// GL_ARB_sampler_objects

  static void REGAL_CALL missing_glBindSampler(GLuint unit, GLuint sampler)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(sampler);
    Warning( "glBindSampler", " not available." );
  }

  static void REGAL_CALL missing_glDeleteSamplers(GLsizei count, const GLuint *samplers)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(samplers);
    Warning( "glDeleteSamplers", " not available." );
  }

  static void REGAL_CALL missing_glGenSamplers(GLsizei count, GLuint *samplers)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(samplers);
    Warning( "glGenSamplers", " not available." );
  }

  static void REGAL_CALL missing_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameterIiv", " not available." );
  }

  static void REGAL_CALL missing_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameterIuiv", " not available." );
  }

  static void REGAL_CALL missing_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameteriv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsSampler(GLuint sampler)
  {
    UNUSED_PARAMETER(sampler);
    Warning( "glIsSampler", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameterIiv", " not available." );
  }

  static void REGAL_CALL missing_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameterIuiv", " not available." );
  }

  static void REGAL_CALL missing_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSamplerParameterf", " not available." );
  }

  static void REGAL_CALL missing_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSamplerParameteri", " not available." );
  }

  static void REGAL_CALL missing_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameteriv", " not available." );
  }

// GL_ARB_separate_shader_objects

  static void REGAL_CALL missing_glActiveShaderProgram(GLuint pipeline, GLuint program)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(program);
    Warning( "glActiveShaderProgram", " not available." );
  }

  static void REGAL_CALL missing_glBindProgramPipeline(GLuint pipeline)
  {
    UNUSED_PARAMETER(pipeline);
    Warning( "glBindProgramPipeline", " not available." );
  }

  static GLuint REGAL_CALL missing_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(strings);
    Warning( "glCreateShaderProgramv", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(pipelines);
    Warning( "glDeleteProgramPipelines", " not available." );
  }

  static void REGAL_CALL missing_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(pipelines);
    Warning( "glGenProgramPipelines", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetProgramPipelineInfoLog", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramPipelineiv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsProgramPipeline(GLuint pipeline)
  {
    UNUSED_PARAMETER(pipeline);
    Warning( "glIsProgramPipeline", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1d", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1f", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1i(GLuint program, GLint location, GLint x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1i", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1iv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1ui", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1uiv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2d", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2f", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2i", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2iv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2ui", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2uiv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3d", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3f", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3i", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3iv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3ui", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3uiv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4d", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4f", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4i", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4iv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4ui", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4uiv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2fv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3dv", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3fv", " not available." );
  }

  static void REGAL_CALL missing_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(stages);
    UNUSED_PARAMETER(program);
    Warning( "glUseProgramStages", " not available." );
  }

  static void REGAL_CALL missing_glValidateProgramPipeline(GLuint pipeline)
  {
    UNUSED_PARAMETER(pipeline);
    Warning( "glValidateProgramPipeline", " not available." );
  }

// GL_ARB_shader_atomic_counters

  static void REGAL_CALL missing_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufferIndex);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetActiveAtomicCounterBufferiv", " not available." );
  }

// GL_ARB_shader_image_load_store

  static void REGAL_CALL missing_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(access);
    UNUSED_PARAMETER(format);
    Warning( "glBindImageTexture", " not available." );
  }

  static void REGAL_CALL missing_glMemoryBarrier(GLbitfield barriers)
  {
    UNUSED_PARAMETER(barriers);
    Warning( "glMemoryBarrier", " not available." );
  }

// GL_ARB_shader_objects

  static void REGAL_CALL missing_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
  {
    UNUSED_PARAMETER(containerObj);
    UNUSED_PARAMETER(obj);
    Warning( "glAttachObjectARB", " not available." );
  }

  static void REGAL_CALL missing_glCompileShaderARB(GLhandleARB shaderObj)
  {
    UNUSED_PARAMETER(shaderObj);
    Warning( "glCompileShaderARB", " not available." );
  }

  static GLhandleARB REGAL_CALL missing_glCreateProgramObjectARB(void)
  {
    Warning( "glCreateProgramObjectARB", " not available." );
    return 0;
  }

  static GLhandleARB REGAL_CALL missing_glCreateShaderObjectARB(GLenum shaderType)
  {
    UNUSED_PARAMETER(shaderType);
    Warning( "glCreateShaderObjectARB", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteObjectARB(GLhandleARB obj)
  {
    UNUSED_PARAMETER(obj);
    Warning( "glDeleteObjectARB", " not available." );
  }

  static void REGAL_CALL missing_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
  {
    UNUSED_PARAMETER(containerObj);
    UNUSED_PARAMETER(attachedObj);
    Warning( "glDetachObjectARB", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveUniformARB", " not available." );
  }

  static void REGAL_CALL missing_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
  {
    UNUSED_PARAMETER(containerObj);
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(obj);
    Warning( "glGetAttachedObjectsARB", " not available." );
  }

  static GLhandleARB REGAL_CALL missing_glGetHandleARB(GLenum pname)
  {
    UNUSED_PARAMETER(pname);
    Warning( "glGetHandleARB", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetInfoLogARB", " not available." );
  }

  static void REGAL_CALL missing_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectParameterfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectParameterivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(source);
    Warning( "glGetShaderSourceARB", " not available." );
  }

  static GLint REGAL_CALL missing_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(name);
    Warning( "glGetUniformLocationARB", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformivARB", " not available." );
  }

  static void REGAL_CALL missing_glLinkProgramARB(GLhandleARB programObj)
  {
    UNUSED_PARAMETER(programObj);
    Warning( "glLinkProgramARB", " not available." );
  }

  static void REGAL_CALL missing_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
  {
    UNUSED_PARAMETER(shaderObj);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(string);
    UNUSED_PARAMETER(length);
    Warning( "glShaderSourceARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform1fARB(GLint location, GLfloat v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1fARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform1iARB(GLint location, GLint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1iARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1ivARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2fARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform2iARB(GLint location, GLint v0, GLint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2iARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2ivARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3fARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3iARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3ivARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4fARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4iARB", " not available." );
  }

  static void REGAL_CALL missing_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4ivARB", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4fvARB", " not available." );
  }

  static void REGAL_CALL missing_glUseProgramObjectARB(GLhandleARB programObj)
  {
    UNUSED_PARAMETER(programObj);
    Warning( "glUseProgramObjectARB", " not available." );
  }

  static void REGAL_CALL missing_glValidateProgramARB(GLhandleARB programObj)
  {
    UNUSED_PARAMETER(programObj);
    Warning( "glValidateProgramARB", " not available." );
  }

// GL_ARB_shader_storage_buffer_object

  static void REGAL_CALL missing_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(storageBlockIndex);
    UNUSED_PARAMETER(storageBlockBinding);
    Warning( "glShaderStorageBlockBinding", " not available." );
  }

// GL_ARB_shader_subroutine

  static void REGAL_CALL missing_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveSubroutineName", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveSubroutineUniformName", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(values);
    Warning( "glGetActiveSubroutineUniformiv", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(values);
    Warning( "glGetProgramStageiv", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramSubroutineParameteruivNV", " not available." );
  }

  static GLuint REGAL_CALL missing_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(name);
    Warning( "glGetSubroutineIndex", " not available." );
    return 0;
  }

  static GLint REGAL_CALL missing_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(name);
    Warning( "glGetSubroutineUniformLocation", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
  {
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformSubroutineuiv", " not available." );
  }

  static void REGAL_CALL missing_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramSubroutineParametersuivNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
  {
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(indices);
    Warning( "glUniformSubroutinesuiv", " not available." );
  }

// GL_ARB_shading_language_include

  static void REGAL_CALL missing_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(length);
    Warning( "glCompileShaderIncludeARB", " not available." );
  }

  static void REGAL_CALL missing_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    Warning( "glDeleteNamedStringARB", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(stringlen);
    UNUSED_PARAMETER(string);
    Warning( "glGetNamedStringARB", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedStringivARB", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsNamedStringARB(GLint namelen, const GLchar *name)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    Warning( "glIsNamedStringARB", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(stringlen);
    UNUSED_PARAMETER(string);
    Warning( "glNamedStringARB", " not available." );
  }

// GL_ARB_sparse_texture

  static void REGAL_CALL missing_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(commit);
    Warning( "glTexPageCommitmentARB", " not available." );
  }

  static void REGAL_CALL missing_glTexturePageCommitmentEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(commit);
    Warning( "glTexturePageCommitmentEXT", " not available." );
  }

// GL_ARB_sync

  static GLenum REGAL_CALL missing_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glClientWaitSync", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteSync(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glDeleteSync", " not available." );
  }

  static GLsync REGAL_CALL missing_glFenceSync(GLenum condition, GLbitfield flags)
  {
    UNUSED_PARAMETER(condition);
    UNUSED_PARAMETER(flags);
    Warning( "glFenceSync", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glGetInteger64v(GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetInteger64v", " not available." );
  }

  static void REGAL_CALL missing_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(values);
    Warning( "glGetSynciv", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsSync(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glIsSync", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glWaitSync", " not available." );
  }

// GL_ARB_tessellation_shader

  static void REGAL_CALL missing_glPatchParameterfv(GLenum pname, const GLfloat *values)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(values);
    Warning( "glPatchParameterfv", " not available." );
  }

  static void REGAL_CALL missing_glPatchParameteri(GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPatchParameteri", " not available." );
  }

// GL_ARB_texture_buffer_object

  static void REGAL_CALL missing_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTexBufferARB", " not available." );
  }

// GL_ARB_texture_buffer_range

  static void REGAL_CALL missing_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glTexBufferRange", " not available." );
  }

  static void REGAL_CALL missing_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glTextureBufferRangeEXT", " not available." );
  }

// GL_ARB_texture_compression

  static void REGAL_CALL missing_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage1DARB", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage2DARB", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage3DARB", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage1DARB", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage2DARB", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage3DARB", " not available." );
  }

  static void REGAL_CALL missing_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedTexImageARB", " not available." );
  }

// GL_ARB_texture_multisample

  static void REGAL_CALL missing_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(val);
    Warning( "glGetMultisamplefv", " not available." );
  }

  static void REGAL_CALL missing_glSampleMaski(GLuint index, GLbitfield mask)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(mask);
    Warning( "glSampleMaski", " not available." );
  }

  static void REGAL_CALL missing_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexImage2DMultisample", " not available." );
  }

  static void REGAL_CALL missing_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexImage3DMultisample", " not available." );
  }

// GL_ARB_texture_storage

  static void REGAL_CALL missing_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    Warning( "glTexStorage1D", " not available." );
  }

  static void REGAL_CALL missing_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glTexStorage2D", " not available." );
  }

  static void REGAL_CALL missing_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glTexStorage3D", " not available." );
  }

  static void REGAL_CALL missing_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    Warning( "glTextureStorage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glTextureStorage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glTextureStorage3DEXT", " not available." );
  }

// GL_ARB_texture_storage_multisample

  static void REGAL_CALL missing_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexStorage2DMultisample", " not available." );
  }

  static void REGAL_CALL missing_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexStorage3DMultisample", " not available." );
  }

  static void REGAL_CALL missing_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTextureStorage2DMultisampleEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTextureStorage3DMultisampleEXT", " not available." );
  }

// GL_ARB_texture_view

  static void REGAL_CALL missing_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(origtexture);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(minlevel);
    UNUSED_PARAMETER(numlevels);
    UNUSED_PARAMETER(minlayer);
    UNUSED_PARAMETER(numlayers);
    Warning( "glTextureView", " not available." );
  }

// GL_ARB_timer_query

  static void REGAL_CALL missing_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjecti64v", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectui64v", " not available." );
  }

  static void REGAL_CALL missing_glQueryCounter(GLuint id, GLenum target)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(target);
    Warning( "glQueryCounter", " not available." );
  }

// GL_ARB_transform_feedback2

  static void REGAL_CALL missing_glBindTransformFeedback(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBindTransformFeedback", " not available." );
  }

  static void REGAL_CALL missing_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteTransformFeedbacks", " not available." );
  }

  static void REGAL_CALL missing_glDrawTransformFeedback(GLenum mode, GLuint name)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(name);
    Warning( "glDrawTransformFeedback", " not available." );
  }

  static void REGAL_CALL missing_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenTransformFeedbacks", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsTransformFeedback(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsTransformFeedback", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glPauseTransformFeedback(void)
  {
    Warning( "glPauseTransformFeedback", " not available." );
  }

  static void REGAL_CALL missing_glResumeTransformFeedback(void)
  {
    Warning( "glResumeTransformFeedback", " not available." );
  }

// GL_ARB_transform_feedback3

  static void REGAL_CALL missing_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryIndexed", " not available." );
  }

  static void REGAL_CALL missing_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(stream);
    Warning( "glDrawTransformFeedbackStream", " not available." );
  }

  static void REGAL_CALL missing_glEndQueryIndexed(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glEndQueryIndexed", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryIndexediv", " not available." );
  }

// GL_ARB_transform_feedback_instanced

  static void REGAL_CALL missing_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawTransformFeedbackInstanced", " not available." );
  }

  static void REGAL_CALL missing_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawTransformFeedbackStreamInstanced", " not available." );
  }

// GL_ARB_transpose_matrix

  static void REGAL_CALL missing_glLoadTransposeMatrixdARB(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixdARB", " not available." );
  }

  static void REGAL_CALL missing_glLoadTransposeMatrixfARB(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixfARB", " not available." );
  }

  static void REGAL_CALL missing_glMultTransposeMatrixdARB(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixdARB", " not available." );
  }

  static void REGAL_CALL missing_glMultTransposeMatrixfARB(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixfARB", " not available." );
  }

// GL_ARB_uniform_buffer_object

  static void REGAL_CALL missing_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferBase", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glBindBufferRange", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockIndex);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(uniformBlockName);
    Warning( "glGetActiveUniformBlockName", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockIndex);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetActiveUniformBlockiv", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformIndex);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(uniformName);
    Warning( "glGetActiveUniformName", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformCount);
    UNUSED_PARAMETER(uniformIndices);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetActiveUniformsiv", " not available." );
  }

  static void REGAL_CALL missing_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegeri_v", " not available." );
  }

  static GLuint REGAL_CALL missing_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockName);
    Warning( "glGetUniformBlockIndex", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformCount);
    UNUSED_PARAMETER(uniformNames);
    UNUSED_PARAMETER(uniformIndices);
    Warning( "glGetUniformIndices", " not available." );
  }

  static void REGAL_CALL missing_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockIndex);
    UNUSED_PARAMETER(uniformBlockBinding);
    Warning( "glUniformBlockBinding", " not available." );
  }

// GL_ARB_vertex_array_object

  static void REGAL_CALL missing_glBindVertexArray(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glBindVertexArray", " not available." );
  }

  static void REGAL_CALL missing_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glDeleteVertexArrays", " not available." );
  }

  static void REGAL_CALL missing_glGenVertexArrays(GLsizei n, GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glGenVertexArrays", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsVertexArray(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glIsVertexArray", " not available." );
    return GL_FALSE;
  }

// GL_ARB_vertex_attrib_64bit

  static void REGAL_CALL missing_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLdv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1d(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4d", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4dv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribLPointer", " not available." );
  }

// GL_ARB_vertex_attrib_binding

  static void REGAL_CALL missing_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(stride);
    Warning( "glBindVertexBuffer", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexArrayBindVertexBufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(bindingindex);
    Warning( "glVertexArrayVertexAttribBindingEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexArrayVertexAttribFormatEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexArrayVertexAttribIFormatEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexArrayVertexAttribLFormatEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexArrayVertexBindingDivisorEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(bindingindex);
    Warning( "glVertexAttribBinding", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexAttribFormat", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexAttribIFormat", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexAttribLFormat", " not available." );
  }

  static void REGAL_CALL missing_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
  {
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexBindingDivisor", " not available." );
  }

// GL_ARB_vertex_blend

  static void REGAL_CALL missing_glVertexBlendARB(GLint count)
  {
    UNUSED_PARAMETER(count);
    Warning( "glVertexBlendARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glWeightPointerARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightbvARB(GLint size, const GLbyte *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightbvARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightdvARB(GLint size, const GLdouble *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightdvARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightfvARB(GLint size, const GLfloat *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightfvARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightivARB(GLint size, const GLint *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightivARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightsvARB(GLint size, const GLshort *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightsvARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightubvARB(GLint size, const GLubyte *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightubvARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightuivARB(GLint size, const GLuint *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightuivARB", " not available." );
  }

  static void REGAL_CALL missing_glWeightusvARB(GLint size, const GLushort *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightusvARB", " not available." );
  }

// GL_ARB_vertex_buffer_object

  static void REGAL_CALL missing_glBindBufferARB(GLenum target, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferARB", " not available." );
  }

  static void REGAL_CALL missing_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(usage);
    Warning( "glBufferDataARB", " not available." );
  }

  static void REGAL_CALL missing_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glBufferSubDataARB", " not available." );
  }

  static void REGAL_CALL missing_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glDeleteBuffersARB", " not available." );
  }

  static void REGAL_CALL missing_glGenBuffersARB(GLsizei n, GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glGenBuffersARB", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameterivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferPointervARB", " not available." );
  }

  static void REGAL_CALL missing_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glGetBufferSubDataARB", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsBufferARB(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsBufferARB", " not available." );
    return GL_FALSE;
  }

  static GLvoid *REGAL_CALL missing_glMapBufferARB(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferARB", " not available." );
    return NULL;
  }

  static GLboolean REGAL_CALL missing_glUnmapBufferARB(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glUnmapBufferARB", " not available." );
    return GL_FALSE;
  }

// GL_ARB_vertex_program

  static void REGAL_CALL missing_glBindProgramARB(GLenum target, GLuint program)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(program);
    Warning( "glBindProgramARB", " not available." );
  }

  static void REGAL_CALL missing_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glDeleteProgramsARB", " not available." );
  }

  static void REGAL_CALL missing_glDisableVertexAttribArrayARB(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glDisableVertexAttribArrayARB", " not available." );
  }

  static void REGAL_CALL missing_glEnableVertexAttribArrayARB(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glEnableVertexAttribArrayARB", " not available." );
  }

  static void REGAL_CALL missing_glGenProgramsARB(GLsizei n, GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glGenProgramsARB", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterdvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterdvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(string);
    Warning( "glGetProgramStringARB", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramivARB", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(pointer);
    Warning( "glGetVertexAttribPointervARB", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribdvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribfvARB", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribivARB", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsProgramARB(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glIsProgramARB", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameter4dARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameter4dvARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameter4fARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameter4fvARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameter4dARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameter4dvARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameter4fARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameter4fvARB", " not available." );
  }

  static void REGAL_CALL missing_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(string);
    Warning( "glProgramStringARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1dARB(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1dARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1dvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1fARB(GLuint index, GLfloat x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1fARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1fvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1sARB(GLuint index, GLshort x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1sARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1svARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2dARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2dvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2fARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2fvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2sARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2svARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3dARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3dvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3fARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3fvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3sARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3svARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NbvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NivARB(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NivARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NsvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4NubARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NubvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NuivARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NusvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4bvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4dARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4dvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4fARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4fvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4ivARB(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ivARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4sARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4svARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ubvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4uivARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4usvARB", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribPointerARB", " not available." );
  }

// GL_ARB_vertex_shader

  static void REGAL_CALL missing_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(name);
    Warning( "glBindAttribLocationARB", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveAttribARB", " not available." );
  }

  static GLint REGAL_CALL missing_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(name);
    Warning( "glGetAttribLocationARB", " not available." );
    return 0;
  }

// GL_ARB_vertex_type_2_10_10_10_rev

  static void REGAL_CALL missing_glColorP3ui(GLenum type, GLuint color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP3ui", " not available." );
  }

  static void REGAL_CALL missing_glColorP3uiv(GLenum type, const GLuint *color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glColorP4ui(GLenum type, GLuint color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP4ui", " not available." );
  }

  static void REGAL_CALL missing_glColorP4uiv(GLenum type, const GLuint *color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP4uiv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP1ui", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP1uiv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP2ui", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP2uiv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP3ui", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP4ui", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP4uiv", " not available." );
  }

  static void REGAL_CALL missing_glNormalP3ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalP3ui", " not available." );
  }

  static void REGAL_CALL missing_glNormalP3uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColorP3ui(GLenum type, GLuint color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glSecondaryColorP3ui", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glSecondaryColorP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP1ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP1ui", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP1uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP1uiv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP2ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP2ui", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP2uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP2uiv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP3ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP3ui", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP3uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP4ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP4ui", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordP4uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP4uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP1ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP1uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP2ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP2uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP3ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP4ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP4uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexP2ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP2ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexP2uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP2uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexP3ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP3ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexP3uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP3uiv", " not available." );
  }

  static void REGAL_CALL missing_glVertexP4ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP4ui", " not available." );
  }

  static void REGAL_CALL missing_glVertexP4uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP4uiv", " not available." );
  }

// GL_ARB_viewport_array

  static void REGAL_CALL missing_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glDepthRangeArrayv", " not available." );
  }

  static void REGAL_CALL missing_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glDepthRangeIndexed", " not available." );
  }

  static void REGAL_CALL missing_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glGetDoublei_v", " not available." );
  }

  static void REGAL_CALL missing_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glGetFloati_v", " not available." );
  }

  static void REGAL_CALL missing_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glScissorArrayv", " not available." );
  }

  static void REGAL_CALL missing_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glScissorIndexed", " not available." );
  }

  static void REGAL_CALL missing_glScissorIndexedv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glScissorIndexedv", " not available." );
  }

  static void REGAL_CALL missing_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glViewportArrayv", " not available." );
  }

  static void REGAL_CALL missing_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(w);
    UNUSED_PARAMETER(h);
    Warning( "glViewportIndexedf", " not available." );
  }

  static void REGAL_CALL missing_glViewportIndexedfv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glViewportIndexedfv", " not available." );
  }

// GL_ARB_window_pos

  static void REGAL_CALL missing_glWindowPos2dARB(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2dARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2dvARB(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2dvARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2fARB(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2fARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2fvARB(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2fvARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2iARB(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2iARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2ivARB(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2ivARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2sARB(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2sARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2svARB(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2svARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3dARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3dvARB(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3dvARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3fARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3fvARB(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3fvARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3iARB(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3iARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3ivARB(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3ivARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3sARB", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3svARB(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3svARB", " not available." );
  }

// GL_ATI_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffersATI", " not available." );
  }

// GL_ATI_element_array

  static void REGAL_CALL missing_glDrawElementArrayATI(GLenum mode, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    Warning( "glDrawElementArrayATI", " not available." );
  }

  static void REGAL_CALL missing_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    Warning( "glDrawRangeElementArrayATI", " not available." );
  }

  static void REGAL_CALL missing_glElementPointerATI(GLenum type, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glElementPointerATI", " not available." );
  }

// GL_ATI_envmap_bumpmap

  static void REGAL_CALL missing_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetTexBumpParameterfvATI", " not available." );
  }

  static void REGAL_CALL missing_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetTexBumpParameterivATI", " not available." );
  }

  static void REGAL_CALL missing_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexBumpParameterfvATI", " not available." );
  }

  static void REGAL_CALL missing_glTexBumpParameterivATI(GLenum pname, const GLint *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexBumpParameterivATI", " not available." );
  }

// GL_ATI_fragment_shader

  static void REGAL_CALL missing_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    Warning( "glAlphaFragmentOp1ATI", " not available." );
  }

  static void REGAL_CALL missing_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    Warning( "glAlphaFragmentOp2ATI", " not available." );
  }

  static void REGAL_CALL missing_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    UNUSED_PARAMETER(arg3);
    UNUSED_PARAMETER(arg3Rep);
    UNUSED_PARAMETER(arg3Mod);
    Warning( "glAlphaFragmentOp3ATI", " not available." );
  }

  static void REGAL_CALL missing_glBeginFragmentShaderATI(void)
  {
    Warning( "glBeginFragmentShaderATI", " not available." );
  }

  static void REGAL_CALL missing_glBindFragmentShaderATI(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBindFragmentShaderATI", " not available." );
  }

  static void REGAL_CALL missing_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMask);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    Warning( "glColorFragmentOp1ATI", " not available." );
  }

  static void REGAL_CALL missing_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMask);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    Warning( "glColorFragmentOp2ATI", " not available." );
  }

  static void REGAL_CALL missing_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMask);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    UNUSED_PARAMETER(arg3);
    UNUSED_PARAMETER(arg3Rep);
    UNUSED_PARAMETER(arg3Mod);
    Warning( "glColorFragmentOp3ATI", " not available." );
  }

  static void REGAL_CALL missing_glDeleteFragmentShaderATI(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glDeleteFragmentShaderATI", " not available." );
  }

  static void REGAL_CALL missing_glEndFragmentShaderATI(void)
  {
    Warning( "glEndFragmentShaderATI", " not available." );
  }

  static GLuint REGAL_CALL missing_glGenFragmentShadersATI(GLuint range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenFragmentShadersATI", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
  {
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(swizzle);
    Warning( "glPassTexCoordATI", " not available." );
  }

  static void REGAL_CALL missing_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
  {
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(interp);
    UNUSED_PARAMETER(swizzle);
    Warning( "glSampleMapATI", " not available." );
  }

  static void REGAL_CALL missing_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
  {
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(value);
    Warning( "glSetFragmentShaderConstantATI", " not available." );
  }

// GL_ATI_map_object_buffer

  static GLvoid *REGAL_CALL missing_glMapObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glMapObjectBufferATI", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glUnmapObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glUnmapObjectBufferATI", " not available." );
  }

// GL_ATI_pn_triangles

  static void REGAL_CALL missing_glPNTrianglesfATI(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPNTrianglesfATI", " not available." );
  }

  static void REGAL_CALL missing_glPNTrianglesiATI(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPNTrianglesiATI", " not available." );
  }

// GL_ATI_separate_stencil

  static void REGAL_CALL missing_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(frontfunc);
    UNUSED_PARAMETER(backfunc);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFuncSeparateATI", " not available." );
  }

  static void REGAL_CALL missing_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(sfail);
    UNUSED_PARAMETER(dpfail);
    UNUSED_PARAMETER(dppass);
    Warning( "glStencilOpSeparateATI", " not available." );
  }

// GL_ATI_vertex_array_object

  static void REGAL_CALL missing_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glArrayObjectATI", " not available." );
  }

  static void REGAL_CALL missing_glFreeObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glFreeObjectBufferATI", " not available." );
  }

  static void REGAL_CALL missing_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetArrayObjectfvATI", " not available." );
  }

  static void REGAL_CALL missing_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetArrayObjectivATI", " not available." );
  }

  static void REGAL_CALL missing_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectBufferfvATI", " not available." );
  }

  static void REGAL_CALL missing_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectBufferivATI", " not available." );
  }

  static void REGAL_CALL missing_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVariantArrayObjectfvATI", " not available." );
  }

  static void REGAL_CALL missing_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVariantArrayObjectivATI", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsObjectBufferATI", " not available." );
    return GL_FALSE;
  }

  static GLuint REGAL_CALL missing_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(usage);
    Warning( "glNewObjectBufferATI", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(preserve);
    Warning( "glUpdateObjectBufferATI", " not available." );
  }

  static void REGAL_CALL missing_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glVariantArrayObjectATI", " not available." );
  }

// GL_ATI_vertex_attrib_array_object

  static void REGAL_CALL missing_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribArrayObjectfvATI", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribArrayObjectivATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexAttribArrayObjectATI", " not available." );
  }

// GL_ATI_vertex_streams

  static void REGAL_CALL missing_glClientActiveVertexStreamATI(GLenum stream)
  {
    UNUSED_PARAMETER(stream);
    Warning( "glClientActiveVertexStreamATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3bATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3bvATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3dATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3dvATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3fATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3fvATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3iATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3ivATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3sATI", " not available." );
  }

  static void REGAL_CALL missing_glNormalStream3svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3svATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexBlendEnvfATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexBlendEnviATI(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexBlendEnviATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1dATI(GLenum stream, GLdouble x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1dATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1dvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1fATI(GLenum stream, GLfloat x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1fATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1fvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1iATI(GLenum stream, GLint x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1iATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1ivATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1sATI(GLenum stream, GLshort x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1sATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream1svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1svATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2dATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2dvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2fATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2fvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2iATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2ivATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2sATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream2svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2svATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3dATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3dvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3fATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3fvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3iATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3ivATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3sATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream3svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3svATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4dATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4dvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4fATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4fvATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4iATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4ivATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4sATI", " not available." );
  }

  static void REGAL_CALL missing_glVertexStream4svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4svATI", " not available." );
  }

// GL_EXT_bindable_uniform

  static GLint REGAL_CALL missing_glGetUniformBufferSizeEXT(GLuint program, GLint location)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    Warning( "glGetUniformBufferSizeEXT", " not available." );
    return 0;
  }

  static GLintptr REGAL_CALL missing_glGetUniformOffsetEXT(GLuint program, GLint location)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    Warning( "glGetUniformOffsetEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(buffer);
    Warning( "glUniformBufferEXT", " not available." );
  }

// GL_EXT_blend_color

  static void REGAL_CALL missing_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glBlendColorEXT", " not available." );
  }

// GL_EXT_blend_equation_separate

  static void REGAL_CALL missing_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateEXT", " not available." );
  }

// GL_EXT_blend_func_separate

  static void REGAL_CALL missing_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparateEXT", " not available." );
  }

// GL_EXT_blend_minmax

  static void REGAL_CALL missing_glBlendEquationEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationEXT", " not available." );
  }

// GL_EXT_color_subtable

  static void REGAL_CALL missing_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorSubTableEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorSubTableEXT", " not available." );
  }

// GL_EXT_compiled_vertex_array

  static void REGAL_CALL missing_glLockArraysEXT(GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glLockArraysEXT", " not available." );
  }

  static void REGAL_CALL missing_glUnlockArraysEXT(void)
  {
    Warning( "glUnlockArraysEXT", " not available." );
  }

// GL_EXT_convolution

  static void REGAL_CALL missing_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glConvolutionParameterfEXT", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glConvolutionParameteriEXT", " not available." );
  }

  static void REGAL_CALL missing_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyConvolutionFilter1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyConvolutionFilter2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glGetConvolutionFilterEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    UNUSED_PARAMETER(span);
    Warning( "glGetSeparableFilterEXT", " not available." );
  }

  static void REGAL_CALL missing_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    Warning( "glSeparableFilter2DEXT", " not available." );
  }

// GL_EXT_coordinate_frame

  static void REGAL_CALL missing_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3bEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3bvEXT(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3bvEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3dEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3dvEXT(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3fEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3fvEXT(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3iEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3ivEXT(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3sEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormal3svEXT(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3svEXT", " not available." );
  }

  static void REGAL_CALL missing_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glBinormalPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3bEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3bvEXT(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3bvEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3dEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3dvEXT(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3fEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3fvEXT(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3iEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3ivEXT(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3sEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangent3svEXT(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3svEXT", " not available." );
  }

  static void REGAL_CALL missing_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glTangentPointerEXT", " not available." );
  }

// GL_EXT_copy_texture

  static void REGAL_CALL missing_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyTexSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage3DEXT", " not available." );
  }

// GL_EXT_cull_vertex

  static void REGAL_CALL missing_glCullParameterdvEXT(GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCullParameterdvEXT", " not available." );
  }

  static void REGAL_CALL missing_glCullParameterfvEXT(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCullParameterfvEXT", " not available." );
  }

// GL_EXT_debug_label

  static void REGAL_CALL missing_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glGetObjectLabelEXT", " not available." );
  }

  static void REGAL_CALL missing_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glLabelObjectEXT", " not available." );
  }

// GL_EXT_debug_marker

  static void REGAL_CALL missing_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(marker);
    Warning( "glInsertEventMarkerEXT", " not available." );
  }

  static void REGAL_CALL missing_glPopGroupMarkerEXT(void)
  {
    Warning( "glPopGroupMarkerEXT", " not available." );
  }

  static void REGAL_CALL missing_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(marker);
    Warning( "glPushGroupMarkerEXT", " not available." );
  }

// GL_EXT_depth_bounds_test

  static void REGAL_CALL missing_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
  {
    UNUSED_PARAMETER(zmin);
    UNUSED_PARAMETER(zmax);
    Warning( "glDepthBoundsEXT", " not available." );
  }

// GL_EXT_direct_state_access

  static void REGAL_CALL missing_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindMultiTextureEXT", " not available." );
  }

  static GLenum REGAL_CALL missing_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(target);
    Warning( "glCheckNamedFramebufferStatusEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glClientAttribDefaultEXT(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glClientAttribDefaultEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedMultiTexImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedMultiTexImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexSubImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureSubImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyMultiTexImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyMultiTexImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyMultiTexSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyMultiTexSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyMultiTexSubImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTextureImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTextureImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyTextureSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTextureSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTextureSubImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glDisableClientStateIndexedEXT", " not available." );
  }

  static void REGAL_CALL missing_glDisableClientStateiEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glDisableClientStateiEXT", " not available." );
  }

  static void REGAL_CALL missing_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glDisableVertexArrayAttribEXT", " not available." );
  }

  static void REGAL_CALL missing_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glDisableVertexArrayEXT", " not available." );
  }

  static void REGAL_CALL missing_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glEnableClientStateIndexedEXT", " not available." );
  }

  static void REGAL_CALL missing_glEnableClientStateiEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glEnableClientStateiEXT", " not available." );
  }

  static void REGAL_CALL missing_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glEnableVertexArrayAttribEXT", " not available." );
  }

  static void REGAL_CALL missing_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glEnableVertexArrayEXT", " not available." );
  }

  static void REGAL_CALL missing_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glFlushMappedNamedBufferRangeEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(mode);
    Warning( "glFramebufferDrawBufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glFramebufferDrawBuffersEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(mode);
    Warning( "glFramebufferReadBufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMultiTexMipmapEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    Warning( "glGenerateTextureMipmapEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedMultiTexImageEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedTextureImageEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetDoubleIndexedvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetDoublei_vEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetFloatIndexedvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetFloati_vEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexEnvfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexEnvivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexGendvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexGenfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexGenivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glGetMultiTexImageEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexLevelParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexLevelParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedBufferParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedBufferPointervEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glGetNamedBufferSubDataEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedFramebufferAttachmentParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterdvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(string);
    Warning( "glGetNamedProgramStringEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedRenderbufferParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetPointerIndexedvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetPointeri_vEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glGetTextureImageEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureLevelParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureLevelParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayIntegeri_vEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayIntegervEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayPointeri_vEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayPointervEXT", " not available." );
  }

  static GLvoid *REGAL_CALL missing_glMapNamedBufferEXT(GLuint buffer, GLenum access)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(access);
    Warning( "glMapNamedBufferEXT", " not available." );
    return NULL;
  }

  static GLvoid *REGAL_CALL missing_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(access);
    Warning( "glMapNamedBufferRangeEXT", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glMatrixFrustumEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixLoadIdentityEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixLoadIdentityEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoadTransposedEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoadTransposefEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoaddEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoadfEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultTransposedEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultTransposefEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultdEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultfEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glMatrixOrthoEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixPopEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixPopEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixPushEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixPushEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixRotatedEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixRotatefEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixScaledEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixScalefEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixTranslatedEXT", " not available." );
  }

  static void REGAL_CALL missing_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixTranslatefEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glMultiTexBufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glMultiTexCoordPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexEnvfEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexEnvfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexEnviEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexEnvivEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexGendEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexGendvEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexGenfEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexGenfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexGeniEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexGenivEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexParameterIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameterfEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameteriEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glMultiTexRenderbufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexSubImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(usage);
    Warning( "glNamedBufferDataEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glNamedBufferSubDataEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(readBuffer);
    UNUSED_PARAMETER(writeBuffer);
    UNUSED_PARAMETER(readOffset);
    UNUSED_PARAMETER(writeOffset);
    UNUSED_PARAMETER(size);
    Warning( "glNamedCopyBufferSubDataEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glNamedFramebufferRenderbufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glNamedFramebufferTexture1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glNamedFramebufferTexture2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(zoffset);
    Warning( "glNamedFramebufferTexture3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glNamedFramebufferTextureEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glNamedFramebufferTextureFaceEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glNamedFramebufferTextureLayerEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameter4dEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameter4dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameter4fEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameter4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameterI4iEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameterI4ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameterI4uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameterI4uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameters4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParametersI4ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParametersI4uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(string);
    Warning( "glNamedProgramStringEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glNamedRenderbufferStorageEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glNamedRenderbufferStorageMultisampleCoverageEXT", " not available." );
  }

  static void REGAL_CALL missing_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glNamedRenderbufferStorageMultisampleEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1dEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1fEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1iEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2dEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glProgramUniform2fEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glProgramUniform2iEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glProgramUniform2uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3dEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glProgramUniform3fEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glProgramUniform3iEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glProgramUniform3uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4dEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glProgramUniform4fEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glProgramUniform4iEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glProgramUniform4uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glPushClientAttribDefaultEXT(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPushClientAttribDefaultEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTextureBufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureImage3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTextureParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTextureParameterIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameterfEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameteriEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glTextureRenderbufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureSubImage3DEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_glUnmapNamedBufferEXT(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glUnmapNamedBufferEXT", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayColorOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayEdgeFlagOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayFogCoordOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayIndexOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayMultiTexCoordOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayNormalOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArraySecondaryColorOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayTexCoordOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexAttribIOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexAttribOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexOffsetEXT", " not available." );
  }

// GL_EXT_discard_framebuffer

  static void REGAL_CALL missing_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numAttachments);
    UNUSED_PARAMETER(attachments);
    Warning( "glDiscardFramebufferEXT", " not available." );
  }

// GL_EXT_disjoint_timer_query

  static void REGAL_CALL missing_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectivEXT", " not available." );
  }

  static void REGAL_CALL missing_glQueryCounterEXT(GLuint id, GLenum target)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(target);
    Warning( "glQueryCounterEXT", " not available." );
  }

// GL_EXT_draw_buffers2

  static void REGAL_CALL missing_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    Warning( "glColorMaskIndexedEXT", " not available." );
  }

  static void REGAL_CALL missing_glDisableIndexedEXT(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glDisableIndexedEXT", " not available." );
  }

  static void REGAL_CALL missing_glEnableIndexedEXT(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glEnableIndexedEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetBooleanIndexedvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegerIndexedvEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsEnabledIndexedEXT(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glIsEnabledIndexedEXT", " not available." );
    return GL_FALSE;
  }

// GL_EXT_draw_instanced

  static void REGAL_CALL missing_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstancedEXT", " not available." );
  }

  static void REGAL_CALL missing_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstancedEXT", " not available." );
  }

// GL_EXT_draw_range_elements

  static void REGAL_CALL missing_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawRangeElementsEXT", " not available." );
  }

// GL_EXT_fog_coord

  static void REGAL_CALL missing_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glFogCoordPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glFogCoorddEXT(GLdouble coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoorddEXT", " not available." );
  }

  static void REGAL_CALL missing_glFogCoorddvEXT(const GLdouble *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoorddvEXT", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordfEXT(GLfloat coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordfEXT", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordfvEXT(const GLfloat *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordfvEXT", " not available." );
  }

// GL_EXT_fragment_lighting

  static void REGAL_CALL missing_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glFragmentColorMaterialEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModelfEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModeliEXT(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModeliEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModelivEXT(GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelivEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightfEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightiEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightivEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialfEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialiEXT", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialivEXT", " not available." );
  }

  static void REGAL_CALL missing_glLightEnviEXT(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightEnviEXT", " not available." );
  }

// GL_EXT_framebuffer_blit

  static void REGAL_CALL missing_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebufferEXT", " not available." );
  }

// GL_EXT_framebuffer_multisample

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleEXT", " not available." );
  }

// GL_EXT_framebuffer_object

  static void REGAL_CALL missing_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(framebuffer);
    Warning( "glBindFramebufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glBindRenderbufferEXT", " not available." );
  }

  static GLenum REGAL_CALL missing_glCheckFramebufferStatusEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glCheckFramebufferStatusEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glDeleteFramebuffersEXT", " not available." );
  }

  static void REGAL_CALL missing_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glDeleteRenderbuffersEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glFramebufferRenderbufferEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(zoffset);
    Warning( "glFramebufferTexture3DEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glGenFramebuffersEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glGenRenderbuffersEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenerateMipmapEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMipmapEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferAttachmentParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetRenderbufferParameterivEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsFramebufferEXT(GLuint framebuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    Warning( "glIsFramebufferEXT", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsRenderbufferEXT(GLuint renderbuffer)
  {
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glIsRenderbufferEXT", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageEXT", " not available." );
  }

// GL_EXT_geometry_shader4

  static void REGAL_CALL missing_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTextureEXT", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glFramebufferTextureFaceEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glProgramParameteriEXT", " not available." );
  }

// GL_EXT_gpu_program_parameters

  static void REGAL_CALL missing_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameters4fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameters4fvEXT", " not available." );
  }

// GL_EXT_gpu_shader4

  static void REGAL_CALL missing_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(name);
    Warning( "glBindFragDataLocationEXT", " not available." );
  }

  static GLint REGAL_CALL missing_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetFragDataLocationEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform1uiEXT(GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1iEXT(GLuint index, GLint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1iEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1uiEXT(GLuint index, GLuint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2iEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3iEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4bvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4iEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4svEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4ubvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4usvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribIPointerEXT", " not available." );
  }

// GL_EXT_histogram

  static void REGAL_CALL missing_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(values);
    Warning( "glGetHistogramEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(values);
    Warning( "glGetMinmaxEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glHistogramEXT", " not available." );
  }

  static void REGAL_CALL missing_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glMinmaxEXT", " not available." );
  }

  static void REGAL_CALL missing_glResetHistogramEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetHistogramEXT", " not available." );
  }

  static void REGAL_CALL missing_glResetMinmaxEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetMinmaxEXT", " not available." );
  }

// GL_EXT_index_func

  static void REGAL_CALL missing_glIndexFuncEXT(GLenum func, GLfloat ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glIndexFuncEXT", " not available." );
  }

// GL_EXT_index_material

  static void REGAL_CALL missing_glIndexMaterialEXT(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glIndexMaterialEXT", " not available." );
  }

// GL_EXT_light_texture

  static void REGAL_CALL missing_glApplyTextureEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glApplyTextureEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureLightEXT(GLenum pname)
  {
    UNUSED_PARAMETER(pname);
    Warning( "glTextureLightEXT", " not available." );
  }

  static void REGAL_CALL missing_glTextureMaterialEXT(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glTextureMaterialEXT", " not available." );
  }

// GL_EXT_map_buffer_range

  static void REGAL_CALL missing_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glFlushMappedBufferRangeEXT", " not available." );
  }

  static GLvoid *REGAL_CALL missing_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferRangeEXT", " not available." );
    return NULL;
  }

// GL_EXT_multi_draw_arrays

  static void REGAL_CALL missing_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawArraysEXT", " not available." );
  }

  static void REGAL_CALL missing_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawElementsEXT", " not available." );
  }

// GL_EXT_multisample

  static void REGAL_CALL missing_glSampleMaskEXT(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleMaskEXT", " not available." );
  }

  static void REGAL_CALL missing_glSamplePatternEXT(GLenum pattern)
  {
    UNUSED_PARAMETER(pattern);
    Warning( "glSamplePatternEXT", " not available." );
  }

// GL_EXT_multisampled_render_to_texture

  static void REGAL_CALL missing_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(samples);
    Warning( "glFramebufferTexture2DMultisampleEXT", " not available." );
  }

// GL_EXT_multiview_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawBuffersIndexedEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegeri_vEXT", " not available." );
  }

  static void REGAL_CALL missing_glReadBufferIndexedEXT(GLenum src, GLint index)
  {
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(index);
    Warning( "glReadBufferIndexedEXT", " not available." );
  }

// GL_EXT_occlusion_query_boolean

  static void REGAL_CALL missing_glBeginQueryEXT(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryEXT", " not available." );
  }

  static void REGAL_CALL missing_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueriesEXT", " not available." );
  }

  static void REGAL_CALL missing_glEndQueryEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQueryEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenQueriesEXT(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueriesEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryivEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsQueryEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQueryEXT", " not available." );
    return GL_FALSE;
  }

// GL_EXT_paletted_texture

  static void REGAL_CALL missing_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorTableEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glGetColorTableEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterivEXT", " not available." );
  }

// GL_EXT_pixel_transform

  static void REGAL_CALL missing_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTransformParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTransformParameterivEXT", " not available." );
  }

  static void REGAL_CALL missing_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransformParameterfEXT", " not available." );
  }

  static void REGAL_CALL missing_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTransformParameterfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransformParameteriEXT", " not available." );
  }

  static void REGAL_CALL missing_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTransformParameterivEXT", " not available." );
  }

// GL_EXT_point_parameters

  static void REGAL_CALL missing_glPointParameterfEXT(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterfEXT", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfvEXT", " not available." );
  }

// GL_EXT_polygon_offset

  static void REGAL_CALL missing_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(bias);
    Warning( "glPolygonOffsetEXT", " not available." );
  }

// GL_EXT_provoking_vertex

  static void REGAL_CALL missing_glProvokingVertexEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glProvokingVertexEXT", " not available." );
  }

// GL_EXT_robustness

  static void REGAL_CALL missing_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformivEXT", " not available." );
  }

  static void REGAL_CALL missing_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(data);
    Warning( "glReadnPixelsEXT", " not available." );
  }

// GL_EXT_scene_marker

  static void REGAL_CALL missing_glBeginSceneEXT(void)
  {
    Warning( "glBeginSceneEXT", " not available." );
  }

  static void REGAL_CALL missing_glEndSceneEXT(void)
  {
    Warning( "glEndSceneEXT", " not available." );
  }

// GL_EXT_secondary_color

  static void REGAL_CALL missing_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3bEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3bvEXT(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3bvEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3dEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3dvEXT(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3fEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3fvEXT(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3fvEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3iEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3ivEXT(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3ivEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3sEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3svEXT(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3svEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3ubEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3ubvEXT(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3ubvEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3uiEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3uivEXT(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3uivEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3usEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3usvEXT(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3usvEXT", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glSecondaryColorPointerEXT", " not available." );
  }

// GL_EXT_separate_shader_objects

  static void REGAL_CALL missing_glActiveProgramEXT(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glActiveProgramEXT", " not available." );
  }

  static GLuint REGAL_CALL missing_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(string);
    Warning( "glCreateShaderProgramEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glUseShaderProgramEXT(GLenum type, GLuint program)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(program);
    Warning( "glUseShaderProgramEXT", " not available." );
  }

// GL_EXT_shader_image_load_store

  static void REGAL_CALL missing_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(access);
    UNUSED_PARAMETER(format);
    Warning( "glBindImageTextureEXT", " not available." );
  }

  static void REGAL_CALL missing_glMemoryBarrierEXT(GLbitfield barriers)
  {
    UNUSED_PARAMETER(barriers);
    Warning( "glMemoryBarrierEXT", " not available." );
  }

// GL_EXT_stencil_clear_tag

  static void REGAL_CALL missing_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
  {
    UNUSED_PARAMETER(stencilTagBits);
    UNUSED_PARAMETER(stencilClearTag);
    Warning( "glStencilClearTagEXT", " not available." );
  }

// GL_EXT_stencil_two_side

  static void REGAL_CALL missing_glActiveStencilFaceEXT(GLenum face)
  {
    UNUSED_PARAMETER(face);
    Warning( "glActiveStencilFaceEXT", " not available." );
  }

// GL_EXT_subtexture

  static void REGAL_CALL missing_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage3DEXT", " not available." );
  }

// GL_EXT_texture3D

  static void REGAL_CALL missing_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage3DEXT", " not available." );
  }

// GL_EXT_texture_array

  static void REGAL_CALL missing_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTextureLayerEXT", " not available." );
  }

// GL_EXT_texture_buffer_object

  static void REGAL_CALL missing_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTexBufferEXT", " not available." );
  }

// GL_EXT_texture_integer

  static void REGAL_CALL missing_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColorIiEXT", " not available." );
  }

  static void REGAL_CALL missing_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColorIuiEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIivEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIuivEXT", " not available." );
  }

// GL_EXT_texture_object

  static GLboolean REGAL_CALL missing_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(residences);
    Warning( "glAreTexturesResidentEXT", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glBindTextureEXT(GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindTextureEXT", " not available." );
  }

  static void REGAL_CALL missing_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glDeleteTexturesEXT", " not available." );
  }

  static void REGAL_CALL missing_glGenTexturesEXT(GLsizei n, GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glGenTexturesEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsTextureEXT(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glIsTextureEXT", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(priorities);
    Warning( "glPrioritizeTexturesEXT", " not available." );
  }

// GL_EXT_texture_perturb_normal

  static void REGAL_CALL missing_glTextureNormalEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glTextureNormalEXT", " not available." );
  }

// GL_EXT_texture_storage

  static void REGAL_CALL missing_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    Warning( "glTexStorage1DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glTexStorage2DEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glTexStorage3DEXT", " not available." );
  }

// GL_EXT_timer_query

  static void REGAL_CALL missing_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjecti64vEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectui64vEXT", " not available." );
  }

// GL_EXT_transform_feedback

  static void REGAL_CALL missing_glBeginTransformFeedbackEXT(GLenum primitiveMode)
  {
    UNUSED_PARAMETER(primitiveMode);
    Warning( "glBeginTransformFeedbackEXT", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferBaseEXT", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glBindBufferOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glBindBufferRangeEXT", " not available." );
  }

  static void REGAL_CALL missing_glEndTransformFeedbackEXT(void)
  {
    Warning( "glEndTransformFeedbackEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetTransformFeedbackVaryingEXT", " not available." );
  }

  static void REGAL_CALL missing_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(varyings);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackVaryingsEXT", " not available." );
  }

// GL_EXT_vertex_array

  static void REGAL_CALL missing_glArrayElementEXT(GLint i)
  {
    UNUSED_PARAMETER(i);
    Warning( "glArrayElementEXT", " not available." );
  }

  static void REGAL_CALL missing_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glColorPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawArraysEXT", " not available." );
  }

  static void REGAL_CALL missing_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
  {
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glEdgeFlagPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetPointervEXT(GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPointervEXT", " not available." );
  }

  static void REGAL_CALL missing_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glIndexPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glNormalPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glTexCoordPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexPointerEXT", " not available." );
  }

// GL_EXT_vertex_attrib_64bit

  static void REGAL_CALL missing_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLdvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexAttribLOffsetEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1dEXT(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1dEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2dEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3dEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4dEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4dvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribLPointerEXT", " not available." );
  }

// GL_EXT_vertex_shader

  static void REGAL_CALL missing_glBeginVertexShaderEXT(void)
  {
    Warning( "glBeginVertexShaderEXT", " not available." );
  }

  static GLuint REGAL_CALL missing_glBindLightParameterEXT(GLenum light, GLenum value)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(value);
    Warning( "glBindLightParameterEXT", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glBindMaterialParameterEXT(GLenum face, GLenum value)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(value);
    Warning( "glBindMaterialParameterEXT", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glBindParameterEXT(GLenum value)
  {
    UNUSED_PARAMETER(value);
    Warning( "glBindParameterEXT", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(value);
    Warning( "glBindTexGenParameterEXT", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(value);
    Warning( "glBindTextureUnitParameterEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glBindVertexShaderEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBindVertexShaderEXT", " not available." );
  }

  static void REGAL_CALL missing_glDeleteVertexShaderEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glDeleteVertexShaderEXT", " not available." );
  }

  static void REGAL_CALL missing_glDisableVariantClientStateEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glDisableVariantClientStateEXT", " not available." );
  }

  static void REGAL_CALL missing_glEnableVariantClientStateEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glEnableVariantClientStateEXT", " not available." );
  }

  static void REGAL_CALL missing_glEndVertexShaderEXT(void)
  {
    Warning( "glEndVertexShaderEXT", " not available." );
  }

  static void REGAL_CALL missing_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(num);
    Warning( "glExtractComponentEXT", " not available." );
  }

  static GLuint REGAL_CALL missing_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
  {
    UNUSED_PARAMETER(datatype);
    UNUSED_PARAMETER(storagetype);
    UNUSED_PARAMETER(range);
    UNUSED_PARAMETER(components);
    Warning( "glGenSymbolsEXT", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glGenVertexShadersEXT(GLuint range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenVertexShadersEXT", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetInvariantBooleanvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetInvariantFloatvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetInvariantIntegervEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetLocalConstantBooleanvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetLocalConstantFloatvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetLocalConstantIntegervEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantBooleanvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantFloatvEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantIntegervEXT", " not available." );
  }

  static void REGAL_CALL missing_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantPointervEXT", " not available." );
  }

  static void REGAL_CALL missing_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(num);
    Warning( "glInsertComponentEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsVariantEnabledEXT(GLuint id, GLenum cap)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(cap);
    Warning( "glIsVariantEnabledEXT", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(addr);
    Warning( "glSetInvariantEXT", " not available." );
  }

  static void REGAL_CALL missing_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(addr);
    Warning( "glSetLocalConstantEXT", " not available." );
  }

  static void REGAL_CALL missing_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(arg1);
    Warning( "glShaderOp1EXT", " not available." );
  }

  static void REGAL_CALL missing_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg2);
    Warning( "glShaderOp2EXT", " not available." );
  }

  static void REGAL_CALL missing_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg3);
    Warning( "glShaderOp3EXT", " not available." );
  }

  static void REGAL_CALL missing_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(in);
    UNUSED_PARAMETER(outX);
    UNUSED_PARAMETER(outY);
    UNUSED_PARAMETER(outZ);
    UNUSED_PARAMETER(outW);
    Warning( "glSwizzleEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantbvEXT(GLuint id, const GLbyte *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantbvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantdvEXT(GLuint id, const GLdouble *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantdvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantfvEXT(GLuint id, const GLfloat *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantfvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantivEXT(GLuint id, const GLint *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantsvEXT(GLuint id, const GLshort *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantsvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantubvEXT(GLuint id, const GLubyte *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantubvEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantuivEXT(GLuint id, const GLuint *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantuivEXT", " not available." );
  }

  static void REGAL_CALL missing_glVariantusvEXT(GLuint id, const GLushort *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantusvEXT", " not available." );
  }

  static void REGAL_CALL missing_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(in);
    UNUSED_PARAMETER(outX);
    UNUSED_PARAMETER(outY);
    UNUSED_PARAMETER(outZ);
    UNUSED_PARAMETER(outW);
    Warning( "glWriteMaskEXT", " not available." );
  }

// GL_EXT_vertex_weighting

  static void REGAL_CALL missing_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexWeightPointerEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexWeightfEXT(GLfloat weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeightfEXT", " not available." );
  }

  static void REGAL_CALL missing_glVertexWeightfvEXT(const GLfloat *weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeightfvEXT", " not available." );
  }

// GL_EXT_x11_sync_object

  static GLsync REGAL_CALL missing_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
  {
    UNUSED_PARAMETER(external_sync_type);
    UNUSED_PARAMETER(external_sync);
    UNUSED_PARAMETER(flags);
    Warning( "glImportSyncEXT", " not available." );
    return NULL;
  }

// GL_GREMEDY_frame_terminator

  static void REGAL_CALL missing_glFrameTerminatorGREMEDY(void)
  {
    Warning( "glFrameTerminatorGREMEDY", " not available." );
  }

// GL_GREMEDY_string_marker

  static void REGAL_CALL missing_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
  {
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(string);
    Warning( "glStringMarkerGREMEDY", " not available." );
  }

// GL_HP_image_transform

  static void REGAL_CALL missing_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetImageTransformParameterfvHP", " not available." );
  }

  static void REGAL_CALL missing_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetImageTransformParameterivHP", " not available." );
  }

  static void REGAL_CALL missing_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glImageTransformParameterfHP", " not available." );
  }

  static void REGAL_CALL missing_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glImageTransformParameterfvHP", " not available." );
  }

  static void REGAL_CALL missing_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glImageTransformParameteriHP", " not available." );
  }

  static void REGAL_CALL missing_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glImageTransformParameterivHP", " not available." );
  }

// GL_IBM_multimode_draw_arrays

  static void REGAL_CALL missing_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(modestride);
    Warning( "glMultiModeDrawArraysIBM", " not available." );
  }

  static void REGAL_CALL missing_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(modestride);
    Warning( "glMultiModeDrawElementsIBM", " not available." );
  }

// GL_IBM_vertex_array_lists

  static void REGAL_CALL missing_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glColorPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glEdgeFlagPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glFogCoordPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glIndexPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glNormalPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glSecondaryColorPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glTexCoordPointerListIBM", " not available." );
  }

  static void REGAL_CALL missing_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glVertexPointerListIBM", " not available." );
  }

// GL_IMG_multisampled_render_to_texture

  static void REGAL_CALL missing_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(samples);
    Warning( "glFramebufferTexture2DMultisampleIMG", " not available." );
  }

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleIMG", " not available." );
  }

// GL_INGR_blend_func_separate

  static void REGAL_CALL missing_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparateINGR", " not available." );
  }

// GL_INTEL_map_texture

  static GLvoid *REGAL_CALL missing_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(access);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(layout);
    Warning( "glMapTexture2DINTEL", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glSyncTextureINTEL(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glSyncTextureINTEL", " not available." );
  }

  static void REGAL_CALL missing_glUnmapTexture2DINTEL(GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glUnmapTexture2DINTEL", " not available." );
  }

// GL_INTEL_parallel_arrays

  static void REGAL_CALL missing_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glColorPointervINTEL", " not available." );
  }

  static void REGAL_CALL missing_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glNormalPointervINTEL", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glTexCoordPointervINTEL", " not available." );
  }

  static void REGAL_CALL missing_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexPointervINTEL", " not available." );
  }

// GL_INTEL_texture_scissor

  static void REGAL_CALL missing_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lfunc);
    UNUSED_PARAMETER(hfunc);
    Warning( "glTexScissorFuncINTEL", " not available." );
  }

  static void REGAL_CALL missing_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(tlow);
    UNUSED_PARAMETER(thigh);
    Warning( "glTexScissorINTEL", " not available." );
  }

// GL_KHR_debug

  static void REGAL_CALL missing_glDebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
  {
    UNUSED_PARAMETER(callback);
    UNUSED_PARAMETER(userParam);
    Warning( "glDebugMessageCallback", " not available." );
  }

  static void REGAL_CALL missing_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(enabled);
    Warning( "glDebugMessageControl", " not available." );
  }

  static void REGAL_CALL missing_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(buf);
    Warning( "glDebugMessageInsert", " not available." );
  }

  static GLuint REGAL_CALL missing_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(sources);
    UNUSED_PARAMETER(types);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(severities);
    UNUSED_PARAMETER(lengths);
    UNUSED_PARAMETER(messageLog);
    Warning( "glGetDebugMessageLog", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glGetObjectLabel", " not available." );
  }

  static void REGAL_CALL missing_glGetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    UNUSED_PARAMETER(ptr);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glGetObjectPtrLabel", " not available." );
  }

  static void REGAL_CALL missing_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glObjectLabel", " not available." );
  }

  static void REGAL_CALL missing_glObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
  {
    UNUSED_PARAMETER(ptr);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glObjectPtrLabel", " not available." );
  }

  static void REGAL_CALL missing_glPopDebugGroup(void)
  {
    Warning( "glPopDebugGroup", " not available." );
  }

  static void REGAL_CALL missing_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(message);
    Warning( "glPushDebugGroup", " not available." );
  }

// GL_KTX_buffer_region

  static GLuint REGAL_CALL missing_glBufferRegionEnabled(void)
  {
    Warning( "glBufferRegionEnabled", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteBufferRegion(GLenum region)
  {
    UNUSED_PARAMETER(region);
    Warning( "glDeleteBufferRegion", " not available." );
  }

  static void REGAL_CALL missing_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
  {
    UNUSED_PARAMETER(region);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(xDest);
    UNUSED_PARAMETER(yDest);
    Warning( "glDrawBufferRegion", " not available." );
  }

  static GLuint REGAL_CALL missing_glNewBufferRegion(GLenum region)
  {
    UNUSED_PARAMETER(region);
    Warning( "glNewBufferRegion", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(region);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glReadBufferRegion", " not available." );
  }

// GL_MESA_resize_buffers

  static void REGAL_CALL missing_glResizeBuffersMESA(void)
  {
    Warning( "glResizeBuffersMESA", " not available." );
  }

// GL_MESA_window_pos

  static void REGAL_CALL missing_glWindowPos2dMESA(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2dMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2dvMESA(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2dvMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2fMESA(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2fMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2fvMESA(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2fvMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2iMESA(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2iMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2ivMESA(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2ivMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2sMESA(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2sMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos2svMESA(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2svMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3dMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3dvMESA(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3dvMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3fMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3fvMESA(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3fvMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3iMESA(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3iMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3ivMESA(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3ivMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3sMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos3svMESA(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3svMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4dMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4dvMESA(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4dvMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4fMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4fvMESA(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4fvMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4iMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4ivMESA(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4ivMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4sMESA", " not available." );
  }

  static void REGAL_CALL missing_glWindowPos4svMESA(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4svMESA", " not available." );
  }

// GL_NVX_conditional_render

  static void REGAL_CALL missing_glBeginConditionalRenderNVX(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBeginConditionalRenderNVX", " not available." );
  }

  static void REGAL_CALL missing_glEndConditionalRenderNVX(void)
  {
    Warning( "glEndConditionalRenderNVX", " not available." );
  }

// GL_NV_bindless_texture

  static GLuint64 REGAL_CALL missing_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(format);
    Warning( "glGetImageHandleNV", " not available." );
    return 0;
  }

  static GLuint64 REGAL_CALL missing_glGetTextureHandleNV(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glGetTextureHandleNV", " not available." );
    return 0;
  }

  static GLuint64 REGAL_CALL missing_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(sampler);
    Warning( "glGetTextureSamplerHandleNV", " not available." );
    return 0;
  }

  static GLboolean REGAL_CALL missing_glIsImageHandleResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsImageHandleResidentNV", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsTextureHandleResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsTextureHandleResidentNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glMakeImageHandleNonResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeImageHandleNonResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
  {
    UNUSED_PARAMETER(handle);
    UNUSED_PARAMETER(access);
    Warning( "glMakeImageHandleResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glMakeTextureHandleNonResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleNonResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glMakeTextureHandleResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformHandleui64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(values);
    Warning( "glProgramUniformHandleui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformHandleui64NV(GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64vNV", " not available." );
  }

// GL_NV_blend_equation_advanced

  static void REGAL_CALL missing_glBlendBarrierNV(void)
  {
    Warning( "glBlendBarrierNV", " not available." );
  }

  static void REGAL_CALL missing_glBlendParameteriNV(GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glBlendParameteriNV", " not available." );
  }

// GL_NV_conditional_render

  static void REGAL_CALL missing_glBeginConditionalRenderNV(GLuint id, GLenum mode)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(mode);
    Warning( "glBeginConditionalRenderNV", " not available." );
  }

  static void REGAL_CALL missing_glEndConditionalRenderNV(void)
  {
    Warning( "glEndConditionalRenderNV", " not available." );
  }

// GL_NV_copy_buffer

  static void REGAL_CALL missing_glCopyBufferSubDataNV(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(readtarget);
    UNUSED_PARAMETER(writetarget);
    UNUSED_PARAMETER(readoffset);
    UNUSED_PARAMETER(writeoffset);
    UNUSED_PARAMETER(size);
    Warning( "glCopyBufferSubDataNV", " not available." );
  }

// GL_NV_copy_image

  static void REGAL_CALL missing_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glCopyImageSubDataNV", " not available." );
  }

// GL_NV_coverage_sample

  static void REGAL_CALL missing_glCoverageMaskNV(GLboolean mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glCoverageMaskNV", " not available." );
  }

  static void REGAL_CALL missing_glCoverageOperationNV(GLenum operation)
  {
    UNUSED_PARAMETER(operation);
    Warning( "glCoverageOperationNV", " not available." );
  }

// GL_NV_depth_buffer_float

  static void REGAL_CALL missing_glClearDepthdNV(GLdouble depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepthdNV", " not available." );
  }

  static void REGAL_CALL missing_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
  {
    UNUSED_PARAMETER(zmin);
    UNUSED_PARAMETER(zmax);
    Warning( "glDepthBoundsdNV", " not available." );
  }

  static void REGAL_CALL missing_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glDepthRangedNV", " not available." );
  }

// GL_NV_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffersNV", " not available." );
  }

// GL_NV_draw_texture

  static void REGAL_CALL missing_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(x0);
    UNUSED_PARAMETER(y0);
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(s0);
    UNUSED_PARAMETER(t0);
    UNUSED_PARAMETER(s1);
    UNUSED_PARAMETER(t1);
    Warning( "glDrawTextureNV", " not available." );
  }

// GL_NV_evaluators

  static void REGAL_CALL missing_glEvalMapsNV(GLenum target, GLenum mode)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(mode);
    Warning( "glEvalMapsNV", " not available." );
  }

  static void REGAL_CALL missing_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapAttribParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapAttribParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(packed);
    UNUSED_PARAMETER(points);
    Warning( "glGetMapControlPointsNV", " not available." );
  }

  static void REGAL_CALL missing_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(packed);
    UNUSED_PARAMETER(points);
    Warning( "glMapControlPointsNV", " not available." );
  }

  static void REGAL_CALL missing_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMapParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMapParameterivNV", " not available." );
  }

// GL_NV_explicit_multisample

  static void REGAL_CALL missing_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(val);
    Warning( "glGetMultisamplefvNV", " not available." );
  }

  static void REGAL_CALL missing_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(mask);
    Warning( "glSampleMaskIndexedNV", " not available." );
  }

  static void REGAL_CALL missing_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glTexRenderbufferNV", " not available." );
  }

// GL_NV_fence

  static void REGAL_CALL missing_glDeleteFencesNV(GLsizei n, const GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glDeleteFencesNV", " not available." );
  }

  static void REGAL_CALL missing_glFinishFenceNV(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glFinishFenceNV", " not available." );
  }

  static void REGAL_CALL missing_glGenFencesNV(GLsizei n, GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glGenFencesNV", " not available." );
  }

  static void REGAL_CALL missing_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(fence);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFenceivNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsFenceNV(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glIsFenceNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glSetFenceNV(GLuint fence, GLenum condition)
  {
    UNUSED_PARAMETER(fence);
    UNUSED_PARAMETER(condition);
    Warning( "glSetFenceNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glTestFenceNV(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glTestFenceNV", " not available." );
    return GL_FALSE;
  }

// GL_NV_fragment_program

  static void REGAL_CALL missing_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramNamedParameterdvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramNamedParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramNamedParameter4dNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(v);
    Warning( "glProgramNamedParameter4dvNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramNamedParameter4fNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(v);
    Warning( "glProgramNamedParameter4fvNV", " not available." );
  }

// GL_NV_framebuffer_blit

  static void REGAL_CALL missing_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebufferNV", " not available." );
  }

// GL_NV_framebuffer_multisample_coverage

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleCoverageNV", " not available." );
  }

// GL_NV_geometry_program4

  static void REGAL_CALL missing_glProgramVertexLimitNV(GLenum target, GLint limit)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(limit);
    Warning( "glProgramVertexLimitNV", " not available." );
  }

// GL_NV_gpu_program4

  static void REGAL_CALL missing_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterIivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterIuivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterIivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterIuivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameterI4iNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameterI4ivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameterI4uiNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameterI4uivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParametersI4ivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParametersI4uivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameterI4iNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameterI4ivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameterI4uiNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameterI4uivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParametersI4ivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParametersI4uivNV", " not available." );
  }

// GL_NV_gpu_shader5

  static void REGAL_CALL missing_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformi64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1i64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2i64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3i64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4i64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform1i64NV(GLint location, GLint64EXT x)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glUniform1i64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform1ui64NV(GLint location, GLuint64EXT x)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glUniform1ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glUniform2i64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glUniform2ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glUniform3i64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glUniform3ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glUniform4i64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glUniform4ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4ui64vNV", " not available." );
  }

// GL_NV_half_float

  static void REGAL_CALL missing_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3hNV", " not available." );
  }

  static void REGAL_CALL missing_glColor3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4hNV", " not available." );
  }

  static void REGAL_CALL missing_glColor4hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4hvNV", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordhNV(GLhalfNV coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordhNV", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordhvNV(const GLhalfNV *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordhvNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1hNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1hvNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2hNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2hvNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3hNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4hNV", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4hvNV", " not available." );
  }

  static void REGAL_CALL missing_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3hNV", " not available." );
  }

  static void REGAL_CALL missing_glNormal3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3hNV", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColor3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1hNV(GLhalfNV s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1hNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord1hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1hvNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2hNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2hvNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3hNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4hNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertex2hNV(GLhalfNV x, GLhalfNV y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertex2hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertex3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertex4hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4hNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4hvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexWeighthNV(GLhalfNV weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeighthNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexWeighthvNV(const GLhalfNV *weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeighthvNV", " not available." );
  }

// GL_NV_non_square_matrices

  static void REGAL_CALL missing_glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x3fvNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x4fvNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x2fvNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x4fvNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x2fvNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x3fvNV", " not available." );
  }

// GL_NV_occlusion_query

  static void REGAL_CALL missing_glBeginOcclusionQueryNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBeginOcclusionQueryNV", " not available." );
  }

  static void REGAL_CALL missing_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteOcclusionQueriesNV", " not available." );
  }

  static void REGAL_CALL missing_glEndOcclusionQueryNV(void)
  {
    Warning( "glEndOcclusionQueryNV", " not available." );
  }

  static void REGAL_CALL missing_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenOcclusionQueriesNV", " not available." );
  }

  static void REGAL_CALL missing_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetOcclusionQueryivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetOcclusionQueryuivNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsOcclusionQueryNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsOcclusionQueryNV", " not available." );
    return GL_FALSE;
  }

// GL_NV_parameter_buffer_object

  static void REGAL_CALL missing_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramBufferParametersIivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramBufferParametersIuivNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramBufferParametersfvNV", " not available." );
  }

// GL_NV_path_rendering

  static void REGAL_CALL missing_glCopyPathNV(GLuint resultPath, GLuint srcPath)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(srcPath);
    Warning( "glCopyPathNV", " not available." );
  }

  static void REGAL_CALL missing_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(coverMode);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glCoverFillPathInstancedNV", " not available." );
  }

  static void REGAL_CALL missing_glCoverFillPathNV(GLuint path, GLenum coverMode)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(coverMode);
    Warning( "glCoverFillPathNV", " not available." );
  }

  static void REGAL_CALL missing_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(coverMode);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glCoverStrokePathInstancedNV", " not available." );
  }

  static void REGAL_CALL missing_glCoverStrokePathNV(GLuint name, GLenum coverMode)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(coverMode);
    Warning( "glCoverStrokePathNV", " not available." );
  }

  static void REGAL_CALL missing_glDeletePathsNV(GLuint path, GLsizei range)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(range);
    Warning( "glDeletePathsNV", " not available." );
  }

  static GLuint REGAL_CALL missing_glGenPathsNV(GLsizei range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenPathsNV", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
  {
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathColorGenfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
  {
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathColorGenivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathCommandsNV(GLuint name, GLubyte *commands)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(commands);
    Warning( "glGetPathCommandsNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathCoordsNV(GLuint name, GLfloat *coords)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(coords);
    Warning( "glGetPathCoordsNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(dashArray);
    Warning( "glGetPathDashArrayNV", " not available." );
  }

  static GLfloat REGAL_CALL missing_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(startSegment);
    UNUSED_PARAMETER(numSegments);
    Warning( "glGetPathLengthNV", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
  {
    UNUSED_PARAMETER(metricQueryMask);
    UNUSED_PARAMETER(fistPathName);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(metrics);
    Warning( "glGetPathMetricRangeNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
  {
    UNUSED_PARAMETER(metricQueryMask);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(metrics);
    Warning( "glGetPathMetricsNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(param);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(param);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
  {
    UNUSED_PARAMETER(pathListMode);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(advanceScale);
    UNUSED_PARAMETER(kerningScale);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(returnedSpacing);
    Warning( "glGetPathSpacingNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
  {
    UNUSED_PARAMETER(texCoordSet);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathTexGenfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
  {
    UNUSED_PARAMETER(texCoordSet);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathTexGenivNV", " not available." );
  }

  static void REGAL_CALL missing_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(pathA);
    UNUSED_PARAMETER(pathB);
    UNUSED_PARAMETER(weight);
    Warning( "glInterpolatePathsNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsPathNV(GLuint path)
  {
    UNUSED_PARAMETER(path);
    Warning( "glIsPathNV", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glIsPointInFillPathNV", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glIsPointInStrokePathNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
  {
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(genMode);
    UNUSED_PARAMETER(colorFormat);
    UNUSED_PARAMETER(coeffs);
    Warning( "glPathColorGenNV", " not available." );
  }

  static void REGAL_CALL missing_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(numCommands);
    UNUSED_PARAMETER(commands);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathCommandsNV", " not available." );
  }

  static void REGAL_CALL missing_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathCoordsNV", " not available." );
  }

  static void REGAL_CALL missing_glPathCoverDepthFuncNV(GLenum zfunc)
  {
    UNUSED_PARAMETER(zfunc);
    Warning( "glPathCoverDepthFuncNV", " not available." );
  }

  static void REGAL_CALL missing_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(dashCount);
    UNUSED_PARAMETER(dashArray);
    Warning( "glPathDashArrayNV", " not available." );
  }

  static void REGAL_CALL missing_glPathFogGenNV(GLenum genMode)
  {
    UNUSED_PARAMETER(genMode);
    Warning( "glPathFogGenNV", " not available." );
  }

  static void REGAL_CALL missing_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    UNUSED_PARAMETER(firstPathName);
    UNUSED_PARAMETER(fontTarget);
    UNUSED_PARAMETER(fontName);
    UNUSED_PARAMETER(fontStyle);
    UNUSED_PARAMETER(firstGlyph);
    UNUSED_PARAMETER(numGlyphs);
    UNUSED_PARAMETER(handleMissingGlyphs);
    UNUSED_PARAMETER(pathParameterTemplate);
    UNUSED_PARAMETER(emScale);
    Warning( "glPathGlyphRangeNV", " not available." );
  }

  static void REGAL_CALL missing_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    UNUSED_PARAMETER(firstPathName);
    UNUSED_PARAMETER(fontTarget);
    UNUSED_PARAMETER(fontName);
    UNUSED_PARAMETER(fontStyle);
    UNUSED_PARAMETER(numGlyphs);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(charcodes);
    UNUSED_PARAMETER(handleMissingGlyphs);
    UNUSED_PARAMETER(pathParameterTemplate);
    UNUSED_PARAMETER(emScale);
    Warning( "glPathGlyphsNV", " not available." );
  }

  static void REGAL_CALL missing_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameterfNV", " not available." );
  }

  static void REGAL_CALL missing_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameteriNV", " not available." );
  }

  static void REGAL_CALL missing_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(units);
    Warning( "glPathStencilDepthOffsetNV", " not available." );
  }

  static void REGAL_CALL missing_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glPathStencilFuncNV", " not available." );
  }

  static void REGAL_CALL missing_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pathString);
    Warning( "glPathStringNV", " not available." );
  }

  static void REGAL_CALL missing_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(commandStart);
    UNUSED_PARAMETER(commandsToDelete);
    UNUSED_PARAMETER(numCommands);
    UNUSED_PARAMETER(commands);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathSubCommandsNV", " not available." );
  }

  static void REGAL_CALL missing_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(coordStart);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathSubCoordsNV", " not available." );
  }

  static void REGAL_CALL missing_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
  {
    UNUSED_PARAMETER(texCoordSet);
    UNUSED_PARAMETER(genMode);
    UNUSED_PARAMETER(components);
    UNUSED_PARAMETER(coeffs);
    Warning( "glPathTexGenNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(startSegment);
    UNUSED_PARAMETER(numSegments);
    UNUSED_PARAMETER(distance);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(tangentX);
    UNUSED_PARAMETER(tangentY);
    Warning( "glPointAlongPathNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(fillMode);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glStencilFillPathInstancedNV", " not available." );
  }

  static void REGAL_CALL missing_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(fillMode);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFillPathNV", " not available." );
  }

  static void REGAL_CALL missing_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(reference);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glStencilStrokePathInstancedNV", " not available." );
  }

  static void REGAL_CALL missing_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(reference);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilStrokePathNV", " not available." );
  }

  static void REGAL_CALL missing_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(srcPath);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glTransformPathNV", " not available." );
  }

  static void REGAL_CALL missing_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightPathsNV", " not available." );
  }

// GL_NV_pixel_data_range

  static void REGAL_CALL missing_glFlushPixelDataRangeNV(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glFlushPixelDataRangeNV", " not available." );
  }

  static void REGAL_CALL missing_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    Warning( "glPixelDataRangeNV", " not available." );
  }

// GL_NV_point_sprite

  static void REGAL_CALL missing_glPointParameteriNV(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameteriNV", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterivNV(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterivNV", " not available." );
  }

// GL_NV_present_video

  static void REGAL_CALL missing_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoi64vNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideouivNV", " not available." );
  }

  static void REGAL_CALL missing_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(minPresentTime);
    UNUSED_PARAMETER(beginPresentTimeId);
    UNUSED_PARAMETER(presentDurationId);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(target0);
    UNUSED_PARAMETER(fill0);
    UNUSED_PARAMETER(target1);
    UNUSED_PARAMETER(fill1);
    UNUSED_PARAMETER(target2);
    UNUSED_PARAMETER(fill2);
    UNUSED_PARAMETER(target3);
    UNUSED_PARAMETER(fill3);
    Warning( "glPresentFrameDualFillNV", " not available." );
  }

  static void REGAL_CALL missing_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(minPresentTime);
    UNUSED_PARAMETER(beginPresentTimeId);
    UNUSED_PARAMETER(presentDurationId);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(target0);
    UNUSED_PARAMETER(fill0);
    UNUSED_PARAMETER(key0);
    UNUSED_PARAMETER(target1);
    UNUSED_PARAMETER(fill1);
    UNUSED_PARAMETER(key1);
    Warning( "glPresentFrameKeyedNV", " not available." );
  }

// GL_NV_primitive_restart

  static void REGAL_CALL missing_glPrimitiveRestartIndexNV(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glPrimitiveRestartIndexNV", " not available." );
  }

  static void REGAL_CALL missing_glPrimitiveRestartNV(void)
  {
    Warning( "glPrimitiveRestartNV", " not available." );
  }

// GL_NV_read_buffer

  static void REGAL_CALL missing_glReadBufferNV(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glReadBufferNV", " not available." );
  }

// GL_NV_register_combiners

  static void REGAL_CALL missing_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(input);
    UNUSED_PARAMETER(mapping);
    UNUSED_PARAMETER(componentUsage);
    Warning( "glCombinerInputNV", " not available." );
  }

  static void REGAL_CALL missing_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(abOutput);
    UNUSED_PARAMETER(cdOutput);
    UNUSED_PARAMETER(sumOutput);
    UNUSED_PARAMETER(scale);
    UNUSED_PARAMETER(bias);
    UNUSED_PARAMETER(abDotProduct);
    UNUSED_PARAMETER(cdDotProduct);
    UNUSED_PARAMETER(muxSum);
    Warning( "glCombinerOutputNV", " not available." );
  }

  static void REGAL_CALL missing_glCombinerParameterfNV(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glCombinerParameterfNV", " not available." );
  }

  static void REGAL_CALL missing_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCombinerParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glCombinerParameteriNV(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glCombinerParameteriNV", " not available." );
  }

  static void REGAL_CALL missing_glCombinerParameterivNV(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCombinerParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(input);
    UNUSED_PARAMETER(mapping);
    UNUSED_PARAMETER(componentUsage);
    Warning( "glFinalCombinerInputNV", " not available." );
  }

  static void REGAL_CALL missing_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerInputParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerInputParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerOutputParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerOutputParameterivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFinalCombinerInputParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFinalCombinerInputParameterivNV", " not available." );
  }

// GL_NV_register_combiners2

  static void REGAL_CALL missing_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCombinerStageParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerStageParameterfvNV", " not available." );
  }

// GL_NV_shader_buffer_load

  static void REGAL_CALL missing_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameterui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegerui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedBufferParameterui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformui64vNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsBufferResidentNV(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glIsBufferResidentNV", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsNamedBufferResidentNV(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsNamedBufferResidentNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glMakeBufferNonResidentNV(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glMakeBufferNonResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glMakeBufferResidentNV(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMakeBufferResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glMakeNamedBufferNonResidentNV(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glMakeNamedBufferNonResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(access);
    Warning( "glMakeNamedBufferResidentNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniformui64NV", " not available." );
  }

  static void REGAL_CALL missing_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glUniformui64NV(GLint location, GLuint64EXT v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniformui64NV", " not available." );
  }

  static void REGAL_CALL missing_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniformui64vNV", " not available." );
  }

// GL_NV_texture_barrier

  static void REGAL_CALL missing_glTextureBarrierNV(void)
  {
    Warning( "glTextureBarrierNV", " not available." );
  }

// GL_NV_texture_multisample

  static void REGAL_CALL missing_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTexImage2DMultisampleCoverageNV", " not available." );
  }

  static void REGAL_CALL missing_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTexImage3DMultisampleCoverageNV", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage2DMultisampleCoverageNV", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage2DMultisampleNV", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage3DMultisampleCoverageNV", " not available." );
  }

  static void REGAL_CALL missing_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage3DMultisampleNV", " not available." );
  }

// GL_NV_transform_feedback

  static void REGAL_CALL missing_glActiveVaryingNV(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glActiveVaryingNV", " not available." );
  }

  static void REGAL_CALL missing_glBeginTransformFeedbackNV(GLenum primitiveMode)
  {
    UNUSED_PARAMETER(primitiveMode);
    Warning( "glBeginTransformFeedbackNV", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferBaseNV", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glBindBufferOffsetNV", " not available." );
  }

  static void REGAL_CALL missing_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glBindBufferRangeNV", " not available." );
  }

  static void REGAL_CALL missing_glEndTransformFeedbackNV(void)
  {
    Warning( "glEndTransformFeedbackNV", " not available." );
  }

  static void REGAL_CALL missing_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveVaryingNV", " not available." );
  }

  static void REGAL_CALL missing_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(location);
    Warning( "glGetTransformFeedbackVaryingNV", " not available." );
  }

  static GLint REGAL_CALL missing_glGetVaryingLocationNV(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetVaryingLocationNV", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(attribs);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackAttribsNV", " not available." );
  }

  static void REGAL_CALL missing_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(locations);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackVaryingsNV", " not available." );
  }

// GL_NV_transform_feedback2

  static void REGAL_CALL missing_glBindTransformFeedbackNV(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBindTransformFeedbackNV", " not available." );
  }

  static void REGAL_CALL missing_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteTransformFeedbacksNV", " not available." );
  }

  static void REGAL_CALL missing_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(name);
    Warning( "glDrawTransformFeedbackNV", " not available." );
  }

  static void REGAL_CALL missing_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenTransformFeedbacksNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsTransformFeedbackNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsTransformFeedbackNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glPauseTransformFeedbackNV(void)
  {
    Warning( "glPauseTransformFeedbackNV", " not available." );
  }

  static void REGAL_CALL missing_glResumeTransformFeedbackNV(void)
  {
    Warning( "glResumeTransformFeedbackNV", " not available." );
  }

// GL_NV_vdpau_interop

  static void REGAL_CALL missing_glVDPAUFiniNV(void)
  {
    Warning( "glVDPAUFiniNV", " not available." );
  }

  static void REGAL_CALL missing_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(values);
    Warning( "glVDPAUGetSurfaceivNV", " not available." );
  }

  static void REGAL_CALL missing_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
  {
    UNUSED_PARAMETER(vdpDevice);
    UNUSED_PARAMETER(getProcAddress);
    Warning( "glVDPAUInitNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
  {
    UNUSED_PARAMETER(surface);
    Warning( "glVDPAUIsSurfaceNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    UNUSED_PARAMETER(numSurfaces);
    UNUSED_PARAMETER(surfaces);
    Warning( "glVDPAUMapSurfacesNV", " not available." );
  }

  static GLvdpauSurfaceNV REGAL_CALL missing_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    UNUSED_PARAMETER(vdpSurface);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numTextureNames);
    UNUSED_PARAMETER(textureNames);
    Warning( "glVDPAURegisterOutputSurfaceNV", " not available." );
    return 0;
  }

  static GLvdpauSurfaceNV REGAL_CALL missing_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    UNUSED_PARAMETER(vdpSurface);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numTextureNames);
    UNUSED_PARAMETER(textureNames);
    Warning( "glVDPAURegisterVideoSurfaceNV", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
  {
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(access);
    Warning( "glVDPAUSurfaceAccessNV", " not available." );
  }

  static void REGAL_CALL missing_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    UNUSED_PARAMETER(numSurfaces);
    UNUSED_PARAMETER(surfaces);
    Warning( "glVDPAUUnmapSurfacesNV", " not available." );
  }

  static void REGAL_CALL missing_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
  {
    UNUSED_PARAMETER(surface);
    Warning( "glVDPAUUnregisterSurfaceNV", " not available." );
  }

// GL_NV_vertex_array_range

  static void REGAL_CALL missing_glFlushVertexArrayRangeNV(void)
  {
    Warning( "glFlushVertexArrayRangeNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexArrayRangeNV", " not available." );
  }

// GL_NV_vertex_attrib_integer_64bit

  static void REGAL_CALL missing_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLi64vNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1i64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2i64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3i64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4i64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4i64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4ui64NV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4ui64vNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexAttribLFormatNV", " not available." );
  }

// GL_NV_vertex_buffer_unified_memory

  static void REGAL_CALL missing_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(address);
    UNUSED_PARAMETER(length);
    Warning( "glBufferAddressRangeNV", " not available." );
  }

  static void REGAL_CALL missing_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glColorFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glEdgeFlagFormatNV(GLsizei stride)
  {
    UNUSED_PARAMETER(stride);
    Warning( "glEdgeFlagFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glFogCoordFormatNV(GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glFogCoordFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegerui64i_vNV", " not available." );
  }

  static void REGAL_CALL missing_glIndexFormatNV(GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glIndexFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glNormalFormatNV(GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glNormalFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glSecondaryColorFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glTexCoordFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexAttribFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexAttribIFormatNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexFormatNV", " not available." );
  }

// GL_NV_vertex_program

  static GLboolean REGAL_CALL missing_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    UNUSED_PARAMETER(residences);
    Warning( "glAreProgramsResidentNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glBindProgramNV(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBindProgramNV", " not available." );
  }

  static void REGAL_CALL missing_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glDeleteProgramsNV", " not available." );
  }

  static void REGAL_CALL missing_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(params);
    Warning( "glExecuteProgramNV", " not available." );
  }

  static void REGAL_CALL missing_glGenProgramsNV(GLsizei n, GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glGenProgramsNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramParameterdvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(program);
    Warning( "glGetProgramStringNV", " not available." );
  }

  static void REGAL_CALL missing_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(address);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTrackMatrixivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(pointer);
    Warning( "glGetVertexAttribPointervNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribdvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribivNV", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsProgramNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsProgramNV", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(program);
    Warning( "glLoadProgramNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramParameter4dNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameter4dvNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramParameter4fNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameter4fvNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameters4dvNV", " not available." );
  }

  static void REGAL_CALL missing_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameters4fvNV", " not available." );
  }

  static void REGAL_CALL missing_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glRequestResidentProgramsNV", " not available." );
  }

  static void REGAL_CALL missing_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(address);
    UNUSED_PARAMETER(matrix);
    UNUSED_PARAMETER(transform);
    Warning( "glTrackMatrixNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1dNV(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1dNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1fNV(GLuint index, GLfloat x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1fNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1sNV(GLuint index, GLshort x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1sNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib1svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2dNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2fNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2sNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib2svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3dNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3fNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3sNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib3svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4dNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4fNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4sNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4ubNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ubvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(fsize);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribPointerNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4dvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4fvNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4svNV", " not available." );
  }

  static void REGAL_CALL missing_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4ubvNV", " not available." );
  }

// GL_NV_video_capture

  static void REGAL_CALL missing_glBeginVideoCaptureNV(GLuint video_capture_slot)
  {
    UNUSED_PARAMETER(video_capture_slot);
    Warning( "glBeginVideoCaptureNV", " not available." );
  }

  static void REGAL_CALL missing_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(frame_region);
    UNUSED_PARAMETER(offset);
    Warning( "glBindVideoCaptureStreamBufferNV", " not available." );
  }

  static void REGAL_CALL missing_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(frame_region);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindVideoCaptureStreamTextureNV", " not available." );
  }

  static void REGAL_CALL missing_glEndVideoCaptureNV(GLuint video_capture_slot)
  {
    UNUSED_PARAMETER(video_capture_slot);
    Warning( "glEndVideoCaptureNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureStreamdvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureStreamfvNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureStreamivNV", " not available." );
  }

  static void REGAL_CALL missing_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureivNV", " not available." );
  }

  static GLenum REGAL_CALL missing_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(sequence_num);
    UNUSED_PARAMETER(capture_time);
    Warning( "glVideoCaptureNV", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glVideoCaptureStreamParameterdvNV", " not available." );
  }

  static void REGAL_CALL missing_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glVideoCaptureStreamParameterfvNV", " not available." );
  }

  static void REGAL_CALL missing_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glVideoCaptureStreamParameterivNV", " not available." );
  }

// GL_OES_blend_equation_separate

  static void REGAL_CALL missing_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateOES", " not available." );
  }

// GL_OES_blend_func_separate

  static void REGAL_CALL missing_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparateOES", " not available." );
  }

// GL_OES_blend_subtract

  static void REGAL_CALL missing_glBlendEquationOES(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationOES", " not available." );
  }

// GL_OES_framebuffer_object

  static void REGAL_CALL missing_glBindFramebufferOES(GLenum target, GLuint framebuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(framebuffer);
    Warning( "glBindFramebufferOES", " not available." );
  }

  static void REGAL_CALL missing_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glBindRenderbufferOES", " not available." );
  }

  static GLenum REGAL_CALL missing_glCheckFramebufferStatusOES(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glCheckFramebufferStatusOES", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glDeleteFramebuffersOES", " not available." );
  }

  static void REGAL_CALL missing_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glDeleteRenderbuffersOES", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glFramebufferRenderbufferOES", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture2DOES", " not available." );
  }

  static void REGAL_CALL missing_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glGenFramebuffersOES", " not available." );
  }

  static void REGAL_CALL missing_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glGenRenderbuffersOES", " not available." );
  }

  static void REGAL_CALL missing_glGenerateMipmapOES(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMipmapOES", " not available." );
  }

  static void REGAL_CALL missing_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferAttachmentParameterivOES", " not available." );
  }

  static void REGAL_CALL missing_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetRenderbufferParameterivOES", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsFramebufferOES(GLuint framebuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    Warning( "glIsFramebufferOES", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_glIsRenderbufferOES(GLuint renderbuffer)
  {
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glIsRenderbufferOES", " not available." );
    return GL_FALSE;
  }

  static void REGAL_CALL missing_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageOES", " not available." );
  }

// GL_OES_get_program_binary

  static void REGAL_CALL missing_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    Warning( "glGetProgramBinaryOES", " not available." );
  }

  static void REGAL_CALL missing_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    UNUSED_PARAMETER(length);
    Warning( "glProgramBinaryOES", " not available." );
  }

// GL_OES_mapbuffer

  static void REGAL_CALL missing_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferPointervOES", " not available." );
  }

  static GLvoid *REGAL_CALL missing_glMapBufferOES(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferOES", " not available." );
    return NULL;
  }

  static GLboolean REGAL_CALL missing_glUnmapBufferOES(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glUnmapBufferOES", " not available." );
    return GL_FALSE;
  }

// GL_OES_matrix_palette

  static void REGAL_CALL missing_glCurrentPaletteMatrixOES(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glCurrentPaletteMatrixOES", " not available." );
  }

  static void REGAL_CALL missing_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glMatrixIndexPointerOES", " not available." );
  }

  static void REGAL_CALL missing_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glWeightPointerOES", " not available." );
  }

// GL_OES_single_precision

  static void REGAL_CALL missing_glClearDepthfOES(GLclampd depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepthfOES", " not available." );
  }

  static void REGAL_CALL missing_glClipPlanefOES(GLenum plane, const GLfloat *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlanefOES", " not available." );
  }

  static void REGAL_CALL missing_glDepthRangefOES(GLclampf n, GLclampf f)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glDepthRangefOES", " not available." );
  }

  static void REGAL_CALL missing_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    UNUSED_PARAMETER(l);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glFrustumfOES", " not available." );
  }

  static void REGAL_CALL missing_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glGetClipPlanefOES", " not available." );
  }

  static void REGAL_CALL missing_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    UNUSED_PARAMETER(l);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glOrthofOES", " not available." );
  }

// GL_OES_texture_3D

  static void REGAL_CALL missing_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage3DOES", " not available." );
  }

  static void REGAL_CALL missing_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage3DOES", " not available." );
  }

  static void REGAL_CALL missing_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage3DOES", " not available." );
  }

  static void REGAL_CALL missing_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(zoffset);
    Warning( "glFramebufferTexture3DOES", " not available." );
  }

  static void REGAL_CALL missing_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage3DOES", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage3DOES", " not available." );
  }

// GL_OES_texture_cube_map

  static void REGAL_CALL missing_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenfvOES", " not available." );
  }

  static void REGAL_CALL missing_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenivOES", " not available." );
  }

  static void REGAL_CALL missing_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenxvOES", " not available." );
  }

  static void REGAL_CALL missing_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGenfOES", " not available." );
  }

  static void REGAL_CALL missing_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenfvOES", " not available." );
  }

  static void REGAL_CALL missing_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGeniOES", " not available." );
  }

  static void REGAL_CALL missing_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenivOES", " not available." );
  }

  static void REGAL_CALL missing_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGenxOES", " not available." );
  }

  static void REGAL_CALL missing_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenxvOES", " not available." );
  }

// GL_OES_vertex_array_object

  static void REGAL_CALL missing_glBindVertexArrayOES(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glBindVertexArrayOES", " not available." );
  }

  static void REGAL_CALL missing_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glDeleteVertexArraysOES", " not available." );
  }

  static void REGAL_CALL missing_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glGenVertexArraysOES", " not available." );
  }

  static GLboolean REGAL_CALL missing_glIsVertexArrayOES(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glIsVertexArrayOES", " not available." );
    return GL_FALSE;
  }

// GL_PGI_misc_hints

  static void REGAL_CALL missing_glHintPGI(GLenum target, GLint mode)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(mode);
    Warning( "glHintPGI", " not available." );
  }

// GL_QCOM_alpha_test

  static void REGAL_CALL missing_glAlphaFuncQCOM(GLenum func, GLclampf ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glAlphaFuncQCOM", " not available." );
  }

// GL_QCOM_driver_control

  static void REGAL_CALL missing_glDisableDriverControlQCOM(GLuint driverControl)
  {
    UNUSED_PARAMETER(driverControl);
    Warning( "glDisableDriverControlQCOM", " not available." );
  }

  static void REGAL_CALL missing_glEnableDriverControlQCOM(GLuint driverControl)
  {
    UNUSED_PARAMETER(driverControl);
    Warning( "glEnableDriverControlQCOM", " not available." );
  }

  static void REGAL_CALL missing_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
  {
    UNUSED_PARAMETER(driverControl);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(driverControlString);
    Warning( "glGetDriverControlStringQCOM", " not available." );
  }

  static void REGAL_CALL missing_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
  {
    UNUSED_PARAMETER(num);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(driverControls);
    Warning( "glGetDriverControlsQCOM", " not available." );
  }

// GL_QCOM_extended_get

  static void REGAL_CALL missing_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(params);
    Warning( "glExtGetBufferPointervQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
  {
    UNUSED_PARAMETER(buffers);
    UNUSED_PARAMETER(maxBuffers);
    UNUSED_PARAMETER(numBuffers);
    Warning( "glExtGetBuffersQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
  {
    UNUSED_PARAMETER(framebuffers);
    UNUSED_PARAMETER(maxFramebuffers);
    UNUSED_PARAMETER(numFramebuffers);
    Warning( "glExtGetFramebuffersQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
  {
    UNUSED_PARAMETER(renderbuffers);
    UNUSED_PARAMETER(maxRenderbuffers);
    UNUSED_PARAMETER(numRenderbuffers);
    Warning( "glExtGetRenderbuffersQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glExtGetTexLevelParameterivQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(texels);
    Warning( "glExtGetTexSubImageQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
  {
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(maxTextures);
    UNUSED_PARAMETER(numTextures);
    Warning( "glExtGetTexturesQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glExtTexObjectStateOverrideiQCOM", " not available." );
  }

// GL_QCOM_extended_get2

  static void REGAL_CALL missing_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shadertype);
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(length);
    Warning( "glExtGetProgramBinarySourceQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
  {
    UNUSED_PARAMETER(programs);
    UNUSED_PARAMETER(maxPrograms);
    UNUSED_PARAMETER(numPrograms);
    Warning( "glExtGetProgramsQCOM", " not available." );
  }

  static void REGAL_CALL missing_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
  {
    UNUSED_PARAMETER(shaders);
    UNUSED_PARAMETER(maxShaders);
    UNUSED_PARAMETER(numShaders);
    Warning( "glExtGetShadersQCOM", " not available." );
  }

  static GLboolean REGAL_CALL missing_glExtIsProgramBinaryQCOM(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glExtIsProgramBinaryQCOM", " not available." );
    return GL_FALSE;
  }

// GL_QCOM_tiled_rendering

  static void REGAL_CALL missing_glEndTilingQCOM(GLbitfield preserveMask)
  {
    UNUSED_PARAMETER(preserveMask);
    Warning( "glEndTilingQCOM", " not available." );
  }

  static void REGAL_CALL missing_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(preserveMask);
    Warning( "glStartTilingQCOM", " not available." );
  }

// GL_REGAL_ES1_0_compatibility

  static void REGAL_CALL missing_glAlphaFuncx(GLenum func, GLclampx ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glAlphaFuncx", " not available." );
  }

  static void REGAL_CALL missing_glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColorx", " not available." );
  }

  static void REGAL_CALL missing_glClearDepthx(GLclampx depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepthx", " not available." );
  }

  static void REGAL_CALL missing_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4x", " not available." );
  }

  static void REGAL_CALL missing_glDepthRangex(GLclampx zNear, GLclampx zFar)
  {
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glDepthRangex", " not available." );
  }

  static void REGAL_CALL missing_glFogx(GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFogx", " not available." );
  }

  static void REGAL_CALL missing_glFogxv(GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFogxv", " not available." );
  }

  static void REGAL_CALL missing_glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glFrustumf", " not available." );
  }

  static void REGAL_CALL missing_glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glFrustumx", " not available." );
  }

  static void REGAL_CALL missing_glLightModelx(GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightModelx", " not available." );
  }

  static void REGAL_CALL missing_glLightModelxv(GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightModelxv", " not available." );
  }

  static void REGAL_CALL missing_glLightx(GLenum light, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightx", " not available." );
  }

  static void REGAL_CALL missing_glLightxv(GLenum light, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightxv", " not available." );
  }

  static void REGAL_CALL missing_glLineWidthx(GLfixed width)
  {
    UNUSED_PARAMETER(width);
    Warning( "glLineWidthx", " not available." );
  }

  static void REGAL_CALL missing_glLoadMatrixx(const GLfixed *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadMatrixx", " not available." );
  }

  static void REGAL_CALL missing_glMaterialx(GLenum face, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMaterialx", " not available." );
  }

  static void REGAL_CALL missing_glMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMaterialxv", " not available." );
  }

  static void REGAL_CALL missing_glMultMatrixx(const GLfixed *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultMatrixx", " not available." );
  }

  static void REGAL_CALL missing_glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4x", " not available." );
  }

  static void REGAL_CALL missing_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3x", " not available." );
  }

  static void REGAL_CALL missing_glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glOrthof", " not available." );
  }

  static void REGAL_CALL missing_glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glOrthox", " not available." );
  }

  static void REGAL_CALL missing_glPointSizex(GLfixed size)
  {
    UNUSED_PARAMETER(size);
    Warning( "glPointSizex", " not available." );
  }

  static void REGAL_CALL missing_glPolygonOffsetx(GLfixed factor, GLfixed units)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(units);
    Warning( "glPolygonOffsetx", " not available." );
  }

  static void REGAL_CALL missing_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
  {
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRotatex", " not available." );
  }

  static void REGAL_CALL missing_glSampleCoveragex(GLclampx value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleCoveragex", " not available." );
  }

  static void REGAL_CALL missing_glScalex(GLfixed x, GLfixed y, GLfixed z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glScalex", " not available." );
  }

  static void REGAL_CALL missing_glTexEnvx(GLenum target, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexEnvx", " not available." );
  }

  static void REGAL_CALL missing_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexEnvxv", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterx(GLenum target, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexParameterx", " not available." );
  }

  static void REGAL_CALL missing_glTranslatex(GLfixed x, GLfixed y, GLfixed z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTranslatex", " not available." );
  }

// GL_REGAL_ES1_1_compatibility

  static void REGAL_CALL missing_glClipPlanef(GLenum plane, const GLfloat *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlanef", " not available." );
  }

  static void REGAL_CALL missing_glClipPlanex(GLenum plane, const GLfixed *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlanex", " not available." );
  }

  static void REGAL_CALL missing_glGetClipPlanef(GLenum pname, GLfloat *eqn)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(eqn);
    Warning( "glGetClipPlanef", " not available." );
  }

  static void REGAL_CALL missing_glGetClipPlanex(GLenum pname, GLfixed *eqn)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(eqn);
    Warning( "glGetClipPlanex", " not available." );
  }

  static void REGAL_CALL missing_glGetFixedv(GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFixedv", " not available." );
  }

  static void REGAL_CALL missing_glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetLightxv", " not available." );
  }

  static void REGAL_CALL missing_glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMaterialxv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(env);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexEnvxv", " not available." );
  }

  static void REGAL_CALL missing_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterxv", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterx(GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterx", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterxv(GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterxv", " not available." );
  }

  static void REGAL_CALL missing_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glPointSizePointerOES", " not available." );
  }

  static void REGAL_CALL missing_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterxv", " not available." );
  }

// GL_REGAL_log

  static void REGAL_CALL missing_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
  {
    UNUSED_PARAMETER(callback);
    Warning( "glLogMessageCallbackREGAL", " not available." );
  }

// GL_SGIS_detail_texture

  static void REGAL_CALL missing_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(points);
    Warning( "glDetailTexFuncSGIS", " not available." );
  }

  static void REGAL_CALL missing_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(points);
    Warning( "glGetDetailTexFuncSGIS", " not available." );
  }

// GL_SGIS_fog_function

  static void REGAL_CALL missing_glFogFuncSGIS(GLsizei n, const GLfloat *points)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(points);
    Warning( "glFogFuncSGIS", " not available." );
  }

  static void REGAL_CALL missing_glGetFogFuncSGIS(GLfloat *points)
  {
    UNUSED_PARAMETER(points);
    Warning( "glGetFogFuncSGIS", " not available." );
  }

// GL_SGIS_multisample

  static void REGAL_CALL missing_glSampleMaskSGIS(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleMaskSGIS", " not available." );
  }

  static void REGAL_CALL missing_glSamplePatternSGIS(GLenum pattern)
  {
    UNUSED_PARAMETER(pattern);
    Warning( "glSamplePatternSGIS", " not available." );
  }

// GL_SGIS_pixel_texture

  static void REGAL_CALL missing_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTexGenParameterfvSGIS", " not available." );
  }

  static void REGAL_CALL missing_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTexGenParameterivSGIS", " not available." );
  }

  static void REGAL_CALL missing_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTexGenParameterfSGIS", " not available." );
  }

  static void REGAL_CALL missing_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTexGenParameterfvSGIS", " not available." );
  }

  static void REGAL_CALL missing_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTexGenParameteriSGIS", " not available." );
  }

  static void REGAL_CALL missing_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTexGenParameterivSGIS", " not available." );
  }

// GL_SGIS_point_parameters

  static void REGAL_CALL missing_glPointParameterfSGIS(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterfSGIS", " not available." );
  }

  static void REGAL_CALL missing_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfvSGIS", " not available." );
  }

// GL_SGIS_sharpen_texture

  static void REGAL_CALL missing_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(points);
    Warning( "glGetSharpenTexFuncSGIS", " not available." );
  }

  static void REGAL_CALL missing_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(points);
    Warning( "glSharpenTexFuncSGIS", " not available." );
  }

// GL_SGIS_texture4D

  static void REGAL_CALL missing_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(size4d);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage4DSGIS", " not available." );
  }

  static void REGAL_CALL missing_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(woffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(size4d);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage4DSGIS", " not available." );
  }

// GL_SGIS_texture_color_mask

  static void REGAL_CALL missing_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glTextureColorMaskSGIS", " not available." );
  }

// GL_SGIS_texture_filter4

  static void REGAL_CALL missing_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(filter);
    UNUSED_PARAMETER(weights);
    Warning( "glGetTexFilterFuncSGIS", " not available." );
  }

  static void REGAL_CALL missing_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(filter);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(weights);
    Warning( "glTexFilterFuncSGIS", " not available." );
  }

// GL_SGIX_async

  static void REGAL_CALL missing_glAsyncMarkerSGIX(GLuint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glAsyncMarkerSGIX", " not available." );
  }

  static void REGAL_CALL missing_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
  {
    UNUSED_PARAMETER(marker);
    UNUSED_PARAMETER(range);
    Warning( "glDeleteAsyncMarkersSGIX", " not available." );
  }

  static GLint REGAL_CALL missing_glFinishAsyncSGIX(GLuint *markerp)
  {
    UNUSED_PARAMETER(markerp);
    Warning( "glFinishAsyncSGIX", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_glGenAsyncMarkersSGIX(GLsizei range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenAsyncMarkersSGIX", " not available." );
    return 0;
  }

  static GLboolean REGAL_CALL missing_glIsAsyncMarkerSGIX(GLuint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glIsAsyncMarkerSGIX", " not available." );
    return GL_FALSE;
  }

  static GLint REGAL_CALL missing_glPollAsyncSGIX(GLuint *markerp)
  {
    UNUSED_PARAMETER(markerp);
    Warning( "glPollAsyncSGIX", " not available." );
    return 0;
  }

// GL_SGIX_flush_raster

  static void REGAL_CALL missing_glFlushRasterSGIX(void)
  {
    Warning( "glFlushRasterSGIX", " not available." );
  }

// GL_SGIX_fog_texture

  static void REGAL_CALL missing_glTextureFogSGIX(GLenum pname)
  {
    UNUSED_PARAMETER(pname);
    Warning( "glTextureFogSGIX", " not available." );
  }

// GL_SGIX_fragment_lighting

  static void REGAL_CALL missing_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glFragmentColorMaterialSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModelfSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModeliSGIX(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModeliSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelivSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightfSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightiSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightivSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialfSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialiSGIX", " not available." );
  }

  static void REGAL_CALL missing_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialivSGIX", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightivSGIX", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialivSGIX", " not available." );
  }

  static void REGAL_CALL missing_glLightEnviSGIX(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightEnviSGIX", " not available." );
  }

// GL_SGIX_framezoom

  static void REGAL_CALL missing_glFrameZoomSGIX(GLint factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glFrameZoomSGIX", " not available." );
  }

// GL_SGIX_igloo_interface

  static void REGAL_CALL missing_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glIglooInterfaceSGIX", " not available." );
  }

// GL_SGIX_instruments

  static GLint REGAL_CALL missing_glGetInstrumentsSGIX(void)
  {
    Warning( "glGetInstrumentsSGIX", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(buffer);
    Warning( "glInstrumentsBufferSGIX", " not available." );
  }

  static GLint REGAL_CALL missing_glPollInstrumentsSGIX(GLint *marker_p)
  {
    UNUSED_PARAMETER(marker_p);
    Warning( "glPollInstrumentsSGIX", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glReadInstrumentsSGIX(GLint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glReadInstrumentsSGIX", " not available." );
  }

  static void REGAL_CALL missing_glStartInstrumentsSGIX(void)
  {
    Warning( "glStartInstrumentsSGIX", " not available." );
  }

  static void REGAL_CALL missing_glStopInstrumentsSGIX(GLint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glStopInstrumentsSGIX", " not available." );
  }

// GL_SGIX_list_priority

  static void REGAL_CALL missing_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetListParameterfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetListParameterivSGIX", " not available." );
  }

  static void REGAL_CALL missing_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glListParameterfSGIX", " not available." );
  }

  static void REGAL_CALL missing_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glListParameterfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glListParameteriSGIX", " not available." );
  }

  static void REGAL_CALL missing_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glListParameterivSGIX", " not available." );
  }

// GL_SGIX_pixel_texture

  static void REGAL_CALL missing_glPixelTexGenSGIX(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glPixelTexGenSGIX", " not available." );
  }

// GL_SGIX_polynomial_ffd

  static void REGAL_CALL missing_glDeformSGIX(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glDeformSGIX", " not available." );
  }

  static void REGAL_CALL missing_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(w1);
    UNUSED_PARAMETER(w2);
    UNUSED_PARAMETER(wstride);
    UNUSED_PARAMETER(worder);
    UNUSED_PARAMETER(points);
    Warning( "glDeformationMap3dSGIX", " not available." );
  }

  static void REGAL_CALL missing_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(w1);
    UNUSED_PARAMETER(w2);
    UNUSED_PARAMETER(wstride);
    UNUSED_PARAMETER(worder);
    UNUSED_PARAMETER(points);
    Warning( "glDeformationMap3fSGIX", " not available." );
  }

  static void REGAL_CALL missing_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glLoadIdentityDeformationMapSGIX", " not available." );
  }

// GL_SGIX_reference_plane

  static void REGAL_CALL missing_glReferencePlaneSGIX(const GLdouble *equation)
  {
    UNUSED_PARAMETER(equation);
    Warning( "glReferencePlaneSGIX", " not available." );
  }

// GL_SGIX_sprite

  static void REGAL_CALL missing_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSpriteParameterfSGIX", " not available." );
  }

  static void REGAL_CALL missing_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSpriteParameterfvSGIX", " not available." );
  }

  static void REGAL_CALL missing_glSpriteParameteriSGIX(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSpriteParameteriSGIX", " not available." );
  }

  static void REGAL_CALL missing_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSpriteParameterivSGIX", " not available." );
  }

// GL_SGIX_tag_sample_buffer

  static void REGAL_CALL missing_glTagSampleBufferSGIX(void)
  {
    Warning( "glTagSampleBufferSGIX", " not available." );
  }

// GL_SGI_color_table

  static void REGAL_CALL missing_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameterfvSGI", " not available." );
  }

  static void REGAL_CALL missing_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameterivSGI", " not available." );
  }

  static void REGAL_CALL missing_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorTableSGI", " not available." );
  }

  static void REGAL_CALL missing_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorTableSGI", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterfvSGI", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterivSGI", " not available." );
  }

  static void REGAL_CALL missing_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glGetColorTableSGI", " not available." );
  }

// GL_SUNX_constant_data

  static void REGAL_CALL missing_glFinishTextureSUNX(void)
  {
    Warning( "glFinishTextureSUNX", " not available." );
  }

// GL_SUN_global_alpha

  static void REGAL_CALL missing_glGlobalAlphaFactorbSUN(GLbyte factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorbSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactordSUN(GLdouble factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactordSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorfSUN(GLfloat factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorfSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactoriSUN(GLint factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactoriSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorsSUN(GLshort factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorsSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorubSUN(GLubyte factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorubSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactoruiSUN(GLuint factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactoruiSUN", " not available." );
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorusSUN(GLushort factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorusSUN", " not available." );
  }

// GL_SUN_mesh_array

  static void REGAL_CALL missing_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(width);
    Warning( "glDrawMeshArraysSUN", " not available." );
  }

// GL_SUN_read_video_pixels

  static void REGAL_CALL missing_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glReadVideoPixelsSUN", " not available." );
  }

// GL_SUN_triangle_list

  static void REGAL_CALL missing_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glReplacementCodePointerSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeubSUN(GLubyte code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeubSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeubvSUN(const GLubyte *code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeubvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiSUN(GLuint code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeuiSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuivSUN(const GLuint *code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeuivSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeusSUN(GLushort code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeusSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeusvSUN(const GLushort *code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeusvSUN", " not available." );
  }

// GL_SUN_vertex

  static void REGAL_CALL missing_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glColor3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glColor3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glColor4fNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glColor4fNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glColor4ubVertex2fSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glColor4ubVertex2fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glColor4ubVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glColor4ubVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiColor3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiColor3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiColor4fNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiColor4ubVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiColor4ubVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiTexCoord2fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiTexCoord2fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fColor3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fColor3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fColor4fNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fColor4fNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fColor4ubVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fColor4ubVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fNormal3fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fNormal3fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fVertex3fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fVertex3fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(p);
    UNUSED_PARAMETER(q);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glTexCoord4fColor4fNormal3fVertex4fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4fColor4fNormal3fVertex4fvSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(p);
    UNUSED_PARAMETER(q);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glTexCoord4fVertex4fSUN", " not available." );
  }

  static void REGAL_CALL missing_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4fVertex4fvSUN", " not available." );
  }

// GL_WIN_swap_hint

  static void REGAL_CALL missing_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glAddSwapHintRectWIN", " not available." );
  }

#if REGAL_SYS_WGL

// WGL_3DL_stereo_control

  static BOOL REGAL_CALL missing_wglSetStereoEmitterState3DL(HDC hDC, UINT uState)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uState);
    Warning( "wglSetStereoEmitterState3DL", " not available." );
    return 0;
  }

// WGL_AMD_gpu_association

  static VOID REGAL_CALL missing_wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(dstCtx);
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "wglBlitContextFramebufferAMD", " not available." );
  }

  static HGLRC REGAL_CALL missing_wglCreateAssociatedContextAMD(UINT id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglCreateAssociatedContextAMD", " not available." );
    return NULL;
  }

  static HGLRC REGAL_CALL missing_wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(hShareContext);
    UNUSED_PARAMETER(attribList);
    Warning( "wglCreateAssociatedContextAttribsAMD", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglDeleteAssociatedContextAMD(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglDeleteAssociatedContextAMD", " not available." );
    return 0;
  }

  static UINT REGAL_CALL missing_wglGetContextGPUIDAMD(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglGetContextGPUIDAMD", " not available." );
    return 0;
  }

  static HGLRC REGAL_CALL missing_wglGetCurrentAssociatedContextAMD(void)
  {
    Warning( "wglGetCurrentAssociatedContextAMD", " not available." );
    return NULL;
  }

  static UINT REGAL_CALL missing_wglGetGPUIDsAMD(UINT maxCount, UINT *ids)
  {
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(ids);
    Warning( "wglGetGPUIDsAMD", " not available." );
    return 0;
  }

  static INT REGAL_CALL missing_wglGetGPUInfoAMD(UINT id, int property, GLenum dataType, UINT size, void *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(property);
    UNUSED_PARAMETER(dataType);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "wglGetGPUInfoAMD", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglMakeAssociatedContextCurrentAMD(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeAssociatedContextCurrentAMD", " not available." );
    return 0;
  }

// WGL_ARB_buffer_region

  static HANDLE REGAL_CALL missing_wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(uType);
    Warning( "wglCreateBufferRegionARB", " not available." );
    return 0;
  }

  static VOID REGAL_CALL missing_wglDeleteBufferRegionARB(HANDLE hRegion)
  {
    UNUSED_PARAMETER(hRegion);
    Warning( "wglDeleteBufferRegionARB", " not available." );
  }

  static BOOL REGAL_CALL missing_wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
  {
    UNUSED_PARAMETER(hRegion);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(xSrc);
    UNUSED_PARAMETER(ySrc);
    Warning( "wglRestoreBufferRegionARB", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height)
  {
    UNUSED_PARAMETER(hRegion);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "wglSaveBufferRegionARB", " not available." );
    return 0;
  }

// WGL_ARB_create_context

  static HGLRC REGAL_CALL missing_wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hShareContext);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglCreateContextAttribsARB", " not available." );
    return NULL;
  }

// WGL_ARB_extensions_string

  static const char *REGAL_CALL missing_wglGetExtensionsStringARB(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglGetExtensionsStringARB", " not available." );
    return NULL;
  }

// WGL_ARB_make_current_read

  static HDC REGAL_CALL missing_wglGetCurrentReadDCARB(void)
  {
    Warning( "wglGetCurrentReadDCARB", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    UNUSED_PARAMETER(hDrawDC);
    UNUSED_PARAMETER(hReadDC);
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeContextCurrentARB", " not available." );
    return 0;
  }

// WGL_ARB_pbuffer

  static HPBUFFERARB REGAL_CALL missing_wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iWidth);
    UNUSED_PARAMETER(iHeight);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglCreatePbufferARB", " not available." );
    return (HPBUFFERARB) 0;
  }

  static BOOL REGAL_CALL missing_wglDestroyPbufferARB(HPBUFFERARB hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglDestroyPbufferARB", " not available." );
    return 0;
  }

  static HDC REGAL_CALL missing_wglGetPbufferDCARB(HPBUFFERARB hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglGetPbufferDCARB", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryPbufferARB", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(hDC);
    Warning( "wglReleasePbufferDCARB", " not available." );
    return 0;
  }

// WGL_ARB_pixel_format

  static BOOL REGAL_CALL missing_wglChoosePixelFormatARB(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(piAttribIList);
    UNUSED_PARAMETER(pfAttribFList);
    UNUSED_PARAMETER(nMaxFormats);
    UNUSED_PARAMETER(piFormats);
    UNUSED_PARAMETER(nNumFormats);
    Warning( "wglChoosePixelFormatARB", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribfvARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(pfValues);
    Warning( "wglGetPixelFormatAttribfvARB", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribivARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(piValues);
    Warning( "wglGetPixelFormatAttribivARB", " not available." );
    return 0;
  }

// WGL_ARB_render_texture

  static BOOL REGAL_CALL missing_wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iBuffer);
    Warning( "wglBindTexImageARB", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iBuffer);
    Warning( "wglReleaseTexImageARB", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglSetPbufferAttribARB", " not available." );
    return 0;
  }

// WGL_EXT_display_color_table

  static GLboolean REGAL_CALL missing_wglBindDisplayColorTableEXT(GLushort id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglBindDisplayColorTableEXT", " not available." );
    return GL_FALSE;
  }

  static GLboolean REGAL_CALL missing_wglCreateDisplayColorTableEXT(GLushort id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglCreateDisplayColorTableEXT", " not available." );
    return GL_FALSE;
  }

  static VOID REGAL_CALL missing_wglDestroyDisplayColorTableEXT(GLushort id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglDestroyDisplayColorTableEXT", " not available." );
  }

  static GLboolean REGAL_CALL missing_wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length)
  {
    UNUSED_PARAMETER(table);
    UNUSED_PARAMETER(length);
    Warning( "wglLoadDisplayColorTableEXT", " not available." );
    return GL_FALSE;
  }

// WGL_EXT_extensions_string

  static const char *REGAL_CALL missing_wglGetExtensionsStringEXT(void)
  {
    Warning( "wglGetExtensionsStringEXT", " not available." );
    return NULL;
  }

// WGL_EXT_make_current_read

  static HDC REGAL_CALL missing_wglGetCurrentReadDCEXT(void)
  {
    Warning( "wglGetCurrentReadDCEXT", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    UNUSED_PARAMETER(hDrawDC);
    UNUSED_PARAMETER(hReadDC);
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeContextCurrentEXT", " not available." );
    return 0;
  }

// WGL_EXT_pbuffer

  static HPBUFFEREXT REGAL_CALL missing_wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iWidth);
    UNUSED_PARAMETER(iHeight);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglCreatePbufferEXT", " not available." );
    return (HPBUFFEREXT) 0;
  }

  static BOOL REGAL_CALL missing_wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglDestroyPbufferEXT", " not available." );
    return 0;
  }

  static HDC REGAL_CALL missing_wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglGetPbufferDCEXT", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryPbufferEXT", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(hDC);
    Warning( "wglReleasePbufferDCEXT", " not available." );
    return 0;
  }

// WGL_EXT_pixel_format

  static BOOL REGAL_CALL missing_wglChoosePixelFormatEXT(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(piAttribIList);
    UNUSED_PARAMETER(pfAttribFList);
    UNUSED_PARAMETER(nMaxFormats);
    UNUSED_PARAMETER(piFormats);
    UNUSED_PARAMETER(nNumFormats);
    Warning( "wglChoosePixelFormatEXT", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribfvEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(pfValues);
    Warning( "wglGetPixelFormatAttribfvEXT", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribivEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(piValues);
    Warning( "wglGetPixelFormatAttribivEXT", " not available." );
    return 0;
  }

// WGL_EXT_swap_control

  static int REGAL_CALL missing_wglGetSwapIntervalEXT(void)
  {
    Warning( "wglGetSwapIntervalEXT", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSwapIntervalEXT(int interval)
  {
    UNUSED_PARAMETER(interval);
    Warning( "wglSwapIntervalEXT", " not available." );
    return 0;
  }

// WGL_GDI

  static int REGAL_CALL missing_wglChoosePixelFormat(HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(ppfd);
    Warning( "wglChoosePixelFormat", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_wglDescribePixelFormat(HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(nBytes);
    UNUSED_PARAMETER(ppfd);
    Warning( "wglDescribePixelFormat", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_wglGetPixelFormat(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglGetPixelFormat", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSetPixelFormat(HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(ppfd);
    Warning( "wglSetPixelFormat", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSwapBuffers(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglSwapBuffers", " not available." );
    return 0;
  }

// WGL_I3D_digital_video_control

  static BOOL REGAL_CALL missing_wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglGetDigitalVideoParametersI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglSetDigitalVideoParametersI3D", " not available." );
    return 0;
  }

// WGL_I3D_gamma

  static BOOL REGAL_CALL missing_wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iEntries);
    UNUSED_PARAMETER(puRed);
    UNUSED_PARAMETER(puGreen);
    UNUSED_PARAMETER(puBlue);
    Warning( "wglGetGammaTableI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglGetGammaTableParametersI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iEntries);
    UNUSED_PARAMETER(puRed);
    UNUSED_PARAMETER(puGreen);
    UNUSED_PARAMETER(puBlue);
    Warning( "wglSetGammaTableI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglSetGammaTableParametersI3D", " not available." );
    return 0;
  }

// WGL_I3D_genlock

  static BOOL REGAL_CALL missing_wglDisableGenlockI3D(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglDisableGenlockI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglEnableGenlockI3D(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglEnableGenlockI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGenlockSampleRateI3D(HDC hDC, UINT uRate)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uRate);
    Warning( "wglGenlockSampleRateI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uDelay);
    Warning( "wglGenlockSourceDelayI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uEdge);
    Warning( "wglGenlockSourceEdgeI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGenlockSourceI3D(HDC hDC, UINT uSource)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uSource);
    Warning( "wglGenlockSourceI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uRate);
    Warning( "wglGetGenlockSampleRateI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uDelay);
    Warning( "wglGetGenlockSourceDelayI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uEdge);
    Warning( "wglGetGenlockSourceEdgeI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSourceI3D(HDC hDC, UINT *uSource)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uSource);
    Warning( "wglGetGenlockSourceI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pFlag);
    Warning( "wglIsEnabledGenlockI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uMaxLineDelay);
    UNUSED_PARAMETER(uMaxPixelDelay);
    Warning( "wglQueryGenlockMaxSourceDelayI3D", " not available." );
    return 0;
  }

// WGL_I3D_image_buffer

  static BOOL REGAL_CALL missing_wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pEvent);
    UNUSED_PARAMETER(pAddress);
    UNUSED_PARAMETER(pSize);
    UNUSED_PARAMETER(count);
    Warning( "wglAssociateImageBufferEventsI3D", " not available." );
    return 0;
  }

  static LPVOID REGAL_CALL missing_wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(dwSize);
    UNUSED_PARAMETER(uFlags);
    Warning( "wglCreateImageBufferI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pAddress);
    Warning( "wglDestroyImageBufferI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pAddress);
    UNUSED_PARAMETER(count);
    Warning( "wglReleaseImageBufferEventsI3D", " not available." );
    return 0;
  }

// WGL_I3D_swap_frame_lock

  static BOOL REGAL_CALL missing_wglDisableFrameLockI3D(void)
  {
    Warning( "wglDisableFrameLockI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglEnableFrameLockI3D(void)
  {
    Warning( "wglEnableFrameLockI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglIsEnabledFrameLockI3D(BOOL *pFlag)
  {
    UNUSED_PARAMETER(pFlag);
    Warning( "wglIsEnabledFrameLockI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryFrameLockMasterI3D(BOOL *pFlag)
  {
    UNUSED_PARAMETER(pFlag);
    Warning( "wglQueryFrameLockMasterI3D", " not available." );
    return 0;
  }

// WGL_I3D_swap_frame_usage

  static BOOL REGAL_CALL missing_wglBeginFrameTrackingI3D(void)
  {
    Warning( "wglBeginFrameTrackingI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglEndFrameTrackingI3D(void)
  {
    Warning( "wglEndFrameTrackingI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetFrameUsageI3D(float *pUsage)
  {
    UNUSED_PARAMETER(pUsage);
    Warning( "wglGetFrameUsageI3D", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
  {
    UNUSED_PARAMETER(pFrameCount);
    UNUSED_PARAMETER(pMissedFrames);
    UNUSED_PARAMETER(pLastMissedUsage);
    Warning( "wglQueryFrameTrackingI3D", " not available." );
    return 0;
  }

// WGL_NV_DX_interop

  static BOOL REGAL_CALL missing_wglDXCloseDeviceNV(HANDLE hDevice)
  {
    UNUSED_PARAMETER(hDevice);
    Warning( "wglDXCloseDeviceNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(hObjects);
    Warning( "wglDXLockObjectsNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDXObjectAccessNV(HANDLE hObject, GLenum access)
  {
    UNUSED_PARAMETER(hObject);
    UNUSED_PARAMETER(access);
    Warning( "wglDXObjectAccessNV", " not available." );
    return 0;
  }

  static HANDLE REGAL_CALL missing_wglDXOpenDeviceNV(GLvoid *dxDevice)
  {
    UNUSED_PARAMETER(dxDevice);
    Warning( "wglDXOpenDeviceNV", " not available." );
    return 0;
  }

  static HANDLE REGAL_CALL missing_wglDXRegisterObjectNV(HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(dxObject);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(access);
    Warning( "wglDXRegisterObjectNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDXSetResourceShareHandleNV(GLvoid *dxObject, HANDLE shareHandle)
  {
    UNUSED_PARAMETER(dxObject);
    UNUSED_PARAMETER(shareHandle);
    Warning( "wglDXSetResourceShareHandleNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(hObjects);
    Warning( "wglDXUnlockObjectsNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(hObject);
    Warning( "wglDXUnregisterObjectNV", " not available." );
    return 0;
  }

// WGL_NV_copy_image

  static BOOL REGAL_CALL missing_wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(hSrcRC);
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(hDstRC);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "wglCopyImageSubDataNV", " not available." );
    return 0;
  }

// WGL_NV_gpu_affinity

  static HDC REGAL_CALL missing_wglCreateAffinityDCNV(const HGPUNV *phGpuList)
  {
    UNUSED_PARAMETER(phGpuList);
    Warning( "wglCreateAffinityDCNV", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglDeleteDCNV(HDC hAffinityDC)
  {
    UNUSED_PARAMETER(hAffinityDC);
    Warning( "wglDeleteDCNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
  {
    UNUSED_PARAMETER(hGpu);
    UNUSED_PARAMETER(iDeviceIndex);
    UNUSED_PARAMETER(lpGpuDevice);
    Warning( "wglEnumGpuDevicesNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
  {
    UNUSED_PARAMETER(hAffinityDC);
    UNUSED_PARAMETER(iGpuIndex);
    UNUSED_PARAMETER(hGpu);
    Warning( "wglEnumGpusFromAffinityDCNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu)
  {
    UNUSED_PARAMETER(iGpuIndex);
    UNUSED_PARAMETER(phGpu);
    Warning( "wglEnumGpusNV", " not available." );
    return 0;
  }

// WGL_NV_present_video

  static BOOL REGAL_CALL missing_wglBindVideoDeviceNV(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uVideoSlot);
    UNUSED_PARAMETER(hVideoDevice);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglBindVideoDeviceNV", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_wglEnumerateVideoDevicesNV(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(phDeviceList);
    Warning( "wglEnumerateVideoDevicesNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryCurrentContextNV(int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryCurrentContextNV", " not available." );
    return 0;
  }

// WGL_NV_swap_group

  static BOOL REGAL_CALL missing_wglBindSwapBarrierNV(GLuint group, GLuint barrier)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "wglBindSwapBarrierNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglJoinSwapGroupNV(HDC hDC, GLuint group)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(group);
    Warning( "wglJoinSwapGroupNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryFrameCountNV(HDC hDC, GLuint *count)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(count);
    Warning( "wglQueryFrameCountNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(maxGroups);
    UNUSED_PARAMETER(maxBarriers);
    Warning( "wglQueryMaxSwapGroupsNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "wglQuerySwapGroupNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglResetFrameCountNV(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglResetFrameCountNV", " not available." );
    return 0;
  }

// WGL_NV_vertex_array_range

  static void *REGAL_CALL missing_wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(readfreq);
    UNUSED_PARAMETER(writefreq);
    UNUSED_PARAMETER(priority);
    Warning( "wglAllocateMemoryNV", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_wglFreeMemoryNV(void *pointer)
  {
    UNUSED_PARAMETER(pointer);
    Warning( "wglFreeMemoryNV", " not available." );
  }

// WGL_NV_video_capture

  static BOOL REGAL_CALL missing_wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
  {
    UNUSED_PARAMETER(uVideoSlot);
    UNUSED_PARAMETER(hDevice);
    Warning( "wglBindVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  static UINT REGAL_CALL missing_wglEnumerateVideoCaptureDevicesNV(HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(phDeviceList);
    Warning( "wglEnumerateVideoCaptureDevicesNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglLockVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hDevice);
    Warning( "wglLockVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglQueryVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglReleaseVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hDevice);
    Warning( "wglReleaseVideoCaptureDeviceNV", " not available." );
    return 0;
  }

// WGL_NV_video_output

  static BOOL REGAL_CALL missing_wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    UNUSED_PARAMETER(hVideoDevice);
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iVideoBuffer);
    Warning( "wglBindVideoImageNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(numDevices);
    UNUSED_PARAMETER(hVideoDevice);
    Warning( "wglGetVideoDeviceNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    UNUSED_PARAMETER(hpVideoDevice);
    UNUSED_PARAMETER(pulCounterOutputPbuffer);
    UNUSED_PARAMETER(pulCounterOutputVideo);
    Warning( "wglGetVideoInfoNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice)
  {
    UNUSED_PARAMETER(hVideoDevice);
    Warning( "wglReleaseVideoDeviceNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iVideoBuffer);
    Warning( "wglReleaseVideoImageNV", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iBufferType);
    UNUSED_PARAMETER(pulCounterPbuffer);
    UNUSED_PARAMETER(bBlock);
    Warning( "wglSendPbufferToVideoNV", " not available." );
    return 0;
  }

// WGL_OML_sync_control

  static BOOL REGAL_CALL missing_wglGetMscRateOML(HDC hDC, INT32 *numerator, INT32 *denominator)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(numerator);
    UNUSED_PARAMETER(denominator);
    Warning( "wglGetMscRateOML", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglGetSyncValuesOML(HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "wglGetSyncValuesOML", " not available." );
    return 0;
  }

  static INT64 REGAL_CALL missing_wglSwapBuffersMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    Warning( "wglSwapBuffersMscOML", " not available." );
    return 0;
  }

  static INT64 REGAL_CALL missing_wglSwapLayerBuffersMscOML(HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(fuPlanes);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    Warning( "wglSwapLayerBuffersMscOML", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglWaitForMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "wglWaitForMscOML", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglWaitForSbcOML(HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(target_sbc);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "wglWaitForSbcOML", " not available." );
    return 0;
  }

// WGL_core

  static BOOL REGAL_CALL missing_wglCopyContext(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
  {
    UNUSED_PARAMETER(hglrcSrc);
    UNUSED_PARAMETER(hglrcDst);
    UNUSED_PARAMETER(mask);
    Warning( "wglCopyContext", " not available." );
    return 0;
  }

  static HGLRC REGAL_CALL missing_wglCreateContext(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglCreateContext", " not available." );
    return NULL;
  }

  static HGLRC REGAL_CALL missing_wglCreateLayerContext(HDC hDC, int iLayerPlane)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    Warning( "wglCreateLayerContext", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglDeleteContext(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglDeleteContext", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglDescribeLayerPlane(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nBytes);
    UNUSED_PARAMETER(plpd);
    Warning( "wglDescribeLayerPlane", " not available." );
    return 0;
  }

  static HGLRC REGAL_CALL missing_wglGetCurrentContext(void)
  {
    Warning( "wglGetCurrentContext", " not available." );
    return NULL;
  }

  static HDC REGAL_CALL missing_wglGetCurrentDC(void)
  {
    Warning( "wglGetCurrentDC", " not available." );
    return NULL;
  }

  static PROC REGAL_CALL missing_wglGetDefaultProcAddress(LPCSTR lpszProc)
  {
    UNUSED_PARAMETER(lpszProc);
    Warning( "wglGetDefaultProcAddress", " not available." );
    return NULL;
  }

  static int REGAL_CALL missing_wglGetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(iStart);
    UNUSED_PARAMETER(nEntries);
    UNUSED_PARAMETER(pcr);
    Warning( "wglGetLayerPaletteEntries", " not available." );
    return 0;
  }

  static PROC REGAL_CALL missing_wglGetProcAddress(LPCSTR lpszProc)
  {
    UNUSED_PARAMETER(lpszProc);
    Warning( "wglGetProcAddress", " not available." );
    return NULL;
  }

  static BOOL REGAL_CALL missing_wglMakeCurrent(HDC hDC, HGLRC hglrc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeCurrent", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglRealizeLayerPalette(HDC hDC, int iLayerPlane, BOOL bRealize)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(bRealize);
    Warning( "wglRealizeLayerPalette", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_wglSetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(iStart);
    UNUSED_PARAMETER(nEntries);
    UNUSED_PARAMETER(pcr);
    Warning( "wglSetLayerPaletteEntries", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglShareLists(HGLRC hglrcShare, HGLRC hglrcSrc)
  {
    UNUSED_PARAMETER(hglrcShare);
    UNUSED_PARAMETER(hglrcSrc);
    Warning( "wglShareLists", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglSwapLayerBuffers(HDC hDC, UINT fuPlanes)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(fuPlanes);
    Warning( "wglSwapLayerBuffers", " not available." );
    return 0;
  }

  static DWORD REGAL_CALL missing_wglSwapMultipleBuffers(UINT n, const WGLSWAP *ps)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ps);
    Warning( "wglSwapMultipleBuffers", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglUseFontBitmapsA(HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    Warning( "wglUseFontBitmapsA", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglUseFontBitmapsW(HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    Warning( "wglUseFontBitmapsW", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglUseFontOutlinesA(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    UNUSED_PARAMETER(deviation);
    UNUSED_PARAMETER(extrusion);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(lpgmf);
    Warning( "wglUseFontOutlinesA", " not available." );
    return 0;
  }

  static BOOL REGAL_CALL missing_wglUseFontOutlinesW(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    UNUSED_PARAMETER(deviation);
    UNUSED_PARAMETER(extrusion);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(lpgmf);
    Warning( "wglUseFontOutlinesW", " not available." );
    return 0;
  }

#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX

// GLX_VERSION_1_0

  static XVisualInfo *REGAL_CALL missing_glXChooseVisual(Display *dpy, int screen, int *attribList)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(attribList);
    Warning( "glXChooseVisual", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glXCopyContext(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(mask);
    Warning( "glXCopyContext", " not available." );
  }

  static GLXContext REGAL_CALL missing_glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    UNUSED_PARAMETER(shareList);
    UNUSED_PARAMETER(direct);
    Warning( "glXCreateContext", " not available." );
    return 0;
  }

  static GLXPixmap REGAL_CALL missing_glXCreateGLXPixmap(Display *dpy, XVisualInfo *vis, Pixmap pixmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    UNUSED_PARAMETER(pixmap);
    Warning( "glXCreateGLXPixmap", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glXDestroyContext(Display *dpy, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    Warning( "glXDestroyContext", " not available." );
  }

  static void REGAL_CALL missing_glXDestroyGLXPixmap(Display *dpy, GLXPixmap pix)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pix);
    Warning( "glXDestroyGLXPixmap", " not available." );
  }

  static int REGAL_CALL missing_glXGetConfig(Display *dpy, XVisualInfo *vis, int attrib, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    UNUSED_PARAMETER(attrib);
    UNUSED_PARAMETER(value);
    Warning( "glXGetConfig", " not available." );
    return 0;
  }

  static GLXContext REGAL_CALL missing_glXGetCurrentContext(void)
  {
    Warning( "glXGetCurrentContext", " not available." );
    return 0;
  }

  static GLXDrawable REGAL_CALL missing_glXGetCurrentDrawable(void)
  {
    Warning( "glXGetCurrentDrawable", " not available." );
    return 0;
  }

  static Bool REGAL_CALL missing_glXIsDirect(Display *dpy, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    Warning( "glXIsDirect", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXMakeCurrent(Display *dpy, GLXDrawable drawable, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeCurrent", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXQueryExtension(Display *dpy, int *errorBase, int *eventBase)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(errorBase);
    UNUSED_PARAMETER(eventBase);
    Warning( "glXQueryExtension", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXQueryVersion(Display *dpy, int *major, int *minor)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(major);
    UNUSED_PARAMETER(minor);
    Warning( "glXQueryVersion", " not available." );
    return (Bool) 0;
  }

  static void REGAL_CALL missing_glXSwapBuffers(Display *dpy, GLXDrawable drawable)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    Warning( "glXSwapBuffers", " not available." );
  }

  static void REGAL_CALL missing_glXUseXFont(Font font, int first, int count, int listBase)
  {
    UNUSED_PARAMETER(font);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    Warning( "glXUseXFont", " not available." );
  }

  static void REGAL_CALL missing_glXWaitGL(void)
  {
    Warning( "glXWaitGL", " not available." );
  }

  static void REGAL_CALL missing_glXWaitX(void)
  {
    Warning( "glXWaitX", " not available." );
  }

// GLX_VERSION_1_1

  static const char *REGAL_CALL missing_glXGetClientString(Display *dpy, int name)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(name);
    Warning( "glXGetClientString", " not available." );
    return NULL;
  }

  static const char *REGAL_CALL missing_glXQueryExtensionsString(Display *dpy, int screen)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    Warning( "glXQueryExtensionsString", " not available." );
    return NULL;
  }

  static const char *REGAL_CALL missing_glXQueryServerString(Display *dpy, int screen, int name)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(name);
    Warning( "glXQueryServerString", " not available." );
    return NULL;
  }

// GLX_VERSION_1_2

  static Display *REGAL_CALL missing_glXGetCurrentDisplay(void)
  {
    Warning( "glXGetCurrentDisplay", " not available." );
    return NULL;
  }

// GLX_VERSION_1_3

  static GLXFBConfig *REGAL_CALL missing_glXChooseFBConfig(Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(attrib_list);
    UNUSED_PARAMETER(nelements);
    Warning( "glXChooseFBConfig", " not available." );
    return NULL;
  }

  static GLXContext REGAL_CALL missing_glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(render_type);
    UNUSED_PARAMETER(share_list);
    UNUSED_PARAMETER(direct);
    Warning( "glXCreateNewContext", " not available." );
    return 0;
  }

  static GLXPbuffer REGAL_CALL missing_glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreatePbuffer", " not available." );
    return 0;
  }

  static GLXPixmap REGAL_CALL missing_glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(pixmap);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreatePixmap", " not available." );
    return 0;
  }

  static GLXWindow REGAL_CALL missing_glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreateWindow", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    Warning( "glXDestroyPbuffer", " not available." );
  }

  static void REGAL_CALL missing_glXDestroyPixmap(Display *dpy, GLXPixmap pixmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pixmap);
    Warning( "glXDestroyPixmap", " not available." );
  }

  static void REGAL_CALL missing_glXDestroyWindow(Display *dpy, GLXWindow win)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(win);
    Warning( "glXDestroyWindow", " not available." );
  }

  static GLXDrawable REGAL_CALL missing_glXGetCurrentReadDrawable(void)
  {
    Warning( "glXGetCurrentReadDrawable", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXGetFBConfigAttrib", " not available." );
    return 0;
  }

  static GLXFBConfig *REGAL_CALL missing_glXGetFBConfigs(Display *dpy, int screen, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(nelements);
    Warning( "glXGetFBConfigs", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(event_mask);
    Warning( "glXGetSelectedEvent", " not available." );
  }

  static XVisualInfo *REGAL_CALL missing_glXGetVisualFromFBConfig(Display *dpy, GLXFBConfig config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    Warning( "glXGetVisualFromFBConfig", " not available." );
    return NULL;
  }

  static Bool REGAL_CALL missing_glXMakeContextCurrent(Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(read);
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeContextCurrent", " not available." );
    return (Bool) 0;
  }

  static int REGAL_CALL missing_glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryContext", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryDrawable", " not available." );
  }

  static void REGAL_CALL missing_glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(event_mask);
    Warning( "glXSelectEvent", " not available." );
  }

// GLX_VERSION_1_4

  static __GLXextFuncPtr REGAL_CALL missing_glXGetProcAddress(const GLubyte *procName)
  {
    UNUSED_PARAMETER(procName);
    Warning( "glXGetProcAddress", " not available." );
    return NULL;
  }

// GLX_AMD_gpu_association

  static void REGAL_CALL missing_glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(dstCtx);
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glXBlitContextFramebufferAMD", " not available." );
  }

  static GLXContext REGAL_CALL missing_glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(share_list);
    Warning( "glXCreateAssociatedContextAMD", " not available." );
    return 0;
  }

  static GLXContext REGAL_CALL missing_glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *attribList)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(share_context);
    UNUSED_PARAMETER(attribList);
    Warning( "glXCreateAssociatedContextAttribsAMD", " not available." );
    return 0;
  }

  static Bool REGAL_CALL missing_glXDeleteAssociatedContextAMD(GLXContext ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "glXDeleteAssociatedContextAMD", " not available." );
    return (Bool) 0;
  }

  static unsigned int REGAL_CALL missing_glXGetContextGPUIDAMD(GLXContext ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "glXGetContextGPUIDAMD", " not available." );
    return (unsigned int) 0;
  }

  static GLXContext REGAL_CALL missing_glXGetCurrentAssociatedContextAMD(void)
  {
    Warning( "glXGetCurrentAssociatedContextAMD", " not available." );
    return 0;
  }

  static unsigned int REGAL_CALL missing_glXGetGPUIDsAMD(unsigned int maxCount, unsigned int *ids)
  {
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(ids);
    Warning( "glXGetGPUIDsAMD", " not available." );
    return (unsigned int) 0;
  }

  static int REGAL_CALL missing_glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(property);
    UNUSED_PARAMETER(dataType);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glXGetGPUInfoAMD", " not available." );
    return 0;
  }

  static Bool REGAL_CALL missing_glXMakeAssociatedContextCurrentAMD(GLXContext ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeAssociatedContextCurrentAMD", " not available." );
    return (Bool) 0;
  }

// GLX_ARB_create_context

  static GLXContext REGAL_CALL missing_glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(share_context);
    UNUSED_PARAMETER(direct);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreateContextAttribsARB", " not available." );
    return 0;
  }

// GLX_ARB_get_proc_address

  static __GLXextFuncPtr REGAL_CALL missing_glXGetProcAddressARB(const GLubyte *procName)
  {
    UNUSED_PARAMETER(procName);
    Warning( "glXGetProcAddressARB", " not available." );
    return NULL;
  }

// GLX_ATI_render_texture

  static void REGAL_CALL missing_glXBindTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(buffer);
    Warning( "glXBindTexImageATI", " not available." );
  }

  static void REGAL_CALL missing_glXDrawableAttribATI(Display *dpy, GLXDrawable draw, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXDrawableAttribATI", " not available." );
  }

  static void REGAL_CALL missing_glXReleaseTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(buffer);
    Warning( "glXReleaseTexImageATI", " not available." );
  }

// GLX_EXT_import_context

  static void REGAL_CALL missing_glXFreeContextEXT(Display *dpy, GLXContext context)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(context);
    Warning( "glXFreeContextEXT", " not available." );
  }

  static GLXContextID REGAL_CALL missing_glXGetContextIDEXT(const GLXContext context)
  {
    UNUSED_PARAMETER(context);
    Warning( "glXGetContextIDEXT", " not available." );
    return 0;
  }

  static GLXContext REGAL_CALL missing_glXImportContextEXT(Display *dpy, GLXContextID contextID)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(contextID);
    Warning( "glXImportContextEXT", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(context);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryContextInfoEXT", " not available." );
    return 0;
  }

// GLX_EXT_swap_control

  static void REGAL_CALL missing_glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(interval);
    Warning( "glXSwapIntervalEXT", " not available." );
  }

// GLX_EXT_texture_from_pixmap

  static void REGAL_CALL missing_glXBindTexImageEXT(Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXBindTexImageEXT", " not available." );
  }

  static void REGAL_CALL missing_glXReleaseTexImageEXT(Display *display, GLXDrawable drawable, int buffer)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(buffer);
    Warning( "glXReleaseTexImageEXT", " not available." );
  }

// GLX_MESA_agp_offset

  static unsigned int REGAL_CALL missing_glXGetAGPOffsetMESA(const void *pointer)
  {
    UNUSED_PARAMETER(pointer);
    Warning( "glXGetAGPOffsetMESA", " not available." );
    return (unsigned int) 0;
  }

// GLX_MESA_copy_sub_buffer

  static void REGAL_CALL missing_glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glXCopySubBufferMESA", " not available." );
  }

// GLX_MESA_pixmap_colormap

  static GLXPixmap REGAL_CALL missing_glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(visual);
    UNUSED_PARAMETER(pixmap);
    UNUSED_PARAMETER(cmap);
    Warning( "glXCreateGLXPixmapMESA", " not available." );
    return 0;
  }

// GLX_MESA_release_buffers

  static Bool REGAL_CALL missing_glXReleaseBuffersMESA(Display *dpy, GLXDrawable d)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(d);
    Warning( "glXReleaseBuffersMESA", " not available." );
    return (Bool) 0;
  }

// GLX_MESA_set_3dfx_mode

  static GLboolean REGAL_CALL missing_glXSet3DfxModeMESA(GLint mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glXSet3DfxModeMESA", " not available." );
    return GL_FALSE;
  }

// GLX_MESA_swap_control

  static int REGAL_CALL missing_glXGetSwapIntervalMESA(void)
  {
    Warning( "glXGetSwapIntervalMESA", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXSwapIntervalMESA(unsigned int interval)
  {
    UNUSED_PARAMETER(interval);
    Warning( "glXSwapIntervalMESA", " not available." );
    return 0;
  }

// GLX_NV_copy_image

  static void REGAL_CALL missing_glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(srcCtx);
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(dstCtx);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glXCopyImageSubDataNV", " not available." );
  }

// GLX_NV_present_video

  static int REGAL_CALL missing_glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(video_device);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXBindVideoDeviceNV", " not available." );
    return 0;
  }

  static unsigned int *REGAL_CALL missing_glXEnumerateVideoDevicesNV(Display *dpy, int screen, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(nelements);
    Warning( "glXEnumerateVideoDevicesNV", " not available." );
    return NULL;
  }

// GLX_NV_swap_group

  static Bool REGAL_CALL missing_glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "glXBindSwapBarrierNV", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(group);
    Warning( "glXJoinSwapGroupNV", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(count);
    Warning( "glXQueryFrameCountNV", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(maxGroups);
    UNUSED_PARAMETER(maxBarriers);
    Warning( "glXQueryMaxSwapGroupsNV", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "glXQuerySwapGroupNV", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXResetFrameCountNV(Display *dpy, int screen)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    Warning( "glXResetFrameCountNV", " not available." );
    return (Bool) 0;
  }

// GLX_NV_vertex_array_range

  static void *REGAL_CALL missing_glXAllocateMemoryNV(GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(readFrequency);
    UNUSED_PARAMETER(writeFrequency);
    UNUSED_PARAMETER(priority);
    Warning( "glXAllocateMemoryNV", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glXFreeMemoryNV(void *pointer)
  {
    UNUSED_PARAMETER(pointer);
    Warning( "glXFreeMemoryNV", " not available." );
  }

// GLX_NV_video_capture

  static int REGAL_CALL missing_glXBindVideoCaptureDeviceNV(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(device);
    Warning( "glXBindVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  static GLXVideoCaptureDeviceNV *REGAL_CALL missing_glXEnumerateVideoCaptureDevicesNV(Display *dpy, int screen, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(nelements);
    Warning( "glXEnumerateVideoCaptureDevicesNV", " not available." );
    return NULL;
  }

  static void REGAL_CALL missing_glXLockVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(device);
    Warning( "glXLockVideoCaptureDeviceNV", " not available." );
  }

  static int REGAL_CALL missing_glXQueryVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(device);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glXReleaseVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(device);
    Warning( "glXReleaseVideoCaptureDeviceNV", " not available." );
  }

// GLX_NV_video_output

  static int REGAL_CALL missing_glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(VideoDevice);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(iVideoBuffer);
    Warning( "glXBindVideoImageNV", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(numVideoDevices);
    UNUSED_PARAMETER(pVideoDevice);
    Warning( "glXGetVideoDeviceNV", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(VideoDevice);
    UNUSED_PARAMETER(pulCounterOutputPbuffer);
    UNUSED_PARAMETER(pulCounterOutputVideo);
    Warning( "glXGetVideoInfoNV", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(VideoDevice);
    Warning( "glXReleaseVideoDeviceNV", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    Warning( "glXReleaseVideoImageNV", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(iBufferType);
    UNUSED_PARAMETER(pulCounterPbuffer);
    UNUSED_PARAMETER(bBlock);
    Warning( "glXSendPbufferToVideoNV", " not available." );
    return 0;
  }

// GLX_OML_sync_control

  static Bool REGAL_CALL missing_glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(numerator);
    UNUSED_PARAMETER(denominator);
    Warning( "glXGetMscRateOML", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "glXGetSyncValuesOML", " not available." );
    return (Bool) 0;
  }

  static int64_t REGAL_CALL missing_glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    Warning( "glXSwapBuffersMscOML", " not available." );
    return (int64_t) 0;
  }

  static Bool REGAL_CALL missing_glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "glXWaitForMscOML", " not available." );
    return (Bool) 0;
  }

  static Bool REGAL_CALL missing_glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(target_sbc);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "glXWaitForSbcOML", " not available." );
    return (Bool) 0;
  }

// GLX_SGIX_fbconfig

  static GLXFBConfigSGIX *REGAL_CALL missing_glXChooseFBConfigSGIX(Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(attrib_list);
    UNUSED_PARAMETER(nelements);
    Warning( "glXChooseFBConfigSGIX", " not available." );
    return NULL;
  }

  static GLXContext REGAL_CALL missing_glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(render_type);
    UNUSED_PARAMETER(share_list);
    UNUSED_PARAMETER(direct);
    Warning( "glXCreateContextWithConfigSGIX", " not available." );
    return 0;
  }

  static GLXPixmap REGAL_CALL missing_glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfig config, Pixmap pixmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(pixmap);
    Warning( "glXCreateGLXPixmapWithConfigSGIX", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXGetFBConfigAttribSGIX", " not available." );
    return 0;
  }

  static GLXFBConfigSGIX REGAL_CALL missing_glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    Warning( "glXGetFBConfigFromVisualSGIX", " not available." );
    return 0;
  }

  static XVisualInfo *REGAL_CALL missing_glXGetVisualFromFBConfigSGIX(Display *dpy, GLXFBConfig config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    Warning( "glXGetVisualFromFBConfigSGIX", " not available." );
    return NULL;
  }

// GLX_SGIX_pbuffer

  static GLXPbuffer REGAL_CALL missing_glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreateGLXPbufferSGIX", " not available." );
    return 0;
  }

  static void REGAL_CALL missing_glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    Warning( "glXDestroyGLXPbufferSGIX", " not available." );
  }

  static void REGAL_CALL missing_glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(mask);
    Warning( "glXGetSelectedEventSGIX", " not available." );
  }

  static void REGAL_CALL missing_glXQueryGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryGLXPbufferSGIX", " not available." );
  }

  static void REGAL_CALL missing_glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(mask);
    Warning( "glXSelectEventSGIX", " not available." );
  }

// GLX_SGIX_swap_barrier

  static void REGAL_CALL missing_glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(barrier);
    Warning( "glXBindSwapBarrierSGIX", " not available." );
  }

  static Bool REGAL_CALL missing_glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(max);
    Warning( "glXQueryMaxSwapBarriersSGIX", " not available." );
    return (Bool) 0;
  }

// GLX_SGIX_swap_group

  static void REGAL_CALL missing_glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(member);
    Warning( "glXJoinSwapGroupSGIX", " not available." );
  }

// GLX_SGIX_video_resize

  static int REGAL_CALL missing_glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(window);
    Warning( "glXBindChannelToWindowSGIX", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(w);
    UNUSED_PARAMETER(h);
    Warning( "glXChannelRectSGIX", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(synctype);
    Warning( "glXChannelRectSyncSGIX", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(w);
    UNUSED_PARAMETER(h);
    Warning( "glXQueryChannelDeltasSGIX", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(dx);
    UNUSED_PARAMETER(dy);
    UNUSED_PARAMETER(dw);
    UNUSED_PARAMETER(dh);
    Warning( "glXQueryChannelRectSGIX", " not available." );
    return 0;
  }

// GLX_SGI_cushion

  static void REGAL_CALL missing_glXCushionSGI(Display *dpy, Window window, float cushion)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(window);
    UNUSED_PARAMETER(cushion);
    Warning( "glXCushionSGI", " not available." );
  }

// GLX_SGI_make_current_read

  static GLXDrawable REGAL_CALL missing_glXGetCurrentReadDrawableSGI(void)
  {
    Warning( "glXGetCurrentReadDrawableSGI", " not available." );
    return 0;
  }

  static Bool REGAL_CALL missing_glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(read);
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeCurrentReadSGI", " not available." );
    return (Bool) 0;
  }

// GLX_SGI_swap_control

  static int REGAL_CALL missing_glXSwapIntervalSGI(int interval)
  {
    UNUSED_PARAMETER(interval);
    Warning( "glXSwapIntervalSGI", " not available." );
    return 0;
  }

// GLX_SGI_video_sync

  static int REGAL_CALL missing_glXGetVideoSyncSGI(unsigned int *count)
  {
    UNUSED_PARAMETER(count);
    Warning( "glXGetVideoSyncSGI", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count)
  {
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    UNUSED_PARAMETER(count);
    Warning( "glXWaitVideoSyncSGI", " not available." );
    return 0;
  }

// GLX_SUN_get_transparent_index

  static Status REGAL_CALL missing_glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(overlay);
    UNUSED_PARAMETER(underlay);
    UNUSED_PARAMETER(pTransparentIndex);
    Warning( "glXGetTransparentIndexSUN", " not available." );
    return (Status) 0;
  }

// GLX_SUN_video_resize

  static int REGAL_CALL missing_glXGetVideoResizeSUN(Display *display, GLXDrawable window, float *factor)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(window);
    UNUSED_PARAMETER(factor);
    Warning( "glXGetVideoResizeSUN", " not available." );
    return 0;
  }

  static int REGAL_CALL missing_glXVideoResizeSUN(Display *display, GLXDrawable window, float factor)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(window);
    UNUSED_PARAMETER(factor);
    Warning( "glXVideoResizeSUN", " not available." );
    return 0;
  }

#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX

// CGL_VERSION_1_0

  static CGLError REGAL_CALL missing_CGLChoosePixelFormat(const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
  {
    UNUSED_PARAMETER(attribs);
    UNUSED_PARAMETER(pix);
    UNUSED_PARAMETER(npix);
    Warning( "CGLChoosePixelFormat", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLClearDrawable(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLClearDrawable", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLCopyContext(CGLContextObj src, CGLContextObj dst, GLbitfield mask)
  {
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(mask);
    Warning( "CGLCopyContext", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLCreateContext(CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
  {
    UNUSED_PARAMETER(pix);
    UNUSED_PARAMETER(share);
    UNUSED_PARAMETER(ctx);
    Warning( "CGLCreateContext", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDescribePixelFormat(CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
  {
    UNUSED_PARAMETER(pix);
    UNUSED_PARAMETER(pix_num);
    UNUSED_PARAMETER(attrib);
    UNUSED_PARAMETER(value);
    Warning( "CGLDescribePixelFormat", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDescribeRenderer(CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
  {
    UNUSED_PARAMETER(rend);
    UNUSED_PARAMETER(rend_num);
    UNUSED_PARAMETER(prop);
    UNUSED_PARAMETER(value);
    Warning( "CGLDescribeRenderer", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDestroyContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLDestroyContext", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDestroyPixelFormat(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLDestroyPixelFormat", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDestroyRendererInfo(CGLRendererInfoObj rend)
  {
    UNUSED_PARAMETER(rend);
    Warning( "CGLDestroyRendererInfo", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDisable(CGLContextObj ctx, CGLContextEnable pname)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    Warning( "CGLDisable", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLEnable(CGLContextObj ctx, CGLContextEnable pname)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    Warning( "CGLEnable", " not available." );
    return (CGLError) 0;
  }

  static const char *REGAL_CALL missing_CGLErrorString(CGLError error)
  {
    UNUSED_PARAMETER(error);
    Warning( "CGLErrorString", " not available." );
    return NULL;
  }

  static CGLError REGAL_CALL missing_CGLFlushDrawable(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLFlushDrawable", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLGetOffScreen(CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(rowbytes);
    UNUSED_PARAMETER(baseaddr);
    Warning( "CGLGetOffScreen", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLGetOption(CGLGlobalOption pname, GLint *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "CGLGetOption", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLGetParameter(CGLContextObj ctx, CGLContextParameter pname, GLint *params)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLGetParameter", " not available." );
    return (CGLError) 0;
  }

  static void REGAL_CALL missing_CGLGetVersion(GLint *majorvers, GLint *minorvers)
  {
    UNUSED_PARAMETER(majorvers);
    UNUSED_PARAMETER(minorvers);
    Warning( "CGLGetVersion", " not available." );
  }

  static CGLError REGAL_CALL missing_CGLGetVirtualScreen(CGLContextObj ctx, GLint *screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(screen);
    Warning( "CGLGetVirtualScreen", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLIsEnabled(CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(enable);
    Warning( "CGLIsEnabled", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
  {
    UNUSED_PARAMETER(display_mask);
    UNUSED_PARAMETER(rend);
    UNUSED_PARAMETER(nrend);
    Warning( "CGLQueryRendererInfo", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetFullScreen(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLSetFullScreen", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetOffScreen(CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(rowbytes);
    UNUSED_PARAMETER(baseaddr);
    Warning( "CGLSetOffScreen", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetOption(CGLGlobalOption pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "CGLSetOption", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetParameter(CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLSetParameter", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetVirtualScreen(CGLContextObj ctx, GLint screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(screen);
    Warning( "CGLSetVirtualScreen", " not available." );
    return (CGLError) 0;
  }

// CGL_VERSION_1_1

  static CGLError REGAL_CALL missing_CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
  {
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(max_level);
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLCreatePBuffer", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDescribePBuffer(CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
  {
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(mipmap);
    Warning( "CGLDescribePBuffer", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLDestroyPBuffer(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLDestroyPBuffer", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLGetPBuffer(CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(screen);
    Warning( "CGLGetPBuffer", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetPBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(screen);
    Warning( "CGLSetPBuffer", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLTexImagePBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(source);
    Warning( "CGLTexImagePBuffer", " not available." );
    return (CGLError) 0;
  }

// CGL_VERSION_1_2

  static GLuint REGAL_CALL missing_CGLGetContextRetainCount(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLGetContextRetainCount", " not available." );
    return 0;
  }

  static CGLError REGAL_CALL missing_CGLGetGlobalOption(CGLGlobalOption pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLGetGlobalOption", " not available." );
    return (CGLError) 0;
  }

  static GLuint REGAL_CALL missing_CGLGetPBufferRetainCount(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLGetPBufferRetainCount", " not available." );
    return 0;
  }

  static CGLPixelFormatObj REGAL_CALL missing_CGLGetPixelFormat(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLGetPixelFormat", " not available." );
    return 0;
  }

  static GLuint REGAL_CALL missing_CGLGetPixelFormatRetainCount(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLGetPixelFormatRetainCount", " not available." );
    return 0;
  }

  static CGLError REGAL_CALL missing_CGLLockContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLLockContext", " not available." );
    return (CGLError) 0;
  }

  static void REGAL_CALL missing_CGLReleaseContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLReleaseContext", " not available." );
  }

  static void REGAL_CALL missing_CGLReleasePBuffer(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLReleasePBuffer", " not available." );
  }

  static void REGAL_CALL missing_CGLReleasePixelFormat(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLReleasePixelFormat", " not available." );
  }

  static CGLContextObj REGAL_CALL missing_CGLRetainContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLRetainContext", " not available." );
    return 0;
  }

  static CGLPBufferObj REGAL_CALL missing_CGLRetainPBuffer(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLRetainPBuffer", " not available." );
    return 0;
  }

  static CGLPixelFormatObj REGAL_CALL missing_CGLRetainPixelFormat(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLRetainPixelFormat", " not available." );
    return 0;
  }

  static CGLError REGAL_CALL missing_CGLSetGlobalOption(CGLGlobalOption pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLSetGlobalOption", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLUnlockContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLUnlockContext", " not available." );
    return (CGLError) 0;
  }

// CGL_VERSION_1_3

  static CGLContextObj REGAL_CALL missing_CGLGetCurrentContext(void)
  {
    Warning( "CGLGetCurrentContext", " not available." );
    return 0;
  }

  static CGLShareGroupObj REGAL_CALL missing_CGLGetShareGroup(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLGetShareGroup", " not available." );
    return 0;
  }

  static CGLError REGAL_CALL missing_CGLGetSurface(CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(conn);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(srf);
    Warning( "CGLGetSurface", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetCurrentContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLSetCurrentContext", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLSetSurface(CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(conn);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(srf);
    Warning( "CGLSetSurface", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLTexImageIOSurface2D(CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internal_format);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(ioSurface);
    UNUSED_PARAMETER(plane);
    Warning( "CGLTexImageIOSurface2D", " not available." );
    return (CGLError) 0;
  }

  static CGLError REGAL_CALL missing_CGLUpdateContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLUpdateContext", " not available." );
    return (CGLError) 0;
  }

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

// EGL_ANGLE_query_surface_pointer

  static EGLBoolean REGAL_CALL missing_eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglQuerySurfacePointerANGLE", " not available." );
    return 0;
  }

// EGL_KHR_fence_sync

  static EGLint REGAL_CALL missing_eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "eglClientWaitSyncKHR", " not available." );
    return 0;
  }

  static EGLSyncKHR REGAL_CALL missing_eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateSyncKHR", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    Warning( "eglDestroySyncKHR", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglGetSyncAttribKHR", " not available." );
    return 0;
  }

// EGL_KHR_image_base

  static EGLImageKHR REGAL_CALL missing_eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateImageKHR", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(image);
    Warning( "eglDestroyImageKHR", " not available." );
    return 0;
  }

// EGL_KHR_lock_surface

  static EGLBoolean REGAL_CALL missing_eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglLockSurfaceKHR", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglUnlockSurfaceKHR(EGLDisplay display, EGLSurface surface)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(surface);
    Warning( "eglUnlockSurfaceKHR", " not available." );
    return 0;
  }

// EGL_KHR_stream_consumer_gltexture

  static EGLBoolean REGAL_CALL missing_eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglStreamConsumerAcquireKHR", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglStreamConsumerGLTextureExternalKHR", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglStreamConsumerReleaseKHR", " not available." );
    return 0;
  }

// EGL_KHR_stream_cross_process_fd

  static EGLStreamKHR REGAL_CALL missing_eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(file_descriptor);
    Warning( "eglCreateStreamFromFileDescriptorKHR", " not available." );
    return 0;
  }

  static EGLNativeFileDescriptorKHR REGAL_CALL missing_eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglGetStreamFileDescriptorKHR", " not available." );
    return 0;
  }

// EGL_KHR_stream_producer_eglsurface

  static EGLSurface REGAL_CALL missing_eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateStreamProducerSurfaceKHR", " not available." );
    return 0;
  }

// EGL_KHR_wait_sync

  static EGLint REGAL_CALL missing_eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(flags);
    Warning( "eglWaitSyncKHR", " not available." );
    return 0;
  }

// EGL_MESA_drm_image

  static EGLImageKHR REGAL_CALL missing_eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateDRMImageMESA", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(image);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(handle);
    UNUSED_PARAMETER(stride);
    Warning( "eglExportDRMImageMESA", " not available." );
    return 0;
  }

// EGL_NV_coverage_sample

  static void REGAL_CALL missing_eglCoverageMaskNV(GLboolean mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "eglCoverageMaskNV", " not available." );
  }

  static void REGAL_CALL missing_eglCoverageOperationNV(GLenum operation)
  {
    UNUSED_PARAMETER(operation);
    Warning( "eglCoverageOperationNV", " not available." );
  }

// EGL_NV_post_sub_buffer

  static EGLBoolean REGAL_CALL missing_eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "eglPostSubBufferNV", " not available." );
    return 0;
  }

// EGL_NV_sync

  static EGLint REGAL_CALL missing_eglClientWaitSyncNV(EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
  {
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "eglClientWaitSyncNV", " not available." );
    return 0;
  }

  static EGLSyncNV REGAL_CALL missing_eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(condition);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateFenceSyncNV", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglDestroySyncNV(EGLSyncNV GLsync)
  {
    UNUSED_PARAMETER(GLsync);
    Warning( "eglDestroySyncNV", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglFenceNV(EGLSyncNV GLsync)
  {
    UNUSED_PARAMETER(GLsync);
    Warning( "eglFenceNV", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglGetSyncAttribNV(EGLSyncNV GLsync, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglGetSyncAttribNV", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglSignalSyncNV(EGLSyncNV GLsync, EGLenum mode)
  {
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(mode);
    Warning( "eglSignalSyncNV", " not available." );
    return 0;
  }

// EGL_NV_system_time

  static EGLuint64NV REGAL_CALL missing_eglGetSystemTimeFrequencyNV(void)
  {
    Warning( "eglGetSystemTimeFrequencyNV", " not available." );
    return 0;
  }

  static EGLuint64NV REGAL_CALL missing_eglGetSystemTimeNV(void)
  {
    Warning( "eglGetSystemTimeNV", " not available." );
    return 0;
  }

// EGL_VERSION_1_0

  static EGLBoolean REGAL_CALL missing_eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(attrib_list);
    UNUSED_PARAMETER(configs);
    UNUSED_PARAMETER(config_size);
    UNUSED_PARAMETER(num_config);
    Warning( "eglChooseConfig", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(target);
    Warning( "eglCopyBuffers", " not available." );
    return 0;
  }

  static EGLContext REGAL_CALL missing_eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(share_context);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateContext", " not available." );
    return 0;
  }

  static EGLSurface REGAL_CALL missing_eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreatePbufferSurface", " not available." );
    return 0;
  }

  static EGLSurface REGAL_CALL missing_eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(pixmap);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreatePixmapSurface", " not available." );
    return 0;
  }

  static EGLSurface REGAL_CALL missing_eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateWindowSurface", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglDestroyContext(EGLDisplay dpy, EGLContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    Warning( "eglDestroyContext", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglDestroySurface(EGLDisplay dpy, EGLSurface surface)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    Warning( "eglDestroySurface", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglGetConfigAttrib", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(configs);
    UNUSED_PARAMETER(config_size);
    UNUSED_PARAMETER(num_config);
    Warning( "eglGetConfigs", " not available." );
    return 0;
  }

  static EGLContext REGAL_CALL missing_eglGetCurrentContext(void)
  {
    Warning( "eglGetCurrentContext", " not available." );
    return 0;
  }

  static EGLDisplay REGAL_CALL missing_eglGetCurrentDisplay(void)
  {
    Warning( "eglGetCurrentDisplay", " not available." );
    return 0;
  }

  static EGLSurface REGAL_CALL missing_eglGetCurrentSurface(EGLint readdraw)
  {
    UNUSED_PARAMETER(readdraw);
    Warning( "eglGetCurrentSurface", " not available." );
    return 0;
  }

  static EGLDisplay REGAL_CALL missing_eglGetDisplay(EGLNativeDisplayType display_id)
  {
    UNUSED_PARAMETER(display_id);
    Warning( "eglGetDisplay", " not available." );
    return 0;
  }

  static EGLint REGAL_CALL missing_eglGetError(void)
  {
    Warning( "eglGetError", " not available." );
    return 0;
  }

  static __eglMustCastToProperFunctionPointerType REGAL_CALL missing_eglGetProcAddress(const char *procname)
  {
    UNUSED_PARAMETER(procname);
    Warning( "eglGetProcAddress", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(major);
    UNUSED_PARAMETER(minor);
    Warning( "eglInitialize", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(read);
    UNUSED_PARAMETER(ctx);
    Warning( "eglMakeCurrent", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglQueryContext", " not available." );
    return 0;
  }

  static const char *REGAL_CALL missing_eglQueryString(EGLDisplay dpy, EGLint name)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(name);
    Warning( "eglQueryString", " not available." );
    return NULL;
  }

  static EGLBoolean REGAL_CALL missing_eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglQuerySurface", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    Warning( "eglSwapBuffers", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglTerminate(EGLDisplay dpy)
  {
    UNUSED_PARAMETER(dpy);
    Warning( "eglTerminate", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglWaitGL(void)
  {
    Warning( "eglWaitGL", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglWaitNative(EGLint engine)
  {
    UNUSED_PARAMETER(engine);
    Warning( "eglWaitNative", " not available." );
    return 0;
  }

// EGL_VERSION_1_1

  static EGLBoolean REGAL_CALL missing_eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(buffer);
    Warning( "eglBindTexImage", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(buffer);
    Warning( "eglReleaseTexImage", " not available." );
    return 0;
  }

// EGL_VERSION_1_2

  static EGLBoolean REGAL_CALL missing_eglBindAPI(EGLenum api)
  {
    UNUSED_PARAMETER(api);
    Warning( "eglBindAPI", " not available." );
    return 0;
  }

  static EGLSurface REGAL_CALL missing_eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(buftype);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreatePbufferFromClientBuffer", " not available." );
    return 0;
  }

  static EGLenum REGAL_CALL missing_eglQueryAPI(void)
  {
    Warning( "eglQueryAPI", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglReleaseThread(void)
  {
    Warning( "eglReleaseThread", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglSurfaceAttrib", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglSwapInterval(EGLDisplay dpy, EGLint interval)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(interval);
    Warning( "eglSwapInterval", " not available." );
    return 0;
  }

  static EGLBoolean REGAL_CALL missing_eglWaitClient(void)
  {
    Warning( "eglWaitClient", " not available." );
    return 0;
  }

#endif // REGAL_SYS_EGL

  template <typename T>
  void _getProcAddress( T & func, T funcRegal, const char *name)
  {
    GetProcAddress(func, name);
    RegalAssert(func!=funcRegal);
    if (func==funcRegal)
      func = NULL;
  }

  void InitDispatchLoader( Dispatch::GL & dt )
  {

    // GL_VERSION_1_0

    _getProcAddress( dt.glAccum, glAccum, "glAccum" );
    if( dt.glAccum == NULL ) {
      dt.glAccum = missing_glAccum;
    }
    _getProcAddress( dt.glAlphaFunc, glAlphaFunc, "glAlphaFunc" );
    if( dt.glAlphaFunc == NULL ) {
      dt.glAlphaFunc = missing_glAlphaFunc;
    }
    _getProcAddress( dt.glBegin, glBegin, "glBegin" );
    if( dt.glBegin == NULL ) {
      dt.glBegin = missing_glBegin;
    }
    _getProcAddress( dt.glBitmap, glBitmap, "glBitmap" );
    if( dt.glBitmap == NULL ) {
      dt.glBitmap = missing_glBitmap;
    }
    _getProcAddress( dt.glBlendFunc, glBlendFunc, "glBlendFunc" );
    if( dt.glBlendFunc == NULL ) {
      dt.glBlendFunc = missing_glBlendFunc;
    }
    _getProcAddress( dt.glCallList, glCallList, "glCallList" );
    if( dt.glCallList == NULL ) {
      dt.glCallList = missing_glCallList;
    }
    _getProcAddress( dt.glCallLists, glCallLists, "glCallLists" );
    if( dt.glCallLists == NULL ) {
      dt.glCallLists = missing_glCallLists;
    }
    _getProcAddress( dt.glClear, glClear, "glClear" );
    if( dt.glClear == NULL ) {
      dt.glClear = missing_glClear;
    }
    _getProcAddress( dt.glClearAccum, glClearAccum, "glClearAccum" );
    if( dt.glClearAccum == NULL ) {
      dt.glClearAccum = missing_glClearAccum;
    }
    _getProcAddress( dt.glClearColor, glClearColor, "glClearColor" );
    if( dt.glClearColor == NULL ) {
      dt.glClearColor = missing_glClearColor;
    }
    _getProcAddress( dt.glClearDepth, glClearDepth, "glClearDepth" );
    if( dt.glClearDepth == NULL ) {
      dt.glClearDepth = missing_glClearDepth;
    }
    _getProcAddress( dt.glClearIndex, glClearIndex, "glClearIndex" );
    if( dt.glClearIndex == NULL ) {
      dt.glClearIndex = missing_glClearIndex;
    }
    _getProcAddress( dt.glClearStencil, glClearStencil, "glClearStencil" );
    if( dt.glClearStencil == NULL ) {
      dt.glClearStencil = missing_glClearStencil;
    }
    _getProcAddress( dt.glClipPlane, glClipPlane, "glClipPlane" );
    if( dt.glClipPlane == NULL ) {
      dt.glClipPlane = missing_glClipPlane;
    }
    _getProcAddress( dt.glColor3b, glColor3b, "glColor3b" );
    if( dt.glColor3b == NULL ) {
      dt.glColor3b = missing_glColor3b;
    }
    _getProcAddress( dt.glColor3bv, glColor3bv, "glColor3bv" );
    if( dt.glColor3bv == NULL ) {
      dt.glColor3bv = missing_glColor3bv;
    }
    _getProcAddress( dt.glColor3d, glColor3d, "glColor3d" );
    if( dt.glColor3d == NULL ) {
      dt.glColor3d = missing_glColor3d;
    }
    _getProcAddress( dt.glColor3dv, glColor3dv, "glColor3dv" );
    if( dt.glColor3dv == NULL ) {
      dt.glColor3dv = missing_glColor3dv;
    }
    _getProcAddress( dt.glColor3f, glColor3f, "glColor3f" );
    if( dt.glColor3f == NULL ) {
      dt.glColor3f = missing_glColor3f;
    }
    _getProcAddress( dt.glColor3fv, glColor3fv, "glColor3fv" );
    if( dt.glColor3fv == NULL ) {
      dt.glColor3fv = missing_glColor3fv;
    }
    _getProcAddress( dt.glColor3i, glColor3i, "glColor3i" );
    if( dt.glColor3i == NULL ) {
      dt.glColor3i = missing_glColor3i;
    }
    _getProcAddress( dt.glColor3iv, glColor3iv, "glColor3iv" );
    if( dt.glColor3iv == NULL ) {
      dt.glColor3iv = missing_glColor3iv;
    }
    _getProcAddress( dt.glColor3s, glColor3s, "glColor3s" );
    if( dt.glColor3s == NULL ) {
      dt.glColor3s = missing_glColor3s;
    }
    _getProcAddress( dt.glColor3sv, glColor3sv, "glColor3sv" );
    if( dt.glColor3sv == NULL ) {
      dt.glColor3sv = missing_glColor3sv;
    }
    _getProcAddress( dt.glColor3ub, glColor3ub, "glColor3ub" );
    if( dt.glColor3ub == NULL ) {
      dt.glColor3ub = missing_glColor3ub;
    }
    _getProcAddress( dt.glColor3ubv, glColor3ubv, "glColor3ubv" );
    if( dt.glColor3ubv == NULL ) {
      dt.glColor3ubv = missing_glColor3ubv;
    }
    _getProcAddress( dt.glColor3ui, glColor3ui, "glColor3ui" );
    if( dt.glColor3ui == NULL ) {
      dt.glColor3ui = missing_glColor3ui;
    }
    _getProcAddress( dt.glColor3uiv, glColor3uiv, "glColor3uiv" );
    if( dt.glColor3uiv == NULL ) {
      dt.glColor3uiv = missing_glColor3uiv;
    }
    _getProcAddress( dt.glColor3us, glColor3us, "glColor3us" );
    if( dt.glColor3us == NULL ) {
      dt.glColor3us = missing_glColor3us;
    }
    _getProcAddress( dt.glColor3usv, glColor3usv, "glColor3usv" );
    if( dt.glColor3usv == NULL ) {
      dt.glColor3usv = missing_glColor3usv;
    }
    _getProcAddress( dt.glColor4b, glColor4b, "glColor4b" );
    if( dt.glColor4b == NULL ) {
      dt.glColor4b = missing_glColor4b;
    }
    _getProcAddress( dt.glColor4bv, glColor4bv, "glColor4bv" );
    if( dt.glColor4bv == NULL ) {
      dt.glColor4bv = missing_glColor4bv;
    }
    _getProcAddress( dt.glColor4d, glColor4d, "glColor4d" );
    if( dt.glColor4d == NULL ) {
      dt.glColor4d = missing_glColor4d;
    }
    _getProcAddress( dt.glColor4dv, glColor4dv, "glColor4dv" );
    if( dt.glColor4dv == NULL ) {
      dt.glColor4dv = missing_glColor4dv;
    }
    _getProcAddress( dt.glColor4f, glColor4f, "glColor4f" );
    if( dt.glColor4f == NULL ) {
      dt.glColor4f = missing_glColor4f;
    }
    _getProcAddress( dt.glColor4fv, glColor4fv, "glColor4fv" );
    if( dt.glColor4fv == NULL ) {
      dt.glColor4fv = missing_glColor4fv;
    }
    _getProcAddress( dt.glColor4i, glColor4i, "glColor4i" );
    if( dt.glColor4i == NULL ) {
      dt.glColor4i = missing_glColor4i;
    }
    _getProcAddress( dt.glColor4iv, glColor4iv, "glColor4iv" );
    if( dt.glColor4iv == NULL ) {
      dt.glColor4iv = missing_glColor4iv;
    }
    _getProcAddress( dt.glColor4s, glColor4s, "glColor4s" );
    if( dt.glColor4s == NULL ) {
      dt.glColor4s = missing_glColor4s;
    }
    _getProcAddress( dt.glColor4sv, glColor4sv, "glColor4sv" );
    if( dt.glColor4sv == NULL ) {
      dt.glColor4sv = missing_glColor4sv;
    }
    _getProcAddress( dt.glColor4ub, glColor4ub, "glColor4ub" );
    if( dt.glColor4ub == NULL ) {
      dt.glColor4ub = missing_glColor4ub;
    }
    _getProcAddress( dt.glColor4ubv, glColor4ubv, "glColor4ubv" );
    if( dt.glColor4ubv == NULL ) {
      dt.glColor4ubv = missing_glColor4ubv;
    }
    _getProcAddress( dt.glColor4ui, glColor4ui, "glColor4ui" );
    if( dt.glColor4ui == NULL ) {
      dt.glColor4ui = missing_glColor4ui;
    }
    _getProcAddress( dt.glColor4uiv, glColor4uiv, "glColor4uiv" );
    if( dt.glColor4uiv == NULL ) {
      dt.glColor4uiv = missing_glColor4uiv;
    }
    _getProcAddress( dt.glColor4us, glColor4us, "glColor4us" );
    if( dt.glColor4us == NULL ) {
      dt.glColor4us = missing_glColor4us;
    }
    _getProcAddress( dt.glColor4usv, glColor4usv, "glColor4usv" );
    if( dt.glColor4usv == NULL ) {
      dt.glColor4usv = missing_glColor4usv;
    }
    _getProcAddress( dt.glColorMask, glColorMask, "glColorMask" );
    if( dt.glColorMask == NULL ) {
      dt.glColorMask = missing_glColorMask;
    }
    _getProcAddress( dt.glColorMaterial, glColorMaterial, "glColorMaterial" );
    if( dt.glColorMaterial == NULL ) {
      dt.glColorMaterial = missing_glColorMaterial;
    }
    _getProcAddress( dt.glCopyPixels, glCopyPixels, "glCopyPixels" );
    if( dt.glCopyPixels == NULL ) {
      dt.glCopyPixels = missing_glCopyPixels;
    }
    _getProcAddress( dt.glCullFace, glCullFace, "glCullFace" );
    if( dt.glCullFace == NULL ) {
      dt.glCullFace = missing_glCullFace;
    }
    _getProcAddress( dt.glDeleteLists, glDeleteLists, "glDeleteLists" );
    if( dt.glDeleteLists == NULL ) {
      dt.glDeleteLists = missing_glDeleteLists;
    }
    _getProcAddress( dt.glDepthFunc, glDepthFunc, "glDepthFunc" );
    if( dt.glDepthFunc == NULL ) {
      dt.glDepthFunc = missing_glDepthFunc;
    }
    _getProcAddress( dt.glDepthMask, glDepthMask, "glDepthMask" );
    if( dt.glDepthMask == NULL ) {
      dt.glDepthMask = missing_glDepthMask;
    }
    _getProcAddress( dt.glDepthRange, glDepthRange, "glDepthRange" );
    if( dt.glDepthRange == NULL ) {
      dt.glDepthRange = missing_glDepthRange;
    }
    _getProcAddress( dt.glDisable, glDisable, "glDisable" );
    if( dt.glDisable == NULL ) {
      dt.glDisable = missing_glDisable;
    }
    _getProcAddress( dt.glDrawBuffer, glDrawBuffer, "glDrawBuffer" );
    if( dt.glDrawBuffer == NULL ) {
      dt.glDrawBuffer = missing_glDrawBuffer;
    }
    _getProcAddress( dt.glDrawPixels, glDrawPixels, "glDrawPixels" );
    if( dt.glDrawPixels == NULL ) {
      dt.glDrawPixels = missing_glDrawPixels;
    }
    _getProcAddress( dt.glEdgeFlag, glEdgeFlag, "glEdgeFlag" );
    if( dt.glEdgeFlag == NULL ) {
      dt.glEdgeFlag = missing_glEdgeFlag;
    }
    _getProcAddress( dt.glEdgeFlagv, glEdgeFlagv, "glEdgeFlagv" );
    if( dt.glEdgeFlagv == NULL ) {
      dt.glEdgeFlagv = missing_glEdgeFlagv;
    }
    _getProcAddress( dt.glEnable, glEnable, "glEnable" );
    if( dt.glEnable == NULL ) {
      dt.glEnable = missing_glEnable;
    }
    _getProcAddress( dt.glEnd, glEnd, "glEnd" );
    if( dt.glEnd == NULL ) {
      dt.glEnd = missing_glEnd;
    }
    _getProcAddress( dt.glEndList, glEndList, "glEndList" );
    if( dt.glEndList == NULL ) {
      dt.glEndList = missing_glEndList;
    }
    _getProcAddress( dt.glEvalCoord1d, glEvalCoord1d, "glEvalCoord1d" );
    if( dt.glEvalCoord1d == NULL ) {
      dt.glEvalCoord1d = missing_glEvalCoord1d;
    }
    _getProcAddress( dt.glEvalCoord1dv, glEvalCoord1dv, "glEvalCoord1dv" );
    if( dt.glEvalCoord1dv == NULL ) {
      dt.glEvalCoord1dv = missing_glEvalCoord1dv;
    }
    _getProcAddress( dt.glEvalCoord1f, glEvalCoord1f, "glEvalCoord1f" );
    if( dt.glEvalCoord1f == NULL ) {
      dt.glEvalCoord1f = missing_glEvalCoord1f;
    }
    _getProcAddress( dt.glEvalCoord1fv, glEvalCoord1fv, "glEvalCoord1fv" );
    if( dt.glEvalCoord1fv == NULL ) {
      dt.glEvalCoord1fv = missing_glEvalCoord1fv;
    }
    _getProcAddress( dt.glEvalCoord2d, glEvalCoord2d, "glEvalCoord2d" );
    if( dt.glEvalCoord2d == NULL ) {
      dt.glEvalCoord2d = missing_glEvalCoord2d;
    }
    _getProcAddress( dt.glEvalCoord2dv, glEvalCoord2dv, "glEvalCoord2dv" );
    if( dt.glEvalCoord2dv == NULL ) {
      dt.glEvalCoord2dv = missing_glEvalCoord2dv;
    }
    _getProcAddress( dt.glEvalCoord2f, glEvalCoord2f, "glEvalCoord2f" );
    if( dt.glEvalCoord2f == NULL ) {
      dt.glEvalCoord2f = missing_glEvalCoord2f;
    }
    _getProcAddress( dt.glEvalCoord2fv, glEvalCoord2fv, "glEvalCoord2fv" );
    if( dt.glEvalCoord2fv == NULL ) {
      dt.glEvalCoord2fv = missing_glEvalCoord2fv;
    }
    _getProcAddress( dt.glEvalMesh1, glEvalMesh1, "glEvalMesh1" );
    if( dt.glEvalMesh1 == NULL ) {
      dt.glEvalMesh1 = missing_glEvalMesh1;
    }
    _getProcAddress( dt.glEvalMesh2, glEvalMesh2, "glEvalMesh2" );
    if( dt.glEvalMesh2 == NULL ) {
      dt.glEvalMesh2 = missing_glEvalMesh2;
    }
    _getProcAddress( dt.glEvalPoint1, glEvalPoint1, "glEvalPoint1" );
    if( dt.glEvalPoint1 == NULL ) {
      dt.glEvalPoint1 = missing_glEvalPoint1;
    }
    _getProcAddress( dt.glEvalPoint2, glEvalPoint2, "glEvalPoint2" );
    if( dt.glEvalPoint2 == NULL ) {
      dt.glEvalPoint2 = missing_glEvalPoint2;
    }
    _getProcAddress( dt.glFeedbackBuffer, glFeedbackBuffer, "glFeedbackBuffer" );
    if( dt.glFeedbackBuffer == NULL ) {
      dt.glFeedbackBuffer = missing_glFeedbackBuffer;
    }
    _getProcAddress( dt.glFinish, glFinish, "glFinish" );
    if( dt.glFinish == NULL ) {
      dt.glFinish = missing_glFinish;
    }
    _getProcAddress( dt.glFlush, glFlush, "glFlush" );
    if( dt.glFlush == NULL ) {
      dt.glFlush = missing_glFlush;
    }
    _getProcAddress( dt.glFogf, glFogf, "glFogf" );
    if( dt.glFogf == NULL ) {
      dt.glFogf = missing_glFogf;
    }
    _getProcAddress( dt.glFogfv, glFogfv, "glFogfv" );
    if( dt.glFogfv == NULL ) {
      dt.glFogfv = missing_glFogfv;
    }
    _getProcAddress( dt.glFogi, glFogi, "glFogi" );
    if( dt.glFogi == NULL ) {
      dt.glFogi = missing_glFogi;
    }
    _getProcAddress( dt.glFogiv, glFogiv, "glFogiv" );
    if( dt.glFogiv == NULL ) {
      dt.glFogiv = missing_glFogiv;
    }
    _getProcAddress( dt.glFrontFace, glFrontFace, "glFrontFace" );
    if( dt.glFrontFace == NULL ) {
      dt.glFrontFace = missing_glFrontFace;
    }
    _getProcAddress( dt.glFrustum, glFrustum, "glFrustum" );
    if( dt.glFrustum == NULL ) {
      dt.glFrustum = missing_glFrustum;
    }
    _getProcAddress( dt.glGenLists, glGenLists, "glGenLists" );
    if( dt.glGenLists == NULL ) {
      dt.glGenLists = missing_glGenLists;
    }
    _getProcAddress( dt.glGetBooleanv, glGetBooleanv, "glGetBooleanv" );
    if( dt.glGetBooleanv == NULL ) {
      dt.glGetBooleanv = missing_glGetBooleanv;
    }
    _getProcAddress( dt.glGetClipPlane, glGetClipPlane, "glGetClipPlane" );
    if( dt.glGetClipPlane == NULL ) {
      dt.glGetClipPlane = missing_glGetClipPlane;
    }
    _getProcAddress( dt.glGetDoublev, glGetDoublev, "glGetDoublev" );
    if( dt.glGetDoublev == NULL ) {
      dt.glGetDoublev = missing_glGetDoublev;
    }
    _getProcAddress( dt.glGetError, glGetError, "glGetError" );
    if( dt.glGetError == NULL ) {
      dt.glGetError = missing_glGetError;
    }
    _getProcAddress( dt.glGetFloatv, glGetFloatv, "glGetFloatv" );
    if( dt.glGetFloatv == NULL ) {
      dt.glGetFloatv = missing_glGetFloatv;
    }
    _getProcAddress( dt.glGetIntegerv, glGetIntegerv, "glGetIntegerv" );
    if( dt.glGetIntegerv == NULL ) {
      dt.glGetIntegerv = missing_glGetIntegerv;
    }
    _getProcAddress( dt.glGetLightfv, glGetLightfv, "glGetLightfv" );
    if( dt.glGetLightfv == NULL ) {
      dt.glGetLightfv = missing_glGetLightfv;
    }
    _getProcAddress( dt.glGetLightiv, glGetLightiv, "glGetLightiv" );
    if( dt.glGetLightiv == NULL ) {
      dt.glGetLightiv = missing_glGetLightiv;
    }
    _getProcAddress( dt.glGetMapdv, glGetMapdv, "glGetMapdv" );
    if( dt.glGetMapdv == NULL ) {
      dt.glGetMapdv = missing_glGetMapdv;
    }
    _getProcAddress( dt.glGetMapfv, glGetMapfv, "glGetMapfv" );
    if( dt.glGetMapfv == NULL ) {
      dt.glGetMapfv = missing_glGetMapfv;
    }
    _getProcAddress( dt.glGetMapiv, glGetMapiv, "glGetMapiv" );
    if( dt.glGetMapiv == NULL ) {
      dt.glGetMapiv = missing_glGetMapiv;
    }
    _getProcAddress( dt.glGetMaterialfv, glGetMaterialfv, "glGetMaterialfv" );
    if( dt.glGetMaterialfv == NULL ) {
      dt.glGetMaterialfv = missing_glGetMaterialfv;
    }
    _getProcAddress( dt.glGetMaterialiv, glGetMaterialiv, "glGetMaterialiv" );
    if( dt.glGetMaterialiv == NULL ) {
      dt.glGetMaterialiv = missing_glGetMaterialiv;
    }
    _getProcAddress( dt.glGetPixelMapfv, glGetPixelMapfv, "glGetPixelMapfv" );
    if( dt.glGetPixelMapfv == NULL ) {
      dt.glGetPixelMapfv = missing_glGetPixelMapfv;
    }
    _getProcAddress( dt.glGetPixelMapuiv, glGetPixelMapuiv, "glGetPixelMapuiv" );
    if( dt.glGetPixelMapuiv == NULL ) {
      dt.glGetPixelMapuiv = missing_glGetPixelMapuiv;
    }
    _getProcAddress( dt.glGetPixelMapusv, glGetPixelMapusv, "glGetPixelMapusv" );
    if( dt.glGetPixelMapusv == NULL ) {
      dt.glGetPixelMapusv = missing_glGetPixelMapusv;
    }
    _getProcAddress( dt.glGetPolygonStipple, glGetPolygonStipple, "glGetPolygonStipple" );
    if( dt.glGetPolygonStipple == NULL ) {
      dt.glGetPolygonStipple = missing_glGetPolygonStipple;
    }
    _getProcAddress( dt.glGetString, glGetString, "glGetString" );
    if( dt.glGetString == NULL ) {
      dt.glGetString = missing_glGetString;
    }
    _getProcAddress( dt.glGetTexEnvfv, glGetTexEnvfv, "glGetTexEnvfv" );
    if( dt.glGetTexEnvfv == NULL ) {
      dt.glGetTexEnvfv = missing_glGetTexEnvfv;
    }
    _getProcAddress( dt.glGetTexEnviv, glGetTexEnviv, "glGetTexEnviv" );
    if( dt.glGetTexEnviv == NULL ) {
      dt.glGetTexEnviv = missing_glGetTexEnviv;
    }
    _getProcAddress( dt.glGetTexGendv, glGetTexGendv, "glGetTexGendv" );
    if( dt.glGetTexGendv == NULL ) {
      dt.glGetTexGendv = missing_glGetTexGendv;
    }
    _getProcAddress( dt.glGetTexGenfv, glGetTexGenfv, "glGetTexGenfv" );
    if( dt.glGetTexGenfv == NULL ) {
      dt.glGetTexGenfv = missing_glGetTexGenfv;
    }
    _getProcAddress( dt.glGetTexGeniv, glGetTexGeniv, "glGetTexGeniv" );
    if( dt.glGetTexGeniv == NULL ) {
      dt.glGetTexGeniv = missing_glGetTexGeniv;
    }
    _getProcAddress( dt.glGetTexImage, glGetTexImage, "glGetTexImage" );
    if( dt.glGetTexImage == NULL ) {
      dt.glGetTexImage = missing_glGetTexImage;
    }
    _getProcAddress( dt.glGetTexLevelParameterfv, glGetTexLevelParameterfv, "glGetTexLevelParameterfv" );
    if( dt.glGetTexLevelParameterfv == NULL ) {
      dt.glGetTexLevelParameterfv = missing_glGetTexLevelParameterfv;
    }
    _getProcAddress( dt.glGetTexLevelParameteriv, glGetTexLevelParameteriv, "glGetTexLevelParameteriv" );
    if( dt.glGetTexLevelParameteriv == NULL ) {
      dt.glGetTexLevelParameteriv = missing_glGetTexLevelParameteriv;
    }
    _getProcAddress( dt.glGetTexParameterfv, glGetTexParameterfv, "glGetTexParameterfv" );
    if( dt.glGetTexParameterfv == NULL ) {
      dt.glGetTexParameterfv = missing_glGetTexParameterfv;
    }
    _getProcAddress( dt.glGetTexParameteriv, glGetTexParameteriv, "glGetTexParameteriv" );
    if( dt.glGetTexParameteriv == NULL ) {
      dt.glGetTexParameteriv = missing_glGetTexParameteriv;
    }
    _getProcAddress( dt.glHint, glHint, "glHint" );
    if( dt.glHint == NULL ) {
      dt.glHint = missing_glHint;
    }
    _getProcAddress( dt.glIndexMask, glIndexMask, "glIndexMask" );
    if( dt.glIndexMask == NULL ) {
      dt.glIndexMask = missing_glIndexMask;
    }
    _getProcAddress( dt.glIndexd, glIndexd, "glIndexd" );
    if( dt.glIndexd == NULL ) {
      dt.glIndexd = missing_glIndexd;
    }
    _getProcAddress( dt.glIndexdv, glIndexdv, "glIndexdv" );
    if( dt.glIndexdv == NULL ) {
      dt.glIndexdv = missing_glIndexdv;
    }
    _getProcAddress( dt.glIndexf, glIndexf, "glIndexf" );
    if( dt.glIndexf == NULL ) {
      dt.glIndexf = missing_glIndexf;
    }
    _getProcAddress( dt.glIndexfv, glIndexfv, "glIndexfv" );
    if( dt.glIndexfv == NULL ) {
      dt.glIndexfv = missing_glIndexfv;
    }
    _getProcAddress( dt.glIndexi, glIndexi, "glIndexi" );
    if( dt.glIndexi == NULL ) {
      dt.glIndexi = missing_glIndexi;
    }
    _getProcAddress( dt.glIndexiv, glIndexiv, "glIndexiv" );
    if( dt.glIndexiv == NULL ) {
      dt.glIndexiv = missing_glIndexiv;
    }
    _getProcAddress( dt.glIndexs, glIndexs, "glIndexs" );
    if( dt.glIndexs == NULL ) {
      dt.glIndexs = missing_glIndexs;
    }
    _getProcAddress( dt.glIndexsv, glIndexsv, "glIndexsv" );
    if( dt.glIndexsv == NULL ) {
      dt.glIndexsv = missing_glIndexsv;
    }
    _getProcAddress( dt.glInitNames, glInitNames, "glInitNames" );
    if( dt.glInitNames == NULL ) {
      dt.glInitNames = missing_glInitNames;
    }
    _getProcAddress( dt.glIsEnabled, glIsEnabled, "glIsEnabled" );
    if( dt.glIsEnabled == NULL ) {
      dt.glIsEnabled = missing_glIsEnabled;
    }
    _getProcAddress( dt.glIsList, glIsList, "glIsList" );
    if( dt.glIsList == NULL ) {
      dt.glIsList = missing_glIsList;
    }
    _getProcAddress( dt.glLightModelf, glLightModelf, "glLightModelf" );
    if( dt.glLightModelf == NULL ) {
      dt.glLightModelf = missing_glLightModelf;
    }
    _getProcAddress( dt.glLightModelfv, glLightModelfv, "glLightModelfv" );
    if( dt.glLightModelfv == NULL ) {
      dt.glLightModelfv = missing_glLightModelfv;
    }
    _getProcAddress( dt.glLightModeli, glLightModeli, "glLightModeli" );
    if( dt.glLightModeli == NULL ) {
      dt.glLightModeli = missing_glLightModeli;
    }
    _getProcAddress( dt.glLightModeliv, glLightModeliv, "glLightModeliv" );
    if( dt.glLightModeliv == NULL ) {
      dt.glLightModeliv = missing_glLightModeliv;
    }
    _getProcAddress( dt.glLightf, glLightf, "glLightf" );
    if( dt.glLightf == NULL ) {
      dt.glLightf = missing_glLightf;
    }
    _getProcAddress( dt.glLightfv, glLightfv, "glLightfv" );
    if( dt.glLightfv == NULL ) {
      dt.glLightfv = missing_glLightfv;
    }
    _getProcAddress( dt.glLighti, glLighti, "glLighti" );
    if( dt.glLighti == NULL ) {
      dt.glLighti = missing_glLighti;
    }
    _getProcAddress( dt.glLightiv, glLightiv, "glLightiv" );
    if( dt.glLightiv == NULL ) {
      dt.glLightiv = missing_glLightiv;
    }
    _getProcAddress( dt.glLineStipple, glLineStipple, "glLineStipple" );
    if( dt.glLineStipple == NULL ) {
      dt.glLineStipple = missing_glLineStipple;
    }
    _getProcAddress( dt.glLineWidth, glLineWidth, "glLineWidth" );
    if( dt.glLineWidth == NULL ) {
      dt.glLineWidth = missing_glLineWidth;
    }
    _getProcAddress( dt.glListBase, glListBase, "glListBase" );
    if( dt.glListBase == NULL ) {
      dt.glListBase = missing_glListBase;
    }
    _getProcAddress( dt.glLoadIdentity, glLoadIdentity, "glLoadIdentity" );
    if( dt.glLoadIdentity == NULL ) {
      dt.glLoadIdentity = missing_glLoadIdentity;
    }
    _getProcAddress( dt.glLoadMatrixd, glLoadMatrixd, "glLoadMatrixd" );
    if( dt.glLoadMatrixd == NULL ) {
      dt.glLoadMatrixd = missing_glLoadMatrixd;
    }
    _getProcAddress( dt.glLoadMatrixf, glLoadMatrixf, "glLoadMatrixf" );
    if( dt.glLoadMatrixf == NULL ) {
      dt.glLoadMatrixf = missing_glLoadMatrixf;
    }
    _getProcAddress( dt.glLoadName, glLoadName, "glLoadName" );
    if( dt.glLoadName == NULL ) {
      dt.glLoadName = missing_glLoadName;
    }
    _getProcAddress( dt.glLogicOp, glLogicOp, "glLogicOp" );
    if( dt.glLogicOp == NULL ) {
      dt.glLogicOp = missing_glLogicOp;
    }
    _getProcAddress( dt.glMap1d, glMap1d, "glMap1d" );
    if( dt.glMap1d == NULL ) {
      dt.glMap1d = missing_glMap1d;
    }
    _getProcAddress( dt.glMap1f, glMap1f, "glMap1f" );
    if( dt.glMap1f == NULL ) {
      dt.glMap1f = missing_glMap1f;
    }
    _getProcAddress( dt.glMap2d, glMap2d, "glMap2d" );
    if( dt.glMap2d == NULL ) {
      dt.glMap2d = missing_glMap2d;
    }
    _getProcAddress( dt.glMap2f, glMap2f, "glMap2f" );
    if( dt.glMap2f == NULL ) {
      dt.glMap2f = missing_glMap2f;
    }
    _getProcAddress( dt.glMapGrid1d, glMapGrid1d, "glMapGrid1d" );
    if( dt.glMapGrid1d == NULL ) {
      dt.glMapGrid1d = missing_glMapGrid1d;
    }
    _getProcAddress( dt.glMapGrid1f, glMapGrid1f, "glMapGrid1f" );
    if( dt.glMapGrid1f == NULL ) {
      dt.glMapGrid1f = missing_glMapGrid1f;
    }
    _getProcAddress( dt.glMapGrid2d, glMapGrid2d, "glMapGrid2d" );
    if( dt.glMapGrid2d == NULL ) {
      dt.glMapGrid2d = missing_glMapGrid2d;
    }
    _getProcAddress( dt.glMapGrid2f, glMapGrid2f, "glMapGrid2f" );
    if( dt.glMapGrid2f == NULL ) {
      dt.glMapGrid2f = missing_glMapGrid2f;
    }
    _getProcAddress( dt.glMaterialf, glMaterialf, "glMaterialf" );
    if( dt.glMaterialf == NULL ) {
      dt.glMaterialf = missing_glMaterialf;
    }
    _getProcAddress( dt.glMaterialfv, glMaterialfv, "glMaterialfv" );
    if( dt.glMaterialfv == NULL ) {
      dt.glMaterialfv = missing_glMaterialfv;
    }
    _getProcAddress( dt.glMateriali, glMateriali, "glMateriali" );
    if( dt.glMateriali == NULL ) {
      dt.glMateriali = missing_glMateriali;
    }
    _getProcAddress( dt.glMaterialiv, glMaterialiv, "glMaterialiv" );
    if( dt.glMaterialiv == NULL ) {
      dt.glMaterialiv = missing_glMaterialiv;
    }
    _getProcAddress( dt.glMatrixMode, glMatrixMode, "glMatrixMode" );
    if( dt.glMatrixMode == NULL ) {
      dt.glMatrixMode = missing_glMatrixMode;
    }
    _getProcAddress( dt.glMultMatrixd, glMultMatrixd, "glMultMatrixd" );
    if( dt.glMultMatrixd == NULL ) {
      dt.glMultMatrixd = missing_glMultMatrixd;
    }
    _getProcAddress( dt.glMultMatrixf, glMultMatrixf, "glMultMatrixf" );
    if( dt.glMultMatrixf == NULL ) {
      dt.glMultMatrixf = missing_glMultMatrixf;
    }
    _getProcAddress( dt.glNewList, glNewList, "glNewList" );
    if( dt.glNewList == NULL ) {
      dt.glNewList = missing_glNewList;
    }
    _getProcAddress( dt.glNormal3b, glNormal3b, "glNormal3b" );
    if( dt.glNormal3b == NULL ) {
      dt.glNormal3b = missing_glNormal3b;
    }
    _getProcAddress( dt.glNormal3bv, glNormal3bv, "glNormal3bv" );
    if( dt.glNormal3bv == NULL ) {
      dt.glNormal3bv = missing_glNormal3bv;
    }
    _getProcAddress( dt.glNormal3d, glNormal3d, "glNormal3d" );
    if( dt.glNormal3d == NULL ) {
      dt.glNormal3d = missing_glNormal3d;
    }
    _getProcAddress( dt.glNormal3dv, glNormal3dv, "glNormal3dv" );
    if( dt.glNormal3dv == NULL ) {
      dt.glNormal3dv = missing_glNormal3dv;
    }
    _getProcAddress( dt.glNormal3f, glNormal3f, "glNormal3f" );
    if( dt.glNormal3f == NULL ) {
      dt.glNormal3f = missing_glNormal3f;
    }
    _getProcAddress( dt.glNormal3fv, glNormal3fv, "glNormal3fv" );
    if( dt.glNormal3fv == NULL ) {
      dt.glNormal3fv = missing_glNormal3fv;
    }
    _getProcAddress( dt.glNormal3i, glNormal3i, "glNormal3i" );
    if( dt.glNormal3i == NULL ) {
      dt.glNormal3i = missing_glNormal3i;
    }
    _getProcAddress( dt.glNormal3iv, glNormal3iv, "glNormal3iv" );
    if( dt.glNormal3iv == NULL ) {
      dt.glNormal3iv = missing_glNormal3iv;
    }
    _getProcAddress( dt.glNormal3s, glNormal3s, "glNormal3s" );
    if( dt.glNormal3s == NULL ) {
      dt.glNormal3s = missing_glNormal3s;
    }
    _getProcAddress( dt.glNormal3sv, glNormal3sv, "glNormal3sv" );
    if( dt.glNormal3sv == NULL ) {
      dt.glNormal3sv = missing_glNormal3sv;
    }
    _getProcAddress( dt.glOrtho, glOrtho, "glOrtho" );
    if( dt.glOrtho == NULL ) {
      dt.glOrtho = missing_glOrtho;
    }
    _getProcAddress( dt.glPassThrough, glPassThrough, "glPassThrough" );
    if( dt.glPassThrough == NULL ) {
      dt.glPassThrough = missing_glPassThrough;
    }
    _getProcAddress( dt.glPixelMapfv, glPixelMapfv, "glPixelMapfv" );
    if( dt.glPixelMapfv == NULL ) {
      dt.glPixelMapfv = missing_glPixelMapfv;
    }
    _getProcAddress( dt.glPixelMapuiv, glPixelMapuiv, "glPixelMapuiv" );
    if( dt.glPixelMapuiv == NULL ) {
      dt.glPixelMapuiv = missing_glPixelMapuiv;
    }
    _getProcAddress( dt.glPixelMapusv, glPixelMapusv, "glPixelMapusv" );
    if( dt.glPixelMapusv == NULL ) {
      dt.glPixelMapusv = missing_glPixelMapusv;
    }
    _getProcAddress( dt.glPixelStoref, glPixelStoref, "glPixelStoref" );
    if( dt.glPixelStoref == NULL ) {
      dt.glPixelStoref = missing_glPixelStoref;
    }
    _getProcAddress( dt.glPixelStorei, glPixelStorei, "glPixelStorei" );
    if( dt.glPixelStorei == NULL ) {
      dt.glPixelStorei = missing_glPixelStorei;
    }
    _getProcAddress( dt.glPixelTransferf, glPixelTransferf, "glPixelTransferf" );
    if( dt.glPixelTransferf == NULL ) {
      dt.glPixelTransferf = missing_glPixelTransferf;
    }
    _getProcAddress( dt.glPixelTransferi, glPixelTransferi, "glPixelTransferi" );
    if( dt.glPixelTransferi == NULL ) {
      dt.glPixelTransferi = missing_glPixelTransferi;
    }
    _getProcAddress( dt.glPixelZoom, glPixelZoom, "glPixelZoom" );
    if( dt.glPixelZoom == NULL ) {
      dt.glPixelZoom = missing_glPixelZoom;
    }
    _getProcAddress( dt.glPointSize, glPointSize, "glPointSize" );
    if( dt.glPointSize == NULL ) {
      dt.glPointSize = missing_glPointSize;
    }
    _getProcAddress( dt.glPolygonMode, glPolygonMode, "glPolygonMode" );
    if( dt.glPolygonMode == NULL ) {
      dt.glPolygonMode = missing_glPolygonMode;
    }
    _getProcAddress( dt.glPolygonStipple, glPolygonStipple, "glPolygonStipple" );
    if( dt.glPolygonStipple == NULL ) {
      dt.glPolygonStipple = missing_glPolygonStipple;
    }
    _getProcAddress( dt.glPopAttrib, glPopAttrib, "glPopAttrib" );
    if( dt.glPopAttrib == NULL ) {
      dt.glPopAttrib = missing_glPopAttrib;
    }
    _getProcAddress( dt.glPopMatrix, glPopMatrix, "glPopMatrix" );
    if( dt.glPopMatrix == NULL ) {
      dt.glPopMatrix = missing_glPopMatrix;
    }
    _getProcAddress( dt.glPopName, glPopName, "glPopName" );
    if( dt.glPopName == NULL ) {
      dt.glPopName = missing_glPopName;
    }
    _getProcAddress( dt.glPushAttrib, glPushAttrib, "glPushAttrib" );
    if( dt.glPushAttrib == NULL ) {
      dt.glPushAttrib = missing_glPushAttrib;
    }
    _getProcAddress( dt.glPushMatrix, glPushMatrix, "glPushMatrix" );
    if( dt.glPushMatrix == NULL ) {
      dt.glPushMatrix = missing_glPushMatrix;
    }
    _getProcAddress( dt.glPushName, glPushName, "glPushName" );
    if( dt.glPushName == NULL ) {
      dt.glPushName = missing_glPushName;
    }
    _getProcAddress( dt.glRasterPos2d, glRasterPos2d, "glRasterPos2d" );
    if( dt.glRasterPos2d == NULL ) {
      dt.glRasterPos2d = missing_glRasterPos2d;
    }
    _getProcAddress( dt.glRasterPos2dv, glRasterPos2dv, "glRasterPos2dv" );
    if( dt.glRasterPos2dv == NULL ) {
      dt.glRasterPos2dv = missing_glRasterPos2dv;
    }
    _getProcAddress( dt.glRasterPos2f, glRasterPos2f, "glRasterPos2f" );
    if( dt.glRasterPos2f == NULL ) {
      dt.glRasterPos2f = missing_glRasterPos2f;
    }
    _getProcAddress( dt.glRasterPos2fv, glRasterPos2fv, "glRasterPos2fv" );
    if( dt.glRasterPos2fv == NULL ) {
      dt.glRasterPos2fv = missing_glRasterPos2fv;
    }
    _getProcAddress( dt.glRasterPos2i, glRasterPos2i, "glRasterPos2i" );
    if( dt.glRasterPos2i == NULL ) {
      dt.glRasterPos2i = missing_glRasterPos2i;
    }
    _getProcAddress( dt.glRasterPos2iv, glRasterPos2iv, "glRasterPos2iv" );
    if( dt.glRasterPos2iv == NULL ) {
      dt.glRasterPos2iv = missing_glRasterPos2iv;
    }
    _getProcAddress( dt.glRasterPos2s, glRasterPos2s, "glRasterPos2s" );
    if( dt.glRasterPos2s == NULL ) {
      dt.glRasterPos2s = missing_glRasterPos2s;
    }
    _getProcAddress( dt.glRasterPos2sv, glRasterPos2sv, "glRasterPos2sv" );
    if( dt.glRasterPos2sv == NULL ) {
      dt.glRasterPos2sv = missing_glRasterPos2sv;
    }
    _getProcAddress( dt.glRasterPos3d, glRasterPos3d, "glRasterPos3d" );
    if( dt.glRasterPos3d == NULL ) {
      dt.glRasterPos3d = missing_glRasterPos3d;
    }
    _getProcAddress( dt.glRasterPos3dv, glRasterPos3dv, "glRasterPos3dv" );
    if( dt.glRasterPos3dv == NULL ) {
      dt.glRasterPos3dv = missing_glRasterPos3dv;
    }
    _getProcAddress( dt.glRasterPos3f, glRasterPos3f, "glRasterPos3f" );
    if( dt.glRasterPos3f == NULL ) {
      dt.glRasterPos3f = missing_glRasterPos3f;
    }
    _getProcAddress( dt.glRasterPos3fv, glRasterPos3fv, "glRasterPos3fv" );
    if( dt.glRasterPos3fv == NULL ) {
      dt.glRasterPos3fv = missing_glRasterPos3fv;
    }
    _getProcAddress( dt.glRasterPos3i, glRasterPos3i, "glRasterPos3i" );
    if( dt.glRasterPos3i == NULL ) {
      dt.glRasterPos3i = missing_glRasterPos3i;
    }
    _getProcAddress( dt.glRasterPos3iv, glRasterPos3iv, "glRasterPos3iv" );
    if( dt.glRasterPos3iv == NULL ) {
      dt.glRasterPos3iv = missing_glRasterPos3iv;
    }
    _getProcAddress( dt.glRasterPos3s, glRasterPos3s, "glRasterPos3s" );
    if( dt.glRasterPos3s == NULL ) {
      dt.glRasterPos3s = missing_glRasterPos3s;
    }
    _getProcAddress( dt.glRasterPos3sv, glRasterPos3sv, "glRasterPos3sv" );
    if( dt.glRasterPos3sv == NULL ) {
      dt.glRasterPos3sv = missing_glRasterPos3sv;
    }
    _getProcAddress( dt.glRasterPos4d, glRasterPos4d, "glRasterPos4d" );
    if( dt.glRasterPos4d == NULL ) {
      dt.glRasterPos4d = missing_glRasterPos4d;
    }
    _getProcAddress( dt.glRasterPos4dv, glRasterPos4dv, "glRasterPos4dv" );
    if( dt.glRasterPos4dv == NULL ) {
      dt.glRasterPos4dv = missing_glRasterPos4dv;
    }
    _getProcAddress( dt.glRasterPos4f, glRasterPos4f, "glRasterPos4f" );
    if( dt.glRasterPos4f == NULL ) {
      dt.glRasterPos4f = missing_glRasterPos4f;
    }
    _getProcAddress( dt.glRasterPos4fv, glRasterPos4fv, "glRasterPos4fv" );
    if( dt.glRasterPos4fv == NULL ) {
      dt.glRasterPos4fv = missing_glRasterPos4fv;
    }
    _getProcAddress( dt.glRasterPos4i, glRasterPos4i, "glRasterPos4i" );
    if( dt.glRasterPos4i == NULL ) {
      dt.glRasterPos4i = missing_glRasterPos4i;
    }
    _getProcAddress( dt.glRasterPos4iv, glRasterPos4iv, "glRasterPos4iv" );
    if( dt.glRasterPos4iv == NULL ) {
      dt.glRasterPos4iv = missing_glRasterPos4iv;
    }
    _getProcAddress( dt.glRasterPos4s, glRasterPos4s, "glRasterPos4s" );
    if( dt.glRasterPos4s == NULL ) {
      dt.glRasterPos4s = missing_glRasterPos4s;
    }
    _getProcAddress( dt.glRasterPos4sv, glRasterPos4sv, "glRasterPos4sv" );
    if( dt.glRasterPos4sv == NULL ) {
      dt.glRasterPos4sv = missing_glRasterPos4sv;
    }
    _getProcAddress( dt.glReadBuffer, glReadBuffer, "glReadBuffer" );
    if( dt.glReadBuffer == NULL ) {
      dt.glReadBuffer = missing_glReadBuffer;
    }
    _getProcAddress( dt.glReadPixels, glReadPixels, "glReadPixels" );
    if( dt.glReadPixels == NULL ) {
      dt.glReadPixels = missing_glReadPixels;
    }
    _getProcAddress( dt.glRectd, glRectd, "glRectd" );
    if( dt.glRectd == NULL ) {
      dt.glRectd = missing_glRectd;
    }
    _getProcAddress( dt.glRectdv, glRectdv, "glRectdv" );
    if( dt.glRectdv == NULL ) {
      dt.glRectdv = missing_glRectdv;
    }
    _getProcAddress( dt.glRectf, glRectf, "glRectf" );
    if( dt.glRectf == NULL ) {
      dt.glRectf = missing_glRectf;
    }
    _getProcAddress( dt.glRectfv, glRectfv, "glRectfv" );
    if( dt.glRectfv == NULL ) {
      dt.glRectfv = missing_glRectfv;
    }
    _getProcAddress( dt.glRecti, glRecti, "glRecti" );
    if( dt.glRecti == NULL ) {
      dt.glRecti = missing_glRecti;
    }
    _getProcAddress( dt.glRectiv, glRectiv, "glRectiv" );
    if( dt.glRectiv == NULL ) {
      dt.glRectiv = missing_glRectiv;
    }
    _getProcAddress( dt.glRects, glRects, "glRects" );
    if( dt.glRects == NULL ) {
      dt.glRects = missing_glRects;
    }
    _getProcAddress( dt.glRectsv, glRectsv, "glRectsv" );
    if( dt.glRectsv == NULL ) {
      dt.glRectsv = missing_glRectsv;
    }
    _getProcAddress( dt.glRenderMode, glRenderMode, "glRenderMode" );
    if( dt.glRenderMode == NULL ) {
      dt.glRenderMode = missing_glRenderMode;
    }
    _getProcAddress( dt.glRotated, glRotated, "glRotated" );
    if( dt.glRotated == NULL ) {
      dt.glRotated = missing_glRotated;
    }
    _getProcAddress( dt.glRotatef, glRotatef, "glRotatef" );
    if( dt.glRotatef == NULL ) {
      dt.glRotatef = missing_glRotatef;
    }
    _getProcAddress( dt.glScaled, glScaled, "glScaled" );
    if( dt.glScaled == NULL ) {
      dt.glScaled = missing_glScaled;
    }
    _getProcAddress( dt.glScalef, glScalef, "glScalef" );
    if( dt.glScalef == NULL ) {
      dt.glScalef = missing_glScalef;
    }
    _getProcAddress( dt.glScissor, glScissor, "glScissor" );
    if( dt.glScissor == NULL ) {
      dt.glScissor = missing_glScissor;
    }
    _getProcAddress( dt.glSelectBuffer, glSelectBuffer, "glSelectBuffer" );
    if( dt.glSelectBuffer == NULL ) {
      dt.glSelectBuffer = missing_glSelectBuffer;
    }
    _getProcAddress( dt.glShadeModel, glShadeModel, "glShadeModel" );
    if( dt.glShadeModel == NULL ) {
      dt.glShadeModel = missing_glShadeModel;
    }
    _getProcAddress( dt.glStencilFunc, glStencilFunc, "glStencilFunc" );
    if( dt.glStencilFunc == NULL ) {
      dt.glStencilFunc = missing_glStencilFunc;
    }
    _getProcAddress( dt.glStencilMask, glStencilMask, "glStencilMask" );
    if( dt.glStencilMask == NULL ) {
      dt.glStencilMask = missing_glStencilMask;
    }
    _getProcAddress( dt.glStencilOp, glStencilOp, "glStencilOp" );
    if( dt.glStencilOp == NULL ) {
      dt.glStencilOp = missing_glStencilOp;
    }
    _getProcAddress( dt.glTexCoord1d, glTexCoord1d, "glTexCoord1d" );
    if( dt.glTexCoord1d == NULL ) {
      dt.glTexCoord1d = missing_glTexCoord1d;
    }
    _getProcAddress( dt.glTexCoord1dv, glTexCoord1dv, "glTexCoord1dv" );
    if( dt.glTexCoord1dv == NULL ) {
      dt.glTexCoord1dv = missing_glTexCoord1dv;
    }
    _getProcAddress( dt.glTexCoord1f, glTexCoord1f, "glTexCoord1f" );
    if( dt.glTexCoord1f == NULL ) {
      dt.glTexCoord1f = missing_glTexCoord1f;
    }
    _getProcAddress( dt.glTexCoord1fv, glTexCoord1fv, "glTexCoord1fv" );
    if( dt.glTexCoord1fv == NULL ) {
      dt.glTexCoord1fv = missing_glTexCoord1fv;
    }
    _getProcAddress( dt.glTexCoord1i, glTexCoord1i, "glTexCoord1i" );
    if( dt.glTexCoord1i == NULL ) {
      dt.glTexCoord1i = missing_glTexCoord1i;
    }
    _getProcAddress( dt.glTexCoord1iv, glTexCoord1iv, "glTexCoord1iv" );
    if( dt.glTexCoord1iv == NULL ) {
      dt.glTexCoord1iv = missing_glTexCoord1iv;
    }
    _getProcAddress( dt.glTexCoord1s, glTexCoord1s, "glTexCoord1s" );
    if( dt.glTexCoord1s == NULL ) {
      dt.glTexCoord1s = missing_glTexCoord1s;
    }
    _getProcAddress( dt.glTexCoord1sv, glTexCoord1sv, "glTexCoord1sv" );
    if( dt.glTexCoord1sv == NULL ) {
      dt.glTexCoord1sv = missing_glTexCoord1sv;
    }
    _getProcAddress( dt.glTexCoord2d, glTexCoord2d, "glTexCoord2d" );
    if( dt.glTexCoord2d == NULL ) {
      dt.glTexCoord2d = missing_glTexCoord2d;
    }
    _getProcAddress( dt.glTexCoord2dv, glTexCoord2dv, "glTexCoord2dv" );
    if( dt.glTexCoord2dv == NULL ) {
      dt.glTexCoord2dv = missing_glTexCoord2dv;
    }
    _getProcAddress( dt.glTexCoord2f, glTexCoord2f, "glTexCoord2f" );
    if( dt.glTexCoord2f == NULL ) {
      dt.glTexCoord2f = missing_glTexCoord2f;
    }
    _getProcAddress( dt.glTexCoord2fv, glTexCoord2fv, "glTexCoord2fv" );
    if( dt.glTexCoord2fv == NULL ) {
      dt.glTexCoord2fv = missing_glTexCoord2fv;
    }
    _getProcAddress( dt.glTexCoord2i, glTexCoord2i, "glTexCoord2i" );
    if( dt.glTexCoord2i == NULL ) {
      dt.glTexCoord2i = missing_glTexCoord2i;
    }
    _getProcAddress( dt.glTexCoord2iv, glTexCoord2iv, "glTexCoord2iv" );
    if( dt.glTexCoord2iv == NULL ) {
      dt.glTexCoord2iv = missing_glTexCoord2iv;
    }
    _getProcAddress( dt.glTexCoord2s, glTexCoord2s, "glTexCoord2s" );
    if( dt.glTexCoord2s == NULL ) {
      dt.glTexCoord2s = missing_glTexCoord2s;
    }
    _getProcAddress( dt.glTexCoord2sv, glTexCoord2sv, "glTexCoord2sv" );
    if( dt.glTexCoord2sv == NULL ) {
      dt.glTexCoord2sv = missing_glTexCoord2sv;
    }
    _getProcAddress( dt.glTexCoord3d, glTexCoord3d, "glTexCoord3d" );
    if( dt.glTexCoord3d == NULL ) {
      dt.glTexCoord3d = missing_glTexCoord3d;
    }
    _getProcAddress( dt.glTexCoord3dv, glTexCoord3dv, "glTexCoord3dv" );
    if( dt.glTexCoord3dv == NULL ) {
      dt.glTexCoord3dv = missing_glTexCoord3dv;
    }
    _getProcAddress( dt.glTexCoord3f, glTexCoord3f, "glTexCoord3f" );
    if( dt.glTexCoord3f == NULL ) {
      dt.glTexCoord3f = missing_glTexCoord3f;
    }
    _getProcAddress( dt.glTexCoord3fv, glTexCoord3fv, "glTexCoord3fv" );
    if( dt.glTexCoord3fv == NULL ) {
      dt.glTexCoord3fv = missing_glTexCoord3fv;
    }
    _getProcAddress( dt.glTexCoord3i, glTexCoord3i, "glTexCoord3i" );
    if( dt.glTexCoord3i == NULL ) {
      dt.glTexCoord3i = missing_glTexCoord3i;
    }
    _getProcAddress( dt.glTexCoord3iv, glTexCoord3iv, "glTexCoord3iv" );
    if( dt.glTexCoord3iv == NULL ) {
      dt.glTexCoord3iv = missing_glTexCoord3iv;
    }
    _getProcAddress( dt.glTexCoord3s, glTexCoord3s, "glTexCoord3s" );
    if( dt.glTexCoord3s == NULL ) {
      dt.glTexCoord3s = missing_glTexCoord3s;
    }
    _getProcAddress( dt.glTexCoord3sv, glTexCoord3sv, "glTexCoord3sv" );
    if( dt.glTexCoord3sv == NULL ) {
      dt.glTexCoord3sv = missing_glTexCoord3sv;
    }
    _getProcAddress( dt.glTexCoord4d, glTexCoord4d, "glTexCoord4d" );
    if( dt.glTexCoord4d == NULL ) {
      dt.glTexCoord4d = missing_glTexCoord4d;
    }
    _getProcAddress( dt.glTexCoord4dv, glTexCoord4dv, "glTexCoord4dv" );
    if( dt.glTexCoord4dv == NULL ) {
      dt.glTexCoord4dv = missing_glTexCoord4dv;
    }
    _getProcAddress( dt.glTexCoord4f, glTexCoord4f, "glTexCoord4f" );
    if( dt.glTexCoord4f == NULL ) {
      dt.glTexCoord4f = missing_glTexCoord4f;
    }
    _getProcAddress( dt.glTexCoord4fv, glTexCoord4fv, "glTexCoord4fv" );
    if( dt.glTexCoord4fv == NULL ) {
      dt.glTexCoord4fv = missing_glTexCoord4fv;
    }
    _getProcAddress( dt.glTexCoord4i, glTexCoord4i, "glTexCoord4i" );
    if( dt.glTexCoord4i == NULL ) {
      dt.glTexCoord4i = missing_glTexCoord4i;
    }
    _getProcAddress( dt.glTexCoord4iv, glTexCoord4iv, "glTexCoord4iv" );
    if( dt.glTexCoord4iv == NULL ) {
      dt.glTexCoord4iv = missing_glTexCoord4iv;
    }
    _getProcAddress( dt.glTexCoord4s, glTexCoord4s, "glTexCoord4s" );
    if( dt.glTexCoord4s == NULL ) {
      dt.glTexCoord4s = missing_glTexCoord4s;
    }
    _getProcAddress( dt.glTexCoord4sv, glTexCoord4sv, "glTexCoord4sv" );
    if( dt.glTexCoord4sv == NULL ) {
      dt.glTexCoord4sv = missing_glTexCoord4sv;
    }
    _getProcAddress( dt.glTexEnvf, glTexEnvf, "glTexEnvf" );
    if( dt.glTexEnvf == NULL ) {
      dt.glTexEnvf = missing_glTexEnvf;
    }
    _getProcAddress( dt.glTexEnvfv, glTexEnvfv, "glTexEnvfv" );
    if( dt.glTexEnvfv == NULL ) {
      dt.glTexEnvfv = missing_glTexEnvfv;
    }
    _getProcAddress( dt.glTexEnvi, glTexEnvi, "glTexEnvi" );
    if( dt.glTexEnvi == NULL ) {
      dt.glTexEnvi = missing_glTexEnvi;
    }
    _getProcAddress( dt.glTexEnviv, glTexEnviv, "glTexEnviv" );
    if( dt.glTexEnviv == NULL ) {
      dt.glTexEnviv = missing_glTexEnviv;
    }
    _getProcAddress( dt.glTexGend, glTexGend, "glTexGend" );
    if( dt.glTexGend == NULL ) {
      dt.glTexGend = missing_glTexGend;
    }
    _getProcAddress( dt.glTexGendv, glTexGendv, "glTexGendv" );
    if( dt.glTexGendv == NULL ) {
      dt.glTexGendv = missing_glTexGendv;
    }
    _getProcAddress( dt.glTexGenf, glTexGenf, "glTexGenf" );
    if( dt.glTexGenf == NULL ) {
      dt.glTexGenf = missing_glTexGenf;
    }
    _getProcAddress( dt.glTexGenfv, glTexGenfv, "glTexGenfv" );
    if( dt.glTexGenfv == NULL ) {
      dt.glTexGenfv = missing_glTexGenfv;
    }
    _getProcAddress( dt.glTexGeni, glTexGeni, "glTexGeni" );
    if( dt.glTexGeni == NULL ) {
      dt.glTexGeni = missing_glTexGeni;
    }
    _getProcAddress( dt.glTexGeniv, glTexGeniv, "glTexGeniv" );
    if( dt.glTexGeniv == NULL ) {
      dt.glTexGeniv = missing_glTexGeniv;
    }
    _getProcAddress( dt.glTexImage1D, glTexImage1D, "glTexImage1D" );
    if( dt.glTexImage1D == NULL ) {
      dt.glTexImage1D = missing_glTexImage1D;
    }
    _getProcAddress( dt.glTexImage2D, glTexImage2D, "glTexImage2D" );
    if( dt.glTexImage2D == NULL ) {
      dt.glTexImage2D = missing_glTexImage2D;
    }
    _getProcAddress( dt.glTexParameterf, glTexParameterf, "glTexParameterf" );
    if( dt.glTexParameterf == NULL ) {
      dt.glTexParameterf = missing_glTexParameterf;
    }
    _getProcAddress( dt.glTexParameterfv, glTexParameterfv, "glTexParameterfv" );
    if( dt.glTexParameterfv == NULL ) {
      dt.glTexParameterfv = missing_glTexParameterfv;
    }
    _getProcAddress( dt.glTexParameteri, glTexParameteri, "glTexParameteri" );
    if( dt.glTexParameteri == NULL ) {
      dt.glTexParameteri = missing_glTexParameteri;
    }
    _getProcAddress( dt.glTexParameteriv, glTexParameteriv, "glTexParameteriv" );
    if( dt.glTexParameteriv == NULL ) {
      dt.glTexParameteriv = missing_glTexParameteriv;
    }
    _getProcAddress( dt.glTranslated, glTranslated, "glTranslated" );
    if( dt.glTranslated == NULL ) {
      dt.glTranslated = missing_glTranslated;
    }
    _getProcAddress( dt.glTranslatef, glTranslatef, "glTranslatef" );
    if( dt.glTranslatef == NULL ) {
      dt.glTranslatef = missing_glTranslatef;
    }
    _getProcAddress( dt.glVertex2d, glVertex2d, "glVertex2d" );
    if( dt.glVertex2d == NULL ) {
      dt.glVertex2d = missing_glVertex2d;
    }
    _getProcAddress( dt.glVertex2dv, glVertex2dv, "glVertex2dv" );
    if( dt.glVertex2dv == NULL ) {
      dt.glVertex2dv = missing_glVertex2dv;
    }
    _getProcAddress( dt.glVertex2f, glVertex2f, "glVertex2f" );
    if( dt.glVertex2f == NULL ) {
      dt.glVertex2f = missing_glVertex2f;
    }
    _getProcAddress( dt.glVertex2fv, glVertex2fv, "glVertex2fv" );
    if( dt.glVertex2fv == NULL ) {
      dt.glVertex2fv = missing_glVertex2fv;
    }
    _getProcAddress( dt.glVertex2i, glVertex2i, "glVertex2i" );
    if( dt.glVertex2i == NULL ) {
      dt.glVertex2i = missing_glVertex2i;
    }
    _getProcAddress( dt.glVertex2iv, glVertex2iv, "glVertex2iv" );
    if( dt.glVertex2iv == NULL ) {
      dt.glVertex2iv = missing_glVertex2iv;
    }
    _getProcAddress( dt.glVertex2s, glVertex2s, "glVertex2s" );
    if( dt.glVertex2s == NULL ) {
      dt.glVertex2s = missing_glVertex2s;
    }
    _getProcAddress( dt.glVertex2sv, glVertex2sv, "glVertex2sv" );
    if( dt.glVertex2sv == NULL ) {
      dt.glVertex2sv = missing_glVertex2sv;
    }
    _getProcAddress( dt.glVertex3d, glVertex3d, "glVertex3d" );
    if( dt.glVertex3d == NULL ) {
      dt.glVertex3d = missing_glVertex3d;
    }
    _getProcAddress( dt.glVertex3dv, glVertex3dv, "glVertex3dv" );
    if( dt.glVertex3dv == NULL ) {
      dt.glVertex3dv = missing_glVertex3dv;
    }
    _getProcAddress( dt.glVertex3f, glVertex3f, "glVertex3f" );
    if( dt.glVertex3f == NULL ) {
      dt.glVertex3f = missing_glVertex3f;
    }
    _getProcAddress( dt.glVertex3fv, glVertex3fv, "glVertex3fv" );
    if( dt.glVertex3fv == NULL ) {
      dt.glVertex3fv = missing_glVertex3fv;
    }
    _getProcAddress( dt.glVertex3i, glVertex3i, "glVertex3i" );
    if( dt.glVertex3i == NULL ) {
      dt.glVertex3i = missing_glVertex3i;
    }
    _getProcAddress( dt.glVertex3iv, glVertex3iv, "glVertex3iv" );
    if( dt.glVertex3iv == NULL ) {
      dt.glVertex3iv = missing_glVertex3iv;
    }
    _getProcAddress( dt.glVertex3s, glVertex3s, "glVertex3s" );
    if( dt.glVertex3s == NULL ) {
      dt.glVertex3s = missing_glVertex3s;
    }
    _getProcAddress( dt.glVertex3sv, glVertex3sv, "glVertex3sv" );
    if( dt.glVertex3sv == NULL ) {
      dt.glVertex3sv = missing_glVertex3sv;
    }
    _getProcAddress( dt.glVertex4d, glVertex4d, "glVertex4d" );
    if( dt.glVertex4d == NULL ) {
      dt.glVertex4d = missing_glVertex4d;
    }
    _getProcAddress( dt.glVertex4dv, glVertex4dv, "glVertex4dv" );
    if( dt.glVertex4dv == NULL ) {
      dt.glVertex4dv = missing_glVertex4dv;
    }
    _getProcAddress( dt.glVertex4f, glVertex4f, "glVertex4f" );
    if( dt.glVertex4f == NULL ) {
      dt.glVertex4f = missing_glVertex4f;
    }
    _getProcAddress( dt.glVertex4fv, glVertex4fv, "glVertex4fv" );
    if( dt.glVertex4fv == NULL ) {
      dt.glVertex4fv = missing_glVertex4fv;
    }
    _getProcAddress( dt.glVertex4i, glVertex4i, "glVertex4i" );
    if( dt.glVertex4i == NULL ) {
      dt.glVertex4i = missing_glVertex4i;
    }
    _getProcAddress( dt.glVertex4iv, glVertex4iv, "glVertex4iv" );
    if( dt.glVertex4iv == NULL ) {
      dt.glVertex4iv = missing_glVertex4iv;
    }
    _getProcAddress( dt.glVertex4s, glVertex4s, "glVertex4s" );
    if( dt.glVertex4s == NULL ) {
      dt.glVertex4s = missing_glVertex4s;
    }
    _getProcAddress( dt.glVertex4sv, glVertex4sv, "glVertex4sv" );
    if( dt.glVertex4sv == NULL ) {
      dt.glVertex4sv = missing_glVertex4sv;
    }
    _getProcAddress( dt.glViewport, glViewport, "glViewport" );
    if( dt.glViewport == NULL ) {
      dt.glViewport = missing_glViewport;
    }

    // GL_VERSION_1_1

    _getProcAddress( dt.glAreTexturesResident, glAreTexturesResident, "glAreTexturesResident" );
    if( dt.glAreTexturesResident == NULL ) {
      dt.glAreTexturesResident = missing_glAreTexturesResident;
    }
    _getProcAddress( dt.glArrayElement, glArrayElement, "glArrayElement" );
    if( dt.glArrayElement == NULL ) {
      dt.glArrayElement = missing_glArrayElement;
    }
    _getProcAddress( dt.glBindTexture, glBindTexture, "glBindTexture" );
    if( dt.glBindTexture == NULL ) {
      dt.glBindTexture = missing_glBindTexture;
    }
    _getProcAddress( dt.glColorPointer, glColorPointer, "glColorPointer" );
    if( dt.glColorPointer == NULL ) {
      dt.glColorPointer = missing_glColorPointer;
    }
    _getProcAddress( dt.glCopyTexImage1D, glCopyTexImage1D, "glCopyTexImage1D" );
    if( dt.glCopyTexImage1D == NULL ) {
      dt.glCopyTexImage1D = missing_glCopyTexImage1D;
    }
    _getProcAddress( dt.glCopyTexImage2D, glCopyTexImage2D, "glCopyTexImage2D" );
    if( dt.glCopyTexImage2D == NULL ) {
      dt.glCopyTexImage2D = missing_glCopyTexImage2D;
    }
    _getProcAddress( dt.glCopyTexSubImage1D, glCopyTexSubImage1D, "glCopyTexSubImage1D" );
    if( dt.glCopyTexSubImage1D == NULL ) {
      dt.glCopyTexSubImage1D = missing_glCopyTexSubImage1D;
    }
    _getProcAddress( dt.glCopyTexSubImage2D, glCopyTexSubImage2D, "glCopyTexSubImage2D" );
    if( dt.glCopyTexSubImage2D == NULL ) {
      dt.glCopyTexSubImage2D = missing_glCopyTexSubImage2D;
    }
    _getProcAddress( dt.glDeleteTextures, glDeleteTextures, "glDeleteTextures" );
    if( dt.glDeleteTextures == NULL ) {
      dt.glDeleteTextures = missing_glDeleteTextures;
    }
    _getProcAddress( dt.glDisableClientState, glDisableClientState, "glDisableClientState" );
    if( dt.glDisableClientState == NULL ) {
      dt.glDisableClientState = missing_glDisableClientState;
    }
    _getProcAddress( dt.glDrawArrays, glDrawArrays, "glDrawArrays" );
    if( dt.glDrawArrays == NULL ) {
      dt.glDrawArrays = missing_glDrawArrays;
    }
    _getProcAddress( dt.glDrawElements, glDrawElements, "glDrawElements" );
    if( dt.glDrawElements == NULL ) {
      dt.glDrawElements = missing_glDrawElements;
    }
    _getProcAddress( dt.glEdgeFlagPointer, glEdgeFlagPointer, "glEdgeFlagPointer" );
    if( dt.glEdgeFlagPointer == NULL ) {
      dt.glEdgeFlagPointer = missing_glEdgeFlagPointer;
    }
    _getProcAddress( dt.glEnableClientState, glEnableClientState, "glEnableClientState" );
    if( dt.glEnableClientState == NULL ) {
      dt.glEnableClientState = missing_glEnableClientState;
    }
    _getProcAddress( dt.glGenTextures, glGenTextures, "glGenTextures" );
    if( dt.glGenTextures == NULL ) {
      dt.glGenTextures = missing_glGenTextures;
    }
    _getProcAddress( dt.glGetPointerv, glGetPointerv, "glGetPointerv" );
    if( dt.glGetPointerv == NULL ) {
      dt.glGetPointerv = missing_glGetPointerv;
    }
    _getProcAddress( dt.glIndexPointer, glIndexPointer, "glIndexPointer" );
    if( dt.glIndexPointer == NULL ) {
      dt.glIndexPointer = missing_glIndexPointer;
    }
    _getProcAddress( dt.glIndexub, glIndexub, "glIndexub" );
    if( dt.glIndexub == NULL ) {
      dt.glIndexub = missing_glIndexub;
    }
    _getProcAddress( dt.glIndexubv, glIndexubv, "glIndexubv" );
    if( dt.glIndexubv == NULL ) {
      dt.glIndexubv = missing_glIndexubv;
    }
    _getProcAddress( dt.glInterleavedArrays, glInterleavedArrays, "glInterleavedArrays" );
    if( dt.glInterleavedArrays == NULL ) {
      dt.glInterleavedArrays = missing_glInterleavedArrays;
    }
    _getProcAddress( dt.glIsTexture, glIsTexture, "glIsTexture" );
    if( dt.glIsTexture == NULL ) {
      dt.glIsTexture = missing_glIsTexture;
    }
    _getProcAddress( dt.glNormalPointer, glNormalPointer, "glNormalPointer" );
    if( dt.glNormalPointer == NULL ) {
      dt.glNormalPointer = missing_glNormalPointer;
    }
    _getProcAddress( dt.glPolygonOffset, glPolygonOffset, "glPolygonOffset" );
    if( dt.glPolygonOffset == NULL ) {
      dt.glPolygonOffset = missing_glPolygonOffset;
    }
    _getProcAddress( dt.glPopClientAttrib, glPopClientAttrib, "glPopClientAttrib" );
    if( dt.glPopClientAttrib == NULL ) {
      dt.glPopClientAttrib = missing_glPopClientAttrib;
    }
    _getProcAddress( dt.glPrioritizeTextures, glPrioritizeTextures, "glPrioritizeTextures" );
    if( dt.glPrioritizeTextures == NULL ) {
      dt.glPrioritizeTextures = missing_glPrioritizeTextures;
    }
    _getProcAddress( dt.glPushClientAttrib, glPushClientAttrib, "glPushClientAttrib" );
    if( dt.glPushClientAttrib == NULL ) {
      dt.glPushClientAttrib = missing_glPushClientAttrib;
    }
    _getProcAddress( dt.glTexCoordPointer, glTexCoordPointer, "glTexCoordPointer" );
    if( dt.glTexCoordPointer == NULL ) {
      dt.glTexCoordPointer = missing_glTexCoordPointer;
    }
    _getProcAddress( dt.glTexSubImage1D, glTexSubImage1D, "glTexSubImage1D" );
    if( dt.glTexSubImage1D == NULL ) {
      dt.glTexSubImage1D = missing_glTexSubImage1D;
    }
    _getProcAddress( dt.glTexSubImage2D, glTexSubImage2D, "glTexSubImage2D" );
    if( dt.glTexSubImage2D == NULL ) {
      dt.glTexSubImage2D = missing_glTexSubImage2D;
    }
    _getProcAddress( dt.glVertexPointer, glVertexPointer, "glVertexPointer" );
    if( dt.glVertexPointer == NULL ) {
      dt.glVertexPointer = missing_glVertexPointer;
    }

    // GL_VERSION_1_2

    _getProcAddress( dt.glBlendColor, glBlendColor, "glBlendColor" );
    if( dt.glBlendColor == NULL ) {
      dt.glBlendColor = missing_glBlendColor;
    }
    _getProcAddress( dt.glBlendEquation, glBlendEquation, "glBlendEquation" );
    if( dt.glBlendEquation == NULL ) {
      dt.glBlendEquation = missing_glBlendEquation;
    }
    _getProcAddress( dt.glCopyTexSubImage3D, glCopyTexSubImage3D, "glCopyTexSubImage3D" );
    if( dt.glCopyTexSubImage3D == NULL ) {
      dt.glCopyTexSubImage3D = missing_glCopyTexSubImage3D;
    }
    _getProcAddress( dt.glDrawRangeElements, glDrawRangeElements, "glDrawRangeElements" );
    if( dt.glDrawRangeElements == NULL ) {
      dt.glDrawRangeElements = missing_glDrawRangeElements;
    }
    _getProcAddress( dt.glTexImage3D, glTexImage3D, "glTexImage3D" );
    if( dt.glTexImage3D == NULL ) {
      dt.glTexImage3D = missing_glTexImage3D;
    }
    _getProcAddress( dt.glTexSubImage3D, glTexSubImage3D, "glTexSubImage3D" );
    if( dt.glTexSubImage3D == NULL ) {
      dt.glTexSubImage3D = missing_glTexSubImage3D;
    }

    // GL_VERSION_1_3

    _getProcAddress( dt.glActiveTexture, glActiveTexture, "glActiveTexture" );
    if( dt.glActiveTexture == NULL ) {
      dt.glActiveTexture = missing_glActiveTexture;
    }
    _getProcAddress( dt.glClientActiveTexture, glClientActiveTexture, "glClientActiveTexture" );
    if( dt.glClientActiveTexture == NULL ) {
      dt.glClientActiveTexture = missing_glClientActiveTexture;
    }
    _getProcAddress( dt.glCompressedTexImage1D, glCompressedTexImage1D, "glCompressedTexImage1D" );
    if( dt.glCompressedTexImage1D == NULL ) {
      dt.glCompressedTexImage1D = missing_glCompressedTexImage1D;
    }
    _getProcAddress( dt.glCompressedTexImage2D, glCompressedTexImage2D, "glCompressedTexImage2D" );
    if( dt.glCompressedTexImage2D == NULL ) {
      dt.glCompressedTexImage2D = missing_glCompressedTexImage2D;
    }
    _getProcAddress( dt.glCompressedTexImage3D, glCompressedTexImage3D, "glCompressedTexImage3D" );
    if( dt.glCompressedTexImage3D == NULL ) {
      dt.glCompressedTexImage3D = missing_glCompressedTexImage3D;
    }
    _getProcAddress( dt.glCompressedTexSubImage1D, glCompressedTexSubImage1D, "glCompressedTexSubImage1D" );
    if( dt.glCompressedTexSubImage1D == NULL ) {
      dt.glCompressedTexSubImage1D = missing_glCompressedTexSubImage1D;
    }
    _getProcAddress( dt.glCompressedTexSubImage2D, glCompressedTexSubImage2D, "glCompressedTexSubImage2D" );
    if( dt.glCompressedTexSubImage2D == NULL ) {
      dt.glCompressedTexSubImage2D = missing_glCompressedTexSubImage2D;
    }
    _getProcAddress( dt.glCompressedTexSubImage3D, glCompressedTexSubImage3D, "glCompressedTexSubImage3D" );
    if( dt.glCompressedTexSubImage3D == NULL ) {
      dt.glCompressedTexSubImage3D = missing_glCompressedTexSubImage3D;
    }
    _getProcAddress( dt.glGetCompressedTexImage, glGetCompressedTexImage, "glGetCompressedTexImage" );
    if( dt.glGetCompressedTexImage == NULL ) {
      dt.glGetCompressedTexImage = missing_glGetCompressedTexImage;
    }
    _getProcAddress( dt.glLoadTransposeMatrixd, glLoadTransposeMatrixd, "glLoadTransposeMatrixd" );
    if( dt.glLoadTransposeMatrixd == NULL ) {
      dt.glLoadTransposeMatrixd = missing_glLoadTransposeMatrixd;
    }
    _getProcAddress( dt.glLoadTransposeMatrixf, glLoadTransposeMatrixf, "glLoadTransposeMatrixf" );
    if( dt.glLoadTransposeMatrixf == NULL ) {
      dt.glLoadTransposeMatrixf = missing_glLoadTransposeMatrixf;
    }
    _getProcAddress( dt.glMultTransposeMatrixd, glMultTransposeMatrixd, "glMultTransposeMatrixd" );
    if( dt.glMultTransposeMatrixd == NULL ) {
      dt.glMultTransposeMatrixd = missing_glMultTransposeMatrixd;
    }
    _getProcAddress( dt.glMultTransposeMatrixf, glMultTransposeMatrixf, "glMultTransposeMatrixf" );
    if( dt.glMultTransposeMatrixf == NULL ) {
      dt.glMultTransposeMatrixf = missing_glMultTransposeMatrixf;
    }
    _getProcAddress( dt.glMultiTexCoord1d, glMultiTexCoord1d, "glMultiTexCoord1d" );
    if( dt.glMultiTexCoord1d == NULL ) {
      dt.glMultiTexCoord1d = missing_glMultiTexCoord1d;
    }
    _getProcAddress( dt.glMultiTexCoord1dv, glMultiTexCoord1dv, "glMultiTexCoord1dv" );
    if( dt.glMultiTexCoord1dv == NULL ) {
      dt.glMultiTexCoord1dv = missing_glMultiTexCoord1dv;
    }
    _getProcAddress( dt.glMultiTexCoord1f, glMultiTexCoord1f, "glMultiTexCoord1f" );
    if( dt.glMultiTexCoord1f == NULL ) {
      dt.glMultiTexCoord1f = missing_glMultiTexCoord1f;
    }
    _getProcAddress( dt.glMultiTexCoord1fv, glMultiTexCoord1fv, "glMultiTexCoord1fv" );
    if( dt.glMultiTexCoord1fv == NULL ) {
      dt.glMultiTexCoord1fv = missing_glMultiTexCoord1fv;
    }
    _getProcAddress( dt.glMultiTexCoord1i, glMultiTexCoord1i, "glMultiTexCoord1i" );
    if( dt.glMultiTexCoord1i == NULL ) {
      dt.glMultiTexCoord1i = missing_glMultiTexCoord1i;
    }
    _getProcAddress( dt.glMultiTexCoord1iv, glMultiTexCoord1iv, "glMultiTexCoord1iv" );
    if( dt.glMultiTexCoord1iv == NULL ) {
      dt.glMultiTexCoord1iv = missing_glMultiTexCoord1iv;
    }
    _getProcAddress( dt.glMultiTexCoord1s, glMultiTexCoord1s, "glMultiTexCoord1s" );
    if( dt.glMultiTexCoord1s == NULL ) {
      dt.glMultiTexCoord1s = missing_glMultiTexCoord1s;
    }
    _getProcAddress( dt.glMultiTexCoord1sv, glMultiTexCoord1sv, "glMultiTexCoord1sv" );
    if( dt.glMultiTexCoord1sv == NULL ) {
      dt.glMultiTexCoord1sv = missing_glMultiTexCoord1sv;
    }
    _getProcAddress( dt.glMultiTexCoord2d, glMultiTexCoord2d, "glMultiTexCoord2d" );
    if( dt.glMultiTexCoord2d == NULL ) {
      dt.glMultiTexCoord2d = missing_glMultiTexCoord2d;
    }
    _getProcAddress( dt.glMultiTexCoord2dv, glMultiTexCoord2dv, "glMultiTexCoord2dv" );
    if( dt.glMultiTexCoord2dv == NULL ) {
      dt.glMultiTexCoord2dv = missing_glMultiTexCoord2dv;
    }
    _getProcAddress( dt.glMultiTexCoord2f, glMultiTexCoord2f, "glMultiTexCoord2f" );
    if( dt.glMultiTexCoord2f == NULL ) {
      dt.glMultiTexCoord2f = missing_glMultiTexCoord2f;
    }
    _getProcAddress( dt.glMultiTexCoord2fv, glMultiTexCoord2fv, "glMultiTexCoord2fv" );
    if( dt.glMultiTexCoord2fv == NULL ) {
      dt.glMultiTexCoord2fv = missing_glMultiTexCoord2fv;
    }
    _getProcAddress( dt.glMultiTexCoord2i, glMultiTexCoord2i, "glMultiTexCoord2i" );
    if( dt.glMultiTexCoord2i == NULL ) {
      dt.glMultiTexCoord2i = missing_glMultiTexCoord2i;
    }
    _getProcAddress( dt.glMultiTexCoord2iv, glMultiTexCoord2iv, "glMultiTexCoord2iv" );
    if( dt.glMultiTexCoord2iv == NULL ) {
      dt.glMultiTexCoord2iv = missing_glMultiTexCoord2iv;
    }
    _getProcAddress( dt.glMultiTexCoord2s, glMultiTexCoord2s, "glMultiTexCoord2s" );
    if( dt.glMultiTexCoord2s == NULL ) {
      dt.glMultiTexCoord2s = missing_glMultiTexCoord2s;
    }
    _getProcAddress( dt.glMultiTexCoord2sv, glMultiTexCoord2sv, "glMultiTexCoord2sv" );
    if( dt.glMultiTexCoord2sv == NULL ) {
      dt.glMultiTexCoord2sv = missing_glMultiTexCoord2sv;
    }
    _getProcAddress( dt.glMultiTexCoord3d, glMultiTexCoord3d, "glMultiTexCoord3d" );
    if( dt.glMultiTexCoord3d == NULL ) {
      dt.glMultiTexCoord3d = missing_glMultiTexCoord3d;
    }
    _getProcAddress( dt.glMultiTexCoord3dv, glMultiTexCoord3dv, "glMultiTexCoord3dv" );
    if( dt.glMultiTexCoord3dv == NULL ) {
      dt.glMultiTexCoord3dv = missing_glMultiTexCoord3dv;
    }
    _getProcAddress( dt.glMultiTexCoord3f, glMultiTexCoord3f, "glMultiTexCoord3f" );
    if( dt.glMultiTexCoord3f == NULL ) {
      dt.glMultiTexCoord3f = missing_glMultiTexCoord3f;
    }
    _getProcAddress( dt.glMultiTexCoord3fv, glMultiTexCoord3fv, "glMultiTexCoord3fv" );
    if( dt.glMultiTexCoord3fv == NULL ) {
      dt.glMultiTexCoord3fv = missing_glMultiTexCoord3fv;
    }
    _getProcAddress( dt.glMultiTexCoord3i, glMultiTexCoord3i, "glMultiTexCoord3i" );
    if( dt.glMultiTexCoord3i == NULL ) {
      dt.glMultiTexCoord3i = missing_glMultiTexCoord3i;
    }
    _getProcAddress( dt.glMultiTexCoord3iv, glMultiTexCoord3iv, "glMultiTexCoord3iv" );
    if( dt.glMultiTexCoord3iv == NULL ) {
      dt.glMultiTexCoord3iv = missing_glMultiTexCoord3iv;
    }
    _getProcAddress( dt.glMultiTexCoord3s, glMultiTexCoord3s, "glMultiTexCoord3s" );
    if( dt.glMultiTexCoord3s == NULL ) {
      dt.glMultiTexCoord3s = missing_glMultiTexCoord3s;
    }
    _getProcAddress( dt.glMultiTexCoord3sv, glMultiTexCoord3sv, "glMultiTexCoord3sv" );
    if( dt.glMultiTexCoord3sv == NULL ) {
      dt.glMultiTexCoord3sv = missing_glMultiTexCoord3sv;
    }
    _getProcAddress( dt.glMultiTexCoord4d, glMultiTexCoord4d, "glMultiTexCoord4d" );
    if( dt.glMultiTexCoord4d == NULL ) {
      dt.glMultiTexCoord4d = missing_glMultiTexCoord4d;
    }
    _getProcAddress( dt.glMultiTexCoord4dv, glMultiTexCoord4dv, "glMultiTexCoord4dv" );
    if( dt.glMultiTexCoord4dv == NULL ) {
      dt.glMultiTexCoord4dv = missing_glMultiTexCoord4dv;
    }
    _getProcAddress( dt.glMultiTexCoord4f, glMultiTexCoord4f, "glMultiTexCoord4f" );
    if( dt.glMultiTexCoord4f == NULL ) {
      dt.glMultiTexCoord4f = missing_glMultiTexCoord4f;
    }
    _getProcAddress( dt.glMultiTexCoord4fv, glMultiTexCoord4fv, "glMultiTexCoord4fv" );
    if( dt.glMultiTexCoord4fv == NULL ) {
      dt.glMultiTexCoord4fv = missing_glMultiTexCoord4fv;
    }
    _getProcAddress( dt.glMultiTexCoord4i, glMultiTexCoord4i, "glMultiTexCoord4i" );
    if( dt.glMultiTexCoord4i == NULL ) {
      dt.glMultiTexCoord4i = missing_glMultiTexCoord4i;
    }
    _getProcAddress( dt.glMultiTexCoord4iv, glMultiTexCoord4iv, "glMultiTexCoord4iv" );
    if( dt.glMultiTexCoord4iv == NULL ) {
      dt.glMultiTexCoord4iv = missing_glMultiTexCoord4iv;
    }
    _getProcAddress( dt.glMultiTexCoord4s, glMultiTexCoord4s, "glMultiTexCoord4s" );
    if( dt.glMultiTexCoord4s == NULL ) {
      dt.glMultiTexCoord4s = missing_glMultiTexCoord4s;
    }
    _getProcAddress( dt.glMultiTexCoord4sv, glMultiTexCoord4sv, "glMultiTexCoord4sv" );
    if( dt.glMultiTexCoord4sv == NULL ) {
      dt.glMultiTexCoord4sv = missing_glMultiTexCoord4sv;
    }
    _getProcAddress( dt.glSampleCoverage, glSampleCoverage, "glSampleCoverage" );
    if( dt.glSampleCoverage == NULL ) {
      dt.glSampleCoverage = missing_glSampleCoverage;
    }

    // GL_VERSION_1_4

    _getProcAddress( dt.glBlendFuncSeparate, glBlendFuncSeparate, "glBlendFuncSeparate" );
    if( dt.glBlendFuncSeparate == NULL ) {
      dt.glBlendFuncSeparate = missing_glBlendFuncSeparate;
    }
    _getProcAddress( dt.glFogCoordPointer, glFogCoordPointer, "glFogCoordPointer" );
    if( dt.glFogCoordPointer == NULL ) {
      dt.glFogCoordPointer = missing_glFogCoordPointer;
    }
    _getProcAddress( dt.glFogCoordd, glFogCoordd, "glFogCoordd" );
    if( dt.glFogCoordd == NULL ) {
      dt.glFogCoordd = missing_glFogCoordd;
    }
    _getProcAddress( dt.glFogCoorddv, glFogCoorddv, "glFogCoorddv" );
    if( dt.glFogCoorddv == NULL ) {
      dt.glFogCoorddv = missing_glFogCoorddv;
    }
    _getProcAddress( dt.glFogCoordf, glFogCoordf, "glFogCoordf" );
    if( dt.glFogCoordf == NULL ) {
      dt.glFogCoordf = missing_glFogCoordf;
    }
    _getProcAddress( dt.glFogCoordfv, glFogCoordfv, "glFogCoordfv" );
    if( dt.glFogCoordfv == NULL ) {
      dt.glFogCoordfv = missing_glFogCoordfv;
    }
    _getProcAddress( dt.glMultiDrawArrays, glMultiDrawArrays, "glMultiDrawArrays" );
    if( dt.glMultiDrawArrays == NULL ) {
      dt.glMultiDrawArrays = missing_glMultiDrawArrays;
    }
    _getProcAddress( dt.glMultiDrawElements, glMultiDrawElements, "glMultiDrawElements" );
    if( dt.glMultiDrawElements == NULL ) {
      dt.glMultiDrawElements = missing_glMultiDrawElements;
    }
    _getProcAddress( dt.glPointParameterf, glPointParameterf, "glPointParameterf" );
    if( dt.glPointParameterf == NULL ) {
      dt.glPointParameterf = missing_glPointParameterf;
    }
    _getProcAddress( dt.glPointParameterfv, glPointParameterfv, "glPointParameterfv" );
    if( dt.glPointParameterfv == NULL ) {
      dt.glPointParameterfv = missing_glPointParameterfv;
    }
    _getProcAddress( dt.glPointParameteri, glPointParameteri, "glPointParameteri" );
    if( dt.glPointParameteri == NULL ) {
      dt.glPointParameteri = missing_glPointParameteri;
    }
    _getProcAddress( dt.glPointParameteriv, glPointParameteriv, "glPointParameteriv" );
    if( dt.glPointParameteriv == NULL ) {
      dt.glPointParameteriv = missing_glPointParameteriv;
    }
    _getProcAddress( dt.glSecondaryColor3b, glSecondaryColor3b, "glSecondaryColor3b" );
    if( dt.glSecondaryColor3b == NULL ) {
      dt.glSecondaryColor3b = missing_glSecondaryColor3b;
    }
    _getProcAddress( dt.glSecondaryColor3bv, glSecondaryColor3bv, "glSecondaryColor3bv" );
    if( dt.glSecondaryColor3bv == NULL ) {
      dt.glSecondaryColor3bv = missing_glSecondaryColor3bv;
    }
    _getProcAddress( dt.glSecondaryColor3d, glSecondaryColor3d, "glSecondaryColor3d" );
    if( dt.glSecondaryColor3d == NULL ) {
      dt.glSecondaryColor3d = missing_glSecondaryColor3d;
    }
    _getProcAddress( dt.glSecondaryColor3dv, glSecondaryColor3dv, "glSecondaryColor3dv" );
    if( dt.glSecondaryColor3dv == NULL ) {
      dt.glSecondaryColor3dv = missing_glSecondaryColor3dv;
    }
    _getProcAddress( dt.glSecondaryColor3f, glSecondaryColor3f, "glSecondaryColor3f" );
    if( dt.glSecondaryColor3f == NULL ) {
      dt.glSecondaryColor3f = missing_glSecondaryColor3f;
    }
    _getProcAddress( dt.glSecondaryColor3fv, glSecondaryColor3fv, "glSecondaryColor3fv" );
    if( dt.glSecondaryColor3fv == NULL ) {
      dt.glSecondaryColor3fv = missing_glSecondaryColor3fv;
    }
    _getProcAddress( dt.glSecondaryColor3i, glSecondaryColor3i, "glSecondaryColor3i" );
    if( dt.glSecondaryColor3i == NULL ) {
      dt.glSecondaryColor3i = missing_glSecondaryColor3i;
    }
    _getProcAddress( dt.glSecondaryColor3iv, glSecondaryColor3iv, "glSecondaryColor3iv" );
    if( dt.glSecondaryColor3iv == NULL ) {
      dt.glSecondaryColor3iv = missing_glSecondaryColor3iv;
    }
    _getProcAddress( dt.glSecondaryColor3s, glSecondaryColor3s, "glSecondaryColor3s" );
    if( dt.glSecondaryColor3s == NULL ) {
      dt.glSecondaryColor3s = missing_glSecondaryColor3s;
    }
    _getProcAddress( dt.glSecondaryColor3sv, glSecondaryColor3sv, "glSecondaryColor3sv" );
    if( dt.glSecondaryColor3sv == NULL ) {
      dt.glSecondaryColor3sv = missing_glSecondaryColor3sv;
    }
    _getProcAddress( dt.glSecondaryColor3ub, glSecondaryColor3ub, "glSecondaryColor3ub" );
    if( dt.glSecondaryColor3ub == NULL ) {
      dt.glSecondaryColor3ub = missing_glSecondaryColor3ub;
    }
    _getProcAddress( dt.glSecondaryColor3ubv, glSecondaryColor3ubv, "glSecondaryColor3ubv" );
    if( dt.glSecondaryColor3ubv == NULL ) {
      dt.glSecondaryColor3ubv = missing_glSecondaryColor3ubv;
    }
    _getProcAddress( dt.glSecondaryColor3ui, glSecondaryColor3ui, "glSecondaryColor3ui" );
    if( dt.glSecondaryColor3ui == NULL ) {
      dt.glSecondaryColor3ui = missing_glSecondaryColor3ui;
    }
    _getProcAddress( dt.glSecondaryColor3uiv, glSecondaryColor3uiv, "glSecondaryColor3uiv" );
    if( dt.glSecondaryColor3uiv == NULL ) {
      dt.glSecondaryColor3uiv = missing_glSecondaryColor3uiv;
    }
    _getProcAddress( dt.glSecondaryColor3us, glSecondaryColor3us, "glSecondaryColor3us" );
    if( dt.glSecondaryColor3us == NULL ) {
      dt.glSecondaryColor3us = missing_glSecondaryColor3us;
    }
    _getProcAddress( dt.glSecondaryColor3usv, glSecondaryColor3usv, "glSecondaryColor3usv" );
    if( dt.glSecondaryColor3usv == NULL ) {
      dt.glSecondaryColor3usv = missing_glSecondaryColor3usv;
    }
    _getProcAddress( dt.glSecondaryColorPointer, glSecondaryColorPointer, "glSecondaryColorPointer" );
    if( dt.glSecondaryColorPointer == NULL ) {
      dt.glSecondaryColorPointer = missing_glSecondaryColorPointer;
    }
    _getProcAddress( dt.glWindowPos2d, glWindowPos2d, "glWindowPos2d" );
    if( dt.glWindowPos2d == NULL ) {
      dt.glWindowPos2d = missing_glWindowPos2d;
    }
    _getProcAddress( dt.glWindowPos2dv, glWindowPos2dv, "glWindowPos2dv" );
    if( dt.glWindowPos2dv == NULL ) {
      dt.glWindowPos2dv = missing_glWindowPos2dv;
    }
    _getProcAddress( dt.glWindowPos2f, glWindowPos2f, "glWindowPos2f" );
    if( dt.glWindowPos2f == NULL ) {
      dt.glWindowPos2f = missing_glWindowPos2f;
    }
    _getProcAddress( dt.glWindowPos2fv, glWindowPos2fv, "glWindowPos2fv" );
    if( dt.glWindowPos2fv == NULL ) {
      dt.glWindowPos2fv = missing_glWindowPos2fv;
    }
    _getProcAddress( dt.glWindowPos2i, glWindowPos2i, "glWindowPos2i" );
    if( dt.glWindowPos2i == NULL ) {
      dt.glWindowPos2i = missing_glWindowPos2i;
    }
    _getProcAddress( dt.glWindowPos2iv, glWindowPos2iv, "glWindowPos2iv" );
    if( dt.glWindowPos2iv == NULL ) {
      dt.glWindowPos2iv = missing_glWindowPos2iv;
    }
    _getProcAddress( dt.glWindowPos2s, glWindowPos2s, "glWindowPos2s" );
    if( dt.glWindowPos2s == NULL ) {
      dt.glWindowPos2s = missing_glWindowPos2s;
    }
    _getProcAddress( dt.glWindowPos2sv, glWindowPos2sv, "glWindowPos2sv" );
    if( dt.glWindowPos2sv == NULL ) {
      dt.glWindowPos2sv = missing_glWindowPos2sv;
    }
    _getProcAddress( dt.glWindowPos3d, glWindowPos3d, "glWindowPos3d" );
    if( dt.glWindowPos3d == NULL ) {
      dt.glWindowPos3d = missing_glWindowPos3d;
    }
    _getProcAddress( dt.glWindowPos3dv, glWindowPos3dv, "glWindowPos3dv" );
    if( dt.glWindowPos3dv == NULL ) {
      dt.glWindowPos3dv = missing_glWindowPos3dv;
    }
    _getProcAddress( dt.glWindowPos3f, glWindowPos3f, "glWindowPos3f" );
    if( dt.glWindowPos3f == NULL ) {
      dt.glWindowPos3f = missing_glWindowPos3f;
    }
    _getProcAddress( dt.glWindowPos3fv, glWindowPos3fv, "glWindowPos3fv" );
    if( dt.glWindowPos3fv == NULL ) {
      dt.glWindowPos3fv = missing_glWindowPos3fv;
    }
    _getProcAddress( dt.glWindowPos3i, glWindowPos3i, "glWindowPos3i" );
    if( dt.glWindowPos3i == NULL ) {
      dt.glWindowPos3i = missing_glWindowPos3i;
    }
    _getProcAddress( dt.glWindowPos3iv, glWindowPos3iv, "glWindowPos3iv" );
    if( dt.glWindowPos3iv == NULL ) {
      dt.glWindowPos3iv = missing_glWindowPos3iv;
    }
    _getProcAddress( dt.glWindowPos3s, glWindowPos3s, "glWindowPos3s" );
    if( dt.glWindowPos3s == NULL ) {
      dt.glWindowPos3s = missing_glWindowPos3s;
    }
    _getProcAddress( dt.glWindowPos3sv, glWindowPos3sv, "glWindowPos3sv" );
    if( dt.glWindowPos3sv == NULL ) {
      dt.glWindowPos3sv = missing_glWindowPos3sv;
    }

    // GL_VERSION_1_5

    _getProcAddress( dt.glBeginQuery, glBeginQuery, "glBeginQuery" );
    if( dt.glBeginQuery == NULL ) {
      dt.glBeginQuery = missing_glBeginQuery;
    }
    _getProcAddress( dt.glBindBuffer, glBindBuffer, "glBindBuffer" );
    if( dt.glBindBuffer == NULL ) {
      dt.glBindBuffer = missing_glBindBuffer;
    }
    _getProcAddress( dt.glBufferData, glBufferData, "glBufferData" );
    if( dt.glBufferData == NULL ) {
      dt.glBufferData = missing_glBufferData;
    }
    _getProcAddress( dt.glBufferSubData, glBufferSubData, "glBufferSubData" );
    if( dt.glBufferSubData == NULL ) {
      dt.glBufferSubData = missing_glBufferSubData;
    }
    _getProcAddress( dt.glDeleteBuffers, glDeleteBuffers, "glDeleteBuffers" );
    if( dt.glDeleteBuffers == NULL ) {
      dt.glDeleteBuffers = missing_glDeleteBuffers;
    }
    _getProcAddress( dt.glDeleteQueries, glDeleteQueries, "glDeleteQueries" );
    if( dt.glDeleteQueries == NULL ) {
      dt.glDeleteQueries = missing_glDeleteQueries;
    }
    _getProcAddress( dt.glEndQuery, glEndQuery, "glEndQuery" );
    if( dt.glEndQuery == NULL ) {
      dt.glEndQuery = missing_glEndQuery;
    }
    _getProcAddress( dt.glGenBuffers, glGenBuffers, "glGenBuffers" );
    if( dt.glGenBuffers == NULL ) {
      dt.glGenBuffers = missing_glGenBuffers;
    }
    _getProcAddress( dt.glGenQueries, glGenQueries, "glGenQueries" );
    if( dt.glGenQueries == NULL ) {
      dt.glGenQueries = missing_glGenQueries;
    }
    _getProcAddress( dt.glGetBufferParameteriv, glGetBufferParameteriv, "glGetBufferParameteriv" );
    if( dt.glGetBufferParameteriv == NULL ) {
      dt.glGetBufferParameteriv = missing_glGetBufferParameteriv;
    }
    _getProcAddress( dt.glGetBufferPointerv, glGetBufferPointerv, "glGetBufferPointerv" );
    if( dt.glGetBufferPointerv == NULL ) {
      dt.glGetBufferPointerv = missing_glGetBufferPointerv;
    }
    _getProcAddress( dt.glGetBufferSubData, glGetBufferSubData, "glGetBufferSubData" );
    if( dt.glGetBufferSubData == NULL ) {
      dt.glGetBufferSubData = missing_glGetBufferSubData;
    }
    _getProcAddress( dt.glGetQueryObjectiv, glGetQueryObjectiv, "glGetQueryObjectiv" );
    if( dt.glGetQueryObjectiv == NULL ) {
      dt.glGetQueryObjectiv = missing_glGetQueryObjectiv;
    }
    _getProcAddress( dt.glGetQueryObjectuiv, glGetQueryObjectuiv, "glGetQueryObjectuiv" );
    if( dt.glGetQueryObjectuiv == NULL ) {
      dt.glGetQueryObjectuiv = missing_glGetQueryObjectuiv;
    }
    _getProcAddress( dt.glGetQueryiv, glGetQueryiv, "glGetQueryiv" );
    if( dt.glGetQueryiv == NULL ) {
      dt.glGetQueryiv = missing_glGetQueryiv;
    }
    _getProcAddress( dt.glIsBuffer, glIsBuffer, "glIsBuffer" );
    if( dt.glIsBuffer == NULL ) {
      dt.glIsBuffer = missing_glIsBuffer;
    }
    _getProcAddress( dt.glIsQuery, glIsQuery, "glIsQuery" );
    if( dt.glIsQuery == NULL ) {
      dt.glIsQuery = missing_glIsQuery;
    }
    _getProcAddress( dt.glMapBuffer, glMapBuffer, "glMapBuffer" );
    if( dt.glMapBuffer == NULL ) {
      dt.glMapBuffer = missing_glMapBuffer;
    }
    _getProcAddress( dt.glUnmapBuffer, glUnmapBuffer, "glUnmapBuffer" );
    if( dt.glUnmapBuffer == NULL ) {
      dt.glUnmapBuffer = missing_glUnmapBuffer;
    }

    // GL_VERSION_2_0

    _getProcAddress( dt.glAttachShader, glAttachShader, "glAttachShader" );
    if( dt.glAttachShader == NULL ) {
      dt.glAttachShader = missing_glAttachShader;
    }
    _getProcAddress( dt.glBindAttribLocation, glBindAttribLocation, "glBindAttribLocation" );
    if( dt.glBindAttribLocation == NULL ) {
      dt.glBindAttribLocation = missing_glBindAttribLocation;
    }
    _getProcAddress( dt.glBlendEquationSeparate, glBlendEquationSeparate, "glBlendEquationSeparate" );
    if( dt.glBlendEquationSeparate == NULL ) {
      dt.glBlendEquationSeparate = missing_glBlendEquationSeparate;
    }
    _getProcAddress( dt.glCompileShader, glCompileShader, "glCompileShader" );
    if( dt.glCompileShader == NULL ) {
      dt.glCompileShader = missing_glCompileShader;
    }
    _getProcAddress( dt.glCreateProgram, glCreateProgram, "glCreateProgram" );
    if( dt.glCreateProgram == NULL ) {
      dt.glCreateProgram = missing_glCreateProgram;
    }
    _getProcAddress( dt.glCreateShader, glCreateShader, "glCreateShader" );
    if( dt.glCreateShader == NULL ) {
      dt.glCreateShader = missing_glCreateShader;
    }
    _getProcAddress( dt.glDeleteProgram, glDeleteProgram, "glDeleteProgram" );
    if( dt.glDeleteProgram == NULL ) {
      dt.glDeleteProgram = missing_glDeleteProgram;
    }
    _getProcAddress( dt.glDeleteShader, glDeleteShader, "glDeleteShader" );
    if( dt.glDeleteShader == NULL ) {
      dt.glDeleteShader = missing_glDeleteShader;
    }
    _getProcAddress( dt.glDetachShader, glDetachShader, "glDetachShader" );
    if( dt.glDetachShader == NULL ) {
      dt.glDetachShader = missing_glDetachShader;
    }
    _getProcAddress( dt.glDisableVertexAttribArray, glDisableVertexAttribArray, "glDisableVertexAttribArray" );
    if( dt.glDisableVertexAttribArray == NULL ) {
      dt.glDisableVertexAttribArray = missing_glDisableVertexAttribArray;
    }
    _getProcAddress( dt.glDrawBuffers, glDrawBuffers, "glDrawBuffers" );
    if( dt.glDrawBuffers == NULL ) {
      dt.glDrawBuffers = missing_glDrawBuffers;
    }
    _getProcAddress( dt.glEnableVertexAttribArray, glEnableVertexAttribArray, "glEnableVertexAttribArray" );
    if( dt.glEnableVertexAttribArray == NULL ) {
      dt.glEnableVertexAttribArray = missing_glEnableVertexAttribArray;
    }
    _getProcAddress( dt.glGetActiveAttrib, glGetActiveAttrib, "glGetActiveAttrib" );
    if( dt.glGetActiveAttrib == NULL ) {
      dt.glGetActiveAttrib = missing_glGetActiveAttrib;
    }
    _getProcAddress( dt.glGetActiveUniform, glGetActiveUniform, "glGetActiveUniform" );
    if( dt.glGetActiveUniform == NULL ) {
      dt.glGetActiveUniform = missing_glGetActiveUniform;
    }
    _getProcAddress( dt.glGetAttachedShaders, glGetAttachedShaders, "glGetAttachedShaders" );
    if( dt.glGetAttachedShaders == NULL ) {
      dt.glGetAttachedShaders = missing_glGetAttachedShaders;
    }
    _getProcAddress( dt.glGetAttribLocation, glGetAttribLocation, "glGetAttribLocation" );
    if( dt.glGetAttribLocation == NULL ) {
      dt.glGetAttribLocation = missing_glGetAttribLocation;
    }
    _getProcAddress( dt.glGetProgramInfoLog, glGetProgramInfoLog, "glGetProgramInfoLog" );
    if( dt.glGetProgramInfoLog == NULL ) {
      dt.glGetProgramInfoLog = missing_glGetProgramInfoLog;
    }
    _getProcAddress( dt.glGetProgramiv, glGetProgramiv, "glGetProgramiv" );
    if( dt.glGetProgramiv == NULL ) {
      dt.glGetProgramiv = missing_glGetProgramiv;
    }
    _getProcAddress( dt.glGetShaderInfoLog, glGetShaderInfoLog, "glGetShaderInfoLog" );
    if( dt.glGetShaderInfoLog == NULL ) {
      dt.glGetShaderInfoLog = missing_glGetShaderInfoLog;
    }
    _getProcAddress( dt.glGetShaderSource, glGetShaderSource, "glGetShaderSource" );
    if( dt.glGetShaderSource == NULL ) {
      dt.glGetShaderSource = missing_glGetShaderSource;
    }
    _getProcAddress( dt.glGetShaderiv, glGetShaderiv, "glGetShaderiv" );
    if( dt.glGetShaderiv == NULL ) {
      dt.glGetShaderiv = missing_glGetShaderiv;
    }
    _getProcAddress( dt.glGetUniformLocation, glGetUniformLocation, "glGetUniformLocation" );
    if( dt.glGetUniformLocation == NULL ) {
      dt.glGetUniformLocation = missing_glGetUniformLocation;
    }
    _getProcAddress( dt.glGetUniformfv, glGetUniformfv, "glGetUniformfv" );
    if( dt.glGetUniformfv == NULL ) {
      dt.glGetUniformfv = missing_glGetUniformfv;
    }
    _getProcAddress( dt.glGetUniformiv, glGetUniformiv, "glGetUniformiv" );
    if( dt.glGetUniformiv == NULL ) {
      dt.glGetUniformiv = missing_glGetUniformiv;
    }
    _getProcAddress( dt.glGetVertexAttribPointerv, glGetVertexAttribPointerv, "glGetVertexAttribPointerv" );
    if( dt.glGetVertexAttribPointerv == NULL ) {
      dt.glGetVertexAttribPointerv = missing_glGetVertexAttribPointerv;
    }
    _getProcAddress( dt.glGetVertexAttribdv, glGetVertexAttribdv, "glGetVertexAttribdv" );
    if( dt.glGetVertexAttribdv == NULL ) {
      dt.glGetVertexAttribdv = missing_glGetVertexAttribdv;
    }
    _getProcAddress( dt.glGetVertexAttribfv, glGetVertexAttribfv, "glGetVertexAttribfv" );
    if( dt.glGetVertexAttribfv == NULL ) {
      dt.glGetVertexAttribfv = missing_glGetVertexAttribfv;
    }
    _getProcAddress( dt.glGetVertexAttribiv, glGetVertexAttribiv, "glGetVertexAttribiv" );
    if( dt.glGetVertexAttribiv == NULL ) {
      dt.glGetVertexAttribiv = missing_glGetVertexAttribiv;
    }
    _getProcAddress( dt.glIsProgram, glIsProgram, "glIsProgram" );
    if( dt.glIsProgram == NULL ) {
      dt.glIsProgram = missing_glIsProgram;
    }
    _getProcAddress( dt.glIsShader, glIsShader, "glIsShader" );
    if( dt.glIsShader == NULL ) {
      dt.glIsShader = missing_glIsShader;
    }
    _getProcAddress( dt.glLinkProgram, glLinkProgram, "glLinkProgram" );
    if( dt.glLinkProgram == NULL ) {
      dt.glLinkProgram = missing_glLinkProgram;
    }
    _getProcAddress( dt.glShaderSource, glShaderSource, "glShaderSource" );
    if( dt.glShaderSource == NULL ) {
      dt.glShaderSource = missing_glShaderSource;
    }
    _getProcAddress( dt.glStencilFuncSeparate, glStencilFuncSeparate, "glStencilFuncSeparate" );
    if( dt.glStencilFuncSeparate == NULL ) {
      dt.glStencilFuncSeparate = missing_glStencilFuncSeparate;
    }
    _getProcAddress( dt.glStencilMaskSeparate, glStencilMaskSeparate, "glStencilMaskSeparate" );
    if( dt.glStencilMaskSeparate == NULL ) {
      dt.glStencilMaskSeparate = missing_glStencilMaskSeparate;
    }
    _getProcAddress( dt.glStencilOpSeparate, glStencilOpSeparate, "glStencilOpSeparate" );
    if( dt.glStencilOpSeparate == NULL ) {
      dt.glStencilOpSeparate = missing_glStencilOpSeparate;
    }
    _getProcAddress( dt.glUniform1f, glUniform1f, "glUniform1f" );
    if( dt.glUniform1f == NULL ) {
      dt.glUniform1f = missing_glUniform1f;
    }
    _getProcAddress( dt.glUniform1fv, glUniform1fv, "glUniform1fv" );
    if( dt.glUniform1fv == NULL ) {
      dt.glUniform1fv = missing_glUniform1fv;
    }
    _getProcAddress( dt.glUniform1i, glUniform1i, "glUniform1i" );
    if( dt.glUniform1i == NULL ) {
      dt.glUniform1i = missing_glUniform1i;
    }
    _getProcAddress( dt.glUniform1iv, glUniform1iv, "glUniform1iv" );
    if( dt.glUniform1iv == NULL ) {
      dt.glUniform1iv = missing_glUniform1iv;
    }
    _getProcAddress( dt.glUniform2f, glUniform2f, "glUniform2f" );
    if( dt.glUniform2f == NULL ) {
      dt.glUniform2f = missing_glUniform2f;
    }
    _getProcAddress( dt.glUniform2fv, glUniform2fv, "glUniform2fv" );
    if( dt.glUniform2fv == NULL ) {
      dt.glUniform2fv = missing_glUniform2fv;
    }
    _getProcAddress( dt.glUniform2i, glUniform2i, "glUniform2i" );
    if( dt.glUniform2i == NULL ) {
      dt.glUniform2i = missing_glUniform2i;
    }
    _getProcAddress( dt.glUniform2iv, glUniform2iv, "glUniform2iv" );
    if( dt.glUniform2iv == NULL ) {
      dt.glUniform2iv = missing_glUniform2iv;
    }
    _getProcAddress( dt.glUniform3f, glUniform3f, "glUniform3f" );
    if( dt.glUniform3f == NULL ) {
      dt.glUniform3f = missing_glUniform3f;
    }
    _getProcAddress( dt.glUniform3fv, glUniform3fv, "glUniform3fv" );
    if( dt.glUniform3fv == NULL ) {
      dt.glUniform3fv = missing_glUniform3fv;
    }
    _getProcAddress( dt.glUniform3i, glUniform3i, "glUniform3i" );
    if( dt.glUniform3i == NULL ) {
      dt.glUniform3i = missing_glUniform3i;
    }
    _getProcAddress( dt.glUniform3iv, glUniform3iv, "glUniform3iv" );
    if( dt.glUniform3iv == NULL ) {
      dt.glUniform3iv = missing_glUniform3iv;
    }
    _getProcAddress( dt.glUniform4f, glUniform4f, "glUniform4f" );
    if( dt.glUniform4f == NULL ) {
      dt.glUniform4f = missing_glUniform4f;
    }
    _getProcAddress( dt.glUniform4fv, glUniform4fv, "glUniform4fv" );
    if( dt.glUniform4fv == NULL ) {
      dt.glUniform4fv = missing_glUniform4fv;
    }
    _getProcAddress( dt.glUniform4i, glUniform4i, "glUniform4i" );
    if( dt.glUniform4i == NULL ) {
      dt.glUniform4i = missing_glUniform4i;
    }
    _getProcAddress( dt.glUniform4iv, glUniform4iv, "glUniform4iv" );
    if( dt.glUniform4iv == NULL ) {
      dt.glUniform4iv = missing_glUniform4iv;
    }
    _getProcAddress( dt.glUniformMatrix2fv, glUniformMatrix2fv, "glUniformMatrix2fv" );
    if( dt.glUniformMatrix2fv == NULL ) {
      dt.glUniformMatrix2fv = missing_glUniformMatrix2fv;
    }
    _getProcAddress( dt.glUniformMatrix3fv, glUniformMatrix3fv, "glUniformMatrix3fv" );
    if( dt.glUniformMatrix3fv == NULL ) {
      dt.glUniformMatrix3fv = missing_glUniformMatrix3fv;
    }
    _getProcAddress( dt.glUniformMatrix4fv, glUniformMatrix4fv, "glUniformMatrix4fv" );
    if( dt.glUniformMatrix4fv == NULL ) {
      dt.glUniformMatrix4fv = missing_glUniformMatrix4fv;
    }
    _getProcAddress( dt.glUseProgram, glUseProgram, "glUseProgram" );
    if( dt.glUseProgram == NULL ) {
      dt.glUseProgram = missing_glUseProgram;
    }
    _getProcAddress( dt.glValidateProgram, glValidateProgram, "glValidateProgram" );
    if( dt.glValidateProgram == NULL ) {
      dt.glValidateProgram = missing_glValidateProgram;
    }
    _getProcAddress( dt.glVertexAttrib1d, glVertexAttrib1d, "glVertexAttrib1d" );
    if( dt.glVertexAttrib1d == NULL ) {
      dt.glVertexAttrib1d = missing_glVertexAttrib1d;
    }
    _getProcAddress( dt.glVertexAttrib1dv, glVertexAttrib1dv, "glVertexAttrib1dv" );
    if( dt.glVertexAttrib1dv == NULL ) {
      dt.glVertexAttrib1dv = missing_glVertexAttrib1dv;
    }
    _getProcAddress( dt.glVertexAttrib1f, glVertexAttrib1f, "glVertexAttrib1f" );
    if( dt.glVertexAttrib1f == NULL ) {
      dt.glVertexAttrib1f = missing_glVertexAttrib1f;
    }
    _getProcAddress( dt.glVertexAttrib1fv, glVertexAttrib1fv, "glVertexAttrib1fv" );
    if( dt.glVertexAttrib1fv == NULL ) {
      dt.glVertexAttrib1fv = missing_glVertexAttrib1fv;
    }
    _getProcAddress( dt.glVertexAttrib1s, glVertexAttrib1s, "glVertexAttrib1s" );
    if( dt.glVertexAttrib1s == NULL ) {
      dt.glVertexAttrib1s = missing_glVertexAttrib1s;
    }
    _getProcAddress( dt.glVertexAttrib1sv, glVertexAttrib1sv, "glVertexAttrib1sv" );
    if( dt.glVertexAttrib1sv == NULL ) {
      dt.glVertexAttrib1sv = missing_glVertexAttrib1sv;
    }
    _getProcAddress( dt.glVertexAttrib2d, glVertexAttrib2d, "glVertexAttrib2d" );
    if( dt.glVertexAttrib2d == NULL ) {
      dt.glVertexAttrib2d = missing_glVertexAttrib2d;
    }
    _getProcAddress( dt.glVertexAttrib2dv, glVertexAttrib2dv, "glVertexAttrib2dv" );
    if( dt.glVertexAttrib2dv == NULL ) {
      dt.glVertexAttrib2dv = missing_glVertexAttrib2dv;
    }
    _getProcAddress( dt.glVertexAttrib2f, glVertexAttrib2f, "glVertexAttrib2f" );
    if( dt.glVertexAttrib2f == NULL ) {
      dt.glVertexAttrib2f = missing_glVertexAttrib2f;
    }
    _getProcAddress( dt.glVertexAttrib2fv, glVertexAttrib2fv, "glVertexAttrib2fv" );
    if( dt.glVertexAttrib2fv == NULL ) {
      dt.glVertexAttrib2fv = missing_glVertexAttrib2fv;
    }
    _getProcAddress( dt.glVertexAttrib2s, glVertexAttrib2s, "glVertexAttrib2s" );
    if( dt.glVertexAttrib2s == NULL ) {
      dt.glVertexAttrib2s = missing_glVertexAttrib2s;
    }
    _getProcAddress( dt.glVertexAttrib2sv, glVertexAttrib2sv, "glVertexAttrib2sv" );
    if( dt.glVertexAttrib2sv == NULL ) {
      dt.glVertexAttrib2sv = missing_glVertexAttrib2sv;
    }
    _getProcAddress( dt.glVertexAttrib3d, glVertexAttrib3d, "glVertexAttrib3d" );
    if( dt.glVertexAttrib3d == NULL ) {
      dt.glVertexAttrib3d = missing_glVertexAttrib3d;
    }
    _getProcAddress( dt.glVertexAttrib3dv, glVertexAttrib3dv, "glVertexAttrib3dv" );
    if( dt.glVertexAttrib3dv == NULL ) {
      dt.glVertexAttrib3dv = missing_glVertexAttrib3dv;
    }
    _getProcAddress( dt.glVertexAttrib3f, glVertexAttrib3f, "glVertexAttrib3f" );
    if( dt.glVertexAttrib3f == NULL ) {
      dt.glVertexAttrib3f = missing_glVertexAttrib3f;
    }
    _getProcAddress( dt.glVertexAttrib3fv, glVertexAttrib3fv, "glVertexAttrib3fv" );
    if( dt.glVertexAttrib3fv == NULL ) {
      dt.glVertexAttrib3fv = missing_glVertexAttrib3fv;
    }
    _getProcAddress( dt.glVertexAttrib3s, glVertexAttrib3s, "glVertexAttrib3s" );
    if( dt.glVertexAttrib3s == NULL ) {
      dt.glVertexAttrib3s = missing_glVertexAttrib3s;
    }
    _getProcAddress( dt.glVertexAttrib3sv, glVertexAttrib3sv, "glVertexAttrib3sv" );
    if( dt.glVertexAttrib3sv == NULL ) {
      dt.glVertexAttrib3sv = missing_glVertexAttrib3sv;
    }
    _getProcAddress( dt.glVertexAttrib4Nbv, glVertexAttrib4Nbv, "glVertexAttrib4Nbv" );
    if( dt.glVertexAttrib4Nbv == NULL ) {
      dt.glVertexAttrib4Nbv = missing_glVertexAttrib4Nbv;
    }
    _getProcAddress( dt.glVertexAttrib4Niv, glVertexAttrib4Niv, "glVertexAttrib4Niv" );
    if( dt.glVertexAttrib4Niv == NULL ) {
      dt.glVertexAttrib4Niv = missing_glVertexAttrib4Niv;
    }
    _getProcAddress( dt.glVertexAttrib4Nsv, glVertexAttrib4Nsv, "glVertexAttrib4Nsv" );
    if( dt.glVertexAttrib4Nsv == NULL ) {
      dt.glVertexAttrib4Nsv = missing_glVertexAttrib4Nsv;
    }
    _getProcAddress( dt.glVertexAttrib4Nub, glVertexAttrib4Nub, "glVertexAttrib4Nub" );
    if( dt.glVertexAttrib4Nub == NULL ) {
      dt.glVertexAttrib4Nub = missing_glVertexAttrib4Nub;
    }
    _getProcAddress( dt.glVertexAttrib4Nubv, glVertexAttrib4Nubv, "glVertexAttrib4Nubv" );
    if( dt.glVertexAttrib4Nubv == NULL ) {
      dt.glVertexAttrib4Nubv = missing_glVertexAttrib4Nubv;
    }
    _getProcAddress( dt.glVertexAttrib4Nuiv, glVertexAttrib4Nuiv, "glVertexAttrib4Nuiv" );
    if( dt.glVertexAttrib4Nuiv == NULL ) {
      dt.glVertexAttrib4Nuiv = missing_glVertexAttrib4Nuiv;
    }
    _getProcAddress( dt.glVertexAttrib4Nusv, glVertexAttrib4Nusv, "glVertexAttrib4Nusv" );
    if( dt.glVertexAttrib4Nusv == NULL ) {
      dt.glVertexAttrib4Nusv = missing_glVertexAttrib4Nusv;
    }
    _getProcAddress( dt.glVertexAttrib4bv, glVertexAttrib4bv, "glVertexAttrib4bv" );
    if( dt.glVertexAttrib4bv == NULL ) {
      dt.glVertexAttrib4bv = missing_glVertexAttrib4bv;
    }
    _getProcAddress( dt.glVertexAttrib4d, glVertexAttrib4d, "glVertexAttrib4d" );
    if( dt.glVertexAttrib4d == NULL ) {
      dt.glVertexAttrib4d = missing_glVertexAttrib4d;
    }
    _getProcAddress( dt.glVertexAttrib4dv, glVertexAttrib4dv, "glVertexAttrib4dv" );
    if( dt.glVertexAttrib4dv == NULL ) {
      dt.glVertexAttrib4dv = missing_glVertexAttrib4dv;
    }
    _getProcAddress( dt.glVertexAttrib4f, glVertexAttrib4f, "glVertexAttrib4f" );
    if( dt.glVertexAttrib4f == NULL ) {
      dt.glVertexAttrib4f = missing_glVertexAttrib4f;
    }
    _getProcAddress( dt.glVertexAttrib4fv, glVertexAttrib4fv, "glVertexAttrib4fv" );
    if( dt.glVertexAttrib4fv == NULL ) {
      dt.glVertexAttrib4fv = missing_glVertexAttrib4fv;
    }
    _getProcAddress( dt.glVertexAttrib4iv, glVertexAttrib4iv, "glVertexAttrib4iv" );
    if( dt.glVertexAttrib4iv == NULL ) {
      dt.glVertexAttrib4iv = missing_glVertexAttrib4iv;
    }
    _getProcAddress( dt.glVertexAttrib4s, glVertexAttrib4s, "glVertexAttrib4s" );
    if( dt.glVertexAttrib4s == NULL ) {
      dt.glVertexAttrib4s = missing_glVertexAttrib4s;
    }
    _getProcAddress( dt.glVertexAttrib4sv, glVertexAttrib4sv, "glVertexAttrib4sv" );
    if( dt.glVertexAttrib4sv == NULL ) {
      dt.glVertexAttrib4sv = missing_glVertexAttrib4sv;
    }
    _getProcAddress( dt.glVertexAttrib4ubv, glVertexAttrib4ubv, "glVertexAttrib4ubv" );
    if( dt.glVertexAttrib4ubv == NULL ) {
      dt.glVertexAttrib4ubv = missing_glVertexAttrib4ubv;
    }
    _getProcAddress( dt.glVertexAttrib4uiv, glVertexAttrib4uiv, "glVertexAttrib4uiv" );
    if( dt.glVertexAttrib4uiv == NULL ) {
      dt.glVertexAttrib4uiv = missing_glVertexAttrib4uiv;
    }
    _getProcAddress( dt.glVertexAttrib4usv, glVertexAttrib4usv, "glVertexAttrib4usv" );
    if( dt.glVertexAttrib4usv == NULL ) {
      dt.glVertexAttrib4usv = missing_glVertexAttrib4usv;
    }
    _getProcAddress( dt.glVertexAttribPointer, glVertexAttribPointer, "glVertexAttribPointer" );
    if( dt.glVertexAttribPointer == NULL ) {
      dt.glVertexAttribPointer = missing_glVertexAttribPointer;
    }

    // GL_VERSION_2_1

    _getProcAddress( dt.glUniformMatrix2x3fv, glUniformMatrix2x3fv, "glUniformMatrix2x3fv" );
    if( dt.glUniformMatrix2x3fv == NULL ) {
      dt.glUniformMatrix2x3fv = missing_glUniformMatrix2x3fv;
    }
    _getProcAddress( dt.glUniformMatrix2x4fv, glUniformMatrix2x4fv, "glUniformMatrix2x4fv" );
    if( dt.glUniformMatrix2x4fv == NULL ) {
      dt.glUniformMatrix2x4fv = missing_glUniformMatrix2x4fv;
    }
    _getProcAddress( dt.glUniformMatrix3x2fv, glUniformMatrix3x2fv, "glUniformMatrix3x2fv" );
    if( dt.glUniformMatrix3x2fv == NULL ) {
      dt.glUniformMatrix3x2fv = missing_glUniformMatrix3x2fv;
    }
    _getProcAddress( dt.glUniformMatrix3x4fv, glUniformMatrix3x4fv, "glUniformMatrix3x4fv" );
    if( dt.glUniformMatrix3x4fv == NULL ) {
      dt.glUniformMatrix3x4fv = missing_glUniformMatrix3x4fv;
    }
    _getProcAddress( dt.glUniformMatrix4x2fv, glUniformMatrix4x2fv, "glUniformMatrix4x2fv" );
    if( dt.glUniformMatrix4x2fv == NULL ) {
      dt.glUniformMatrix4x2fv = missing_glUniformMatrix4x2fv;
    }
    _getProcAddress( dt.glUniformMatrix4x3fv, glUniformMatrix4x3fv, "glUniformMatrix4x3fv" );
    if( dt.glUniformMatrix4x3fv == NULL ) {
      dt.glUniformMatrix4x3fv = missing_glUniformMatrix4x3fv;
    }

    // GL_VERSION_3_0

    _getProcAddress( dt.glBeginConditionalRender, glBeginConditionalRender, "glBeginConditionalRender" );
    if( dt.glBeginConditionalRender == NULL ) {
      dt.glBeginConditionalRender = missing_glBeginConditionalRender;
    }
    _getProcAddress( dt.glBeginTransformFeedback, glBeginTransformFeedback, "glBeginTransformFeedback" );
    if( dt.glBeginTransformFeedback == NULL ) {
      dt.glBeginTransformFeedback = missing_glBeginTransformFeedback;
    }
    _getProcAddress( dt.glBindFragDataLocation, glBindFragDataLocation, "glBindFragDataLocation" );
    if( dt.glBindFragDataLocation == NULL ) {
      dt.glBindFragDataLocation = missing_glBindFragDataLocation;
    }
    _getProcAddress( dt.glClampColor, glClampColor, "glClampColor" );
    if( dt.glClampColor == NULL ) {
      dt.glClampColor = missing_glClampColor;
    }
    _getProcAddress( dt.glClearBufferfi, glClearBufferfi, "glClearBufferfi" );
    if( dt.glClearBufferfi == NULL ) {
      dt.glClearBufferfi = missing_glClearBufferfi;
    }
    _getProcAddress( dt.glClearBufferfv, glClearBufferfv, "glClearBufferfv" );
    if( dt.glClearBufferfv == NULL ) {
      dt.glClearBufferfv = missing_glClearBufferfv;
    }
    _getProcAddress( dt.glClearBufferiv, glClearBufferiv, "glClearBufferiv" );
    if( dt.glClearBufferiv == NULL ) {
      dt.glClearBufferiv = missing_glClearBufferiv;
    }
    _getProcAddress( dt.glClearBufferuiv, glClearBufferuiv, "glClearBufferuiv" );
    if( dt.glClearBufferuiv == NULL ) {
      dt.glClearBufferuiv = missing_glClearBufferuiv;
    }
    _getProcAddress( dt.glColorMaski, glColorMaski, "glColorMaski" );
    if( dt.glColorMaski == NULL ) {
      dt.glColorMaski = missing_glColorMaski;
    }
    _getProcAddress( dt.glDisablei, glDisablei, "glDisablei" );
    if( dt.glDisablei == NULL ) {
      dt.glDisablei = missing_glDisablei;
    }
    _getProcAddress( dt.glEnablei, glEnablei, "glEnablei" );
    if( dt.glEnablei == NULL ) {
      dt.glEnablei = missing_glEnablei;
    }
    _getProcAddress( dt.glEndConditionalRender, glEndConditionalRender, "glEndConditionalRender" );
    if( dt.glEndConditionalRender == NULL ) {
      dt.glEndConditionalRender = missing_glEndConditionalRender;
    }
    _getProcAddress( dt.glEndTransformFeedback, glEndTransformFeedback, "glEndTransformFeedback" );
    if( dt.glEndTransformFeedback == NULL ) {
      dt.glEndTransformFeedback = missing_glEndTransformFeedback;
    }
    _getProcAddress( dt.glGetBooleani_v, glGetBooleani_v, "glGetBooleani_v" );
    if( dt.glGetBooleani_v == NULL ) {
      dt.glGetBooleani_v = missing_glGetBooleani_v;
    }
    _getProcAddress( dt.glGetFragDataLocation, glGetFragDataLocation, "glGetFragDataLocation" );
    if( dt.glGetFragDataLocation == NULL ) {
      dt.glGetFragDataLocation = missing_glGetFragDataLocation;
    }
    _getProcAddress( dt.glGetStringi, glGetStringi, "glGetStringi" );
    if( dt.glGetStringi == NULL ) {
      dt.glGetStringi = missing_glGetStringi;
    }
    _getProcAddress( dt.glGetTexParameterIiv, glGetTexParameterIiv, "glGetTexParameterIiv" );
    if( dt.glGetTexParameterIiv == NULL ) {
      dt.glGetTexParameterIiv = missing_glGetTexParameterIiv;
    }
    _getProcAddress( dt.glGetTexParameterIuiv, glGetTexParameterIuiv, "glGetTexParameterIuiv" );
    if( dt.glGetTexParameterIuiv == NULL ) {
      dt.glGetTexParameterIuiv = missing_glGetTexParameterIuiv;
    }
    _getProcAddress( dt.glGetTransformFeedbackVarying, glGetTransformFeedbackVarying, "glGetTransformFeedbackVarying" );
    if( dt.glGetTransformFeedbackVarying == NULL ) {
      dt.glGetTransformFeedbackVarying = missing_glGetTransformFeedbackVarying;
    }
    _getProcAddress( dt.glGetUniformuiv, glGetUniformuiv, "glGetUniformuiv" );
    if( dt.glGetUniformuiv == NULL ) {
      dt.glGetUniformuiv = missing_glGetUniformuiv;
    }
    _getProcAddress( dt.glGetVertexAttribIiv, glGetVertexAttribIiv, "glGetVertexAttribIiv" );
    if( dt.glGetVertexAttribIiv == NULL ) {
      dt.glGetVertexAttribIiv = missing_glGetVertexAttribIiv;
    }
    _getProcAddress( dt.glGetVertexAttribIuiv, glGetVertexAttribIuiv, "glGetVertexAttribIuiv" );
    if( dt.glGetVertexAttribIuiv == NULL ) {
      dt.glGetVertexAttribIuiv = missing_glGetVertexAttribIuiv;
    }
    _getProcAddress( dt.glIsEnabledi, glIsEnabledi, "glIsEnabledi" );
    if( dt.glIsEnabledi == NULL ) {
      dt.glIsEnabledi = missing_glIsEnabledi;
    }
    _getProcAddress( dt.glTexParameterIiv, glTexParameterIiv, "glTexParameterIiv" );
    if( dt.glTexParameterIiv == NULL ) {
      dt.glTexParameterIiv = missing_glTexParameterIiv;
    }
    _getProcAddress( dt.glTexParameterIuiv, glTexParameterIuiv, "glTexParameterIuiv" );
    if( dt.glTexParameterIuiv == NULL ) {
      dt.glTexParameterIuiv = missing_glTexParameterIuiv;
    }
    _getProcAddress( dt.glTransformFeedbackVaryings, glTransformFeedbackVaryings, "glTransformFeedbackVaryings" );
    if( dt.glTransformFeedbackVaryings == NULL ) {
      dt.glTransformFeedbackVaryings = missing_glTransformFeedbackVaryings;
    }
    _getProcAddress( dt.glUniform1ui, glUniform1ui, "glUniform1ui" );
    if( dt.glUniform1ui == NULL ) {
      dt.glUniform1ui = missing_glUniform1ui;
    }
    _getProcAddress( dt.glUniform1uiv, glUniform1uiv, "glUniform1uiv" );
    if( dt.glUniform1uiv == NULL ) {
      dt.glUniform1uiv = missing_glUniform1uiv;
    }
    _getProcAddress( dt.glUniform2ui, glUniform2ui, "glUniform2ui" );
    if( dt.glUniform2ui == NULL ) {
      dt.glUniform2ui = missing_glUniform2ui;
    }
    _getProcAddress( dt.glUniform2uiv, glUniform2uiv, "glUniform2uiv" );
    if( dt.glUniform2uiv == NULL ) {
      dt.glUniform2uiv = missing_glUniform2uiv;
    }
    _getProcAddress( dt.glUniform3ui, glUniform3ui, "glUniform3ui" );
    if( dt.glUniform3ui == NULL ) {
      dt.glUniform3ui = missing_glUniform3ui;
    }
    _getProcAddress( dt.glUniform3uiv, glUniform3uiv, "glUniform3uiv" );
    if( dt.glUniform3uiv == NULL ) {
      dt.glUniform3uiv = missing_glUniform3uiv;
    }
    _getProcAddress( dt.glUniform4ui, glUniform4ui, "glUniform4ui" );
    if( dt.glUniform4ui == NULL ) {
      dt.glUniform4ui = missing_glUniform4ui;
    }
    _getProcAddress( dt.glUniform4uiv, glUniform4uiv, "glUniform4uiv" );
    if( dt.glUniform4uiv == NULL ) {
      dt.glUniform4uiv = missing_glUniform4uiv;
    }
    _getProcAddress( dt.glVertexAttribI1i, glVertexAttribI1i, "glVertexAttribI1i" );
    if( dt.glVertexAttribI1i == NULL ) {
      dt.glVertexAttribI1i = missing_glVertexAttribI1i;
    }
    _getProcAddress( dt.glVertexAttribI1iv, glVertexAttribI1iv, "glVertexAttribI1iv" );
    if( dt.glVertexAttribI1iv == NULL ) {
      dt.glVertexAttribI1iv = missing_glVertexAttribI1iv;
    }
    _getProcAddress( dt.glVertexAttribI1ui, glVertexAttribI1ui, "glVertexAttribI1ui" );
    if( dt.glVertexAttribI1ui == NULL ) {
      dt.glVertexAttribI1ui = missing_glVertexAttribI1ui;
    }
    _getProcAddress( dt.glVertexAttribI1uiv, glVertexAttribI1uiv, "glVertexAttribI1uiv" );
    if( dt.glVertexAttribI1uiv == NULL ) {
      dt.glVertexAttribI1uiv = missing_glVertexAttribI1uiv;
    }
    _getProcAddress( dt.glVertexAttribI2i, glVertexAttribI2i, "glVertexAttribI2i" );
    if( dt.glVertexAttribI2i == NULL ) {
      dt.glVertexAttribI2i = missing_glVertexAttribI2i;
    }
    _getProcAddress( dt.glVertexAttribI2iv, glVertexAttribI2iv, "glVertexAttribI2iv" );
    if( dt.glVertexAttribI2iv == NULL ) {
      dt.glVertexAttribI2iv = missing_glVertexAttribI2iv;
    }
    _getProcAddress( dt.glVertexAttribI2ui, glVertexAttribI2ui, "glVertexAttribI2ui" );
    if( dt.glVertexAttribI2ui == NULL ) {
      dt.glVertexAttribI2ui = missing_glVertexAttribI2ui;
    }
    _getProcAddress( dt.glVertexAttribI2uiv, glVertexAttribI2uiv, "glVertexAttribI2uiv" );
    if( dt.glVertexAttribI2uiv == NULL ) {
      dt.glVertexAttribI2uiv = missing_glVertexAttribI2uiv;
    }
    _getProcAddress( dt.glVertexAttribI3i, glVertexAttribI3i, "glVertexAttribI3i" );
    if( dt.glVertexAttribI3i == NULL ) {
      dt.glVertexAttribI3i = missing_glVertexAttribI3i;
    }
    _getProcAddress( dt.glVertexAttribI3iv, glVertexAttribI3iv, "glVertexAttribI3iv" );
    if( dt.glVertexAttribI3iv == NULL ) {
      dt.glVertexAttribI3iv = missing_glVertexAttribI3iv;
    }
    _getProcAddress( dt.glVertexAttribI3ui, glVertexAttribI3ui, "glVertexAttribI3ui" );
    if( dt.glVertexAttribI3ui == NULL ) {
      dt.glVertexAttribI3ui = missing_glVertexAttribI3ui;
    }
    _getProcAddress( dt.glVertexAttribI3uiv, glVertexAttribI3uiv, "glVertexAttribI3uiv" );
    if( dt.glVertexAttribI3uiv == NULL ) {
      dt.glVertexAttribI3uiv = missing_glVertexAttribI3uiv;
    }
    _getProcAddress( dt.glVertexAttribI4bv, glVertexAttribI4bv, "glVertexAttribI4bv" );
    if( dt.glVertexAttribI4bv == NULL ) {
      dt.glVertexAttribI4bv = missing_glVertexAttribI4bv;
    }
    _getProcAddress( dt.glVertexAttribI4i, glVertexAttribI4i, "glVertexAttribI4i" );
    if( dt.glVertexAttribI4i == NULL ) {
      dt.glVertexAttribI4i = missing_glVertexAttribI4i;
    }
    _getProcAddress( dt.glVertexAttribI4iv, glVertexAttribI4iv, "glVertexAttribI4iv" );
    if( dt.glVertexAttribI4iv == NULL ) {
      dt.glVertexAttribI4iv = missing_glVertexAttribI4iv;
    }
    _getProcAddress( dt.glVertexAttribI4sv, glVertexAttribI4sv, "glVertexAttribI4sv" );
    if( dt.glVertexAttribI4sv == NULL ) {
      dt.glVertexAttribI4sv = missing_glVertexAttribI4sv;
    }
    _getProcAddress( dt.glVertexAttribI4ubv, glVertexAttribI4ubv, "glVertexAttribI4ubv" );
    if( dt.glVertexAttribI4ubv == NULL ) {
      dt.glVertexAttribI4ubv = missing_glVertexAttribI4ubv;
    }
    _getProcAddress( dt.glVertexAttribI4ui, glVertexAttribI4ui, "glVertexAttribI4ui" );
    if( dt.glVertexAttribI4ui == NULL ) {
      dt.glVertexAttribI4ui = missing_glVertexAttribI4ui;
    }
    _getProcAddress( dt.glVertexAttribI4uiv, glVertexAttribI4uiv, "glVertexAttribI4uiv" );
    if( dt.glVertexAttribI4uiv == NULL ) {
      dt.glVertexAttribI4uiv = missing_glVertexAttribI4uiv;
    }
    _getProcAddress( dt.glVertexAttribI4usv, glVertexAttribI4usv, "glVertexAttribI4usv" );
    if( dt.glVertexAttribI4usv == NULL ) {
      dt.glVertexAttribI4usv = missing_glVertexAttribI4usv;
    }
    _getProcAddress( dt.glVertexAttribIPointer, glVertexAttribIPointer, "glVertexAttribIPointer" );
    if( dt.glVertexAttribIPointer == NULL ) {
      dt.glVertexAttribIPointer = missing_glVertexAttribIPointer;
    }

    // GL_VERSION_3_1

    _getProcAddress( dt.glDrawArraysInstanced, glDrawArraysInstanced, "glDrawArraysInstanced" );
    if( dt.glDrawArraysInstanced == NULL ) {
      dt.glDrawArraysInstanced = missing_glDrawArraysInstanced;
    }
    _getProcAddress( dt.glDrawElementsInstanced, glDrawElementsInstanced, "glDrawElementsInstanced" );
    if( dt.glDrawElementsInstanced == NULL ) {
      dt.glDrawElementsInstanced = missing_glDrawElementsInstanced;
    }
    _getProcAddress( dt.glPrimitiveRestartIndex, glPrimitiveRestartIndex, "glPrimitiveRestartIndex" );
    if( dt.glPrimitiveRestartIndex == NULL ) {
      dt.glPrimitiveRestartIndex = missing_glPrimitiveRestartIndex;
    }
    _getProcAddress( dt.glTexBuffer, glTexBuffer, "glTexBuffer" );
    if( dt.glTexBuffer == NULL ) {
      dt.glTexBuffer = missing_glTexBuffer;
    }

    // GL_VERSION_3_2

    _getProcAddress( dt.glFramebufferTexture, glFramebufferTexture, "glFramebufferTexture" );
    if( dt.glFramebufferTexture == NULL ) {
      dt.glFramebufferTexture = missing_glFramebufferTexture;
    }
    _getProcAddress( dt.glFramebufferTextureFace, glFramebufferTextureFace, "glFramebufferTextureFace" );
    if( dt.glFramebufferTextureFace == NULL ) {
      dt.glFramebufferTextureFace = missing_glFramebufferTextureFace;
    }
    _getProcAddress( dt.glGetBufferParameteri64v, glGetBufferParameteri64v, "glGetBufferParameteri64v" );
    if( dt.glGetBufferParameteri64v == NULL ) {
      dt.glGetBufferParameteri64v = missing_glGetBufferParameteri64v;
    }
    _getProcAddress( dt.glGetInteger64i_v, glGetInteger64i_v, "glGetInteger64i_v" );
    if( dt.glGetInteger64i_v == NULL ) {
      dt.glGetInteger64i_v = missing_glGetInteger64i_v;
    }

    // GL_VERSION_3_3

    _getProcAddress( dt.glVertexAttribDivisor, glVertexAttribDivisor, "glVertexAttribDivisor" );
    if( dt.glVertexAttribDivisor == NULL ) {
      dt.glVertexAttribDivisor = missing_glVertexAttribDivisor;
    }

    // GL_VERSION_4_0

    _getProcAddress( dt.glBlendEquationSeparatei, glBlendEquationSeparatei, "glBlendEquationSeparatei" );
    if( dt.glBlendEquationSeparatei == NULL ) {
      dt.glBlendEquationSeparatei = missing_glBlendEquationSeparatei;
    }
    _getProcAddress( dt.glBlendEquationi, glBlendEquationi, "glBlendEquationi" );
    if( dt.glBlendEquationi == NULL ) {
      dt.glBlendEquationi = missing_glBlendEquationi;
    }
    _getProcAddress( dt.glBlendFuncSeparatei, glBlendFuncSeparatei, "glBlendFuncSeparatei" );
    if( dt.glBlendFuncSeparatei == NULL ) {
      dt.glBlendFuncSeparatei = missing_glBlendFuncSeparatei;
    }
    _getProcAddress( dt.glBlendFunci, glBlendFunci, "glBlendFunci" );
    if( dt.glBlendFunci == NULL ) {
      dt.glBlendFunci = missing_glBlendFunci;
    }

    // GL_3DFX_tbuffer

    _getProcAddress( dt.glTbufferMask3DFX, glTbufferMask3DFX, "glTbufferMask3DFX" );
    if( dt.glTbufferMask3DFX == NULL ) {
      dt.glTbufferMask3DFX = missing_glTbufferMask3DFX;
    }

    // GL_AMD_debug_output

    _getProcAddress( dt.glDebugMessageCallbackAMD, glDebugMessageCallbackAMD, "glDebugMessageCallbackAMD" );
    if( dt.glDebugMessageCallbackAMD == NULL ) {
      dt.glDebugMessageCallbackAMD = missing_glDebugMessageCallbackAMD;
    }
    _getProcAddress( dt.glDebugMessageEnableAMD, glDebugMessageEnableAMD, "glDebugMessageEnableAMD" );
    if( dt.glDebugMessageEnableAMD == NULL ) {
      dt.glDebugMessageEnableAMD = missing_glDebugMessageEnableAMD;
    }
    _getProcAddress( dt.glDebugMessageInsertAMD, glDebugMessageInsertAMD, "glDebugMessageInsertAMD" );
    if( dt.glDebugMessageInsertAMD == NULL ) {
      dt.glDebugMessageInsertAMD = missing_glDebugMessageInsertAMD;
    }
    _getProcAddress( dt.glGetDebugMessageLogAMD, glGetDebugMessageLogAMD, "glGetDebugMessageLogAMD" );
    if( dt.glGetDebugMessageLogAMD == NULL ) {
      dt.glGetDebugMessageLogAMD = missing_glGetDebugMessageLogAMD;
    }

    // GL_AMD_draw_buffers_blend

    _getProcAddress( dt.glBlendEquationIndexedAMD, glBlendEquationIndexedAMD, "glBlendEquationIndexedAMD" );
    if( dt.glBlendEquationIndexedAMD == NULL ) {
      dt.glBlendEquationIndexedAMD = missing_glBlendEquationIndexedAMD;
    }
    _getProcAddress( dt.glBlendEquationSeparateIndexedAMD, glBlendEquationSeparateIndexedAMD, "glBlendEquationSeparateIndexedAMD" );
    if( dt.glBlendEquationSeparateIndexedAMD == NULL ) {
      dt.glBlendEquationSeparateIndexedAMD = missing_glBlendEquationSeparateIndexedAMD;
    }
    _getProcAddress( dt.glBlendFuncIndexedAMD, glBlendFuncIndexedAMD, "glBlendFuncIndexedAMD" );
    if( dt.glBlendFuncIndexedAMD == NULL ) {
      dt.glBlendFuncIndexedAMD = missing_glBlendFuncIndexedAMD;
    }
    _getProcAddress( dt.glBlendFuncSeparateIndexedAMD, glBlendFuncSeparateIndexedAMD, "glBlendFuncSeparateIndexedAMD" );
    if( dt.glBlendFuncSeparateIndexedAMD == NULL ) {
      dt.glBlendFuncSeparateIndexedAMD = missing_glBlendFuncSeparateIndexedAMD;
    }

    // GL_AMD_interleaved_elements

    _getProcAddress( dt.glVertexAttribParameteriAMD, glVertexAttribParameteriAMD, "glVertexAttribParameteriAMD" );
    if( dt.glVertexAttribParameteriAMD == NULL ) {
      dt.glVertexAttribParameteriAMD = missing_glVertexAttribParameteriAMD;
    }

    // GL_AMD_multi_draw_indirect

    _getProcAddress( dt.glMultiDrawArraysIndirectAMD, glMultiDrawArraysIndirectAMD, "glMultiDrawArraysIndirectAMD" );
    if( dt.glMultiDrawArraysIndirectAMD == NULL ) {
      dt.glMultiDrawArraysIndirectAMD = missing_glMultiDrawArraysIndirectAMD;
    }
    _getProcAddress( dt.glMultiDrawElementsIndirectAMD, glMultiDrawElementsIndirectAMD, "glMultiDrawElementsIndirectAMD" );
    if( dt.glMultiDrawElementsIndirectAMD == NULL ) {
      dt.glMultiDrawElementsIndirectAMD = missing_glMultiDrawElementsIndirectAMD;
    }

    // GL_AMD_name_gen_delete

    _getProcAddress( dt.glDeleteNamesAMD, glDeleteNamesAMD, "glDeleteNamesAMD" );
    if( dt.glDeleteNamesAMD == NULL ) {
      dt.glDeleteNamesAMD = missing_glDeleteNamesAMD;
    }
    _getProcAddress( dt.glGenNamesAMD, glGenNamesAMD, "glGenNamesAMD" );
    if( dt.glGenNamesAMD == NULL ) {
      dt.glGenNamesAMD = missing_glGenNamesAMD;
    }
    _getProcAddress( dt.glIsNameAMD, glIsNameAMD, "glIsNameAMD" );
    if( dt.glIsNameAMD == NULL ) {
      dt.glIsNameAMD = missing_glIsNameAMD;
    }

    // GL_AMD_performance_monitor

    _getProcAddress( dt.glBeginPerfMonitorAMD, glBeginPerfMonitorAMD, "glBeginPerfMonitorAMD" );
    if( dt.glBeginPerfMonitorAMD == NULL ) {
      dt.glBeginPerfMonitorAMD = missing_glBeginPerfMonitorAMD;
    }
    _getProcAddress( dt.glDeletePerfMonitorsAMD, glDeletePerfMonitorsAMD, "glDeletePerfMonitorsAMD" );
    if( dt.glDeletePerfMonitorsAMD == NULL ) {
      dt.glDeletePerfMonitorsAMD = missing_glDeletePerfMonitorsAMD;
    }
    _getProcAddress( dt.glEndPerfMonitorAMD, glEndPerfMonitorAMD, "glEndPerfMonitorAMD" );
    if( dt.glEndPerfMonitorAMD == NULL ) {
      dt.glEndPerfMonitorAMD = missing_glEndPerfMonitorAMD;
    }
    _getProcAddress( dt.glGenPerfMonitorsAMD, glGenPerfMonitorsAMD, "glGenPerfMonitorsAMD" );
    if( dt.glGenPerfMonitorsAMD == NULL ) {
      dt.glGenPerfMonitorsAMD = missing_glGenPerfMonitorsAMD;
    }
    _getProcAddress( dt.glGetPerfMonitorCounterDataAMD, glGetPerfMonitorCounterDataAMD, "glGetPerfMonitorCounterDataAMD" );
    if( dt.glGetPerfMonitorCounterDataAMD == NULL ) {
      dt.glGetPerfMonitorCounterDataAMD = missing_glGetPerfMonitorCounterDataAMD;
    }
    _getProcAddress( dt.glGetPerfMonitorCounterInfoAMD, glGetPerfMonitorCounterInfoAMD, "glGetPerfMonitorCounterInfoAMD" );
    if( dt.glGetPerfMonitorCounterInfoAMD == NULL ) {
      dt.glGetPerfMonitorCounterInfoAMD = missing_glGetPerfMonitorCounterInfoAMD;
    }
    _getProcAddress( dt.glGetPerfMonitorCounterStringAMD, glGetPerfMonitorCounterStringAMD, "glGetPerfMonitorCounterStringAMD" );
    if( dt.glGetPerfMonitorCounterStringAMD == NULL ) {
      dt.glGetPerfMonitorCounterStringAMD = missing_glGetPerfMonitorCounterStringAMD;
    }
    _getProcAddress( dt.glGetPerfMonitorCountersAMD, glGetPerfMonitorCountersAMD, "glGetPerfMonitorCountersAMD" );
    if( dt.glGetPerfMonitorCountersAMD == NULL ) {
      dt.glGetPerfMonitorCountersAMD = missing_glGetPerfMonitorCountersAMD;
    }
    _getProcAddress( dt.glGetPerfMonitorGroupStringAMD, glGetPerfMonitorGroupStringAMD, "glGetPerfMonitorGroupStringAMD" );
    if( dt.glGetPerfMonitorGroupStringAMD == NULL ) {
      dt.glGetPerfMonitorGroupStringAMD = missing_glGetPerfMonitorGroupStringAMD;
    }
    _getProcAddress( dt.glGetPerfMonitorGroupsAMD, glGetPerfMonitorGroupsAMD, "glGetPerfMonitorGroupsAMD" );
    if( dt.glGetPerfMonitorGroupsAMD == NULL ) {
      dt.glGetPerfMonitorGroupsAMD = missing_glGetPerfMonitorGroupsAMD;
    }
    _getProcAddress( dt.glSelectPerfMonitorCountersAMD, glSelectPerfMonitorCountersAMD, "glSelectPerfMonitorCountersAMD" );
    if( dt.glSelectPerfMonitorCountersAMD == NULL ) {
      dt.glSelectPerfMonitorCountersAMD = missing_glSelectPerfMonitorCountersAMD;
    }

    // GL_AMD_sample_positions

    _getProcAddress( dt.glSetMultisamplefvAMD, glSetMultisamplefvAMD, "glSetMultisamplefvAMD" );
    if( dt.glSetMultisamplefvAMD == NULL ) {
      dt.glSetMultisamplefvAMD = missing_glSetMultisamplefvAMD;
    }

    // GL_AMD_sparse_texture

    _getProcAddress( dt.glTexStorageSparseAMD, glTexStorageSparseAMD, "glTexStorageSparseAMD" );
    if( dt.glTexStorageSparseAMD == NULL ) {
      dt.glTexStorageSparseAMD = missing_glTexStorageSparseAMD;
    }
    _getProcAddress( dt.glTextureStorageSparseAMD, glTextureStorageSparseAMD, "glTextureStorageSparseAMD" );
    if( dt.glTextureStorageSparseAMD == NULL ) {
      dt.glTextureStorageSparseAMD = missing_glTextureStorageSparseAMD;
    }

    // GL_AMD_stencil_operation_extended

    _getProcAddress( dt.glStencilOpValueAMD, glStencilOpValueAMD, "glStencilOpValueAMD" );
    if( dt.glStencilOpValueAMD == NULL ) {
      dt.glStencilOpValueAMD = missing_glStencilOpValueAMD;
    }

    // GL_AMD_vertex_shader_tessellator

    _getProcAddress( dt.glTessellationFactorAMD, glTessellationFactorAMD, "glTessellationFactorAMD" );
    if( dt.glTessellationFactorAMD == NULL ) {
      dt.glTessellationFactorAMD = missing_glTessellationFactorAMD;
    }
    _getProcAddress( dt.glTessellationModeAMD, glTessellationModeAMD, "glTessellationModeAMD" );
    if( dt.glTessellationModeAMD == NULL ) {
      dt.glTessellationModeAMD = missing_glTessellationModeAMD;
    }

    // GL_ANGLE_framebuffer_blit

    _getProcAddress( dt.glBlitFramebufferANGLE, glBlitFramebufferANGLE, "glBlitFramebufferANGLE" );
    if( dt.glBlitFramebufferANGLE == NULL ) {
      dt.glBlitFramebufferANGLE = missing_glBlitFramebufferANGLE;
    }

    // GL_ANGLE_framebuffer_multisample

    _getProcAddress( dt.glRenderbufferStorageMultisampleANGLE, glRenderbufferStorageMultisampleANGLE, "glRenderbufferStorageMultisampleANGLE" );
    if( dt.glRenderbufferStorageMultisampleANGLE == NULL ) {
      dt.glRenderbufferStorageMultisampleANGLE = missing_glRenderbufferStorageMultisampleANGLE;
    }

    // GL_ANGLE_instanced_arrays

    _getProcAddress( dt.glDrawArraysInstancedANGLE, glDrawArraysInstancedANGLE, "glDrawArraysInstancedANGLE" );
    if( dt.glDrawArraysInstancedANGLE == NULL ) {
      dt.glDrawArraysInstancedANGLE = missing_glDrawArraysInstancedANGLE;
    }
    _getProcAddress( dt.glDrawElementsInstancedANGLE, glDrawElementsInstancedANGLE, "glDrawElementsInstancedANGLE" );
    if( dt.glDrawElementsInstancedANGLE == NULL ) {
      dt.glDrawElementsInstancedANGLE = missing_glDrawElementsInstancedANGLE;
    }
    _getProcAddress( dt.glVertexAttribDivisorANGLE, glVertexAttribDivisorANGLE, "glVertexAttribDivisorANGLE" );
    if( dt.glVertexAttribDivisorANGLE == NULL ) {
      dt.glVertexAttribDivisorANGLE = missing_glVertexAttribDivisorANGLE;
    }

    // GL_ANGLE_timer_query

    _getProcAddress( dt.glBeginQueryANGLE, glBeginQueryANGLE, "glBeginQueryANGLE" );
    if( dt.glBeginQueryANGLE == NULL ) {
      dt.glBeginQueryANGLE = missing_glBeginQueryANGLE;
    }
    _getProcAddress( dt.glDeleteQueriesANGLE, glDeleteQueriesANGLE, "glDeleteQueriesANGLE" );
    if( dt.glDeleteQueriesANGLE == NULL ) {
      dt.glDeleteQueriesANGLE = missing_glDeleteQueriesANGLE;
    }
    _getProcAddress( dt.glEndQueryANGLE, glEndQueryANGLE, "glEndQueryANGLE" );
    if( dt.glEndQueryANGLE == NULL ) {
      dt.glEndQueryANGLE = missing_glEndQueryANGLE;
    }
    _getProcAddress( dt.glGenQueriesANGLE, glGenQueriesANGLE, "glGenQueriesANGLE" );
    if( dt.glGenQueriesANGLE == NULL ) {
      dt.glGenQueriesANGLE = missing_glGenQueriesANGLE;
    }
    _getProcAddress( dt.glGetQueryObjecti64vANGLE, glGetQueryObjecti64vANGLE, "glGetQueryObjecti64vANGLE" );
    if( dt.glGetQueryObjecti64vANGLE == NULL ) {
      dt.glGetQueryObjecti64vANGLE = missing_glGetQueryObjecti64vANGLE;
    }
    _getProcAddress( dt.glGetQueryObjectivANGLE, glGetQueryObjectivANGLE, "glGetQueryObjectivANGLE" );
    if( dt.glGetQueryObjectivANGLE == NULL ) {
      dt.glGetQueryObjectivANGLE = missing_glGetQueryObjectivANGLE;
    }
    _getProcAddress( dt.glGetQueryObjectui64vANGLE, glGetQueryObjectui64vANGLE, "glGetQueryObjectui64vANGLE" );
    if( dt.glGetQueryObjectui64vANGLE == NULL ) {
      dt.glGetQueryObjectui64vANGLE = missing_glGetQueryObjectui64vANGLE;
    }
    _getProcAddress( dt.glGetQueryObjectuivANGLE, glGetQueryObjectuivANGLE, "glGetQueryObjectuivANGLE" );
    if( dt.glGetQueryObjectuivANGLE == NULL ) {
      dt.glGetQueryObjectuivANGLE = missing_glGetQueryObjectuivANGLE;
    }
    _getProcAddress( dt.glGetQueryivANGLE, glGetQueryivANGLE, "glGetQueryivANGLE" );
    if( dt.glGetQueryivANGLE == NULL ) {
      dt.glGetQueryivANGLE = missing_glGetQueryivANGLE;
    }
    _getProcAddress( dt.glIsQueryANGLE, glIsQueryANGLE, "glIsQueryANGLE" );
    if( dt.glIsQueryANGLE == NULL ) {
      dt.glIsQueryANGLE = missing_glIsQueryANGLE;
    }
    _getProcAddress( dt.glQueryCounterANGLE, glQueryCounterANGLE, "glQueryCounterANGLE" );
    if( dt.glQueryCounterANGLE == NULL ) {
      dt.glQueryCounterANGLE = missing_glQueryCounterANGLE;
    }

    // GL_ANGLE_translated_shader_source

    _getProcAddress( dt.glGetTranslatedShaderSourceANGLE, glGetTranslatedShaderSourceANGLE, "glGetTranslatedShaderSourceANGLE" );
    if( dt.glGetTranslatedShaderSourceANGLE == NULL ) {
      dt.glGetTranslatedShaderSourceANGLE = missing_glGetTranslatedShaderSourceANGLE;
    }

    // GL_APPLE_copy_texture_levels

    _getProcAddress( dt.glCopyTextureLevelsAPPLE, glCopyTextureLevelsAPPLE, "glCopyTextureLevelsAPPLE" );
    if( dt.glCopyTextureLevelsAPPLE == NULL ) {
      dt.glCopyTextureLevelsAPPLE = missing_glCopyTextureLevelsAPPLE;
    }

    // GL_APPLE_element_array

    _getProcAddress( dt.glDrawElementArrayAPPLE, glDrawElementArrayAPPLE, "glDrawElementArrayAPPLE" );
    if( dt.glDrawElementArrayAPPLE == NULL ) {
      dt.glDrawElementArrayAPPLE = missing_glDrawElementArrayAPPLE;
    }
    _getProcAddress( dt.glDrawRangeElementArrayAPPLE, glDrawRangeElementArrayAPPLE, "glDrawRangeElementArrayAPPLE" );
    if( dt.glDrawRangeElementArrayAPPLE == NULL ) {
      dt.glDrawRangeElementArrayAPPLE = missing_glDrawRangeElementArrayAPPLE;
    }
    _getProcAddress( dt.glElementPointerAPPLE, glElementPointerAPPLE, "glElementPointerAPPLE" );
    if( dt.glElementPointerAPPLE == NULL ) {
      dt.glElementPointerAPPLE = missing_glElementPointerAPPLE;
    }
    _getProcAddress( dt.glMultiDrawElementArrayAPPLE, glMultiDrawElementArrayAPPLE, "glMultiDrawElementArrayAPPLE" );
    if( dt.glMultiDrawElementArrayAPPLE == NULL ) {
      dt.glMultiDrawElementArrayAPPLE = missing_glMultiDrawElementArrayAPPLE;
    }
    _getProcAddress( dt.glMultiDrawRangeElementArrayAPPLE, glMultiDrawRangeElementArrayAPPLE, "glMultiDrawRangeElementArrayAPPLE" );
    if( dt.glMultiDrawRangeElementArrayAPPLE == NULL ) {
      dt.glMultiDrawRangeElementArrayAPPLE = missing_glMultiDrawRangeElementArrayAPPLE;
    }

    // GL_APPLE_fence

    _getProcAddress( dt.glDeleteFencesAPPLE, glDeleteFencesAPPLE, "glDeleteFencesAPPLE" );
    if( dt.glDeleteFencesAPPLE == NULL ) {
      dt.glDeleteFencesAPPLE = missing_glDeleteFencesAPPLE;
    }
    _getProcAddress( dt.glFinishFenceAPPLE, glFinishFenceAPPLE, "glFinishFenceAPPLE" );
    if( dt.glFinishFenceAPPLE == NULL ) {
      dt.glFinishFenceAPPLE = missing_glFinishFenceAPPLE;
    }
    _getProcAddress( dt.glFinishObjectAPPLE, glFinishObjectAPPLE, "glFinishObjectAPPLE" );
    if( dt.glFinishObjectAPPLE == NULL ) {
      dt.glFinishObjectAPPLE = missing_glFinishObjectAPPLE;
    }
    _getProcAddress( dt.glGenFencesAPPLE, glGenFencesAPPLE, "glGenFencesAPPLE" );
    if( dt.glGenFencesAPPLE == NULL ) {
      dt.glGenFencesAPPLE = missing_glGenFencesAPPLE;
    }
    _getProcAddress( dt.glIsFenceAPPLE, glIsFenceAPPLE, "glIsFenceAPPLE" );
    if( dt.glIsFenceAPPLE == NULL ) {
      dt.glIsFenceAPPLE = missing_glIsFenceAPPLE;
    }
    _getProcAddress( dt.glSetFenceAPPLE, glSetFenceAPPLE, "glSetFenceAPPLE" );
    if( dt.glSetFenceAPPLE == NULL ) {
      dt.glSetFenceAPPLE = missing_glSetFenceAPPLE;
    }
    _getProcAddress( dt.glTestFenceAPPLE, glTestFenceAPPLE, "glTestFenceAPPLE" );
    if( dt.glTestFenceAPPLE == NULL ) {
      dt.glTestFenceAPPLE = missing_glTestFenceAPPLE;
    }
    _getProcAddress( dt.glTestObjectAPPLE, glTestObjectAPPLE, "glTestObjectAPPLE" );
    if( dt.glTestObjectAPPLE == NULL ) {
      dt.glTestObjectAPPLE = missing_glTestObjectAPPLE;
    }

    // GL_APPLE_flush_buffer_range

    _getProcAddress( dt.glBufferParameteriAPPLE, glBufferParameteriAPPLE, "glBufferParameteriAPPLE" );
    if( dt.glBufferParameteriAPPLE == NULL ) {
      dt.glBufferParameteriAPPLE = missing_glBufferParameteriAPPLE;
    }
    _getProcAddress( dt.glFlushMappedBufferRangeAPPLE, glFlushMappedBufferRangeAPPLE, "glFlushMappedBufferRangeAPPLE" );
    if( dt.glFlushMappedBufferRangeAPPLE == NULL ) {
      dt.glFlushMappedBufferRangeAPPLE = missing_glFlushMappedBufferRangeAPPLE;
    }

    // GL_APPLE_flush_render

    _getProcAddress( dt.glFinishRenderAPPLE, glFinishRenderAPPLE, "glFinishRenderAPPLE" );
    if( dt.glFinishRenderAPPLE == NULL ) {
      dt.glFinishRenderAPPLE = missing_glFinishRenderAPPLE;
    }
    _getProcAddress( dt.glFlushRenderAPPLE, glFlushRenderAPPLE, "glFlushRenderAPPLE" );
    if( dt.glFlushRenderAPPLE == NULL ) {
      dt.glFlushRenderAPPLE = missing_glFlushRenderAPPLE;
    }
    _getProcAddress( dt.glSwapAPPLE, glSwapAPPLE, "glSwapAPPLE" );
    if( dt.glSwapAPPLE == NULL ) {
      dt.glSwapAPPLE = missing_glSwapAPPLE;
    }

    // GL_APPLE_framebuffer_multisample

    _getProcAddress( dt.glRenderbufferStorageMultisampleAPPLE, glRenderbufferStorageMultisampleAPPLE, "glRenderbufferStorageMultisampleAPPLE" );
    if( dt.glRenderbufferStorageMultisampleAPPLE == NULL ) {
      dt.glRenderbufferStorageMultisampleAPPLE = missing_glRenderbufferStorageMultisampleAPPLE;
    }
    _getProcAddress( dt.glResolveMultisampleFramebufferAPPLE, glResolveMultisampleFramebufferAPPLE, "glResolveMultisampleFramebufferAPPLE" );
    if( dt.glResolveMultisampleFramebufferAPPLE == NULL ) {
      dt.glResolveMultisampleFramebufferAPPLE = missing_glResolveMultisampleFramebufferAPPLE;
    }

    // GL_APPLE_object_purgeable

    _getProcAddress( dt.glGetObjectParameterivAPPLE, glGetObjectParameterivAPPLE, "glGetObjectParameterivAPPLE" );
    if( dt.glGetObjectParameterivAPPLE == NULL ) {
      dt.glGetObjectParameterivAPPLE = missing_glGetObjectParameterivAPPLE;
    }
    _getProcAddress( dt.glObjectPurgeableAPPLE, glObjectPurgeableAPPLE, "glObjectPurgeableAPPLE" );
    if( dt.glObjectPurgeableAPPLE == NULL ) {
      dt.glObjectPurgeableAPPLE = missing_glObjectPurgeableAPPLE;
    }
    _getProcAddress( dt.glObjectUnpurgeableAPPLE, glObjectUnpurgeableAPPLE, "glObjectUnpurgeableAPPLE" );
    if( dt.glObjectUnpurgeableAPPLE == NULL ) {
      dt.glObjectUnpurgeableAPPLE = missing_glObjectUnpurgeableAPPLE;
    }

    // GL_APPLE_sync

    _getProcAddress( dt.glClientWaitSyncAPPLE, glClientWaitSyncAPPLE, "glClientWaitSyncAPPLE" );
    if( dt.glClientWaitSyncAPPLE == NULL ) {
      dt.glClientWaitSyncAPPLE = missing_glClientWaitSyncAPPLE;
    }
    _getProcAddress( dt.glDeleteSyncAPPLE, glDeleteSyncAPPLE, "glDeleteSyncAPPLE" );
    if( dt.glDeleteSyncAPPLE == NULL ) {
      dt.glDeleteSyncAPPLE = missing_glDeleteSyncAPPLE;
    }
    _getProcAddress( dt.glFenceSyncAPPLE, glFenceSyncAPPLE, "glFenceSyncAPPLE" );
    if( dt.glFenceSyncAPPLE == NULL ) {
      dt.glFenceSyncAPPLE = missing_glFenceSyncAPPLE;
    }
    _getProcAddress( dt.glGetInteger64vAPPLE, glGetInteger64vAPPLE, "glGetInteger64vAPPLE" );
    if( dt.glGetInteger64vAPPLE == NULL ) {
      dt.glGetInteger64vAPPLE = missing_glGetInteger64vAPPLE;
    }
    _getProcAddress( dt.glGetSyncivAPPLE, glGetSyncivAPPLE, "glGetSyncivAPPLE" );
    if( dt.glGetSyncivAPPLE == NULL ) {
      dt.glGetSyncivAPPLE = missing_glGetSyncivAPPLE;
    }
    _getProcAddress( dt.glIsSyncAPPLE, glIsSyncAPPLE, "glIsSyncAPPLE" );
    if( dt.glIsSyncAPPLE == NULL ) {
      dt.glIsSyncAPPLE = missing_glIsSyncAPPLE;
    }
    _getProcAddress( dt.glWaitSyncAPPLE, glWaitSyncAPPLE, "glWaitSyncAPPLE" );
    if( dt.glWaitSyncAPPLE == NULL ) {
      dt.glWaitSyncAPPLE = missing_glWaitSyncAPPLE;
    }

    // GL_APPLE_texture_range

    _getProcAddress( dt.glGetTexParameterPointervAPPLE, glGetTexParameterPointervAPPLE, "glGetTexParameterPointervAPPLE" );
    if( dt.glGetTexParameterPointervAPPLE == NULL ) {
      dt.glGetTexParameterPointervAPPLE = missing_glGetTexParameterPointervAPPLE;
    }
    _getProcAddress( dt.glTextureRangeAPPLE, glTextureRangeAPPLE, "glTextureRangeAPPLE" );
    if( dt.glTextureRangeAPPLE == NULL ) {
      dt.glTextureRangeAPPLE = missing_glTextureRangeAPPLE;
    }

    // GL_APPLE_vertex_array_object

    _getProcAddress( dt.glBindVertexArrayAPPLE, glBindVertexArrayAPPLE, "glBindVertexArrayAPPLE" );
    if( dt.glBindVertexArrayAPPLE == NULL ) {
      dt.glBindVertexArrayAPPLE = missing_glBindVertexArrayAPPLE;
    }
    _getProcAddress( dt.glDeleteVertexArraysAPPLE, glDeleteVertexArraysAPPLE, "glDeleteVertexArraysAPPLE" );
    if( dt.glDeleteVertexArraysAPPLE == NULL ) {
      dt.glDeleteVertexArraysAPPLE = missing_glDeleteVertexArraysAPPLE;
    }
    _getProcAddress( dt.glGenVertexArraysAPPLE, glGenVertexArraysAPPLE, "glGenVertexArraysAPPLE" );
    if( dt.glGenVertexArraysAPPLE == NULL ) {
      dt.glGenVertexArraysAPPLE = missing_glGenVertexArraysAPPLE;
    }
    _getProcAddress( dt.glIsVertexArrayAPPLE, glIsVertexArrayAPPLE, "glIsVertexArrayAPPLE" );
    if( dt.glIsVertexArrayAPPLE == NULL ) {
      dt.glIsVertexArrayAPPLE = missing_glIsVertexArrayAPPLE;
    }

    // GL_APPLE_vertex_array_range

    _getProcAddress( dt.glFlushVertexArrayRangeAPPLE, glFlushVertexArrayRangeAPPLE, "glFlushVertexArrayRangeAPPLE" );
    if( dt.glFlushVertexArrayRangeAPPLE == NULL ) {
      dt.glFlushVertexArrayRangeAPPLE = missing_glFlushVertexArrayRangeAPPLE;
    }
    _getProcAddress( dt.glVertexArrayParameteriAPPLE, glVertexArrayParameteriAPPLE, "glVertexArrayParameteriAPPLE" );
    if( dt.glVertexArrayParameteriAPPLE == NULL ) {
      dt.glVertexArrayParameteriAPPLE = missing_glVertexArrayParameteriAPPLE;
    }
    _getProcAddress( dt.glVertexArrayRangeAPPLE, glVertexArrayRangeAPPLE, "glVertexArrayRangeAPPLE" );
    if( dt.glVertexArrayRangeAPPLE == NULL ) {
      dt.glVertexArrayRangeAPPLE = missing_glVertexArrayRangeAPPLE;
    }

    // GL_APPLE_vertex_program_evaluators

    _getProcAddress( dt.glDisableVertexAttribAPPLE, glDisableVertexAttribAPPLE, "glDisableVertexAttribAPPLE" );
    if( dt.glDisableVertexAttribAPPLE == NULL ) {
      dt.glDisableVertexAttribAPPLE = missing_glDisableVertexAttribAPPLE;
    }
    _getProcAddress( dt.glEnableVertexAttribAPPLE, glEnableVertexAttribAPPLE, "glEnableVertexAttribAPPLE" );
    if( dt.glEnableVertexAttribAPPLE == NULL ) {
      dt.glEnableVertexAttribAPPLE = missing_glEnableVertexAttribAPPLE;
    }
    _getProcAddress( dt.glIsVertexAttribEnabledAPPLE, glIsVertexAttribEnabledAPPLE, "glIsVertexAttribEnabledAPPLE" );
    if( dt.glIsVertexAttribEnabledAPPLE == NULL ) {
      dt.glIsVertexAttribEnabledAPPLE = missing_glIsVertexAttribEnabledAPPLE;
    }
    _getProcAddress( dt.glMapVertexAttrib1dAPPLE, glMapVertexAttrib1dAPPLE, "glMapVertexAttrib1dAPPLE" );
    if( dt.glMapVertexAttrib1dAPPLE == NULL ) {
      dt.glMapVertexAttrib1dAPPLE = missing_glMapVertexAttrib1dAPPLE;
    }
    _getProcAddress( dt.glMapVertexAttrib1fAPPLE, glMapVertexAttrib1fAPPLE, "glMapVertexAttrib1fAPPLE" );
    if( dt.glMapVertexAttrib1fAPPLE == NULL ) {
      dt.glMapVertexAttrib1fAPPLE = missing_glMapVertexAttrib1fAPPLE;
    }
    _getProcAddress( dt.glMapVertexAttrib2dAPPLE, glMapVertexAttrib2dAPPLE, "glMapVertexAttrib2dAPPLE" );
    if( dt.glMapVertexAttrib2dAPPLE == NULL ) {
      dt.glMapVertexAttrib2dAPPLE = missing_glMapVertexAttrib2dAPPLE;
    }
    _getProcAddress( dt.glMapVertexAttrib2fAPPLE, glMapVertexAttrib2fAPPLE, "glMapVertexAttrib2fAPPLE" );
    if( dt.glMapVertexAttrib2fAPPLE == NULL ) {
      dt.glMapVertexAttrib2fAPPLE = missing_glMapVertexAttrib2fAPPLE;
    }

    // GL_ARB_ES2_compatibility

    _getProcAddress( dt.glClearDepthf, glClearDepthf, "glClearDepthf" );
    if( dt.glClearDepthf == NULL ) {
      dt.glClearDepthf = missing_glClearDepthf;
    }
    _getProcAddress( dt.glDepthRangef, glDepthRangef, "glDepthRangef" );
    if( dt.glDepthRangef == NULL ) {
      dt.glDepthRangef = missing_glDepthRangef;
    }
    _getProcAddress( dt.glGetShaderPrecisionFormat, glGetShaderPrecisionFormat, "glGetShaderPrecisionFormat" );
    if( dt.glGetShaderPrecisionFormat == NULL ) {
      dt.glGetShaderPrecisionFormat = missing_glGetShaderPrecisionFormat;
    }
    _getProcAddress( dt.glReleaseShaderCompiler, glReleaseShaderCompiler, "glReleaseShaderCompiler" );
    if( dt.glReleaseShaderCompiler == NULL ) {
      dt.glReleaseShaderCompiler = missing_glReleaseShaderCompiler;
    }
    _getProcAddress( dt.glShaderBinary, glShaderBinary, "glShaderBinary" );
    if( dt.glShaderBinary == NULL ) {
      dt.glShaderBinary = missing_glShaderBinary;
    }

    // GL_ARB_base_instance

    _getProcAddress( dt.glDrawArraysInstancedBaseInstance, glDrawArraysInstancedBaseInstance, "glDrawArraysInstancedBaseInstance" );
    if( dt.glDrawArraysInstancedBaseInstance == NULL ) {
      dt.glDrawArraysInstancedBaseInstance = missing_glDrawArraysInstancedBaseInstance;
    }
    _getProcAddress( dt.glDrawElementsInstancedBaseInstance, glDrawElementsInstancedBaseInstance, "glDrawElementsInstancedBaseInstance" );
    if( dt.glDrawElementsInstancedBaseInstance == NULL ) {
      dt.glDrawElementsInstancedBaseInstance = missing_glDrawElementsInstancedBaseInstance;
    }
    _getProcAddress( dt.glDrawElementsInstancedBaseVertexBaseInstance, glDrawElementsInstancedBaseVertexBaseInstance, "glDrawElementsInstancedBaseVertexBaseInstance" );
    if( dt.glDrawElementsInstancedBaseVertexBaseInstance == NULL ) {
      dt.glDrawElementsInstancedBaseVertexBaseInstance = missing_glDrawElementsInstancedBaseVertexBaseInstance;
    }

    // GL_ARB_bindless_texture

    _getProcAddress( dt.glGetImageHandleARB, glGetImageHandleARB, "glGetImageHandleARB" );
    if( dt.glGetImageHandleARB == NULL ) {
      dt.glGetImageHandleARB = missing_glGetImageHandleARB;
    }
    _getProcAddress( dt.glGetTextureHandleARB, glGetTextureHandleARB, "glGetTextureHandleARB" );
    if( dt.glGetTextureHandleARB == NULL ) {
      dt.glGetTextureHandleARB = missing_glGetTextureHandleARB;
    }
    _getProcAddress( dt.glGetTextureSamplerHandleARB, glGetTextureSamplerHandleARB, "glGetTextureSamplerHandleARB" );
    if( dt.glGetTextureSamplerHandleARB == NULL ) {
      dt.glGetTextureSamplerHandleARB = missing_glGetTextureSamplerHandleARB;
    }
    _getProcAddress( dt.glGetVertexAttribLui64vARB, glGetVertexAttribLui64vARB, "glGetVertexAttribLui64vARB" );
    if( dt.glGetVertexAttribLui64vARB == NULL ) {
      dt.glGetVertexAttribLui64vARB = missing_glGetVertexAttribLui64vARB;
    }
    _getProcAddress( dt.glIsImageHandleResidentARB, glIsImageHandleResidentARB, "glIsImageHandleResidentARB" );
    if( dt.glIsImageHandleResidentARB == NULL ) {
      dt.glIsImageHandleResidentARB = missing_glIsImageHandleResidentARB;
    }
    _getProcAddress( dt.glIsTextureHandleResidentARB, glIsTextureHandleResidentARB, "glIsTextureHandleResidentARB" );
    if( dt.glIsTextureHandleResidentARB == NULL ) {
      dt.glIsTextureHandleResidentARB = missing_glIsTextureHandleResidentARB;
    }
    _getProcAddress( dt.glMakeImageHandleNonResidentARB, glMakeImageHandleNonResidentARB, "glMakeImageHandleNonResidentARB" );
    if( dt.glMakeImageHandleNonResidentARB == NULL ) {
      dt.glMakeImageHandleNonResidentARB = missing_glMakeImageHandleNonResidentARB;
    }
    _getProcAddress( dt.glMakeImageHandleResidentARB, glMakeImageHandleResidentARB, "glMakeImageHandleResidentARB" );
    if( dt.glMakeImageHandleResidentARB == NULL ) {
      dt.glMakeImageHandleResidentARB = missing_glMakeImageHandleResidentARB;
    }
    _getProcAddress( dt.glMakeTextureHandleNonResidentARB, glMakeTextureHandleNonResidentARB, "glMakeTextureHandleNonResidentARB" );
    if( dt.glMakeTextureHandleNonResidentARB == NULL ) {
      dt.glMakeTextureHandleNonResidentARB = missing_glMakeTextureHandleNonResidentARB;
    }
    _getProcAddress( dt.glMakeTextureHandleResidentARB, glMakeTextureHandleResidentARB, "glMakeTextureHandleResidentARB" );
    if( dt.glMakeTextureHandleResidentARB == NULL ) {
      dt.glMakeTextureHandleResidentARB = missing_glMakeTextureHandleResidentARB;
    }
    _getProcAddress( dt.glProgramUniformHandleui64ARB, glProgramUniformHandleui64ARB, "glProgramUniformHandleui64ARB" );
    if( dt.glProgramUniformHandleui64ARB == NULL ) {
      dt.glProgramUniformHandleui64ARB = missing_glProgramUniformHandleui64ARB;
    }
    _getProcAddress( dt.glProgramUniformHandleui64vARB, glProgramUniformHandleui64vARB, "glProgramUniformHandleui64vARB" );
    if( dt.glProgramUniformHandleui64vARB == NULL ) {
      dt.glProgramUniformHandleui64vARB = missing_glProgramUniformHandleui64vARB;
    }
    _getProcAddress( dt.glUniformHandleui64ARB, glUniformHandleui64ARB, "glUniformHandleui64ARB" );
    if( dt.glUniformHandleui64ARB == NULL ) {
      dt.glUniformHandleui64ARB = missing_glUniformHandleui64ARB;
    }
    _getProcAddress( dt.glUniformHandleui64vARB, glUniformHandleui64vARB, "glUniformHandleui64vARB" );
    if( dt.glUniformHandleui64vARB == NULL ) {
      dt.glUniformHandleui64vARB = missing_glUniformHandleui64vARB;
    }
    _getProcAddress( dt.glVertexAttribL1ui64ARB, glVertexAttribL1ui64ARB, "glVertexAttribL1ui64ARB" );
    if( dt.glVertexAttribL1ui64ARB == NULL ) {
      dt.glVertexAttribL1ui64ARB = missing_glVertexAttribL1ui64ARB;
    }
    _getProcAddress( dt.glVertexAttribL1ui64vARB, glVertexAttribL1ui64vARB, "glVertexAttribL1ui64vARB" );
    if( dt.glVertexAttribL1ui64vARB == NULL ) {
      dt.glVertexAttribL1ui64vARB = missing_glVertexAttribL1ui64vARB;
    }

    // GL_ARB_blend_func_extended

    _getProcAddress( dt.glBindFragDataLocationIndexed, glBindFragDataLocationIndexed, "glBindFragDataLocationIndexed" );
    if( dt.glBindFragDataLocationIndexed == NULL ) {
      dt.glBindFragDataLocationIndexed = missing_glBindFragDataLocationIndexed;
    }
    _getProcAddress( dt.glGetFragDataIndex, glGetFragDataIndex, "glGetFragDataIndex" );
    if( dt.glGetFragDataIndex == NULL ) {
      dt.glGetFragDataIndex = missing_glGetFragDataIndex;
    }

    // GL_ARB_buffer_storage

    _getProcAddress( dt.glBufferStorage, glBufferStorage, "glBufferStorage" );
    if( dt.glBufferStorage == NULL ) {
      dt.glBufferStorage = missing_glBufferStorage;
    }
    _getProcAddress( dt.glNamedBufferStorageEXT, glNamedBufferStorageEXT, "glNamedBufferStorageEXT" );
    if( dt.glNamedBufferStorageEXT == NULL ) {
      dt.glNamedBufferStorageEXT = missing_glNamedBufferStorageEXT;
    }

    // GL_ARB_cl_event

    _getProcAddress( dt.glCreateSyncFromCLeventARB, glCreateSyncFromCLeventARB, "glCreateSyncFromCLeventARB" );
    if( dt.glCreateSyncFromCLeventARB == NULL ) {
      dt.glCreateSyncFromCLeventARB = missing_glCreateSyncFromCLeventARB;
    }

    // GL_ARB_clear_buffer_object

    _getProcAddress( dt.glClearBufferData, glClearBufferData, "glClearBufferData" );
    if( dt.glClearBufferData == NULL ) {
      dt.glClearBufferData = missing_glClearBufferData;
    }
    _getProcAddress( dt.glClearBufferSubData, glClearBufferSubData, "glClearBufferSubData" );
    if( dt.glClearBufferSubData == NULL ) {
      dt.glClearBufferSubData = missing_glClearBufferSubData;
    }
    _getProcAddress( dt.glClearNamedBufferDataEXT, glClearNamedBufferDataEXT, "glClearNamedBufferDataEXT" );
    if( dt.glClearNamedBufferDataEXT == NULL ) {
      dt.glClearNamedBufferDataEXT = missing_glClearNamedBufferDataEXT;
    }
    _getProcAddress( dt.glClearNamedBufferSubDataEXT, glClearNamedBufferSubDataEXT, "glClearNamedBufferSubDataEXT" );
    if( dt.glClearNamedBufferSubDataEXT == NULL ) {
      dt.glClearNamedBufferSubDataEXT = missing_glClearNamedBufferSubDataEXT;
    }

    // GL_ARB_clear_texture

    _getProcAddress( dt.glClearTexImage, glClearTexImage, "glClearTexImage" );
    if( dt.glClearTexImage == NULL ) {
      dt.glClearTexImage = missing_glClearTexImage;
    }
    _getProcAddress( dt.glClearTexSubImage, glClearTexSubImage, "glClearTexSubImage" );
    if( dt.glClearTexSubImage == NULL ) {
      dt.glClearTexSubImage = missing_glClearTexSubImage;
    }

    // GL_ARB_color_buffer_float

    _getProcAddress( dt.glClampColorARB, glClampColorARB, "glClampColorARB" );
    if( dt.glClampColorARB == NULL ) {
      dt.glClampColorARB = missing_glClampColorARB;
    }

    // GL_ARB_compute_shader

    _getProcAddress( dt.glDispatchCompute, glDispatchCompute, "glDispatchCompute" );
    if( dt.glDispatchCompute == NULL ) {
      dt.glDispatchCompute = missing_glDispatchCompute;
    }
    _getProcAddress( dt.glDispatchComputeIndirect, glDispatchComputeIndirect, "glDispatchComputeIndirect" );
    if( dt.glDispatchComputeIndirect == NULL ) {
      dt.glDispatchComputeIndirect = missing_glDispatchComputeIndirect;
    }

    // GL_ARB_compute_variable_group_size

    _getProcAddress( dt.glDispatchComputeGroupSizeARB, glDispatchComputeGroupSizeARB, "glDispatchComputeGroupSizeARB" );
    if( dt.glDispatchComputeGroupSizeARB == NULL ) {
      dt.glDispatchComputeGroupSizeARB = missing_glDispatchComputeGroupSizeARB;
    }

    // GL_ARB_copy_buffer

    _getProcAddress( dt.glCopyBufferSubData, glCopyBufferSubData, "glCopyBufferSubData" );
    if( dt.glCopyBufferSubData == NULL ) {
      dt.glCopyBufferSubData = missing_glCopyBufferSubData;
    }

    // GL_ARB_copy_image

    _getProcAddress( dt.glCopyImageSubData, glCopyImageSubData, "glCopyImageSubData" );
    if( dt.glCopyImageSubData == NULL ) {
      dt.glCopyImageSubData = missing_glCopyImageSubData;
    }

    // GL_ARB_debug_output

    _getProcAddress( dt.glDebugMessageCallbackARB, glDebugMessageCallbackARB, "glDebugMessageCallbackARB" );
    if( dt.glDebugMessageCallbackARB == NULL ) {
      dt.glDebugMessageCallbackARB = missing_glDebugMessageCallbackARB;
    }
    _getProcAddress( dt.glDebugMessageControlARB, glDebugMessageControlARB, "glDebugMessageControlARB" );
    if( dt.glDebugMessageControlARB == NULL ) {
      dt.glDebugMessageControlARB = missing_glDebugMessageControlARB;
    }
    _getProcAddress( dt.glDebugMessageInsertARB, glDebugMessageInsertARB, "glDebugMessageInsertARB" );
    if( dt.glDebugMessageInsertARB == NULL ) {
      dt.glDebugMessageInsertARB = missing_glDebugMessageInsertARB;
    }
    _getProcAddress( dt.glGetDebugMessageLogARB, glGetDebugMessageLogARB, "glGetDebugMessageLogARB" );
    if( dt.glGetDebugMessageLogARB == NULL ) {
      dt.glGetDebugMessageLogARB = missing_glGetDebugMessageLogARB;
    }

    // GL_ARB_draw_buffers

    _getProcAddress( dt.glDrawBuffersARB, glDrawBuffersARB, "glDrawBuffersARB" );
    if( dt.glDrawBuffersARB == NULL ) {
      dt.glDrawBuffersARB = missing_glDrawBuffersARB;
    }

    // GL_ARB_draw_buffers_blend

    _getProcAddress( dt.glBlendEquationSeparateiARB, glBlendEquationSeparateiARB, "glBlendEquationSeparateiARB" );
    if( dt.glBlendEquationSeparateiARB == NULL ) {
      dt.glBlendEquationSeparateiARB = missing_glBlendEquationSeparateiARB;
    }
    _getProcAddress( dt.glBlendEquationiARB, glBlendEquationiARB, "glBlendEquationiARB" );
    if( dt.glBlendEquationiARB == NULL ) {
      dt.glBlendEquationiARB = missing_glBlendEquationiARB;
    }
    _getProcAddress( dt.glBlendFuncSeparateiARB, glBlendFuncSeparateiARB, "glBlendFuncSeparateiARB" );
    if( dt.glBlendFuncSeparateiARB == NULL ) {
      dt.glBlendFuncSeparateiARB = missing_glBlendFuncSeparateiARB;
    }
    _getProcAddress( dt.glBlendFunciARB, glBlendFunciARB, "glBlendFunciARB" );
    if( dt.glBlendFunciARB == NULL ) {
      dt.glBlendFunciARB = missing_glBlendFunciARB;
    }

    // GL_ARB_draw_elements_base_vertex

    _getProcAddress( dt.glDrawElementsBaseVertex, glDrawElementsBaseVertex, "glDrawElementsBaseVertex" );
    if( dt.glDrawElementsBaseVertex == NULL ) {
      dt.glDrawElementsBaseVertex = missing_glDrawElementsBaseVertex;
    }
    _getProcAddress( dt.glDrawElementsInstancedBaseVertex, glDrawElementsInstancedBaseVertex, "glDrawElementsInstancedBaseVertex" );
    if( dt.glDrawElementsInstancedBaseVertex == NULL ) {
      dt.glDrawElementsInstancedBaseVertex = missing_glDrawElementsInstancedBaseVertex;
    }
    _getProcAddress( dt.glDrawRangeElementsBaseVertex, glDrawRangeElementsBaseVertex, "glDrawRangeElementsBaseVertex" );
    if( dt.glDrawRangeElementsBaseVertex == NULL ) {
      dt.glDrawRangeElementsBaseVertex = missing_glDrawRangeElementsBaseVertex;
    }
    _getProcAddress( dt.glMultiDrawElementsBaseVertex, glMultiDrawElementsBaseVertex, "glMultiDrawElementsBaseVertex" );
    if( dt.glMultiDrawElementsBaseVertex == NULL ) {
      dt.glMultiDrawElementsBaseVertex = missing_glMultiDrawElementsBaseVertex;
    }

    // GL_ARB_draw_indirect

    _getProcAddress( dt.glDrawArraysIndirect, glDrawArraysIndirect, "glDrawArraysIndirect" );
    if( dt.glDrawArraysIndirect == NULL ) {
      dt.glDrawArraysIndirect = missing_glDrawArraysIndirect;
    }
    _getProcAddress( dt.glDrawElementsIndirect, glDrawElementsIndirect, "glDrawElementsIndirect" );
    if( dt.glDrawElementsIndirect == NULL ) {
      dt.glDrawElementsIndirect = missing_glDrawElementsIndirect;
    }

    // GL_ARB_draw_instanced

    _getProcAddress( dt.glDrawArraysInstancedARB, glDrawArraysInstancedARB, "glDrawArraysInstancedARB" );
    if( dt.glDrawArraysInstancedARB == NULL ) {
      dt.glDrawArraysInstancedARB = missing_glDrawArraysInstancedARB;
    }
    _getProcAddress( dt.glDrawElementsInstancedARB, glDrawElementsInstancedARB, "glDrawElementsInstancedARB" );
    if( dt.glDrawElementsInstancedARB == NULL ) {
      dt.glDrawElementsInstancedARB = missing_glDrawElementsInstancedARB;
    }

    // GL_ARB_framebuffer_no_attachments

    _getProcAddress( dt.glFramebufferParameteri, glFramebufferParameteri, "glFramebufferParameteri" );
    if( dt.glFramebufferParameteri == NULL ) {
      dt.glFramebufferParameteri = missing_glFramebufferParameteri;
    }
    _getProcAddress( dt.glGetFramebufferParameteriv, glGetFramebufferParameteriv, "glGetFramebufferParameteriv" );
    if( dt.glGetFramebufferParameteriv == NULL ) {
      dt.glGetFramebufferParameteriv = missing_glGetFramebufferParameteriv;
    }
    _getProcAddress( dt.glGetNamedFramebufferParameterivEXT, glGetNamedFramebufferParameterivEXT, "glGetNamedFramebufferParameterivEXT" );
    if( dt.glGetNamedFramebufferParameterivEXT == NULL ) {
      dt.glGetNamedFramebufferParameterivEXT = missing_glGetNamedFramebufferParameterivEXT;
    }
    _getProcAddress( dt.glNamedFramebufferParameteriEXT, glNamedFramebufferParameteriEXT, "glNamedFramebufferParameteriEXT" );
    if( dt.glNamedFramebufferParameteriEXT == NULL ) {
      dt.glNamedFramebufferParameteriEXT = missing_glNamedFramebufferParameteriEXT;
    }

    // GL_ARB_framebuffer_object

    _getProcAddress( dt.glBindFramebuffer, glBindFramebuffer, "glBindFramebuffer" );
    if( dt.glBindFramebuffer == NULL ) {
      dt.glBindFramebuffer = missing_glBindFramebuffer;
    }
    _getProcAddress( dt.glBindRenderbuffer, glBindRenderbuffer, "glBindRenderbuffer" );
    if( dt.glBindRenderbuffer == NULL ) {
      dt.glBindRenderbuffer = missing_glBindRenderbuffer;
    }
    _getProcAddress( dt.glBlitFramebuffer, glBlitFramebuffer, "glBlitFramebuffer" );
    if( dt.glBlitFramebuffer == NULL ) {
      dt.glBlitFramebuffer = missing_glBlitFramebuffer;
    }
    _getProcAddress( dt.glCheckFramebufferStatus, glCheckFramebufferStatus, "glCheckFramebufferStatus" );
    if( dt.glCheckFramebufferStatus == NULL ) {
      dt.glCheckFramebufferStatus = missing_glCheckFramebufferStatus;
    }
    _getProcAddress( dt.glDeleteFramebuffers, glDeleteFramebuffers, "glDeleteFramebuffers" );
    if( dt.glDeleteFramebuffers == NULL ) {
      dt.glDeleteFramebuffers = missing_glDeleteFramebuffers;
    }
    _getProcAddress( dt.glDeleteRenderbuffers, glDeleteRenderbuffers, "glDeleteRenderbuffers" );
    if( dt.glDeleteRenderbuffers == NULL ) {
      dt.glDeleteRenderbuffers = missing_glDeleteRenderbuffers;
    }
    _getProcAddress( dt.glFramebufferRenderbuffer, glFramebufferRenderbuffer, "glFramebufferRenderbuffer" );
    if( dt.glFramebufferRenderbuffer == NULL ) {
      dt.glFramebufferRenderbuffer = missing_glFramebufferRenderbuffer;
    }
    _getProcAddress( dt.glFramebufferTexture1D, glFramebufferTexture1D, "glFramebufferTexture1D" );
    if( dt.glFramebufferTexture1D == NULL ) {
      dt.glFramebufferTexture1D = missing_glFramebufferTexture1D;
    }
    _getProcAddress( dt.glFramebufferTexture2D, glFramebufferTexture2D, "glFramebufferTexture2D" );
    if( dt.glFramebufferTexture2D == NULL ) {
      dt.glFramebufferTexture2D = missing_glFramebufferTexture2D;
    }
    _getProcAddress( dt.glFramebufferTexture3D, glFramebufferTexture3D, "glFramebufferTexture3D" );
    if( dt.glFramebufferTexture3D == NULL ) {
      dt.glFramebufferTexture3D = missing_glFramebufferTexture3D;
    }
    _getProcAddress( dt.glFramebufferTextureLayer, glFramebufferTextureLayer, "glFramebufferTextureLayer" );
    if( dt.glFramebufferTextureLayer == NULL ) {
      dt.glFramebufferTextureLayer = missing_glFramebufferTextureLayer;
    }
    _getProcAddress( dt.glGenFramebuffers, glGenFramebuffers, "glGenFramebuffers" );
    if( dt.glGenFramebuffers == NULL ) {
      dt.glGenFramebuffers = missing_glGenFramebuffers;
    }
    _getProcAddress( dt.glGenRenderbuffers, glGenRenderbuffers, "glGenRenderbuffers" );
    if( dt.glGenRenderbuffers == NULL ) {
      dt.glGenRenderbuffers = missing_glGenRenderbuffers;
    }
    _getProcAddress( dt.glGenerateMipmap, glGenerateMipmap, "glGenerateMipmap" );
    if( dt.glGenerateMipmap == NULL ) {
      dt.glGenerateMipmap = missing_glGenerateMipmap;
    }
    _getProcAddress( dt.glGetFramebufferAttachmentParameteriv, glGetFramebufferAttachmentParameteriv, "glGetFramebufferAttachmentParameteriv" );
    if( dt.glGetFramebufferAttachmentParameteriv == NULL ) {
      dt.glGetFramebufferAttachmentParameteriv = missing_glGetFramebufferAttachmentParameteriv;
    }
    _getProcAddress( dt.glGetRenderbufferParameteriv, glGetRenderbufferParameteriv, "glGetRenderbufferParameteriv" );
    if( dt.glGetRenderbufferParameteriv == NULL ) {
      dt.glGetRenderbufferParameteriv = missing_glGetRenderbufferParameteriv;
    }
    _getProcAddress( dt.glIsFramebuffer, glIsFramebuffer, "glIsFramebuffer" );
    if( dt.glIsFramebuffer == NULL ) {
      dt.glIsFramebuffer = missing_glIsFramebuffer;
    }
    _getProcAddress( dt.glIsRenderbuffer, glIsRenderbuffer, "glIsRenderbuffer" );
    if( dt.glIsRenderbuffer == NULL ) {
      dt.glIsRenderbuffer = missing_glIsRenderbuffer;
    }
    _getProcAddress( dt.glRenderbufferStorage, glRenderbufferStorage, "glRenderbufferStorage" );
    if( dt.glRenderbufferStorage == NULL ) {
      dt.glRenderbufferStorage = missing_glRenderbufferStorage;
    }
    _getProcAddress( dt.glRenderbufferStorageMultisample, glRenderbufferStorageMultisample, "glRenderbufferStorageMultisample" );
    if( dt.glRenderbufferStorageMultisample == NULL ) {
      dt.glRenderbufferStorageMultisample = missing_glRenderbufferStorageMultisample;
    }

    // GL_ARB_geometry_shader4

    _getProcAddress( dt.glFramebufferTextureARB, glFramebufferTextureARB, "glFramebufferTextureARB" );
    if( dt.glFramebufferTextureARB == NULL ) {
      dt.glFramebufferTextureARB = missing_glFramebufferTextureARB;
    }
    _getProcAddress( dt.glFramebufferTextureFaceARB, glFramebufferTextureFaceARB, "glFramebufferTextureFaceARB" );
    if( dt.glFramebufferTextureFaceARB == NULL ) {
      dt.glFramebufferTextureFaceARB = missing_glFramebufferTextureFaceARB;
    }
    _getProcAddress( dt.glFramebufferTextureLayerARB, glFramebufferTextureLayerARB, "glFramebufferTextureLayerARB" );
    if( dt.glFramebufferTextureLayerARB == NULL ) {
      dt.glFramebufferTextureLayerARB = missing_glFramebufferTextureLayerARB;
    }
    _getProcAddress( dt.glProgramParameteriARB, glProgramParameteriARB, "glProgramParameteriARB" );
    if( dt.glProgramParameteriARB == NULL ) {
      dt.glProgramParameteriARB = missing_glProgramParameteriARB;
    }

    // GL_ARB_get_program_binary

    _getProcAddress( dt.glGetProgramBinary, glGetProgramBinary, "glGetProgramBinary" );
    if( dt.glGetProgramBinary == NULL ) {
      dt.glGetProgramBinary = missing_glGetProgramBinary;
    }
    _getProcAddress( dt.glProgramBinary, glProgramBinary, "glProgramBinary" );
    if( dt.glProgramBinary == NULL ) {
      dt.glProgramBinary = missing_glProgramBinary;
    }
    _getProcAddress( dt.glProgramParameteri, glProgramParameteri, "glProgramParameteri" );
    if( dt.glProgramParameteri == NULL ) {
      dt.glProgramParameteri = missing_glProgramParameteri;
    }

    // GL_ARB_gpu_shader_fp64

    _getProcAddress( dt.glGetUniformdv, glGetUniformdv, "glGetUniformdv" );
    if( dt.glGetUniformdv == NULL ) {
      dt.glGetUniformdv = missing_glGetUniformdv;
    }
    _getProcAddress( dt.glUniform1d, glUniform1d, "glUniform1d" );
    if( dt.glUniform1d == NULL ) {
      dt.glUniform1d = missing_glUniform1d;
    }
    _getProcAddress( dt.glUniform1dv, glUniform1dv, "glUniform1dv" );
    if( dt.glUniform1dv == NULL ) {
      dt.glUniform1dv = missing_glUniform1dv;
    }
    _getProcAddress( dt.glUniform2d, glUniform2d, "glUniform2d" );
    if( dt.glUniform2d == NULL ) {
      dt.glUniform2d = missing_glUniform2d;
    }
    _getProcAddress( dt.glUniform2dv, glUniform2dv, "glUniform2dv" );
    if( dt.glUniform2dv == NULL ) {
      dt.glUniform2dv = missing_glUniform2dv;
    }
    _getProcAddress( dt.glUniform3d, glUniform3d, "glUniform3d" );
    if( dt.glUniform3d == NULL ) {
      dt.glUniform3d = missing_glUniform3d;
    }
    _getProcAddress( dt.glUniform3dv, glUniform3dv, "glUniform3dv" );
    if( dt.glUniform3dv == NULL ) {
      dt.glUniform3dv = missing_glUniform3dv;
    }
    _getProcAddress( dt.glUniform4d, glUniform4d, "glUniform4d" );
    if( dt.glUniform4d == NULL ) {
      dt.glUniform4d = missing_glUniform4d;
    }
    _getProcAddress( dt.glUniform4dv, glUniform4dv, "glUniform4dv" );
    if( dt.glUniform4dv == NULL ) {
      dt.glUniform4dv = missing_glUniform4dv;
    }
    _getProcAddress( dt.glUniformMatrix2dv, glUniformMatrix2dv, "glUniformMatrix2dv" );
    if( dt.glUniformMatrix2dv == NULL ) {
      dt.glUniformMatrix2dv = missing_glUniformMatrix2dv;
    }
    _getProcAddress( dt.glUniformMatrix2x3dv, glUniformMatrix2x3dv, "glUniformMatrix2x3dv" );
    if( dt.glUniformMatrix2x3dv == NULL ) {
      dt.glUniformMatrix2x3dv = missing_glUniformMatrix2x3dv;
    }
    _getProcAddress( dt.glUniformMatrix2x4dv, glUniformMatrix2x4dv, "glUniformMatrix2x4dv" );
    if( dt.glUniformMatrix2x4dv == NULL ) {
      dt.glUniformMatrix2x4dv = missing_glUniformMatrix2x4dv;
    }
    _getProcAddress( dt.glUniformMatrix3dv, glUniformMatrix3dv, "glUniformMatrix3dv" );
    if( dt.glUniformMatrix3dv == NULL ) {
      dt.glUniformMatrix3dv = missing_glUniformMatrix3dv;
    }
    _getProcAddress( dt.glUniformMatrix3x2dv, glUniformMatrix3x2dv, "glUniformMatrix3x2dv" );
    if( dt.glUniformMatrix3x2dv == NULL ) {
      dt.glUniformMatrix3x2dv = missing_glUniformMatrix3x2dv;
    }
    _getProcAddress( dt.glUniformMatrix3x4dv, glUniformMatrix3x4dv, "glUniformMatrix3x4dv" );
    if( dt.glUniformMatrix3x4dv == NULL ) {
      dt.glUniformMatrix3x4dv = missing_glUniformMatrix3x4dv;
    }
    _getProcAddress( dt.glUniformMatrix4dv, glUniformMatrix4dv, "glUniformMatrix4dv" );
    if( dt.glUniformMatrix4dv == NULL ) {
      dt.glUniformMatrix4dv = missing_glUniformMatrix4dv;
    }
    _getProcAddress( dt.glUniformMatrix4x2dv, glUniformMatrix4x2dv, "glUniformMatrix4x2dv" );
    if( dt.glUniformMatrix4x2dv == NULL ) {
      dt.glUniformMatrix4x2dv = missing_glUniformMatrix4x2dv;
    }
    _getProcAddress( dt.glUniformMatrix4x3dv, glUniformMatrix4x3dv, "glUniformMatrix4x3dv" );
    if( dt.glUniformMatrix4x3dv == NULL ) {
      dt.glUniformMatrix4x3dv = missing_glUniformMatrix4x3dv;
    }

    // GL_ARB_imaging

    _getProcAddress( dt.glColorSubTable, glColorSubTable, "glColorSubTable" );
    if( dt.glColorSubTable == NULL ) {
      dt.glColorSubTable = missing_glColorSubTable;
    }
    _getProcAddress( dt.glColorTable, glColorTable, "glColorTable" );
    if( dt.glColorTable == NULL ) {
      dt.glColorTable = missing_glColorTable;
    }
    _getProcAddress( dt.glColorTableParameterfv, glColorTableParameterfv, "glColorTableParameterfv" );
    if( dt.glColorTableParameterfv == NULL ) {
      dt.glColorTableParameterfv = missing_glColorTableParameterfv;
    }
    _getProcAddress( dt.glColorTableParameteriv, glColorTableParameteriv, "glColorTableParameteriv" );
    if( dt.glColorTableParameteriv == NULL ) {
      dt.glColorTableParameteriv = missing_glColorTableParameteriv;
    }
    _getProcAddress( dt.glConvolutionFilter1D, glConvolutionFilter1D, "glConvolutionFilter1D" );
    if( dt.glConvolutionFilter1D == NULL ) {
      dt.glConvolutionFilter1D = missing_glConvolutionFilter1D;
    }
    _getProcAddress( dt.glConvolutionFilter2D, glConvolutionFilter2D, "glConvolutionFilter2D" );
    if( dt.glConvolutionFilter2D == NULL ) {
      dt.glConvolutionFilter2D = missing_glConvolutionFilter2D;
    }
    _getProcAddress( dt.glConvolutionParameterf, glConvolutionParameterf, "glConvolutionParameterf" );
    if( dt.glConvolutionParameterf == NULL ) {
      dt.glConvolutionParameterf = missing_glConvolutionParameterf;
    }
    _getProcAddress( dt.glConvolutionParameterfv, glConvolutionParameterfv, "glConvolutionParameterfv" );
    if( dt.glConvolutionParameterfv == NULL ) {
      dt.glConvolutionParameterfv = missing_glConvolutionParameterfv;
    }
    _getProcAddress( dt.glConvolutionParameteri, glConvolutionParameteri, "glConvolutionParameteri" );
    if( dt.glConvolutionParameteri == NULL ) {
      dt.glConvolutionParameteri = missing_glConvolutionParameteri;
    }
    _getProcAddress( dt.glConvolutionParameteriv, glConvolutionParameteriv, "glConvolutionParameteriv" );
    if( dt.glConvolutionParameteriv == NULL ) {
      dt.glConvolutionParameteriv = missing_glConvolutionParameteriv;
    }
    _getProcAddress( dt.glCopyColorSubTable, glCopyColorSubTable, "glCopyColorSubTable" );
    if( dt.glCopyColorSubTable == NULL ) {
      dt.glCopyColorSubTable = missing_glCopyColorSubTable;
    }
    _getProcAddress( dt.glCopyColorTable, glCopyColorTable, "glCopyColorTable" );
    if( dt.glCopyColorTable == NULL ) {
      dt.glCopyColorTable = missing_glCopyColorTable;
    }
    _getProcAddress( dt.glCopyConvolutionFilter1D, glCopyConvolutionFilter1D, "glCopyConvolutionFilter1D" );
    if( dt.glCopyConvolutionFilter1D == NULL ) {
      dt.glCopyConvolutionFilter1D = missing_glCopyConvolutionFilter1D;
    }
    _getProcAddress( dt.glCopyConvolutionFilter2D, glCopyConvolutionFilter2D, "glCopyConvolutionFilter2D" );
    if( dt.glCopyConvolutionFilter2D == NULL ) {
      dt.glCopyConvolutionFilter2D = missing_glCopyConvolutionFilter2D;
    }
    _getProcAddress( dt.glGetColorTable, glGetColorTable, "glGetColorTable" );
    if( dt.glGetColorTable == NULL ) {
      dt.glGetColorTable = missing_glGetColorTable;
    }
    _getProcAddress( dt.glGetColorTableParameterfv, glGetColorTableParameterfv, "glGetColorTableParameterfv" );
    if( dt.glGetColorTableParameterfv == NULL ) {
      dt.glGetColorTableParameterfv = missing_glGetColorTableParameterfv;
    }
    _getProcAddress( dt.glGetColorTableParameteriv, glGetColorTableParameteriv, "glGetColorTableParameteriv" );
    if( dt.glGetColorTableParameteriv == NULL ) {
      dt.glGetColorTableParameteriv = missing_glGetColorTableParameteriv;
    }
    _getProcAddress( dt.glGetConvolutionFilter, glGetConvolutionFilter, "glGetConvolutionFilter" );
    if( dt.glGetConvolutionFilter == NULL ) {
      dt.glGetConvolutionFilter = missing_glGetConvolutionFilter;
    }
    _getProcAddress( dt.glGetConvolutionParameterfv, glGetConvolutionParameterfv, "glGetConvolutionParameterfv" );
    if( dt.glGetConvolutionParameterfv == NULL ) {
      dt.glGetConvolutionParameterfv = missing_glGetConvolutionParameterfv;
    }
    _getProcAddress( dt.glGetConvolutionParameteriv, glGetConvolutionParameteriv, "glGetConvolutionParameteriv" );
    if( dt.glGetConvolutionParameteriv == NULL ) {
      dt.glGetConvolutionParameteriv = missing_glGetConvolutionParameteriv;
    }
    _getProcAddress( dt.glGetHistogram, glGetHistogram, "glGetHistogram" );
    if( dt.glGetHistogram == NULL ) {
      dt.glGetHistogram = missing_glGetHistogram;
    }
    _getProcAddress( dt.glGetHistogramParameterfv, glGetHistogramParameterfv, "glGetHistogramParameterfv" );
    if( dt.glGetHistogramParameterfv == NULL ) {
      dt.glGetHistogramParameterfv = missing_glGetHistogramParameterfv;
    }
    _getProcAddress( dt.glGetHistogramParameteriv, glGetHistogramParameteriv, "glGetHistogramParameteriv" );
    if( dt.glGetHistogramParameteriv == NULL ) {
      dt.glGetHistogramParameteriv = missing_glGetHistogramParameteriv;
    }
    _getProcAddress( dt.glGetMinmax, glGetMinmax, "glGetMinmax" );
    if( dt.glGetMinmax == NULL ) {
      dt.glGetMinmax = missing_glGetMinmax;
    }
    _getProcAddress( dt.glGetMinmaxParameterfv, glGetMinmaxParameterfv, "glGetMinmaxParameterfv" );
    if( dt.glGetMinmaxParameterfv == NULL ) {
      dt.glGetMinmaxParameterfv = missing_glGetMinmaxParameterfv;
    }
    _getProcAddress( dt.glGetMinmaxParameteriv, glGetMinmaxParameteriv, "glGetMinmaxParameteriv" );
    if( dt.glGetMinmaxParameteriv == NULL ) {
      dt.glGetMinmaxParameteriv = missing_glGetMinmaxParameteriv;
    }
    _getProcAddress( dt.glGetSeparableFilter, glGetSeparableFilter, "glGetSeparableFilter" );
    if( dt.glGetSeparableFilter == NULL ) {
      dt.glGetSeparableFilter = missing_glGetSeparableFilter;
    }
    _getProcAddress( dt.glHistogram, glHistogram, "glHistogram" );
    if( dt.glHistogram == NULL ) {
      dt.glHistogram = missing_glHistogram;
    }
    _getProcAddress( dt.glMinmax, glMinmax, "glMinmax" );
    if( dt.glMinmax == NULL ) {
      dt.glMinmax = missing_glMinmax;
    }
    _getProcAddress( dt.glResetHistogram, glResetHistogram, "glResetHistogram" );
    if( dt.glResetHistogram == NULL ) {
      dt.glResetHistogram = missing_glResetHistogram;
    }
    _getProcAddress( dt.glResetMinmax, glResetMinmax, "glResetMinmax" );
    if( dt.glResetMinmax == NULL ) {
      dt.glResetMinmax = missing_glResetMinmax;
    }
    _getProcAddress( dt.glSeparableFilter2D, glSeparableFilter2D, "glSeparableFilter2D" );
    if( dt.glSeparableFilter2D == NULL ) {
      dt.glSeparableFilter2D = missing_glSeparableFilter2D;
    }

    // GL_ARB_indirect_parameters

    _getProcAddress( dt.glMultiDrawArraysIndirectCountARB, glMultiDrawArraysIndirectCountARB, "glMultiDrawArraysIndirectCountARB" );
    if( dt.glMultiDrawArraysIndirectCountARB == NULL ) {
      dt.glMultiDrawArraysIndirectCountARB = missing_glMultiDrawArraysIndirectCountARB;
    }
    _getProcAddress( dt.glMultiDrawElementsIndirectCountARB, glMultiDrawElementsIndirectCountARB, "glMultiDrawElementsIndirectCountARB" );
    if( dt.glMultiDrawElementsIndirectCountARB == NULL ) {
      dt.glMultiDrawElementsIndirectCountARB = missing_glMultiDrawElementsIndirectCountARB;
    }

    // GL_ARB_instanced_arrays

    _getProcAddress( dt.glVertexAttribDivisorARB, glVertexAttribDivisorARB, "glVertexAttribDivisorARB" );
    if( dt.glVertexAttribDivisorARB == NULL ) {
      dt.glVertexAttribDivisorARB = missing_glVertexAttribDivisorARB;
    }

    // GL_ARB_internalformat_query

    _getProcAddress( dt.glGetInternalformativ, glGetInternalformativ, "glGetInternalformativ" );
    if( dt.glGetInternalformativ == NULL ) {
      dt.glGetInternalformativ = missing_glGetInternalformativ;
    }

    // GL_ARB_internalformat_query2

    _getProcAddress( dt.glGetInternalformati64v, glGetInternalformati64v, "glGetInternalformati64v" );
    if( dt.glGetInternalformati64v == NULL ) {
      dt.glGetInternalformati64v = missing_glGetInternalformati64v;
    }

    // GL_ARB_invalidate_subdata

    _getProcAddress( dt.glInvalidateBufferData, glInvalidateBufferData, "glInvalidateBufferData" );
    if( dt.glInvalidateBufferData == NULL ) {
      dt.glInvalidateBufferData = missing_glInvalidateBufferData;
    }
    _getProcAddress( dt.glInvalidateBufferSubData, glInvalidateBufferSubData, "glInvalidateBufferSubData" );
    if( dt.glInvalidateBufferSubData == NULL ) {
      dt.glInvalidateBufferSubData = missing_glInvalidateBufferSubData;
    }
    _getProcAddress( dt.glInvalidateFramebuffer, glInvalidateFramebuffer, "glInvalidateFramebuffer" );
    if( dt.glInvalidateFramebuffer == NULL ) {
      dt.glInvalidateFramebuffer = missing_glInvalidateFramebuffer;
    }
    _getProcAddress( dt.glInvalidateSubFramebuffer, glInvalidateSubFramebuffer, "glInvalidateSubFramebuffer" );
    if( dt.glInvalidateSubFramebuffer == NULL ) {
      dt.glInvalidateSubFramebuffer = missing_glInvalidateSubFramebuffer;
    }
    _getProcAddress( dt.glInvalidateTexImage, glInvalidateTexImage, "glInvalidateTexImage" );
    if( dt.glInvalidateTexImage == NULL ) {
      dt.glInvalidateTexImage = missing_glInvalidateTexImage;
    }
    _getProcAddress( dt.glInvalidateTexSubImage, glInvalidateTexSubImage, "glInvalidateTexSubImage" );
    if( dt.glInvalidateTexSubImage == NULL ) {
      dt.glInvalidateTexSubImage = missing_glInvalidateTexSubImage;
    }

    // GL_ARB_map_buffer_range

    _getProcAddress( dt.glFlushMappedBufferRange, glFlushMappedBufferRange, "glFlushMappedBufferRange" );
    if( dt.glFlushMappedBufferRange == NULL ) {
      dt.glFlushMappedBufferRange = missing_glFlushMappedBufferRange;
    }
    _getProcAddress( dt.glMapBufferRange, glMapBufferRange, "glMapBufferRange" );
    if( dt.glMapBufferRange == NULL ) {
      dt.glMapBufferRange = missing_glMapBufferRange;
    }

    // GL_ARB_matrix_palette

    _getProcAddress( dt.glCurrentPaletteMatrixARB, glCurrentPaletteMatrixARB, "glCurrentPaletteMatrixARB" );
    if( dt.glCurrentPaletteMatrixARB == NULL ) {
      dt.glCurrentPaletteMatrixARB = missing_glCurrentPaletteMatrixARB;
    }
    _getProcAddress( dt.glMatrixIndexPointerARB, glMatrixIndexPointerARB, "glMatrixIndexPointerARB" );
    if( dt.glMatrixIndexPointerARB == NULL ) {
      dt.glMatrixIndexPointerARB = missing_glMatrixIndexPointerARB;
    }
    _getProcAddress( dt.glMatrixIndexubvARB, glMatrixIndexubvARB, "glMatrixIndexubvARB" );
    if( dt.glMatrixIndexubvARB == NULL ) {
      dt.glMatrixIndexubvARB = missing_glMatrixIndexubvARB;
    }
    _getProcAddress( dt.glMatrixIndexuivARB, glMatrixIndexuivARB, "glMatrixIndexuivARB" );
    if( dt.glMatrixIndexuivARB == NULL ) {
      dt.glMatrixIndexuivARB = missing_glMatrixIndexuivARB;
    }
    _getProcAddress( dt.glMatrixIndexusvARB, glMatrixIndexusvARB, "glMatrixIndexusvARB" );
    if( dt.glMatrixIndexusvARB == NULL ) {
      dt.glMatrixIndexusvARB = missing_glMatrixIndexusvARB;
    }

    // GL_ARB_multi_bind

    _getProcAddress( dt.glBindBuffersBase, glBindBuffersBase, "glBindBuffersBase" );
    if( dt.glBindBuffersBase == NULL ) {
      dt.glBindBuffersBase = missing_glBindBuffersBase;
    }
    _getProcAddress( dt.glBindBuffersRange, glBindBuffersRange, "glBindBuffersRange" );
    if( dt.glBindBuffersRange == NULL ) {
      dt.glBindBuffersRange = missing_glBindBuffersRange;
    }
    _getProcAddress( dt.glBindImageTextures, glBindImageTextures, "glBindImageTextures" );
    if( dt.glBindImageTextures == NULL ) {
      dt.glBindImageTextures = missing_glBindImageTextures;
    }
    _getProcAddress( dt.glBindSamplers, glBindSamplers, "glBindSamplers" );
    if( dt.glBindSamplers == NULL ) {
      dt.glBindSamplers = missing_glBindSamplers;
    }
    _getProcAddress( dt.glBindTextures, glBindTextures, "glBindTextures" );
    if( dt.glBindTextures == NULL ) {
      dt.glBindTextures = missing_glBindTextures;
    }
    _getProcAddress( dt.glBindVertexBuffers, glBindVertexBuffers, "glBindVertexBuffers" );
    if( dt.glBindVertexBuffers == NULL ) {
      dt.glBindVertexBuffers = missing_glBindVertexBuffers;
    }

    // GL_ARB_multi_draw_indirect

    _getProcAddress( dt.glMultiDrawArraysIndirect, glMultiDrawArraysIndirect, "glMultiDrawArraysIndirect" );
    if( dt.glMultiDrawArraysIndirect == NULL ) {
      dt.glMultiDrawArraysIndirect = missing_glMultiDrawArraysIndirect;
    }
    _getProcAddress( dt.glMultiDrawElementsIndirect, glMultiDrawElementsIndirect, "glMultiDrawElementsIndirect" );
    if( dt.glMultiDrawElementsIndirect == NULL ) {
      dt.glMultiDrawElementsIndirect = missing_glMultiDrawElementsIndirect;
    }

    // GL_ARB_multisample

    _getProcAddress( dt.glSampleCoverageARB, glSampleCoverageARB, "glSampleCoverageARB" );
    if( dt.glSampleCoverageARB == NULL ) {
      dt.glSampleCoverageARB = missing_glSampleCoverageARB;
    }

    // GL_ARB_multitexture

    _getProcAddress( dt.glActiveTextureARB, glActiveTextureARB, "glActiveTextureARB" );
    if( dt.glActiveTextureARB == NULL ) {
      dt.glActiveTextureARB = missing_glActiveTextureARB;
    }
    _getProcAddress( dt.glClientActiveTextureARB, glClientActiveTextureARB, "glClientActiveTextureARB" );
    if( dt.glClientActiveTextureARB == NULL ) {
      dt.glClientActiveTextureARB = missing_glClientActiveTextureARB;
    }
    _getProcAddress( dt.glMultiTexCoord1dARB, glMultiTexCoord1dARB, "glMultiTexCoord1dARB" );
    if( dt.glMultiTexCoord1dARB == NULL ) {
      dt.glMultiTexCoord1dARB = missing_glMultiTexCoord1dARB;
    }
    _getProcAddress( dt.glMultiTexCoord1dvARB, glMultiTexCoord1dvARB, "glMultiTexCoord1dvARB" );
    if( dt.glMultiTexCoord1dvARB == NULL ) {
      dt.glMultiTexCoord1dvARB = missing_glMultiTexCoord1dvARB;
    }
    _getProcAddress( dt.glMultiTexCoord1fARB, glMultiTexCoord1fARB, "glMultiTexCoord1fARB" );
    if( dt.glMultiTexCoord1fARB == NULL ) {
      dt.glMultiTexCoord1fARB = missing_glMultiTexCoord1fARB;
    }
    _getProcAddress( dt.glMultiTexCoord1fvARB, glMultiTexCoord1fvARB, "glMultiTexCoord1fvARB" );
    if( dt.glMultiTexCoord1fvARB == NULL ) {
      dt.glMultiTexCoord1fvARB = missing_glMultiTexCoord1fvARB;
    }
    _getProcAddress( dt.glMultiTexCoord1iARB, glMultiTexCoord1iARB, "glMultiTexCoord1iARB" );
    if( dt.glMultiTexCoord1iARB == NULL ) {
      dt.glMultiTexCoord1iARB = missing_glMultiTexCoord1iARB;
    }
    _getProcAddress( dt.glMultiTexCoord1ivARB, glMultiTexCoord1ivARB, "glMultiTexCoord1ivARB" );
    if( dt.glMultiTexCoord1ivARB == NULL ) {
      dt.glMultiTexCoord1ivARB = missing_glMultiTexCoord1ivARB;
    }
    _getProcAddress( dt.glMultiTexCoord1sARB, glMultiTexCoord1sARB, "glMultiTexCoord1sARB" );
    if( dt.glMultiTexCoord1sARB == NULL ) {
      dt.glMultiTexCoord1sARB = missing_glMultiTexCoord1sARB;
    }
    _getProcAddress( dt.glMultiTexCoord1svARB, glMultiTexCoord1svARB, "glMultiTexCoord1svARB" );
    if( dt.glMultiTexCoord1svARB == NULL ) {
      dt.glMultiTexCoord1svARB = missing_glMultiTexCoord1svARB;
    }
    _getProcAddress( dt.glMultiTexCoord2dARB, glMultiTexCoord2dARB, "glMultiTexCoord2dARB" );
    if( dt.glMultiTexCoord2dARB == NULL ) {
      dt.glMultiTexCoord2dARB = missing_glMultiTexCoord2dARB;
    }
    _getProcAddress( dt.glMultiTexCoord2dvARB, glMultiTexCoord2dvARB, "glMultiTexCoord2dvARB" );
    if( dt.glMultiTexCoord2dvARB == NULL ) {
      dt.glMultiTexCoord2dvARB = missing_glMultiTexCoord2dvARB;
    }
    _getProcAddress( dt.glMultiTexCoord2fARB, glMultiTexCoord2fARB, "glMultiTexCoord2fARB" );
    if( dt.glMultiTexCoord2fARB == NULL ) {
      dt.glMultiTexCoord2fARB = missing_glMultiTexCoord2fARB;
    }
    _getProcAddress( dt.glMultiTexCoord2fvARB, glMultiTexCoord2fvARB, "glMultiTexCoord2fvARB" );
    if( dt.glMultiTexCoord2fvARB == NULL ) {
      dt.glMultiTexCoord2fvARB = missing_glMultiTexCoord2fvARB;
    }
    _getProcAddress( dt.glMultiTexCoord2iARB, glMultiTexCoord2iARB, "glMultiTexCoord2iARB" );
    if( dt.glMultiTexCoord2iARB == NULL ) {
      dt.glMultiTexCoord2iARB = missing_glMultiTexCoord2iARB;
    }
    _getProcAddress( dt.glMultiTexCoord2ivARB, glMultiTexCoord2ivARB, "glMultiTexCoord2ivARB" );
    if( dt.glMultiTexCoord2ivARB == NULL ) {
      dt.glMultiTexCoord2ivARB = missing_glMultiTexCoord2ivARB;
    }
    _getProcAddress( dt.glMultiTexCoord2sARB, glMultiTexCoord2sARB, "glMultiTexCoord2sARB" );
    if( dt.glMultiTexCoord2sARB == NULL ) {
      dt.glMultiTexCoord2sARB = missing_glMultiTexCoord2sARB;
    }
    _getProcAddress( dt.glMultiTexCoord2svARB, glMultiTexCoord2svARB, "glMultiTexCoord2svARB" );
    if( dt.glMultiTexCoord2svARB == NULL ) {
      dt.glMultiTexCoord2svARB = missing_glMultiTexCoord2svARB;
    }
    _getProcAddress( dt.glMultiTexCoord3dARB, glMultiTexCoord3dARB, "glMultiTexCoord3dARB" );
    if( dt.glMultiTexCoord3dARB == NULL ) {
      dt.glMultiTexCoord3dARB = missing_glMultiTexCoord3dARB;
    }
    _getProcAddress( dt.glMultiTexCoord3dvARB, glMultiTexCoord3dvARB, "glMultiTexCoord3dvARB" );
    if( dt.glMultiTexCoord3dvARB == NULL ) {
      dt.glMultiTexCoord3dvARB = missing_glMultiTexCoord3dvARB;
    }
    _getProcAddress( dt.glMultiTexCoord3fARB, glMultiTexCoord3fARB, "glMultiTexCoord3fARB" );
    if( dt.glMultiTexCoord3fARB == NULL ) {
      dt.glMultiTexCoord3fARB = missing_glMultiTexCoord3fARB;
    }
    _getProcAddress( dt.glMultiTexCoord3fvARB, glMultiTexCoord3fvARB, "glMultiTexCoord3fvARB" );
    if( dt.glMultiTexCoord3fvARB == NULL ) {
      dt.glMultiTexCoord3fvARB = missing_glMultiTexCoord3fvARB;
    }
    _getProcAddress( dt.glMultiTexCoord3iARB, glMultiTexCoord3iARB, "glMultiTexCoord3iARB" );
    if( dt.glMultiTexCoord3iARB == NULL ) {
      dt.glMultiTexCoord3iARB = missing_glMultiTexCoord3iARB;
    }
    _getProcAddress( dt.glMultiTexCoord3ivARB, glMultiTexCoord3ivARB, "glMultiTexCoord3ivARB" );
    if( dt.glMultiTexCoord3ivARB == NULL ) {
      dt.glMultiTexCoord3ivARB = missing_glMultiTexCoord3ivARB;
    }
    _getProcAddress( dt.glMultiTexCoord3sARB, glMultiTexCoord3sARB, "glMultiTexCoord3sARB" );
    if( dt.glMultiTexCoord3sARB == NULL ) {
      dt.glMultiTexCoord3sARB = missing_glMultiTexCoord3sARB;
    }
    _getProcAddress( dt.glMultiTexCoord3svARB, glMultiTexCoord3svARB, "glMultiTexCoord3svARB" );
    if( dt.glMultiTexCoord3svARB == NULL ) {
      dt.glMultiTexCoord3svARB = missing_glMultiTexCoord3svARB;
    }
    _getProcAddress( dt.glMultiTexCoord4dARB, glMultiTexCoord4dARB, "glMultiTexCoord4dARB" );
    if( dt.glMultiTexCoord4dARB == NULL ) {
      dt.glMultiTexCoord4dARB = missing_glMultiTexCoord4dARB;
    }
    _getProcAddress( dt.glMultiTexCoord4dvARB, glMultiTexCoord4dvARB, "glMultiTexCoord4dvARB" );
    if( dt.glMultiTexCoord4dvARB == NULL ) {
      dt.glMultiTexCoord4dvARB = missing_glMultiTexCoord4dvARB;
    }
    _getProcAddress( dt.glMultiTexCoord4fARB, glMultiTexCoord4fARB, "glMultiTexCoord4fARB" );
    if( dt.glMultiTexCoord4fARB == NULL ) {
      dt.glMultiTexCoord4fARB = missing_glMultiTexCoord4fARB;
    }
    _getProcAddress( dt.glMultiTexCoord4fvARB, glMultiTexCoord4fvARB, "glMultiTexCoord4fvARB" );
    if( dt.glMultiTexCoord4fvARB == NULL ) {
      dt.glMultiTexCoord4fvARB = missing_glMultiTexCoord4fvARB;
    }
    _getProcAddress( dt.glMultiTexCoord4iARB, glMultiTexCoord4iARB, "glMultiTexCoord4iARB" );
    if( dt.glMultiTexCoord4iARB == NULL ) {
      dt.glMultiTexCoord4iARB = missing_glMultiTexCoord4iARB;
    }
    _getProcAddress( dt.glMultiTexCoord4ivARB, glMultiTexCoord4ivARB, "glMultiTexCoord4ivARB" );
    if( dt.glMultiTexCoord4ivARB == NULL ) {
      dt.glMultiTexCoord4ivARB = missing_glMultiTexCoord4ivARB;
    }
    _getProcAddress( dt.glMultiTexCoord4sARB, glMultiTexCoord4sARB, "glMultiTexCoord4sARB" );
    if( dt.glMultiTexCoord4sARB == NULL ) {
      dt.glMultiTexCoord4sARB = missing_glMultiTexCoord4sARB;
    }
    _getProcAddress( dt.glMultiTexCoord4svARB, glMultiTexCoord4svARB, "glMultiTexCoord4svARB" );
    if( dt.glMultiTexCoord4svARB == NULL ) {
      dt.glMultiTexCoord4svARB = missing_glMultiTexCoord4svARB;
    }

    // GL_ARB_occlusion_query

    _getProcAddress( dt.glBeginQueryARB, glBeginQueryARB, "glBeginQueryARB" );
    if( dt.glBeginQueryARB == NULL ) {
      dt.glBeginQueryARB = missing_glBeginQueryARB;
    }
    _getProcAddress( dt.glDeleteQueriesARB, glDeleteQueriesARB, "glDeleteQueriesARB" );
    if( dt.glDeleteQueriesARB == NULL ) {
      dt.glDeleteQueriesARB = missing_glDeleteQueriesARB;
    }
    _getProcAddress( dt.glEndQueryARB, glEndQueryARB, "glEndQueryARB" );
    if( dt.glEndQueryARB == NULL ) {
      dt.glEndQueryARB = missing_glEndQueryARB;
    }
    _getProcAddress( dt.glGenQueriesARB, glGenQueriesARB, "glGenQueriesARB" );
    if( dt.glGenQueriesARB == NULL ) {
      dt.glGenQueriesARB = missing_glGenQueriesARB;
    }
    _getProcAddress( dt.glGetQueryObjectivARB, glGetQueryObjectivARB, "glGetQueryObjectivARB" );
    if( dt.glGetQueryObjectivARB == NULL ) {
      dt.glGetQueryObjectivARB = missing_glGetQueryObjectivARB;
    }
    _getProcAddress( dt.glGetQueryObjectuivARB, glGetQueryObjectuivARB, "glGetQueryObjectuivARB" );
    if( dt.glGetQueryObjectuivARB == NULL ) {
      dt.glGetQueryObjectuivARB = missing_glGetQueryObjectuivARB;
    }
    _getProcAddress( dt.glGetQueryivARB, glGetQueryivARB, "glGetQueryivARB" );
    if( dt.glGetQueryivARB == NULL ) {
      dt.glGetQueryivARB = missing_glGetQueryivARB;
    }
    _getProcAddress( dt.glIsQueryARB, glIsQueryARB, "glIsQueryARB" );
    if( dt.glIsQueryARB == NULL ) {
      dt.glIsQueryARB = missing_glIsQueryARB;
    }

    // GL_ARB_point_parameters

    _getProcAddress( dt.glPointParameterfARB, glPointParameterfARB, "glPointParameterfARB" );
    if( dt.glPointParameterfARB == NULL ) {
      dt.glPointParameterfARB = missing_glPointParameterfARB;
    }
    _getProcAddress( dt.glPointParameterfvARB, glPointParameterfvARB, "glPointParameterfvARB" );
    if( dt.glPointParameterfvARB == NULL ) {
      dt.glPointParameterfvARB = missing_glPointParameterfvARB;
    }

    // GL_ARB_program_interface_query

    _getProcAddress( dt.glGetProgramInterfaceiv, glGetProgramInterfaceiv, "glGetProgramInterfaceiv" );
    if( dt.glGetProgramInterfaceiv == NULL ) {
      dt.glGetProgramInterfaceiv = missing_glGetProgramInterfaceiv;
    }
    _getProcAddress( dt.glGetProgramResourceIndex, glGetProgramResourceIndex, "glGetProgramResourceIndex" );
    if( dt.glGetProgramResourceIndex == NULL ) {
      dt.glGetProgramResourceIndex = missing_glGetProgramResourceIndex;
    }
    _getProcAddress( dt.glGetProgramResourceLocation, glGetProgramResourceLocation, "glGetProgramResourceLocation" );
    if( dt.glGetProgramResourceLocation == NULL ) {
      dt.glGetProgramResourceLocation = missing_glGetProgramResourceLocation;
    }
    _getProcAddress( dt.glGetProgramResourceLocationIndex, glGetProgramResourceLocationIndex, "glGetProgramResourceLocationIndex" );
    if( dt.glGetProgramResourceLocationIndex == NULL ) {
      dt.glGetProgramResourceLocationIndex = missing_glGetProgramResourceLocationIndex;
    }
    _getProcAddress( dt.glGetProgramResourceName, glGetProgramResourceName, "glGetProgramResourceName" );
    if( dt.glGetProgramResourceName == NULL ) {
      dt.glGetProgramResourceName = missing_glGetProgramResourceName;
    }
    _getProcAddress( dt.glGetProgramResourceiv, glGetProgramResourceiv, "glGetProgramResourceiv" );
    if( dt.glGetProgramResourceiv == NULL ) {
      dt.glGetProgramResourceiv = missing_glGetProgramResourceiv;
    }

    // GL_ARB_provoking_vertex

    _getProcAddress( dt.glProvokingVertex, glProvokingVertex, "glProvokingVertex" );
    if( dt.glProvokingVertex == NULL ) {
      dt.glProvokingVertex = missing_glProvokingVertex;
    }

    // GL_ARB_robustness

    _getProcAddress( dt.glGetGraphicsResetStatusARB, glGetGraphicsResetStatusARB, "glGetGraphicsResetStatusARB" );
    if( dt.glGetGraphicsResetStatusARB == NULL ) {
      dt.glGetGraphicsResetStatusARB = missing_glGetGraphicsResetStatusARB;
    }
    _getProcAddress( dt.glGetnColorTableARB, glGetnColorTableARB, "glGetnColorTableARB" );
    if( dt.glGetnColorTableARB == NULL ) {
      dt.glGetnColorTableARB = missing_glGetnColorTableARB;
    }
    _getProcAddress( dt.glGetnCompressedTexImageARB, glGetnCompressedTexImageARB, "glGetnCompressedTexImageARB" );
    if( dt.glGetnCompressedTexImageARB == NULL ) {
      dt.glGetnCompressedTexImageARB = missing_glGetnCompressedTexImageARB;
    }
    _getProcAddress( dt.glGetnConvolutionFilterARB, glGetnConvolutionFilterARB, "glGetnConvolutionFilterARB" );
    if( dt.glGetnConvolutionFilterARB == NULL ) {
      dt.glGetnConvolutionFilterARB = missing_glGetnConvolutionFilterARB;
    }
    _getProcAddress( dt.glGetnHistogramARB, glGetnHistogramARB, "glGetnHistogramARB" );
    if( dt.glGetnHistogramARB == NULL ) {
      dt.glGetnHistogramARB = missing_glGetnHistogramARB;
    }
    _getProcAddress( dt.glGetnMapdvARB, glGetnMapdvARB, "glGetnMapdvARB" );
    if( dt.glGetnMapdvARB == NULL ) {
      dt.glGetnMapdvARB = missing_glGetnMapdvARB;
    }
    _getProcAddress( dt.glGetnMapfvARB, glGetnMapfvARB, "glGetnMapfvARB" );
    if( dt.glGetnMapfvARB == NULL ) {
      dt.glGetnMapfvARB = missing_glGetnMapfvARB;
    }
    _getProcAddress( dt.glGetnMapivARB, glGetnMapivARB, "glGetnMapivARB" );
    if( dt.glGetnMapivARB == NULL ) {
      dt.glGetnMapivARB = missing_glGetnMapivARB;
    }
    _getProcAddress( dt.glGetnMinmaxARB, glGetnMinmaxARB, "glGetnMinmaxARB" );
    if( dt.glGetnMinmaxARB == NULL ) {
      dt.glGetnMinmaxARB = missing_glGetnMinmaxARB;
    }
    _getProcAddress( dt.glGetnPixelMapfvARB, glGetnPixelMapfvARB, "glGetnPixelMapfvARB" );
    if( dt.glGetnPixelMapfvARB == NULL ) {
      dt.glGetnPixelMapfvARB = missing_glGetnPixelMapfvARB;
    }
    _getProcAddress( dt.glGetnPixelMapuivARB, glGetnPixelMapuivARB, "glGetnPixelMapuivARB" );
    if( dt.glGetnPixelMapuivARB == NULL ) {
      dt.glGetnPixelMapuivARB = missing_glGetnPixelMapuivARB;
    }
    _getProcAddress( dt.glGetnPixelMapusvARB, glGetnPixelMapusvARB, "glGetnPixelMapusvARB" );
    if( dt.glGetnPixelMapusvARB == NULL ) {
      dt.glGetnPixelMapusvARB = missing_glGetnPixelMapusvARB;
    }
    _getProcAddress( dt.glGetnPolygonStippleARB, glGetnPolygonStippleARB, "glGetnPolygonStippleARB" );
    if( dt.glGetnPolygonStippleARB == NULL ) {
      dt.glGetnPolygonStippleARB = missing_glGetnPolygonStippleARB;
    }
    _getProcAddress( dt.glGetnSeparableFilterARB, glGetnSeparableFilterARB, "glGetnSeparableFilterARB" );
    if( dt.glGetnSeparableFilterARB == NULL ) {
      dt.glGetnSeparableFilterARB = missing_glGetnSeparableFilterARB;
    }
    _getProcAddress( dt.glGetnTexImageARB, glGetnTexImageARB, "glGetnTexImageARB" );
    if( dt.glGetnTexImageARB == NULL ) {
      dt.glGetnTexImageARB = missing_glGetnTexImageARB;
    }
    _getProcAddress( dt.glGetnUniformdvARB, glGetnUniformdvARB, "glGetnUniformdvARB" );
    if( dt.glGetnUniformdvARB == NULL ) {
      dt.glGetnUniformdvARB = missing_glGetnUniformdvARB;
    }
    _getProcAddress( dt.glGetnUniformfvARB, glGetnUniformfvARB, "glGetnUniformfvARB" );
    if( dt.glGetnUniformfvARB == NULL ) {
      dt.glGetnUniformfvARB = missing_glGetnUniformfvARB;
    }
    _getProcAddress( dt.glGetnUniformivARB, glGetnUniformivARB, "glGetnUniformivARB" );
    if( dt.glGetnUniformivARB == NULL ) {
      dt.glGetnUniformivARB = missing_glGetnUniformivARB;
    }
    _getProcAddress( dt.glGetnUniformuivARB, glGetnUniformuivARB, "glGetnUniformuivARB" );
    if( dt.glGetnUniformuivARB == NULL ) {
      dt.glGetnUniformuivARB = missing_glGetnUniformuivARB;
    }
    _getProcAddress( dt.glReadnPixelsARB, glReadnPixelsARB, "glReadnPixelsARB" );
    if( dt.glReadnPixelsARB == NULL ) {
      dt.glReadnPixelsARB = missing_glReadnPixelsARB;
    }

    // GL_ARB_sample_shading

    _getProcAddress( dt.glMinSampleShading, glMinSampleShading, "glMinSampleShading" );
    if( dt.glMinSampleShading == NULL ) {
      dt.glMinSampleShading = missing_glMinSampleShading;
    }
    _getProcAddress( dt.glMinSampleShadingARB, glMinSampleShadingARB, "glMinSampleShadingARB" );
    if( dt.glMinSampleShadingARB == NULL ) {
      dt.glMinSampleShadingARB = missing_glMinSampleShadingARB;
    }

    // GL_ARB_sampler_objects

    _getProcAddress( dt.glBindSampler, glBindSampler, "glBindSampler" );
    if( dt.glBindSampler == NULL ) {
      dt.glBindSampler = missing_glBindSampler;
    }
    _getProcAddress( dt.glDeleteSamplers, glDeleteSamplers, "glDeleteSamplers" );
    if( dt.glDeleteSamplers == NULL ) {
      dt.glDeleteSamplers = missing_glDeleteSamplers;
    }
    _getProcAddress( dt.glGenSamplers, glGenSamplers, "glGenSamplers" );
    if( dt.glGenSamplers == NULL ) {
      dt.glGenSamplers = missing_glGenSamplers;
    }
    _getProcAddress( dt.glGetSamplerParameterIiv, glGetSamplerParameterIiv, "glGetSamplerParameterIiv" );
    if( dt.glGetSamplerParameterIiv == NULL ) {
      dt.glGetSamplerParameterIiv = missing_glGetSamplerParameterIiv;
    }
    _getProcAddress( dt.glGetSamplerParameterIuiv, glGetSamplerParameterIuiv, "glGetSamplerParameterIuiv" );
    if( dt.glGetSamplerParameterIuiv == NULL ) {
      dt.glGetSamplerParameterIuiv = missing_glGetSamplerParameterIuiv;
    }
    _getProcAddress( dt.glGetSamplerParameterfv, glGetSamplerParameterfv, "glGetSamplerParameterfv" );
    if( dt.glGetSamplerParameterfv == NULL ) {
      dt.glGetSamplerParameterfv = missing_glGetSamplerParameterfv;
    }
    _getProcAddress( dt.glGetSamplerParameteriv, glGetSamplerParameteriv, "glGetSamplerParameteriv" );
    if( dt.glGetSamplerParameteriv == NULL ) {
      dt.glGetSamplerParameteriv = missing_glGetSamplerParameteriv;
    }
    _getProcAddress( dt.glIsSampler, glIsSampler, "glIsSampler" );
    if( dt.glIsSampler == NULL ) {
      dt.glIsSampler = missing_glIsSampler;
    }
    _getProcAddress( dt.glSamplerParameterIiv, glSamplerParameterIiv, "glSamplerParameterIiv" );
    if( dt.glSamplerParameterIiv == NULL ) {
      dt.glSamplerParameterIiv = missing_glSamplerParameterIiv;
    }
    _getProcAddress( dt.glSamplerParameterIuiv, glSamplerParameterIuiv, "glSamplerParameterIuiv" );
    if( dt.glSamplerParameterIuiv == NULL ) {
      dt.glSamplerParameterIuiv = missing_glSamplerParameterIuiv;
    }
    _getProcAddress( dt.glSamplerParameterf, glSamplerParameterf, "glSamplerParameterf" );
    if( dt.glSamplerParameterf == NULL ) {
      dt.glSamplerParameterf = missing_glSamplerParameterf;
    }
    _getProcAddress( dt.glSamplerParameterfv, glSamplerParameterfv, "glSamplerParameterfv" );
    if( dt.glSamplerParameterfv == NULL ) {
      dt.glSamplerParameterfv = missing_glSamplerParameterfv;
    }
    _getProcAddress( dt.glSamplerParameteri, glSamplerParameteri, "glSamplerParameteri" );
    if( dt.glSamplerParameteri == NULL ) {
      dt.glSamplerParameteri = missing_glSamplerParameteri;
    }
    _getProcAddress( dt.glSamplerParameteriv, glSamplerParameteriv, "glSamplerParameteriv" );
    if( dt.glSamplerParameteriv == NULL ) {
      dt.glSamplerParameteriv = missing_glSamplerParameteriv;
    }

    // GL_ARB_separate_shader_objects

    _getProcAddress( dt.glActiveShaderProgram, glActiveShaderProgram, "glActiveShaderProgram" );
    if( dt.glActiveShaderProgram == NULL ) {
      dt.glActiveShaderProgram = missing_glActiveShaderProgram;
    }
    _getProcAddress( dt.glBindProgramPipeline, glBindProgramPipeline, "glBindProgramPipeline" );
    if( dt.glBindProgramPipeline == NULL ) {
      dt.glBindProgramPipeline = missing_glBindProgramPipeline;
    }
    _getProcAddress( dt.glCreateShaderProgramv, glCreateShaderProgramv, "glCreateShaderProgramv" );
    if( dt.glCreateShaderProgramv == NULL ) {
      dt.glCreateShaderProgramv = missing_glCreateShaderProgramv;
    }
    _getProcAddress( dt.glDeleteProgramPipelines, glDeleteProgramPipelines, "glDeleteProgramPipelines" );
    if( dt.glDeleteProgramPipelines == NULL ) {
      dt.glDeleteProgramPipelines = missing_glDeleteProgramPipelines;
    }
    _getProcAddress( dt.glGenProgramPipelines, glGenProgramPipelines, "glGenProgramPipelines" );
    if( dt.glGenProgramPipelines == NULL ) {
      dt.glGenProgramPipelines = missing_glGenProgramPipelines;
    }
    _getProcAddress( dt.glGetProgramPipelineInfoLog, glGetProgramPipelineInfoLog, "glGetProgramPipelineInfoLog" );
    if( dt.glGetProgramPipelineInfoLog == NULL ) {
      dt.glGetProgramPipelineInfoLog = missing_glGetProgramPipelineInfoLog;
    }
    _getProcAddress( dt.glGetProgramPipelineiv, glGetProgramPipelineiv, "glGetProgramPipelineiv" );
    if( dt.glGetProgramPipelineiv == NULL ) {
      dt.glGetProgramPipelineiv = missing_glGetProgramPipelineiv;
    }
    _getProcAddress( dt.glIsProgramPipeline, glIsProgramPipeline, "glIsProgramPipeline" );
    if( dt.glIsProgramPipeline == NULL ) {
      dt.glIsProgramPipeline = missing_glIsProgramPipeline;
    }
    _getProcAddress( dt.glProgramUniform1d, glProgramUniform1d, "glProgramUniform1d" );
    if( dt.glProgramUniform1d == NULL ) {
      dt.glProgramUniform1d = missing_glProgramUniform1d;
    }
    _getProcAddress( dt.glProgramUniform1dv, glProgramUniform1dv, "glProgramUniform1dv" );
    if( dt.glProgramUniform1dv == NULL ) {
      dt.glProgramUniform1dv = missing_glProgramUniform1dv;
    }
    _getProcAddress( dt.glProgramUniform1f, glProgramUniform1f, "glProgramUniform1f" );
    if( dt.glProgramUniform1f == NULL ) {
      dt.glProgramUniform1f = missing_glProgramUniform1f;
    }
    _getProcAddress( dt.glProgramUniform1fv, glProgramUniform1fv, "glProgramUniform1fv" );
    if( dt.glProgramUniform1fv == NULL ) {
      dt.glProgramUniform1fv = missing_glProgramUniform1fv;
    }
    _getProcAddress( dt.glProgramUniform1i, glProgramUniform1i, "glProgramUniform1i" );
    if( dt.glProgramUniform1i == NULL ) {
      dt.glProgramUniform1i = missing_glProgramUniform1i;
    }
    _getProcAddress( dt.glProgramUniform1iv, glProgramUniform1iv, "glProgramUniform1iv" );
    if( dt.glProgramUniform1iv == NULL ) {
      dt.glProgramUniform1iv = missing_glProgramUniform1iv;
    }
    _getProcAddress( dt.glProgramUniform1ui, glProgramUniform1ui, "glProgramUniform1ui" );
    if( dt.glProgramUniform1ui == NULL ) {
      dt.glProgramUniform1ui = missing_glProgramUniform1ui;
    }
    _getProcAddress( dt.glProgramUniform1uiv, glProgramUniform1uiv, "glProgramUniform1uiv" );
    if( dt.glProgramUniform1uiv == NULL ) {
      dt.glProgramUniform1uiv = missing_glProgramUniform1uiv;
    }
    _getProcAddress( dt.glProgramUniform2d, glProgramUniform2d, "glProgramUniform2d" );
    if( dt.glProgramUniform2d == NULL ) {
      dt.glProgramUniform2d = missing_glProgramUniform2d;
    }
    _getProcAddress( dt.glProgramUniform2dv, glProgramUniform2dv, "glProgramUniform2dv" );
    if( dt.glProgramUniform2dv == NULL ) {
      dt.glProgramUniform2dv = missing_glProgramUniform2dv;
    }
    _getProcAddress( dt.glProgramUniform2f, glProgramUniform2f, "glProgramUniform2f" );
    if( dt.glProgramUniform2f == NULL ) {
      dt.glProgramUniform2f = missing_glProgramUniform2f;
    }
    _getProcAddress( dt.glProgramUniform2fv, glProgramUniform2fv, "glProgramUniform2fv" );
    if( dt.glProgramUniform2fv == NULL ) {
      dt.glProgramUniform2fv = missing_glProgramUniform2fv;
    }
    _getProcAddress( dt.glProgramUniform2i, glProgramUniform2i, "glProgramUniform2i" );
    if( dt.glProgramUniform2i == NULL ) {
      dt.glProgramUniform2i = missing_glProgramUniform2i;
    }
    _getProcAddress( dt.glProgramUniform2iv, glProgramUniform2iv, "glProgramUniform2iv" );
    if( dt.glProgramUniform2iv == NULL ) {
      dt.glProgramUniform2iv = missing_glProgramUniform2iv;
    }
    _getProcAddress( dt.glProgramUniform2ui, glProgramUniform2ui, "glProgramUniform2ui" );
    if( dt.glProgramUniform2ui == NULL ) {
      dt.glProgramUniform2ui = missing_glProgramUniform2ui;
    }
    _getProcAddress( dt.glProgramUniform2uiv, glProgramUniform2uiv, "glProgramUniform2uiv" );
    if( dt.glProgramUniform2uiv == NULL ) {
      dt.glProgramUniform2uiv = missing_glProgramUniform2uiv;
    }
    _getProcAddress( dt.glProgramUniform3d, glProgramUniform3d, "glProgramUniform3d" );
    if( dt.glProgramUniform3d == NULL ) {
      dt.glProgramUniform3d = missing_glProgramUniform3d;
    }
    _getProcAddress( dt.glProgramUniform3dv, glProgramUniform3dv, "glProgramUniform3dv" );
    if( dt.glProgramUniform3dv == NULL ) {
      dt.glProgramUniform3dv = missing_glProgramUniform3dv;
    }
    _getProcAddress( dt.glProgramUniform3f, glProgramUniform3f, "glProgramUniform3f" );
    if( dt.glProgramUniform3f == NULL ) {
      dt.glProgramUniform3f = missing_glProgramUniform3f;
    }
    _getProcAddress( dt.glProgramUniform3fv, glProgramUniform3fv, "glProgramUniform3fv" );
    if( dt.glProgramUniform3fv == NULL ) {
      dt.glProgramUniform3fv = missing_glProgramUniform3fv;
    }
    _getProcAddress( dt.glProgramUniform3i, glProgramUniform3i, "glProgramUniform3i" );
    if( dt.glProgramUniform3i == NULL ) {
      dt.glProgramUniform3i = missing_glProgramUniform3i;
    }
    _getProcAddress( dt.glProgramUniform3iv, glProgramUniform3iv, "glProgramUniform3iv" );
    if( dt.glProgramUniform3iv == NULL ) {
      dt.glProgramUniform3iv = missing_glProgramUniform3iv;
    }
    _getProcAddress( dt.glProgramUniform3ui, glProgramUniform3ui, "glProgramUniform3ui" );
    if( dt.glProgramUniform3ui == NULL ) {
      dt.glProgramUniform3ui = missing_glProgramUniform3ui;
    }
    _getProcAddress( dt.glProgramUniform3uiv, glProgramUniform3uiv, "glProgramUniform3uiv" );
    if( dt.glProgramUniform3uiv == NULL ) {
      dt.glProgramUniform3uiv = missing_glProgramUniform3uiv;
    }
    _getProcAddress( dt.glProgramUniform4d, glProgramUniform4d, "glProgramUniform4d" );
    if( dt.glProgramUniform4d == NULL ) {
      dt.glProgramUniform4d = missing_glProgramUniform4d;
    }
    _getProcAddress( dt.glProgramUniform4dv, glProgramUniform4dv, "glProgramUniform4dv" );
    if( dt.glProgramUniform4dv == NULL ) {
      dt.glProgramUniform4dv = missing_glProgramUniform4dv;
    }
    _getProcAddress( dt.glProgramUniform4f, glProgramUniform4f, "glProgramUniform4f" );
    if( dt.glProgramUniform4f == NULL ) {
      dt.glProgramUniform4f = missing_glProgramUniform4f;
    }
    _getProcAddress( dt.glProgramUniform4fv, glProgramUniform4fv, "glProgramUniform4fv" );
    if( dt.glProgramUniform4fv == NULL ) {
      dt.glProgramUniform4fv = missing_glProgramUniform4fv;
    }
    _getProcAddress( dt.glProgramUniform4i, glProgramUniform4i, "glProgramUniform4i" );
    if( dt.glProgramUniform4i == NULL ) {
      dt.glProgramUniform4i = missing_glProgramUniform4i;
    }
    _getProcAddress( dt.glProgramUniform4iv, glProgramUniform4iv, "glProgramUniform4iv" );
    if( dt.glProgramUniform4iv == NULL ) {
      dt.glProgramUniform4iv = missing_glProgramUniform4iv;
    }
    _getProcAddress( dt.glProgramUniform4ui, glProgramUniform4ui, "glProgramUniform4ui" );
    if( dt.glProgramUniform4ui == NULL ) {
      dt.glProgramUniform4ui = missing_glProgramUniform4ui;
    }
    _getProcAddress( dt.glProgramUniform4uiv, glProgramUniform4uiv, "glProgramUniform4uiv" );
    if( dt.glProgramUniform4uiv == NULL ) {
      dt.glProgramUniform4uiv = missing_glProgramUniform4uiv;
    }
    _getProcAddress( dt.glProgramUniformMatrix2dv, glProgramUniformMatrix2dv, "glProgramUniformMatrix2dv" );
    if( dt.glProgramUniformMatrix2dv == NULL ) {
      dt.glProgramUniformMatrix2dv = missing_glProgramUniformMatrix2dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix2fv, glProgramUniformMatrix2fv, "glProgramUniformMatrix2fv" );
    if( dt.glProgramUniformMatrix2fv == NULL ) {
      dt.glProgramUniformMatrix2fv = missing_glProgramUniformMatrix2fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x3dv, glProgramUniformMatrix2x3dv, "glProgramUniformMatrix2x3dv" );
    if( dt.glProgramUniformMatrix2x3dv == NULL ) {
      dt.glProgramUniformMatrix2x3dv = missing_glProgramUniformMatrix2x3dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x3fv, glProgramUniformMatrix2x3fv, "glProgramUniformMatrix2x3fv" );
    if( dt.glProgramUniformMatrix2x3fv == NULL ) {
      dt.glProgramUniformMatrix2x3fv = missing_glProgramUniformMatrix2x3fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x4dv, glProgramUniformMatrix2x4dv, "glProgramUniformMatrix2x4dv" );
    if( dt.glProgramUniformMatrix2x4dv == NULL ) {
      dt.glProgramUniformMatrix2x4dv = missing_glProgramUniformMatrix2x4dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x4fv, glProgramUniformMatrix2x4fv, "glProgramUniformMatrix2x4fv" );
    if( dt.glProgramUniformMatrix2x4fv == NULL ) {
      dt.glProgramUniformMatrix2x4fv = missing_glProgramUniformMatrix2x4fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix3dv, glProgramUniformMatrix3dv, "glProgramUniformMatrix3dv" );
    if( dt.glProgramUniformMatrix3dv == NULL ) {
      dt.glProgramUniformMatrix3dv = missing_glProgramUniformMatrix3dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix3fv, glProgramUniformMatrix3fv, "glProgramUniformMatrix3fv" );
    if( dt.glProgramUniformMatrix3fv == NULL ) {
      dt.glProgramUniformMatrix3fv = missing_glProgramUniformMatrix3fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x2dv, glProgramUniformMatrix3x2dv, "glProgramUniformMatrix3x2dv" );
    if( dt.glProgramUniformMatrix3x2dv == NULL ) {
      dt.glProgramUniformMatrix3x2dv = missing_glProgramUniformMatrix3x2dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x2fv, glProgramUniformMatrix3x2fv, "glProgramUniformMatrix3x2fv" );
    if( dt.glProgramUniformMatrix3x2fv == NULL ) {
      dt.glProgramUniformMatrix3x2fv = missing_glProgramUniformMatrix3x2fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x4dv, glProgramUniformMatrix3x4dv, "glProgramUniformMatrix3x4dv" );
    if( dt.glProgramUniformMatrix3x4dv == NULL ) {
      dt.glProgramUniformMatrix3x4dv = missing_glProgramUniformMatrix3x4dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x4fv, glProgramUniformMatrix3x4fv, "glProgramUniformMatrix3x4fv" );
    if( dt.glProgramUniformMatrix3x4fv == NULL ) {
      dt.glProgramUniformMatrix3x4fv = missing_glProgramUniformMatrix3x4fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix4dv, glProgramUniformMatrix4dv, "glProgramUniformMatrix4dv" );
    if( dt.glProgramUniformMatrix4dv == NULL ) {
      dt.glProgramUniformMatrix4dv = missing_glProgramUniformMatrix4dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix4fv, glProgramUniformMatrix4fv, "glProgramUniformMatrix4fv" );
    if( dt.glProgramUniformMatrix4fv == NULL ) {
      dt.glProgramUniformMatrix4fv = missing_glProgramUniformMatrix4fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x2dv, glProgramUniformMatrix4x2dv, "glProgramUniformMatrix4x2dv" );
    if( dt.glProgramUniformMatrix4x2dv == NULL ) {
      dt.glProgramUniformMatrix4x2dv = missing_glProgramUniformMatrix4x2dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x2fv, glProgramUniformMatrix4x2fv, "glProgramUniformMatrix4x2fv" );
    if( dt.glProgramUniformMatrix4x2fv == NULL ) {
      dt.glProgramUniformMatrix4x2fv = missing_glProgramUniformMatrix4x2fv;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x3dv, glProgramUniformMatrix4x3dv, "glProgramUniformMatrix4x3dv" );
    if( dt.glProgramUniformMatrix4x3dv == NULL ) {
      dt.glProgramUniformMatrix4x3dv = missing_glProgramUniformMatrix4x3dv;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x3fv, glProgramUniformMatrix4x3fv, "glProgramUniformMatrix4x3fv" );
    if( dt.glProgramUniformMatrix4x3fv == NULL ) {
      dt.glProgramUniformMatrix4x3fv = missing_glProgramUniformMatrix4x3fv;
    }
    _getProcAddress( dt.glUseProgramStages, glUseProgramStages, "glUseProgramStages" );
    if( dt.glUseProgramStages == NULL ) {
      dt.glUseProgramStages = missing_glUseProgramStages;
    }
    _getProcAddress( dt.glValidateProgramPipeline, glValidateProgramPipeline, "glValidateProgramPipeline" );
    if( dt.glValidateProgramPipeline == NULL ) {
      dt.glValidateProgramPipeline = missing_glValidateProgramPipeline;
    }

    // GL_ARB_shader_atomic_counters

    _getProcAddress( dt.glGetActiveAtomicCounterBufferiv, glGetActiveAtomicCounterBufferiv, "glGetActiveAtomicCounterBufferiv" );
    if( dt.glGetActiveAtomicCounterBufferiv == NULL ) {
      dt.glGetActiveAtomicCounterBufferiv = missing_glGetActiveAtomicCounterBufferiv;
    }

    // GL_ARB_shader_image_load_store

    _getProcAddress( dt.glBindImageTexture, glBindImageTexture, "glBindImageTexture" );
    if( dt.glBindImageTexture == NULL ) {
      dt.glBindImageTexture = missing_glBindImageTexture;
    }
    _getProcAddress( dt.glMemoryBarrier, glMemoryBarrier, "glMemoryBarrier" );
    if( dt.glMemoryBarrier == NULL ) {
      dt.glMemoryBarrier = missing_glMemoryBarrier;
    }

    // GL_ARB_shader_objects

    _getProcAddress( dt.glAttachObjectARB, glAttachObjectARB, "glAttachObjectARB" );
    if( dt.glAttachObjectARB == NULL ) {
      dt.glAttachObjectARB = missing_glAttachObjectARB;
    }
    _getProcAddress( dt.glCompileShaderARB, glCompileShaderARB, "glCompileShaderARB" );
    if( dt.glCompileShaderARB == NULL ) {
      dt.glCompileShaderARB = missing_glCompileShaderARB;
    }
    _getProcAddress( dt.glCreateProgramObjectARB, glCreateProgramObjectARB, "glCreateProgramObjectARB" );
    if( dt.glCreateProgramObjectARB == NULL ) {
      dt.glCreateProgramObjectARB = missing_glCreateProgramObjectARB;
    }
    _getProcAddress( dt.glCreateShaderObjectARB, glCreateShaderObjectARB, "glCreateShaderObjectARB" );
    if( dt.glCreateShaderObjectARB == NULL ) {
      dt.glCreateShaderObjectARB = missing_glCreateShaderObjectARB;
    }
    _getProcAddress( dt.glDeleteObjectARB, glDeleteObjectARB, "glDeleteObjectARB" );
    if( dt.glDeleteObjectARB == NULL ) {
      dt.glDeleteObjectARB = missing_glDeleteObjectARB;
    }
    _getProcAddress( dt.glDetachObjectARB, glDetachObjectARB, "glDetachObjectARB" );
    if( dt.glDetachObjectARB == NULL ) {
      dt.glDetachObjectARB = missing_glDetachObjectARB;
    }
    _getProcAddress( dt.glGetActiveUniformARB, glGetActiveUniformARB, "glGetActiveUniformARB" );
    if( dt.glGetActiveUniformARB == NULL ) {
      dt.glGetActiveUniformARB = missing_glGetActiveUniformARB;
    }
    _getProcAddress( dt.glGetAttachedObjectsARB, glGetAttachedObjectsARB, "glGetAttachedObjectsARB" );
    if( dt.glGetAttachedObjectsARB == NULL ) {
      dt.glGetAttachedObjectsARB = missing_glGetAttachedObjectsARB;
    }
    _getProcAddress( dt.glGetHandleARB, glGetHandleARB, "glGetHandleARB" );
    if( dt.glGetHandleARB == NULL ) {
      dt.glGetHandleARB = missing_glGetHandleARB;
    }
    _getProcAddress( dt.glGetInfoLogARB, glGetInfoLogARB, "glGetInfoLogARB" );
    if( dt.glGetInfoLogARB == NULL ) {
      dt.glGetInfoLogARB = missing_glGetInfoLogARB;
    }
    _getProcAddress( dt.glGetObjectParameterfvARB, glGetObjectParameterfvARB, "glGetObjectParameterfvARB" );
    if( dt.glGetObjectParameterfvARB == NULL ) {
      dt.glGetObjectParameterfvARB = missing_glGetObjectParameterfvARB;
    }
    _getProcAddress( dt.glGetObjectParameterivARB, glGetObjectParameterivARB, "glGetObjectParameterivARB" );
    if( dt.glGetObjectParameterivARB == NULL ) {
      dt.glGetObjectParameterivARB = missing_glGetObjectParameterivARB;
    }
    _getProcAddress( dt.glGetShaderSourceARB, glGetShaderSourceARB, "glGetShaderSourceARB" );
    if( dt.glGetShaderSourceARB == NULL ) {
      dt.glGetShaderSourceARB = missing_glGetShaderSourceARB;
    }
    _getProcAddress( dt.glGetUniformLocationARB, glGetUniformLocationARB, "glGetUniformLocationARB" );
    if( dt.glGetUniformLocationARB == NULL ) {
      dt.glGetUniformLocationARB = missing_glGetUniformLocationARB;
    }
    _getProcAddress( dt.glGetUniformfvARB, glGetUniformfvARB, "glGetUniformfvARB" );
    if( dt.glGetUniformfvARB == NULL ) {
      dt.glGetUniformfvARB = missing_glGetUniformfvARB;
    }
    _getProcAddress( dt.glGetUniformivARB, glGetUniformivARB, "glGetUniformivARB" );
    if( dt.glGetUniformivARB == NULL ) {
      dt.glGetUniformivARB = missing_glGetUniformivARB;
    }
    _getProcAddress( dt.glLinkProgramARB, glLinkProgramARB, "glLinkProgramARB" );
    if( dt.glLinkProgramARB == NULL ) {
      dt.glLinkProgramARB = missing_glLinkProgramARB;
    }
    _getProcAddress( dt.glShaderSourceARB, glShaderSourceARB, "glShaderSourceARB" );
    if( dt.glShaderSourceARB == NULL ) {
      dt.glShaderSourceARB = missing_glShaderSourceARB;
    }
    _getProcAddress( dt.glUniform1fARB, glUniform1fARB, "glUniform1fARB" );
    if( dt.glUniform1fARB == NULL ) {
      dt.glUniform1fARB = missing_glUniform1fARB;
    }
    _getProcAddress( dt.glUniform1fvARB, glUniform1fvARB, "glUniform1fvARB" );
    if( dt.glUniform1fvARB == NULL ) {
      dt.glUniform1fvARB = missing_glUniform1fvARB;
    }
    _getProcAddress( dt.glUniform1iARB, glUniform1iARB, "glUniform1iARB" );
    if( dt.glUniform1iARB == NULL ) {
      dt.glUniform1iARB = missing_glUniform1iARB;
    }
    _getProcAddress( dt.glUniform1ivARB, glUniform1ivARB, "glUniform1ivARB" );
    if( dt.glUniform1ivARB == NULL ) {
      dt.glUniform1ivARB = missing_glUniform1ivARB;
    }
    _getProcAddress( dt.glUniform2fARB, glUniform2fARB, "glUniform2fARB" );
    if( dt.glUniform2fARB == NULL ) {
      dt.glUniform2fARB = missing_glUniform2fARB;
    }
    _getProcAddress( dt.glUniform2fvARB, glUniform2fvARB, "glUniform2fvARB" );
    if( dt.glUniform2fvARB == NULL ) {
      dt.glUniform2fvARB = missing_glUniform2fvARB;
    }
    _getProcAddress( dt.glUniform2iARB, glUniform2iARB, "glUniform2iARB" );
    if( dt.glUniform2iARB == NULL ) {
      dt.glUniform2iARB = missing_glUniform2iARB;
    }
    _getProcAddress( dt.glUniform2ivARB, glUniform2ivARB, "glUniform2ivARB" );
    if( dt.glUniform2ivARB == NULL ) {
      dt.glUniform2ivARB = missing_glUniform2ivARB;
    }
    _getProcAddress( dt.glUniform3fARB, glUniform3fARB, "glUniform3fARB" );
    if( dt.glUniform3fARB == NULL ) {
      dt.glUniform3fARB = missing_glUniform3fARB;
    }
    _getProcAddress( dt.glUniform3fvARB, glUniform3fvARB, "glUniform3fvARB" );
    if( dt.glUniform3fvARB == NULL ) {
      dt.glUniform3fvARB = missing_glUniform3fvARB;
    }
    _getProcAddress( dt.glUniform3iARB, glUniform3iARB, "glUniform3iARB" );
    if( dt.glUniform3iARB == NULL ) {
      dt.glUniform3iARB = missing_glUniform3iARB;
    }
    _getProcAddress( dt.glUniform3ivARB, glUniform3ivARB, "glUniform3ivARB" );
    if( dt.glUniform3ivARB == NULL ) {
      dt.glUniform3ivARB = missing_glUniform3ivARB;
    }
    _getProcAddress( dt.glUniform4fARB, glUniform4fARB, "glUniform4fARB" );
    if( dt.glUniform4fARB == NULL ) {
      dt.glUniform4fARB = missing_glUniform4fARB;
    }
    _getProcAddress( dt.glUniform4fvARB, glUniform4fvARB, "glUniform4fvARB" );
    if( dt.glUniform4fvARB == NULL ) {
      dt.glUniform4fvARB = missing_glUniform4fvARB;
    }
    _getProcAddress( dt.glUniform4iARB, glUniform4iARB, "glUniform4iARB" );
    if( dt.glUniform4iARB == NULL ) {
      dt.glUniform4iARB = missing_glUniform4iARB;
    }
    _getProcAddress( dt.glUniform4ivARB, glUniform4ivARB, "glUniform4ivARB" );
    if( dt.glUniform4ivARB == NULL ) {
      dt.glUniform4ivARB = missing_glUniform4ivARB;
    }
    _getProcAddress( dt.glUniformMatrix2fvARB, glUniformMatrix2fvARB, "glUniformMatrix2fvARB" );
    if( dt.glUniformMatrix2fvARB == NULL ) {
      dt.glUniformMatrix2fvARB = missing_glUniformMatrix2fvARB;
    }
    _getProcAddress( dt.glUniformMatrix3fvARB, glUniformMatrix3fvARB, "glUniformMatrix3fvARB" );
    if( dt.glUniformMatrix3fvARB == NULL ) {
      dt.glUniformMatrix3fvARB = missing_glUniformMatrix3fvARB;
    }
    _getProcAddress( dt.glUniformMatrix4fvARB, glUniformMatrix4fvARB, "glUniformMatrix4fvARB" );
    if( dt.glUniformMatrix4fvARB == NULL ) {
      dt.glUniformMatrix4fvARB = missing_glUniformMatrix4fvARB;
    }
    _getProcAddress( dt.glUseProgramObjectARB, glUseProgramObjectARB, "glUseProgramObjectARB" );
    if( dt.glUseProgramObjectARB == NULL ) {
      dt.glUseProgramObjectARB = missing_glUseProgramObjectARB;
    }
    _getProcAddress( dt.glValidateProgramARB, glValidateProgramARB, "glValidateProgramARB" );
    if( dt.glValidateProgramARB == NULL ) {
      dt.glValidateProgramARB = missing_glValidateProgramARB;
    }

    // GL_ARB_shader_storage_buffer_object

    _getProcAddress( dt.glShaderStorageBlockBinding, glShaderStorageBlockBinding, "glShaderStorageBlockBinding" );
    if( dt.glShaderStorageBlockBinding == NULL ) {
      dt.glShaderStorageBlockBinding = missing_glShaderStorageBlockBinding;
    }

    // GL_ARB_shader_subroutine

    _getProcAddress( dt.glGetActiveSubroutineName, glGetActiveSubroutineName, "glGetActiveSubroutineName" );
    if( dt.glGetActiveSubroutineName == NULL ) {
      dt.glGetActiveSubroutineName = missing_glGetActiveSubroutineName;
    }
    _getProcAddress( dt.glGetActiveSubroutineUniformName, glGetActiveSubroutineUniformName, "glGetActiveSubroutineUniformName" );
    if( dt.glGetActiveSubroutineUniformName == NULL ) {
      dt.glGetActiveSubroutineUniformName = missing_glGetActiveSubroutineUniformName;
    }
    _getProcAddress( dt.glGetActiveSubroutineUniformiv, glGetActiveSubroutineUniformiv, "glGetActiveSubroutineUniformiv" );
    if( dt.glGetActiveSubroutineUniformiv == NULL ) {
      dt.glGetActiveSubroutineUniformiv = missing_glGetActiveSubroutineUniformiv;
    }
    _getProcAddress( dt.glGetProgramStageiv, glGetProgramStageiv, "glGetProgramStageiv" );
    if( dt.glGetProgramStageiv == NULL ) {
      dt.glGetProgramStageiv = missing_glGetProgramStageiv;
    }
    _getProcAddress( dt.glGetProgramSubroutineParameteruivNV, glGetProgramSubroutineParameteruivNV, "glGetProgramSubroutineParameteruivNV" );
    if( dt.glGetProgramSubroutineParameteruivNV == NULL ) {
      dt.glGetProgramSubroutineParameteruivNV = missing_glGetProgramSubroutineParameteruivNV;
    }
    _getProcAddress( dt.glGetSubroutineIndex, glGetSubroutineIndex, "glGetSubroutineIndex" );
    if( dt.glGetSubroutineIndex == NULL ) {
      dt.glGetSubroutineIndex = missing_glGetSubroutineIndex;
    }
    _getProcAddress( dt.glGetSubroutineUniformLocation, glGetSubroutineUniformLocation, "glGetSubroutineUniformLocation" );
    if( dt.glGetSubroutineUniformLocation == NULL ) {
      dt.glGetSubroutineUniformLocation = missing_glGetSubroutineUniformLocation;
    }
    _getProcAddress( dt.glGetUniformSubroutineuiv, glGetUniformSubroutineuiv, "glGetUniformSubroutineuiv" );
    if( dt.glGetUniformSubroutineuiv == NULL ) {
      dt.glGetUniformSubroutineuiv = missing_glGetUniformSubroutineuiv;
    }
    _getProcAddress( dt.glProgramSubroutineParametersuivNV, glProgramSubroutineParametersuivNV, "glProgramSubroutineParametersuivNV" );
    if( dt.glProgramSubroutineParametersuivNV == NULL ) {
      dt.glProgramSubroutineParametersuivNV = missing_glProgramSubroutineParametersuivNV;
    }
    _getProcAddress( dt.glUniformSubroutinesuiv, glUniformSubroutinesuiv, "glUniformSubroutinesuiv" );
    if( dt.glUniformSubroutinesuiv == NULL ) {
      dt.glUniformSubroutinesuiv = missing_glUniformSubroutinesuiv;
    }

    // GL_ARB_shading_language_include

    _getProcAddress( dt.glCompileShaderIncludeARB, glCompileShaderIncludeARB, "glCompileShaderIncludeARB" );
    if( dt.glCompileShaderIncludeARB == NULL ) {
      dt.glCompileShaderIncludeARB = missing_glCompileShaderIncludeARB;
    }
    _getProcAddress( dt.glDeleteNamedStringARB, glDeleteNamedStringARB, "glDeleteNamedStringARB" );
    if( dt.glDeleteNamedStringARB == NULL ) {
      dt.glDeleteNamedStringARB = missing_glDeleteNamedStringARB;
    }
    _getProcAddress( dt.glGetNamedStringARB, glGetNamedStringARB, "glGetNamedStringARB" );
    if( dt.glGetNamedStringARB == NULL ) {
      dt.glGetNamedStringARB = missing_glGetNamedStringARB;
    }
    _getProcAddress( dt.glGetNamedStringivARB, glGetNamedStringivARB, "glGetNamedStringivARB" );
    if( dt.glGetNamedStringivARB == NULL ) {
      dt.glGetNamedStringivARB = missing_glGetNamedStringivARB;
    }
    _getProcAddress( dt.glIsNamedStringARB, glIsNamedStringARB, "glIsNamedStringARB" );
    if( dt.glIsNamedStringARB == NULL ) {
      dt.glIsNamedStringARB = missing_glIsNamedStringARB;
    }
    _getProcAddress( dt.glNamedStringARB, glNamedStringARB, "glNamedStringARB" );
    if( dt.glNamedStringARB == NULL ) {
      dt.glNamedStringARB = missing_glNamedStringARB;
    }

    // GL_ARB_sparse_texture

    _getProcAddress( dt.glTexPageCommitmentARB, glTexPageCommitmentARB, "glTexPageCommitmentARB" );
    if( dt.glTexPageCommitmentARB == NULL ) {
      dt.glTexPageCommitmentARB = missing_glTexPageCommitmentARB;
    }
    _getProcAddress( dt.glTexturePageCommitmentEXT, glTexturePageCommitmentEXT, "glTexturePageCommitmentEXT" );
    if( dt.glTexturePageCommitmentEXT == NULL ) {
      dt.glTexturePageCommitmentEXT = missing_glTexturePageCommitmentEXT;
    }

    // GL_ARB_sync

    _getProcAddress( dt.glClientWaitSync, glClientWaitSync, "glClientWaitSync" );
    if( dt.glClientWaitSync == NULL ) {
      dt.glClientWaitSync = missing_glClientWaitSync;
    }
    _getProcAddress( dt.glDeleteSync, glDeleteSync, "glDeleteSync" );
    if( dt.glDeleteSync == NULL ) {
      dt.glDeleteSync = missing_glDeleteSync;
    }
    _getProcAddress( dt.glFenceSync, glFenceSync, "glFenceSync" );
    if( dt.glFenceSync == NULL ) {
      dt.glFenceSync = missing_glFenceSync;
    }
    _getProcAddress( dt.glGetInteger64v, glGetInteger64v, "glGetInteger64v" );
    if( dt.glGetInteger64v == NULL ) {
      dt.glGetInteger64v = missing_glGetInteger64v;
    }
    _getProcAddress( dt.glGetSynciv, glGetSynciv, "glGetSynciv" );
    if( dt.glGetSynciv == NULL ) {
      dt.glGetSynciv = missing_glGetSynciv;
    }
    _getProcAddress( dt.glIsSync, glIsSync, "glIsSync" );
    if( dt.glIsSync == NULL ) {
      dt.glIsSync = missing_glIsSync;
    }
    _getProcAddress( dt.glWaitSync, glWaitSync, "glWaitSync" );
    if( dt.glWaitSync == NULL ) {
      dt.glWaitSync = missing_glWaitSync;
    }

    // GL_ARB_tessellation_shader

    _getProcAddress( dt.glPatchParameterfv, glPatchParameterfv, "glPatchParameterfv" );
    if( dt.glPatchParameterfv == NULL ) {
      dt.glPatchParameterfv = missing_glPatchParameterfv;
    }
    _getProcAddress( dt.glPatchParameteri, glPatchParameteri, "glPatchParameteri" );
    if( dt.glPatchParameteri == NULL ) {
      dt.glPatchParameteri = missing_glPatchParameteri;
    }

    // GL_ARB_texture_buffer_object

    _getProcAddress( dt.glTexBufferARB, glTexBufferARB, "glTexBufferARB" );
    if( dt.glTexBufferARB == NULL ) {
      dt.glTexBufferARB = missing_glTexBufferARB;
    }

    // GL_ARB_texture_buffer_range

    _getProcAddress( dt.glTexBufferRange, glTexBufferRange, "glTexBufferRange" );
    if( dt.glTexBufferRange == NULL ) {
      dt.glTexBufferRange = missing_glTexBufferRange;
    }
    _getProcAddress( dt.glTextureBufferRangeEXT, glTextureBufferRangeEXT, "glTextureBufferRangeEXT" );
    if( dt.glTextureBufferRangeEXT == NULL ) {
      dt.glTextureBufferRangeEXT = missing_glTextureBufferRangeEXT;
    }

    // GL_ARB_texture_compression

    _getProcAddress( dt.glCompressedTexImage1DARB, glCompressedTexImage1DARB, "glCompressedTexImage1DARB" );
    if( dt.glCompressedTexImage1DARB == NULL ) {
      dt.glCompressedTexImage1DARB = missing_glCompressedTexImage1DARB;
    }
    _getProcAddress( dt.glCompressedTexImage2DARB, glCompressedTexImage2DARB, "glCompressedTexImage2DARB" );
    if( dt.glCompressedTexImage2DARB == NULL ) {
      dt.glCompressedTexImage2DARB = missing_glCompressedTexImage2DARB;
    }
    _getProcAddress( dt.glCompressedTexImage3DARB, glCompressedTexImage3DARB, "glCompressedTexImage3DARB" );
    if( dt.glCompressedTexImage3DARB == NULL ) {
      dt.glCompressedTexImage3DARB = missing_glCompressedTexImage3DARB;
    }
    _getProcAddress( dt.glCompressedTexSubImage1DARB, glCompressedTexSubImage1DARB, "glCompressedTexSubImage1DARB" );
    if( dt.glCompressedTexSubImage1DARB == NULL ) {
      dt.glCompressedTexSubImage1DARB = missing_glCompressedTexSubImage1DARB;
    }
    _getProcAddress( dt.glCompressedTexSubImage2DARB, glCompressedTexSubImage2DARB, "glCompressedTexSubImage2DARB" );
    if( dt.glCompressedTexSubImage2DARB == NULL ) {
      dt.glCompressedTexSubImage2DARB = missing_glCompressedTexSubImage2DARB;
    }
    _getProcAddress( dt.glCompressedTexSubImage3DARB, glCompressedTexSubImage3DARB, "glCompressedTexSubImage3DARB" );
    if( dt.glCompressedTexSubImage3DARB == NULL ) {
      dt.glCompressedTexSubImage3DARB = missing_glCompressedTexSubImage3DARB;
    }
    _getProcAddress( dt.glGetCompressedTexImageARB, glGetCompressedTexImageARB, "glGetCompressedTexImageARB" );
    if( dt.glGetCompressedTexImageARB == NULL ) {
      dt.glGetCompressedTexImageARB = missing_glGetCompressedTexImageARB;
    }

    // GL_ARB_texture_multisample

    _getProcAddress( dt.glGetMultisamplefv, glGetMultisamplefv, "glGetMultisamplefv" );
    if( dt.glGetMultisamplefv == NULL ) {
      dt.glGetMultisamplefv = missing_glGetMultisamplefv;
    }
    _getProcAddress( dt.glSampleMaski, glSampleMaski, "glSampleMaski" );
    if( dt.glSampleMaski == NULL ) {
      dt.glSampleMaski = missing_glSampleMaski;
    }
    _getProcAddress( dt.glTexImage2DMultisample, glTexImage2DMultisample, "glTexImage2DMultisample" );
    if( dt.glTexImage2DMultisample == NULL ) {
      dt.glTexImage2DMultisample = missing_glTexImage2DMultisample;
    }
    _getProcAddress( dt.glTexImage3DMultisample, glTexImage3DMultisample, "glTexImage3DMultisample" );
    if( dt.glTexImage3DMultisample == NULL ) {
      dt.glTexImage3DMultisample = missing_glTexImage3DMultisample;
    }

    // GL_ARB_texture_storage

    _getProcAddress( dt.glTexStorage1D, glTexStorage1D, "glTexStorage1D" );
    if( dt.glTexStorage1D == NULL ) {
      dt.glTexStorage1D = missing_glTexStorage1D;
    }
    _getProcAddress( dt.glTexStorage2D, glTexStorage2D, "glTexStorage2D" );
    if( dt.glTexStorage2D == NULL ) {
      dt.glTexStorage2D = missing_glTexStorage2D;
    }
    _getProcAddress( dt.glTexStorage3D, glTexStorage3D, "glTexStorage3D" );
    if( dt.glTexStorage3D == NULL ) {
      dt.glTexStorage3D = missing_glTexStorage3D;
    }
    _getProcAddress( dt.glTextureStorage1DEXT, glTextureStorage1DEXT, "glTextureStorage1DEXT" );
    if( dt.glTextureStorage1DEXT == NULL ) {
      dt.glTextureStorage1DEXT = missing_glTextureStorage1DEXT;
    }
    _getProcAddress( dt.glTextureStorage2DEXT, glTextureStorage2DEXT, "glTextureStorage2DEXT" );
    if( dt.glTextureStorage2DEXT == NULL ) {
      dt.glTextureStorage2DEXT = missing_glTextureStorage2DEXT;
    }
    _getProcAddress( dt.glTextureStorage3DEXT, glTextureStorage3DEXT, "glTextureStorage3DEXT" );
    if( dt.glTextureStorage3DEXT == NULL ) {
      dt.glTextureStorage3DEXT = missing_glTextureStorage3DEXT;
    }

    // GL_ARB_texture_storage_multisample

    _getProcAddress( dt.glTexStorage2DMultisample, glTexStorage2DMultisample, "glTexStorage2DMultisample" );
    if( dt.glTexStorage2DMultisample == NULL ) {
      dt.glTexStorage2DMultisample = missing_glTexStorage2DMultisample;
    }
    _getProcAddress( dt.glTexStorage3DMultisample, glTexStorage3DMultisample, "glTexStorage3DMultisample" );
    if( dt.glTexStorage3DMultisample == NULL ) {
      dt.glTexStorage3DMultisample = missing_glTexStorage3DMultisample;
    }
    _getProcAddress( dt.glTextureStorage2DMultisampleEXT, glTextureStorage2DMultisampleEXT, "glTextureStorage2DMultisampleEXT" );
    if( dt.glTextureStorage2DMultisampleEXT == NULL ) {
      dt.glTextureStorage2DMultisampleEXT = missing_glTextureStorage2DMultisampleEXT;
    }
    _getProcAddress( dt.glTextureStorage3DMultisampleEXT, glTextureStorage3DMultisampleEXT, "glTextureStorage3DMultisampleEXT" );
    if( dt.glTextureStorage3DMultisampleEXT == NULL ) {
      dt.glTextureStorage3DMultisampleEXT = missing_glTextureStorage3DMultisampleEXT;
    }

    // GL_ARB_texture_view

    _getProcAddress( dt.glTextureView, glTextureView, "glTextureView" );
    if( dt.glTextureView == NULL ) {
      dt.glTextureView = missing_glTextureView;
    }

    // GL_ARB_timer_query

    _getProcAddress( dt.glGetQueryObjecti64v, glGetQueryObjecti64v, "glGetQueryObjecti64v" );
    if( dt.glGetQueryObjecti64v == NULL ) {
      dt.glGetQueryObjecti64v = missing_glGetQueryObjecti64v;
    }
    _getProcAddress( dt.glGetQueryObjectui64v, glGetQueryObjectui64v, "glGetQueryObjectui64v" );
    if( dt.glGetQueryObjectui64v == NULL ) {
      dt.glGetQueryObjectui64v = missing_glGetQueryObjectui64v;
    }
    _getProcAddress( dt.glQueryCounter, glQueryCounter, "glQueryCounter" );
    if( dt.glQueryCounter == NULL ) {
      dt.glQueryCounter = missing_glQueryCounter;
    }

    // GL_ARB_transform_feedback2

    _getProcAddress( dt.glBindTransformFeedback, glBindTransformFeedback, "glBindTransformFeedback" );
    if( dt.glBindTransformFeedback == NULL ) {
      dt.glBindTransformFeedback = missing_glBindTransformFeedback;
    }
    _getProcAddress( dt.glDeleteTransformFeedbacks, glDeleteTransformFeedbacks, "glDeleteTransformFeedbacks" );
    if( dt.glDeleteTransformFeedbacks == NULL ) {
      dt.glDeleteTransformFeedbacks = missing_glDeleteTransformFeedbacks;
    }
    _getProcAddress( dt.glDrawTransformFeedback, glDrawTransformFeedback, "glDrawTransformFeedback" );
    if( dt.glDrawTransformFeedback == NULL ) {
      dt.glDrawTransformFeedback = missing_glDrawTransformFeedback;
    }
    _getProcAddress( dt.glGenTransformFeedbacks, glGenTransformFeedbacks, "glGenTransformFeedbacks" );
    if( dt.glGenTransformFeedbacks == NULL ) {
      dt.glGenTransformFeedbacks = missing_glGenTransformFeedbacks;
    }
    _getProcAddress( dt.glIsTransformFeedback, glIsTransformFeedback, "glIsTransformFeedback" );
    if( dt.glIsTransformFeedback == NULL ) {
      dt.glIsTransformFeedback = missing_glIsTransformFeedback;
    }
    _getProcAddress( dt.glPauseTransformFeedback, glPauseTransformFeedback, "glPauseTransformFeedback" );
    if( dt.glPauseTransformFeedback == NULL ) {
      dt.glPauseTransformFeedback = missing_glPauseTransformFeedback;
    }
    _getProcAddress( dt.glResumeTransformFeedback, glResumeTransformFeedback, "glResumeTransformFeedback" );
    if( dt.glResumeTransformFeedback == NULL ) {
      dt.glResumeTransformFeedback = missing_glResumeTransformFeedback;
    }

    // GL_ARB_transform_feedback3

    _getProcAddress( dt.glBeginQueryIndexed, glBeginQueryIndexed, "glBeginQueryIndexed" );
    if( dt.glBeginQueryIndexed == NULL ) {
      dt.glBeginQueryIndexed = missing_glBeginQueryIndexed;
    }
    _getProcAddress( dt.glDrawTransformFeedbackStream, glDrawTransformFeedbackStream, "glDrawTransformFeedbackStream" );
    if( dt.glDrawTransformFeedbackStream == NULL ) {
      dt.glDrawTransformFeedbackStream = missing_glDrawTransformFeedbackStream;
    }
    _getProcAddress( dt.glEndQueryIndexed, glEndQueryIndexed, "glEndQueryIndexed" );
    if( dt.glEndQueryIndexed == NULL ) {
      dt.glEndQueryIndexed = missing_glEndQueryIndexed;
    }
    _getProcAddress( dt.glGetQueryIndexediv, glGetQueryIndexediv, "glGetQueryIndexediv" );
    if( dt.glGetQueryIndexediv == NULL ) {
      dt.glGetQueryIndexediv = missing_glGetQueryIndexediv;
    }

    // GL_ARB_transform_feedback_instanced

    _getProcAddress( dt.glDrawTransformFeedbackInstanced, glDrawTransformFeedbackInstanced, "glDrawTransformFeedbackInstanced" );
    if( dt.glDrawTransformFeedbackInstanced == NULL ) {
      dt.glDrawTransformFeedbackInstanced = missing_glDrawTransformFeedbackInstanced;
    }
    _getProcAddress( dt.glDrawTransformFeedbackStreamInstanced, glDrawTransformFeedbackStreamInstanced, "glDrawTransformFeedbackStreamInstanced" );
    if( dt.glDrawTransformFeedbackStreamInstanced == NULL ) {
      dt.glDrawTransformFeedbackStreamInstanced = missing_glDrawTransformFeedbackStreamInstanced;
    }

    // GL_ARB_transpose_matrix

    _getProcAddress( dt.glLoadTransposeMatrixdARB, glLoadTransposeMatrixdARB, "glLoadTransposeMatrixdARB" );
    if( dt.glLoadTransposeMatrixdARB == NULL ) {
      dt.glLoadTransposeMatrixdARB = missing_glLoadTransposeMatrixdARB;
    }
    _getProcAddress( dt.glLoadTransposeMatrixfARB, glLoadTransposeMatrixfARB, "glLoadTransposeMatrixfARB" );
    if( dt.glLoadTransposeMatrixfARB == NULL ) {
      dt.glLoadTransposeMatrixfARB = missing_glLoadTransposeMatrixfARB;
    }
    _getProcAddress( dt.glMultTransposeMatrixdARB, glMultTransposeMatrixdARB, "glMultTransposeMatrixdARB" );
    if( dt.glMultTransposeMatrixdARB == NULL ) {
      dt.glMultTransposeMatrixdARB = missing_glMultTransposeMatrixdARB;
    }
    _getProcAddress( dt.glMultTransposeMatrixfARB, glMultTransposeMatrixfARB, "glMultTransposeMatrixfARB" );
    if( dt.glMultTransposeMatrixfARB == NULL ) {
      dt.glMultTransposeMatrixfARB = missing_glMultTransposeMatrixfARB;
    }

    // GL_ARB_uniform_buffer_object

    _getProcAddress( dt.glBindBufferBase, glBindBufferBase, "glBindBufferBase" );
    if( dt.glBindBufferBase == NULL ) {
      dt.glBindBufferBase = missing_glBindBufferBase;
    }
    _getProcAddress( dt.glBindBufferRange, glBindBufferRange, "glBindBufferRange" );
    if( dt.glBindBufferRange == NULL ) {
      dt.glBindBufferRange = missing_glBindBufferRange;
    }
    _getProcAddress( dt.glGetActiveUniformBlockName, glGetActiveUniformBlockName, "glGetActiveUniformBlockName" );
    if( dt.glGetActiveUniformBlockName == NULL ) {
      dt.glGetActiveUniformBlockName = missing_glGetActiveUniformBlockName;
    }
    _getProcAddress( dt.glGetActiveUniformBlockiv, glGetActiveUniformBlockiv, "glGetActiveUniformBlockiv" );
    if( dt.glGetActiveUniformBlockiv == NULL ) {
      dt.glGetActiveUniformBlockiv = missing_glGetActiveUniformBlockiv;
    }
    _getProcAddress( dt.glGetActiveUniformName, glGetActiveUniformName, "glGetActiveUniformName" );
    if( dt.glGetActiveUniformName == NULL ) {
      dt.glGetActiveUniformName = missing_glGetActiveUniformName;
    }
    _getProcAddress( dt.glGetActiveUniformsiv, glGetActiveUniformsiv, "glGetActiveUniformsiv" );
    if( dt.glGetActiveUniformsiv == NULL ) {
      dt.glGetActiveUniformsiv = missing_glGetActiveUniformsiv;
    }
    _getProcAddress( dt.glGetIntegeri_v, glGetIntegeri_v, "glGetIntegeri_v" );
    if( dt.glGetIntegeri_v == NULL ) {
      dt.glGetIntegeri_v = missing_glGetIntegeri_v;
    }
    _getProcAddress( dt.glGetUniformBlockIndex, glGetUniformBlockIndex, "glGetUniformBlockIndex" );
    if( dt.glGetUniformBlockIndex == NULL ) {
      dt.glGetUniformBlockIndex = missing_glGetUniformBlockIndex;
    }
    _getProcAddress( dt.glGetUniformIndices, glGetUniformIndices, "glGetUniformIndices" );
    if( dt.glGetUniformIndices == NULL ) {
      dt.glGetUniformIndices = missing_glGetUniformIndices;
    }
    _getProcAddress( dt.glUniformBlockBinding, glUniformBlockBinding, "glUniformBlockBinding" );
    if( dt.glUniformBlockBinding == NULL ) {
      dt.glUniformBlockBinding = missing_glUniformBlockBinding;
    }

    // GL_ARB_vertex_array_object

    _getProcAddress( dt.glBindVertexArray, glBindVertexArray, "glBindVertexArray" );
    if( dt.glBindVertexArray == NULL ) {
      dt.glBindVertexArray = missing_glBindVertexArray;
    }
    _getProcAddress( dt.glDeleteVertexArrays, glDeleteVertexArrays, "glDeleteVertexArrays" );
    if( dt.glDeleteVertexArrays == NULL ) {
      dt.glDeleteVertexArrays = missing_glDeleteVertexArrays;
    }
    _getProcAddress( dt.glGenVertexArrays, glGenVertexArrays, "glGenVertexArrays" );
    if( dt.glGenVertexArrays == NULL ) {
      dt.glGenVertexArrays = missing_glGenVertexArrays;
    }
    _getProcAddress( dt.glIsVertexArray, glIsVertexArray, "glIsVertexArray" );
    if( dt.glIsVertexArray == NULL ) {
      dt.glIsVertexArray = missing_glIsVertexArray;
    }

    // GL_ARB_vertex_attrib_64bit

    _getProcAddress( dt.glGetVertexAttribLdv, glGetVertexAttribLdv, "glGetVertexAttribLdv" );
    if( dt.glGetVertexAttribLdv == NULL ) {
      dt.glGetVertexAttribLdv = missing_glGetVertexAttribLdv;
    }
    _getProcAddress( dt.glVertexAttribL1d, glVertexAttribL1d, "glVertexAttribL1d" );
    if( dt.glVertexAttribL1d == NULL ) {
      dt.glVertexAttribL1d = missing_glVertexAttribL1d;
    }
    _getProcAddress( dt.glVertexAttribL1dv, glVertexAttribL1dv, "glVertexAttribL1dv" );
    if( dt.glVertexAttribL1dv == NULL ) {
      dt.glVertexAttribL1dv = missing_glVertexAttribL1dv;
    }
    _getProcAddress( dt.glVertexAttribL2d, glVertexAttribL2d, "glVertexAttribL2d" );
    if( dt.glVertexAttribL2d == NULL ) {
      dt.glVertexAttribL2d = missing_glVertexAttribL2d;
    }
    _getProcAddress( dt.glVertexAttribL2dv, glVertexAttribL2dv, "glVertexAttribL2dv" );
    if( dt.glVertexAttribL2dv == NULL ) {
      dt.glVertexAttribL2dv = missing_glVertexAttribL2dv;
    }
    _getProcAddress( dt.glVertexAttribL3d, glVertexAttribL3d, "glVertexAttribL3d" );
    if( dt.glVertexAttribL3d == NULL ) {
      dt.glVertexAttribL3d = missing_glVertexAttribL3d;
    }
    _getProcAddress( dt.glVertexAttribL3dv, glVertexAttribL3dv, "glVertexAttribL3dv" );
    if( dt.glVertexAttribL3dv == NULL ) {
      dt.glVertexAttribL3dv = missing_glVertexAttribL3dv;
    }
    _getProcAddress( dt.glVertexAttribL4d, glVertexAttribL4d, "glVertexAttribL4d" );
    if( dt.glVertexAttribL4d == NULL ) {
      dt.glVertexAttribL4d = missing_glVertexAttribL4d;
    }
    _getProcAddress( dt.glVertexAttribL4dv, glVertexAttribL4dv, "glVertexAttribL4dv" );
    if( dt.glVertexAttribL4dv == NULL ) {
      dt.glVertexAttribL4dv = missing_glVertexAttribL4dv;
    }
    _getProcAddress( dt.glVertexAttribLPointer, glVertexAttribLPointer, "glVertexAttribLPointer" );
    if( dt.glVertexAttribLPointer == NULL ) {
      dt.glVertexAttribLPointer = missing_glVertexAttribLPointer;
    }

    // GL_ARB_vertex_attrib_binding

    _getProcAddress( dt.glBindVertexBuffer, glBindVertexBuffer, "glBindVertexBuffer" );
    if( dt.glBindVertexBuffer == NULL ) {
      dt.glBindVertexBuffer = missing_glBindVertexBuffer;
    }
    _getProcAddress( dt.glVertexArrayBindVertexBufferEXT, glVertexArrayBindVertexBufferEXT, "glVertexArrayBindVertexBufferEXT" );
    if( dt.glVertexArrayBindVertexBufferEXT == NULL ) {
      dt.glVertexArrayBindVertexBufferEXT = missing_glVertexArrayBindVertexBufferEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribBindingEXT, glVertexArrayVertexAttribBindingEXT, "glVertexArrayVertexAttribBindingEXT" );
    if( dt.glVertexArrayVertexAttribBindingEXT == NULL ) {
      dt.glVertexArrayVertexAttribBindingEXT = missing_glVertexArrayVertexAttribBindingEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribFormatEXT, glVertexArrayVertexAttribFormatEXT, "glVertexArrayVertexAttribFormatEXT" );
    if( dt.glVertexArrayVertexAttribFormatEXT == NULL ) {
      dt.glVertexArrayVertexAttribFormatEXT = missing_glVertexArrayVertexAttribFormatEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribIFormatEXT, glVertexArrayVertexAttribIFormatEXT, "glVertexArrayVertexAttribIFormatEXT" );
    if( dt.glVertexArrayVertexAttribIFormatEXT == NULL ) {
      dt.glVertexArrayVertexAttribIFormatEXT = missing_glVertexArrayVertexAttribIFormatEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribLFormatEXT, glVertexArrayVertexAttribLFormatEXT, "glVertexArrayVertexAttribLFormatEXT" );
    if( dt.glVertexArrayVertexAttribLFormatEXT == NULL ) {
      dt.glVertexArrayVertexAttribLFormatEXT = missing_glVertexArrayVertexAttribLFormatEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexBindingDivisorEXT, glVertexArrayVertexBindingDivisorEXT, "glVertexArrayVertexBindingDivisorEXT" );
    if( dt.glVertexArrayVertexBindingDivisorEXT == NULL ) {
      dt.glVertexArrayVertexBindingDivisorEXT = missing_glVertexArrayVertexBindingDivisorEXT;
    }
    _getProcAddress( dt.glVertexAttribBinding, glVertexAttribBinding, "glVertexAttribBinding" );
    if( dt.glVertexAttribBinding == NULL ) {
      dt.glVertexAttribBinding = missing_glVertexAttribBinding;
    }
    _getProcAddress( dt.glVertexAttribFormat, glVertexAttribFormat, "glVertexAttribFormat" );
    if( dt.glVertexAttribFormat == NULL ) {
      dt.glVertexAttribFormat = missing_glVertexAttribFormat;
    }
    _getProcAddress( dt.glVertexAttribIFormat, glVertexAttribIFormat, "glVertexAttribIFormat" );
    if( dt.glVertexAttribIFormat == NULL ) {
      dt.glVertexAttribIFormat = missing_glVertexAttribIFormat;
    }
    _getProcAddress( dt.glVertexAttribLFormat, glVertexAttribLFormat, "glVertexAttribLFormat" );
    if( dt.glVertexAttribLFormat == NULL ) {
      dt.glVertexAttribLFormat = missing_glVertexAttribLFormat;
    }
    _getProcAddress( dt.glVertexBindingDivisor, glVertexBindingDivisor, "glVertexBindingDivisor" );
    if( dt.glVertexBindingDivisor == NULL ) {
      dt.glVertexBindingDivisor = missing_glVertexBindingDivisor;
    }

    // GL_ARB_vertex_blend

    _getProcAddress( dt.glVertexBlendARB, glVertexBlendARB, "glVertexBlendARB" );
    if( dt.glVertexBlendARB == NULL ) {
      dt.glVertexBlendARB = missing_glVertexBlendARB;
    }
    _getProcAddress( dt.glWeightPointerARB, glWeightPointerARB, "glWeightPointerARB" );
    if( dt.glWeightPointerARB == NULL ) {
      dt.glWeightPointerARB = missing_glWeightPointerARB;
    }
    _getProcAddress( dt.glWeightbvARB, glWeightbvARB, "glWeightbvARB" );
    if( dt.glWeightbvARB == NULL ) {
      dt.glWeightbvARB = missing_glWeightbvARB;
    }
    _getProcAddress( dt.glWeightdvARB, glWeightdvARB, "glWeightdvARB" );
    if( dt.glWeightdvARB == NULL ) {
      dt.glWeightdvARB = missing_glWeightdvARB;
    }
    _getProcAddress( dt.glWeightfvARB, glWeightfvARB, "glWeightfvARB" );
    if( dt.glWeightfvARB == NULL ) {
      dt.glWeightfvARB = missing_glWeightfvARB;
    }
    _getProcAddress( dt.glWeightivARB, glWeightivARB, "glWeightivARB" );
    if( dt.glWeightivARB == NULL ) {
      dt.glWeightivARB = missing_glWeightivARB;
    }
    _getProcAddress( dt.glWeightsvARB, glWeightsvARB, "glWeightsvARB" );
    if( dt.glWeightsvARB == NULL ) {
      dt.glWeightsvARB = missing_glWeightsvARB;
    }
    _getProcAddress( dt.glWeightubvARB, glWeightubvARB, "glWeightubvARB" );
    if( dt.glWeightubvARB == NULL ) {
      dt.glWeightubvARB = missing_glWeightubvARB;
    }
    _getProcAddress( dt.glWeightuivARB, glWeightuivARB, "glWeightuivARB" );
    if( dt.glWeightuivARB == NULL ) {
      dt.glWeightuivARB = missing_glWeightuivARB;
    }
    _getProcAddress( dt.glWeightusvARB, glWeightusvARB, "glWeightusvARB" );
    if( dt.glWeightusvARB == NULL ) {
      dt.glWeightusvARB = missing_glWeightusvARB;
    }

    // GL_ARB_vertex_buffer_object

    _getProcAddress( dt.glBindBufferARB, glBindBufferARB, "glBindBufferARB" );
    if( dt.glBindBufferARB == NULL ) {
      dt.glBindBufferARB = missing_glBindBufferARB;
    }
    _getProcAddress( dt.glBufferDataARB, glBufferDataARB, "glBufferDataARB" );
    if( dt.glBufferDataARB == NULL ) {
      dt.glBufferDataARB = missing_glBufferDataARB;
    }
    _getProcAddress( dt.glBufferSubDataARB, glBufferSubDataARB, "glBufferSubDataARB" );
    if( dt.glBufferSubDataARB == NULL ) {
      dt.glBufferSubDataARB = missing_glBufferSubDataARB;
    }
    _getProcAddress( dt.glDeleteBuffersARB, glDeleteBuffersARB, "glDeleteBuffersARB" );
    if( dt.glDeleteBuffersARB == NULL ) {
      dt.glDeleteBuffersARB = missing_glDeleteBuffersARB;
    }
    _getProcAddress( dt.glGenBuffersARB, glGenBuffersARB, "glGenBuffersARB" );
    if( dt.glGenBuffersARB == NULL ) {
      dt.glGenBuffersARB = missing_glGenBuffersARB;
    }
    _getProcAddress( dt.glGetBufferParameterivARB, glGetBufferParameterivARB, "glGetBufferParameterivARB" );
    if( dt.glGetBufferParameterivARB == NULL ) {
      dt.glGetBufferParameterivARB = missing_glGetBufferParameterivARB;
    }
    _getProcAddress( dt.glGetBufferPointervARB, glGetBufferPointervARB, "glGetBufferPointervARB" );
    if( dt.glGetBufferPointervARB == NULL ) {
      dt.glGetBufferPointervARB = missing_glGetBufferPointervARB;
    }
    _getProcAddress( dt.glGetBufferSubDataARB, glGetBufferSubDataARB, "glGetBufferSubDataARB" );
    if( dt.glGetBufferSubDataARB == NULL ) {
      dt.glGetBufferSubDataARB = missing_glGetBufferSubDataARB;
    }
    _getProcAddress( dt.glIsBufferARB, glIsBufferARB, "glIsBufferARB" );
    if( dt.glIsBufferARB == NULL ) {
      dt.glIsBufferARB = missing_glIsBufferARB;
    }
    _getProcAddress( dt.glMapBufferARB, glMapBufferARB, "glMapBufferARB" );
    if( dt.glMapBufferARB == NULL ) {
      dt.glMapBufferARB = missing_glMapBufferARB;
    }
    _getProcAddress( dt.glUnmapBufferARB, glUnmapBufferARB, "glUnmapBufferARB" );
    if( dt.glUnmapBufferARB == NULL ) {
      dt.glUnmapBufferARB = missing_glUnmapBufferARB;
    }

    // GL_ARB_vertex_program

    _getProcAddress( dt.glBindProgramARB, glBindProgramARB, "glBindProgramARB" );
    if( dt.glBindProgramARB == NULL ) {
      dt.glBindProgramARB = missing_glBindProgramARB;
    }
    _getProcAddress( dt.glDeleteProgramsARB, glDeleteProgramsARB, "glDeleteProgramsARB" );
    if( dt.glDeleteProgramsARB == NULL ) {
      dt.glDeleteProgramsARB = missing_glDeleteProgramsARB;
    }
    _getProcAddress( dt.glDisableVertexAttribArrayARB, glDisableVertexAttribArrayARB, "glDisableVertexAttribArrayARB" );
    if( dt.glDisableVertexAttribArrayARB == NULL ) {
      dt.glDisableVertexAttribArrayARB = missing_glDisableVertexAttribArrayARB;
    }
    _getProcAddress( dt.glEnableVertexAttribArrayARB, glEnableVertexAttribArrayARB, "glEnableVertexAttribArrayARB" );
    if( dt.glEnableVertexAttribArrayARB == NULL ) {
      dt.glEnableVertexAttribArrayARB = missing_glEnableVertexAttribArrayARB;
    }
    _getProcAddress( dt.glGenProgramsARB, glGenProgramsARB, "glGenProgramsARB" );
    if( dt.glGenProgramsARB == NULL ) {
      dt.glGenProgramsARB = missing_glGenProgramsARB;
    }
    _getProcAddress( dt.glGetProgramEnvParameterdvARB, glGetProgramEnvParameterdvARB, "glGetProgramEnvParameterdvARB" );
    if( dt.glGetProgramEnvParameterdvARB == NULL ) {
      dt.glGetProgramEnvParameterdvARB = missing_glGetProgramEnvParameterdvARB;
    }
    _getProcAddress( dt.glGetProgramEnvParameterfvARB, glGetProgramEnvParameterfvARB, "glGetProgramEnvParameterfvARB" );
    if( dt.glGetProgramEnvParameterfvARB == NULL ) {
      dt.glGetProgramEnvParameterfvARB = missing_glGetProgramEnvParameterfvARB;
    }
    _getProcAddress( dt.glGetProgramLocalParameterdvARB, glGetProgramLocalParameterdvARB, "glGetProgramLocalParameterdvARB" );
    if( dt.glGetProgramLocalParameterdvARB == NULL ) {
      dt.glGetProgramLocalParameterdvARB = missing_glGetProgramLocalParameterdvARB;
    }
    _getProcAddress( dt.glGetProgramLocalParameterfvARB, glGetProgramLocalParameterfvARB, "glGetProgramLocalParameterfvARB" );
    if( dt.glGetProgramLocalParameterfvARB == NULL ) {
      dt.glGetProgramLocalParameterfvARB = missing_glGetProgramLocalParameterfvARB;
    }
    _getProcAddress( dt.glGetProgramStringARB, glGetProgramStringARB, "glGetProgramStringARB" );
    if( dt.glGetProgramStringARB == NULL ) {
      dt.glGetProgramStringARB = missing_glGetProgramStringARB;
    }
    _getProcAddress( dt.glGetProgramivARB, glGetProgramivARB, "glGetProgramivARB" );
    if( dt.glGetProgramivARB == NULL ) {
      dt.glGetProgramivARB = missing_glGetProgramivARB;
    }
    _getProcAddress( dt.glGetVertexAttribPointervARB, glGetVertexAttribPointervARB, "glGetVertexAttribPointervARB" );
    if( dt.glGetVertexAttribPointervARB == NULL ) {
      dt.glGetVertexAttribPointervARB = missing_glGetVertexAttribPointervARB;
    }
    _getProcAddress( dt.glGetVertexAttribdvARB, glGetVertexAttribdvARB, "glGetVertexAttribdvARB" );
    if( dt.glGetVertexAttribdvARB == NULL ) {
      dt.glGetVertexAttribdvARB = missing_glGetVertexAttribdvARB;
    }
    _getProcAddress( dt.glGetVertexAttribfvARB, glGetVertexAttribfvARB, "glGetVertexAttribfvARB" );
    if( dt.glGetVertexAttribfvARB == NULL ) {
      dt.glGetVertexAttribfvARB = missing_glGetVertexAttribfvARB;
    }
    _getProcAddress( dt.glGetVertexAttribivARB, glGetVertexAttribivARB, "glGetVertexAttribivARB" );
    if( dt.glGetVertexAttribivARB == NULL ) {
      dt.glGetVertexAttribivARB = missing_glGetVertexAttribivARB;
    }
    _getProcAddress( dt.glIsProgramARB, glIsProgramARB, "glIsProgramARB" );
    if( dt.glIsProgramARB == NULL ) {
      dt.glIsProgramARB = missing_glIsProgramARB;
    }
    _getProcAddress( dt.glProgramEnvParameter4dARB, glProgramEnvParameter4dARB, "glProgramEnvParameter4dARB" );
    if( dt.glProgramEnvParameter4dARB == NULL ) {
      dt.glProgramEnvParameter4dARB = missing_glProgramEnvParameter4dARB;
    }
    _getProcAddress( dt.glProgramEnvParameter4dvARB, glProgramEnvParameter4dvARB, "glProgramEnvParameter4dvARB" );
    if( dt.glProgramEnvParameter4dvARB == NULL ) {
      dt.glProgramEnvParameter4dvARB = missing_glProgramEnvParameter4dvARB;
    }
    _getProcAddress( dt.glProgramEnvParameter4fARB, glProgramEnvParameter4fARB, "glProgramEnvParameter4fARB" );
    if( dt.glProgramEnvParameter4fARB == NULL ) {
      dt.glProgramEnvParameter4fARB = missing_glProgramEnvParameter4fARB;
    }
    _getProcAddress( dt.glProgramEnvParameter4fvARB, glProgramEnvParameter4fvARB, "glProgramEnvParameter4fvARB" );
    if( dt.glProgramEnvParameter4fvARB == NULL ) {
      dt.glProgramEnvParameter4fvARB = missing_glProgramEnvParameter4fvARB;
    }
    _getProcAddress( dt.glProgramLocalParameter4dARB, glProgramLocalParameter4dARB, "glProgramLocalParameter4dARB" );
    if( dt.glProgramLocalParameter4dARB == NULL ) {
      dt.glProgramLocalParameter4dARB = missing_glProgramLocalParameter4dARB;
    }
    _getProcAddress( dt.glProgramLocalParameter4dvARB, glProgramLocalParameter4dvARB, "glProgramLocalParameter4dvARB" );
    if( dt.glProgramLocalParameter4dvARB == NULL ) {
      dt.glProgramLocalParameter4dvARB = missing_glProgramLocalParameter4dvARB;
    }
    _getProcAddress( dt.glProgramLocalParameter4fARB, glProgramLocalParameter4fARB, "glProgramLocalParameter4fARB" );
    if( dt.glProgramLocalParameter4fARB == NULL ) {
      dt.glProgramLocalParameter4fARB = missing_glProgramLocalParameter4fARB;
    }
    _getProcAddress( dt.glProgramLocalParameter4fvARB, glProgramLocalParameter4fvARB, "glProgramLocalParameter4fvARB" );
    if( dt.glProgramLocalParameter4fvARB == NULL ) {
      dt.glProgramLocalParameter4fvARB = missing_glProgramLocalParameter4fvARB;
    }
    _getProcAddress( dt.glProgramStringARB, glProgramStringARB, "glProgramStringARB" );
    if( dt.glProgramStringARB == NULL ) {
      dt.glProgramStringARB = missing_glProgramStringARB;
    }
    _getProcAddress( dt.glVertexAttrib1dARB, glVertexAttrib1dARB, "glVertexAttrib1dARB" );
    if( dt.glVertexAttrib1dARB == NULL ) {
      dt.glVertexAttrib1dARB = missing_glVertexAttrib1dARB;
    }
    _getProcAddress( dt.glVertexAttrib1dvARB, glVertexAttrib1dvARB, "glVertexAttrib1dvARB" );
    if( dt.glVertexAttrib1dvARB == NULL ) {
      dt.glVertexAttrib1dvARB = missing_glVertexAttrib1dvARB;
    }
    _getProcAddress( dt.glVertexAttrib1fARB, glVertexAttrib1fARB, "glVertexAttrib1fARB" );
    if( dt.glVertexAttrib1fARB == NULL ) {
      dt.glVertexAttrib1fARB = missing_glVertexAttrib1fARB;
    }
    _getProcAddress( dt.glVertexAttrib1fvARB, glVertexAttrib1fvARB, "glVertexAttrib1fvARB" );
    if( dt.glVertexAttrib1fvARB == NULL ) {
      dt.glVertexAttrib1fvARB = missing_glVertexAttrib1fvARB;
    }
    _getProcAddress( dt.glVertexAttrib1sARB, glVertexAttrib1sARB, "glVertexAttrib1sARB" );
    if( dt.glVertexAttrib1sARB == NULL ) {
      dt.glVertexAttrib1sARB = missing_glVertexAttrib1sARB;
    }
    _getProcAddress( dt.glVertexAttrib1svARB, glVertexAttrib1svARB, "glVertexAttrib1svARB" );
    if( dt.glVertexAttrib1svARB == NULL ) {
      dt.glVertexAttrib1svARB = missing_glVertexAttrib1svARB;
    }
    _getProcAddress( dt.glVertexAttrib2dARB, glVertexAttrib2dARB, "glVertexAttrib2dARB" );
    if( dt.glVertexAttrib2dARB == NULL ) {
      dt.glVertexAttrib2dARB = missing_glVertexAttrib2dARB;
    }
    _getProcAddress( dt.glVertexAttrib2dvARB, glVertexAttrib2dvARB, "glVertexAttrib2dvARB" );
    if( dt.glVertexAttrib2dvARB == NULL ) {
      dt.glVertexAttrib2dvARB = missing_glVertexAttrib2dvARB;
    }
    _getProcAddress( dt.glVertexAttrib2fARB, glVertexAttrib2fARB, "glVertexAttrib2fARB" );
    if( dt.glVertexAttrib2fARB == NULL ) {
      dt.glVertexAttrib2fARB = missing_glVertexAttrib2fARB;
    }
    _getProcAddress( dt.glVertexAttrib2fvARB, glVertexAttrib2fvARB, "glVertexAttrib2fvARB" );
    if( dt.glVertexAttrib2fvARB == NULL ) {
      dt.glVertexAttrib2fvARB = missing_glVertexAttrib2fvARB;
    }
    _getProcAddress( dt.glVertexAttrib2sARB, glVertexAttrib2sARB, "glVertexAttrib2sARB" );
    if( dt.glVertexAttrib2sARB == NULL ) {
      dt.glVertexAttrib2sARB = missing_glVertexAttrib2sARB;
    }
    _getProcAddress( dt.glVertexAttrib2svARB, glVertexAttrib2svARB, "glVertexAttrib2svARB" );
    if( dt.glVertexAttrib2svARB == NULL ) {
      dt.glVertexAttrib2svARB = missing_glVertexAttrib2svARB;
    }
    _getProcAddress( dt.glVertexAttrib3dARB, glVertexAttrib3dARB, "glVertexAttrib3dARB" );
    if( dt.glVertexAttrib3dARB == NULL ) {
      dt.glVertexAttrib3dARB = missing_glVertexAttrib3dARB;
    }
    _getProcAddress( dt.glVertexAttrib3dvARB, glVertexAttrib3dvARB, "glVertexAttrib3dvARB" );
    if( dt.glVertexAttrib3dvARB == NULL ) {
      dt.glVertexAttrib3dvARB = missing_glVertexAttrib3dvARB;
    }
    _getProcAddress( dt.glVertexAttrib3fARB, glVertexAttrib3fARB, "glVertexAttrib3fARB" );
    if( dt.glVertexAttrib3fARB == NULL ) {
      dt.glVertexAttrib3fARB = missing_glVertexAttrib3fARB;
    }
    _getProcAddress( dt.glVertexAttrib3fvARB, glVertexAttrib3fvARB, "glVertexAttrib3fvARB" );
    if( dt.glVertexAttrib3fvARB == NULL ) {
      dt.glVertexAttrib3fvARB = missing_glVertexAttrib3fvARB;
    }
    _getProcAddress( dt.glVertexAttrib3sARB, glVertexAttrib3sARB, "glVertexAttrib3sARB" );
    if( dt.glVertexAttrib3sARB == NULL ) {
      dt.glVertexAttrib3sARB = missing_glVertexAttrib3sARB;
    }
    _getProcAddress( dt.glVertexAttrib3svARB, glVertexAttrib3svARB, "glVertexAttrib3svARB" );
    if( dt.glVertexAttrib3svARB == NULL ) {
      dt.glVertexAttrib3svARB = missing_glVertexAttrib3svARB;
    }
    _getProcAddress( dt.glVertexAttrib4NbvARB, glVertexAttrib4NbvARB, "glVertexAttrib4NbvARB" );
    if( dt.glVertexAttrib4NbvARB == NULL ) {
      dt.glVertexAttrib4NbvARB = missing_glVertexAttrib4NbvARB;
    }
    _getProcAddress( dt.glVertexAttrib4NivARB, glVertexAttrib4NivARB, "glVertexAttrib4NivARB" );
    if( dt.glVertexAttrib4NivARB == NULL ) {
      dt.glVertexAttrib4NivARB = missing_glVertexAttrib4NivARB;
    }
    _getProcAddress( dt.glVertexAttrib4NsvARB, glVertexAttrib4NsvARB, "glVertexAttrib4NsvARB" );
    if( dt.glVertexAttrib4NsvARB == NULL ) {
      dt.glVertexAttrib4NsvARB = missing_glVertexAttrib4NsvARB;
    }
    _getProcAddress( dt.glVertexAttrib4NubARB, glVertexAttrib4NubARB, "glVertexAttrib4NubARB" );
    if( dt.glVertexAttrib4NubARB == NULL ) {
      dt.glVertexAttrib4NubARB = missing_glVertexAttrib4NubARB;
    }
    _getProcAddress( dt.glVertexAttrib4NubvARB, glVertexAttrib4NubvARB, "glVertexAttrib4NubvARB" );
    if( dt.glVertexAttrib4NubvARB == NULL ) {
      dt.glVertexAttrib4NubvARB = missing_glVertexAttrib4NubvARB;
    }
    _getProcAddress( dt.glVertexAttrib4NuivARB, glVertexAttrib4NuivARB, "glVertexAttrib4NuivARB" );
    if( dt.glVertexAttrib4NuivARB == NULL ) {
      dt.glVertexAttrib4NuivARB = missing_glVertexAttrib4NuivARB;
    }
    _getProcAddress( dt.glVertexAttrib4NusvARB, glVertexAttrib4NusvARB, "glVertexAttrib4NusvARB" );
    if( dt.glVertexAttrib4NusvARB == NULL ) {
      dt.glVertexAttrib4NusvARB = missing_glVertexAttrib4NusvARB;
    }
    _getProcAddress( dt.glVertexAttrib4bvARB, glVertexAttrib4bvARB, "glVertexAttrib4bvARB" );
    if( dt.glVertexAttrib4bvARB == NULL ) {
      dt.glVertexAttrib4bvARB = missing_glVertexAttrib4bvARB;
    }
    _getProcAddress( dt.glVertexAttrib4dARB, glVertexAttrib4dARB, "glVertexAttrib4dARB" );
    if( dt.glVertexAttrib4dARB == NULL ) {
      dt.glVertexAttrib4dARB = missing_glVertexAttrib4dARB;
    }
    _getProcAddress( dt.glVertexAttrib4dvARB, glVertexAttrib4dvARB, "glVertexAttrib4dvARB" );
    if( dt.glVertexAttrib4dvARB == NULL ) {
      dt.glVertexAttrib4dvARB = missing_glVertexAttrib4dvARB;
    }
    _getProcAddress( dt.glVertexAttrib4fARB, glVertexAttrib4fARB, "glVertexAttrib4fARB" );
    if( dt.glVertexAttrib4fARB == NULL ) {
      dt.glVertexAttrib4fARB = missing_glVertexAttrib4fARB;
    }
    _getProcAddress( dt.glVertexAttrib4fvARB, glVertexAttrib4fvARB, "glVertexAttrib4fvARB" );
    if( dt.glVertexAttrib4fvARB == NULL ) {
      dt.glVertexAttrib4fvARB = missing_glVertexAttrib4fvARB;
    }
    _getProcAddress( dt.glVertexAttrib4ivARB, glVertexAttrib4ivARB, "glVertexAttrib4ivARB" );
    if( dt.glVertexAttrib4ivARB == NULL ) {
      dt.glVertexAttrib4ivARB = missing_glVertexAttrib4ivARB;
    }
    _getProcAddress( dt.glVertexAttrib4sARB, glVertexAttrib4sARB, "glVertexAttrib4sARB" );
    if( dt.glVertexAttrib4sARB == NULL ) {
      dt.glVertexAttrib4sARB = missing_glVertexAttrib4sARB;
    }
    _getProcAddress( dt.glVertexAttrib4svARB, glVertexAttrib4svARB, "glVertexAttrib4svARB" );
    if( dt.glVertexAttrib4svARB == NULL ) {
      dt.glVertexAttrib4svARB = missing_glVertexAttrib4svARB;
    }
    _getProcAddress( dt.glVertexAttrib4ubvARB, glVertexAttrib4ubvARB, "glVertexAttrib4ubvARB" );
    if( dt.glVertexAttrib4ubvARB == NULL ) {
      dt.glVertexAttrib4ubvARB = missing_glVertexAttrib4ubvARB;
    }
    _getProcAddress( dt.glVertexAttrib4uivARB, glVertexAttrib4uivARB, "glVertexAttrib4uivARB" );
    if( dt.glVertexAttrib4uivARB == NULL ) {
      dt.glVertexAttrib4uivARB = missing_glVertexAttrib4uivARB;
    }
    _getProcAddress( dt.glVertexAttrib4usvARB, glVertexAttrib4usvARB, "glVertexAttrib4usvARB" );
    if( dt.glVertexAttrib4usvARB == NULL ) {
      dt.glVertexAttrib4usvARB = missing_glVertexAttrib4usvARB;
    }
    _getProcAddress( dt.glVertexAttribPointerARB, glVertexAttribPointerARB, "glVertexAttribPointerARB" );
    if( dt.glVertexAttribPointerARB == NULL ) {
      dt.glVertexAttribPointerARB = missing_glVertexAttribPointerARB;
    }

    // GL_ARB_vertex_shader

    _getProcAddress( dt.glBindAttribLocationARB, glBindAttribLocationARB, "glBindAttribLocationARB" );
    if( dt.glBindAttribLocationARB == NULL ) {
      dt.glBindAttribLocationARB = missing_glBindAttribLocationARB;
    }
    _getProcAddress( dt.glGetActiveAttribARB, glGetActiveAttribARB, "glGetActiveAttribARB" );
    if( dt.glGetActiveAttribARB == NULL ) {
      dt.glGetActiveAttribARB = missing_glGetActiveAttribARB;
    }
    _getProcAddress( dt.glGetAttribLocationARB, glGetAttribLocationARB, "glGetAttribLocationARB" );
    if( dt.glGetAttribLocationARB == NULL ) {
      dt.glGetAttribLocationARB = missing_glGetAttribLocationARB;
    }

    // GL_ARB_vertex_type_2_10_10_10_rev

    _getProcAddress( dt.glColorP3ui, glColorP3ui, "glColorP3ui" );
    if( dt.glColorP3ui == NULL ) {
      dt.glColorP3ui = missing_glColorP3ui;
    }
    _getProcAddress( dt.glColorP3uiv, glColorP3uiv, "glColorP3uiv" );
    if( dt.glColorP3uiv == NULL ) {
      dt.glColorP3uiv = missing_glColorP3uiv;
    }
    _getProcAddress( dt.glColorP4ui, glColorP4ui, "glColorP4ui" );
    if( dt.glColorP4ui == NULL ) {
      dt.glColorP4ui = missing_glColorP4ui;
    }
    _getProcAddress( dt.glColorP4uiv, glColorP4uiv, "glColorP4uiv" );
    if( dt.glColorP4uiv == NULL ) {
      dt.glColorP4uiv = missing_glColorP4uiv;
    }
    _getProcAddress( dt.glMultiTexCoordP1ui, glMultiTexCoordP1ui, "glMultiTexCoordP1ui" );
    if( dt.glMultiTexCoordP1ui == NULL ) {
      dt.glMultiTexCoordP1ui = missing_glMultiTexCoordP1ui;
    }
    _getProcAddress( dt.glMultiTexCoordP1uiv, glMultiTexCoordP1uiv, "glMultiTexCoordP1uiv" );
    if( dt.glMultiTexCoordP1uiv == NULL ) {
      dt.glMultiTexCoordP1uiv = missing_glMultiTexCoordP1uiv;
    }
    _getProcAddress( dt.glMultiTexCoordP2ui, glMultiTexCoordP2ui, "glMultiTexCoordP2ui" );
    if( dt.glMultiTexCoordP2ui == NULL ) {
      dt.glMultiTexCoordP2ui = missing_glMultiTexCoordP2ui;
    }
    _getProcAddress( dt.glMultiTexCoordP2uiv, glMultiTexCoordP2uiv, "glMultiTexCoordP2uiv" );
    if( dt.glMultiTexCoordP2uiv == NULL ) {
      dt.glMultiTexCoordP2uiv = missing_glMultiTexCoordP2uiv;
    }
    _getProcAddress( dt.glMultiTexCoordP3ui, glMultiTexCoordP3ui, "glMultiTexCoordP3ui" );
    if( dt.glMultiTexCoordP3ui == NULL ) {
      dt.glMultiTexCoordP3ui = missing_glMultiTexCoordP3ui;
    }
    _getProcAddress( dt.glMultiTexCoordP3uiv, glMultiTexCoordP3uiv, "glMultiTexCoordP3uiv" );
    if( dt.glMultiTexCoordP3uiv == NULL ) {
      dt.glMultiTexCoordP3uiv = missing_glMultiTexCoordP3uiv;
    }
    _getProcAddress( dt.glMultiTexCoordP4ui, glMultiTexCoordP4ui, "glMultiTexCoordP4ui" );
    if( dt.glMultiTexCoordP4ui == NULL ) {
      dt.glMultiTexCoordP4ui = missing_glMultiTexCoordP4ui;
    }
    _getProcAddress( dt.glMultiTexCoordP4uiv, glMultiTexCoordP4uiv, "glMultiTexCoordP4uiv" );
    if( dt.glMultiTexCoordP4uiv == NULL ) {
      dt.glMultiTexCoordP4uiv = missing_glMultiTexCoordP4uiv;
    }
    _getProcAddress( dt.glNormalP3ui, glNormalP3ui, "glNormalP3ui" );
    if( dt.glNormalP3ui == NULL ) {
      dt.glNormalP3ui = missing_glNormalP3ui;
    }
    _getProcAddress( dt.glNormalP3uiv, glNormalP3uiv, "glNormalP3uiv" );
    if( dt.glNormalP3uiv == NULL ) {
      dt.glNormalP3uiv = missing_glNormalP3uiv;
    }
    _getProcAddress( dt.glSecondaryColorP3ui, glSecondaryColorP3ui, "glSecondaryColorP3ui" );
    if( dt.glSecondaryColorP3ui == NULL ) {
      dt.glSecondaryColorP3ui = missing_glSecondaryColorP3ui;
    }
    _getProcAddress( dt.glSecondaryColorP3uiv, glSecondaryColorP3uiv, "glSecondaryColorP3uiv" );
    if( dt.glSecondaryColorP3uiv == NULL ) {
      dt.glSecondaryColorP3uiv = missing_glSecondaryColorP3uiv;
    }
    _getProcAddress( dt.glTexCoordP1ui, glTexCoordP1ui, "glTexCoordP1ui" );
    if( dt.glTexCoordP1ui == NULL ) {
      dt.glTexCoordP1ui = missing_glTexCoordP1ui;
    }
    _getProcAddress( dt.glTexCoordP1uiv, glTexCoordP1uiv, "glTexCoordP1uiv" );
    if( dt.glTexCoordP1uiv == NULL ) {
      dt.glTexCoordP1uiv = missing_glTexCoordP1uiv;
    }
    _getProcAddress( dt.glTexCoordP2ui, glTexCoordP2ui, "glTexCoordP2ui" );
    if( dt.glTexCoordP2ui == NULL ) {
      dt.glTexCoordP2ui = missing_glTexCoordP2ui;
    }
    _getProcAddress( dt.glTexCoordP2uiv, glTexCoordP2uiv, "glTexCoordP2uiv" );
    if( dt.glTexCoordP2uiv == NULL ) {
      dt.glTexCoordP2uiv = missing_glTexCoordP2uiv;
    }
    _getProcAddress( dt.glTexCoordP3ui, glTexCoordP3ui, "glTexCoordP3ui" );
    if( dt.glTexCoordP3ui == NULL ) {
      dt.glTexCoordP3ui = missing_glTexCoordP3ui;
    }
    _getProcAddress( dt.glTexCoordP3uiv, glTexCoordP3uiv, "glTexCoordP3uiv" );
    if( dt.glTexCoordP3uiv == NULL ) {
      dt.glTexCoordP3uiv = missing_glTexCoordP3uiv;
    }
    _getProcAddress( dt.glTexCoordP4ui, glTexCoordP4ui, "glTexCoordP4ui" );
    if( dt.glTexCoordP4ui == NULL ) {
      dt.glTexCoordP4ui = missing_glTexCoordP4ui;
    }
    _getProcAddress( dt.glTexCoordP4uiv, glTexCoordP4uiv, "glTexCoordP4uiv" );
    if( dt.glTexCoordP4uiv == NULL ) {
      dt.glTexCoordP4uiv = missing_glTexCoordP4uiv;
    }
    _getProcAddress( dt.glVertexAttribP1ui, glVertexAttribP1ui, "glVertexAttribP1ui" );
    if( dt.glVertexAttribP1ui == NULL ) {
      dt.glVertexAttribP1ui = missing_glVertexAttribP1ui;
    }
    _getProcAddress( dt.glVertexAttribP1uiv, glVertexAttribP1uiv, "glVertexAttribP1uiv" );
    if( dt.glVertexAttribP1uiv == NULL ) {
      dt.glVertexAttribP1uiv = missing_glVertexAttribP1uiv;
    }
    _getProcAddress( dt.glVertexAttribP2ui, glVertexAttribP2ui, "glVertexAttribP2ui" );
    if( dt.glVertexAttribP2ui == NULL ) {
      dt.glVertexAttribP2ui = missing_glVertexAttribP2ui;
    }
    _getProcAddress( dt.glVertexAttribP2uiv, glVertexAttribP2uiv, "glVertexAttribP2uiv" );
    if( dt.glVertexAttribP2uiv == NULL ) {
      dt.glVertexAttribP2uiv = missing_glVertexAttribP2uiv;
    }
    _getProcAddress( dt.glVertexAttribP3ui, glVertexAttribP3ui, "glVertexAttribP3ui" );
    if( dt.glVertexAttribP3ui == NULL ) {
      dt.glVertexAttribP3ui = missing_glVertexAttribP3ui;
    }
    _getProcAddress( dt.glVertexAttribP3uiv, glVertexAttribP3uiv, "glVertexAttribP3uiv" );
    if( dt.glVertexAttribP3uiv == NULL ) {
      dt.glVertexAttribP3uiv = missing_glVertexAttribP3uiv;
    }
    _getProcAddress( dt.glVertexAttribP4ui, glVertexAttribP4ui, "glVertexAttribP4ui" );
    if( dt.glVertexAttribP4ui == NULL ) {
      dt.glVertexAttribP4ui = missing_glVertexAttribP4ui;
    }
    _getProcAddress( dt.glVertexAttribP4uiv, glVertexAttribP4uiv, "glVertexAttribP4uiv" );
    if( dt.glVertexAttribP4uiv == NULL ) {
      dt.glVertexAttribP4uiv = missing_glVertexAttribP4uiv;
    }
    _getProcAddress( dt.glVertexP2ui, glVertexP2ui, "glVertexP2ui" );
    if( dt.glVertexP2ui == NULL ) {
      dt.glVertexP2ui = missing_glVertexP2ui;
    }
    _getProcAddress( dt.glVertexP2uiv, glVertexP2uiv, "glVertexP2uiv" );
    if( dt.glVertexP2uiv == NULL ) {
      dt.glVertexP2uiv = missing_glVertexP2uiv;
    }
    _getProcAddress( dt.glVertexP3ui, glVertexP3ui, "glVertexP3ui" );
    if( dt.glVertexP3ui == NULL ) {
      dt.glVertexP3ui = missing_glVertexP3ui;
    }
    _getProcAddress( dt.glVertexP3uiv, glVertexP3uiv, "glVertexP3uiv" );
    if( dt.glVertexP3uiv == NULL ) {
      dt.glVertexP3uiv = missing_glVertexP3uiv;
    }
    _getProcAddress( dt.glVertexP4ui, glVertexP4ui, "glVertexP4ui" );
    if( dt.glVertexP4ui == NULL ) {
      dt.glVertexP4ui = missing_glVertexP4ui;
    }
    _getProcAddress( dt.glVertexP4uiv, glVertexP4uiv, "glVertexP4uiv" );
    if( dt.glVertexP4uiv == NULL ) {
      dt.glVertexP4uiv = missing_glVertexP4uiv;
    }

    // GL_ARB_viewport_array

    _getProcAddress( dt.glDepthRangeArrayv, glDepthRangeArrayv, "glDepthRangeArrayv" );
    if( dt.glDepthRangeArrayv == NULL ) {
      dt.glDepthRangeArrayv = missing_glDepthRangeArrayv;
    }
    _getProcAddress( dt.glDepthRangeIndexed, glDepthRangeIndexed, "glDepthRangeIndexed" );
    if( dt.glDepthRangeIndexed == NULL ) {
      dt.glDepthRangeIndexed = missing_glDepthRangeIndexed;
    }
    _getProcAddress( dt.glGetDoublei_v, glGetDoublei_v, "glGetDoublei_v" );
    if( dt.glGetDoublei_v == NULL ) {
      dt.glGetDoublei_v = missing_glGetDoublei_v;
    }
    _getProcAddress( dt.glGetFloati_v, glGetFloati_v, "glGetFloati_v" );
    if( dt.glGetFloati_v == NULL ) {
      dt.glGetFloati_v = missing_glGetFloati_v;
    }
    _getProcAddress( dt.glScissorArrayv, glScissorArrayv, "glScissorArrayv" );
    if( dt.glScissorArrayv == NULL ) {
      dt.glScissorArrayv = missing_glScissorArrayv;
    }
    _getProcAddress( dt.glScissorIndexed, glScissorIndexed, "glScissorIndexed" );
    if( dt.glScissorIndexed == NULL ) {
      dt.glScissorIndexed = missing_glScissorIndexed;
    }
    _getProcAddress( dt.glScissorIndexedv, glScissorIndexedv, "glScissorIndexedv" );
    if( dt.glScissorIndexedv == NULL ) {
      dt.glScissorIndexedv = missing_glScissorIndexedv;
    }
    _getProcAddress( dt.glViewportArrayv, glViewportArrayv, "glViewportArrayv" );
    if( dt.glViewportArrayv == NULL ) {
      dt.glViewportArrayv = missing_glViewportArrayv;
    }
    _getProcAddress( dt.glViewportIndexedf, glViewportIndexedf, "glViewportIndexedf" );
    if( dt.glViewportIndexedf == NULL ) {
      dt.glViewportIndexedf = missing_glViewportIndexedf;
    }
    _getProcAddress( dt.glViewportIndexedfv, glViewportIndexedfv, "glViewportIndexedfv" );
    if( dt.glViewportIndexedfv == NULL ) {
      dt.glViewportIndexedfv = missing_glViewportIndexedfv;
    }

    // GL_ARB_window_pos

    _getProcAddress( dt.glWindowPos2dARB, glWindowPos2dARB, "glWindowPos2dARB" );
    if( dt.glWindowPos2dARB == NULL ) {
      dt.glWindowPos2dARB = missing_glWindowPos2dARB;
    }
    _getProcAddress( dt.glWindowPos2dvARB, glWindowPos2dvARB, "glWindowPos2dvARB" );
    if( dt.glWindowPos2dvARB == NULL ) {
      dt.glWindowPos2dvARB = missing_glWindowPos2dvARB;
    }
    _getProcAddress( dt.glWindowPos2fARB, glWindowPos2fARB, "glWindowPos2fARB" );
    if( dt.glWindowPos2fARB == NULL ) {
      dt.glWindowPos2fARB = missing_glWindowPos2fARB;
    }
    _getProcAddress( dt.glWindowPos2fvARB, glWindowPos2fvARB, "glWindowPos2fvARB" );
    if( dt.glWindowPos2fvARB == NULL ) {
      dt.glWindowPos2fvARB = missing_glWindowPos2fvARB;
    }
    _getProcAddress( dt.glWindowPos2iARB, glWindowPos2iARB, "glWindowPos2iARB" );
    if( dt.glWindowPos2iARB == NULL ) {
      dt.glWindowPos2iARB = missing_glWindowPos2iARB;
    }
    _getProcAddress( dt.glWindowPos2ivARB, glWindowPos2ivARB, "glWindowPos2ivARB" );
    if( dt.glWindowPos2ivARB == NULL ) {
      dt.glWindowPos2ivARB = missing_glWindowPos2ivARB;
    }
    _getProcAddress( dt.glWindowPos2sARB, glWindowPos2sARB, "glWindowPos2sARB" );
    if( dt.glWindowPos2sARB == NULL ) {
      dt.glWindowPos2sARB = missing_glWindowPos2sARB;
    }
    _getProcAddress( dt.glWindowPos2svARB, glWindowPos2svARB, "glWindowPos2svARB" );
    if( dt.glWindowPos2svARB == NULL ) {
      dt.glWindowPos2svARB = missing_glWindowPos2svARB;
    }
    _getProcAddress( dt.glWindowPos3dARB, glWindowPos3dARB, "glWindowPos3dARB" );
    if( dt.glWindowPos3dARB == NULL ) {
      dt.glWindowPos3dARB = missing_glWindowPos3dARB;
    }
    _getProcAddress( dt.glWindowPos3dvARB, glWindowPos3dvARB, "glWindowPos3dvARB" );
    if( dt.glWindowPos3dvARB == NULL ) {
      dt.glWindowPos3dvARB = missing_glWindowPos3dvARB;
    }
    _getProcAddress( dt.glWindowPos3fARB, glWindowPos3fARB, "glWindowPos3fARB" );
    if( dt.glWindowPos3fARB == NULL ) {
      dt.glWindowPos3fARB = missing_glWindowPos3fARB;
    }
    _getProcAddress( dt.glWindowPos3fvARB, glWindowPos3fvARB, "glWindowPos3fvARB" );
    if( dt.glWindowPos3fvARB == NULL ) {
      dt.glWindowPos3fvARB = missing_glWindowPos3fvARB;
    }
    _getProcAddress( dt.glWindowPos3iARB, glWindowPos3iARB, "glWindowPos3iARB" );
    if( dt.glWindowPos3iARB == NULL ) {
      dt.glWindowPos3iARB = missing_glWindowPos3iARB;
    }
    _getProcAddress( dt.glWindowPos3ivARB, glWindowPos3ivARB, "glWindowPos3ivARB" );
    if( dt.glWindowPos3ivARB == NULL ) {
      dt.glWindowPos3ivARB = missing_glWindowPos3ivARB;
    }
    _getProcAddress( dt.glWindowPos3sARB, glWindowPos3sARB, "glWindowPos3sARB" );
    if( dt.glWindowPos3sARB == NULL ) {
      dt.glWindowPos3sARB = missing_glWindowPos3sARB;
    }
    _getProcAddress( dt.glWindowPos3svARB, glWindowPos3svARB, "glWindowPos3svARB" );
    if( dt.glWindowPos3svARB == NULL ) {
      dt.glWindowPos3svARB = missing_glWindowPos3svARB;
    }

    // GL_ATI_draw_buffers

    _getProcAddress( dt.glDrawBuffersATI, glDrawBuffersATI, "glDrawBuffersATI" );
    if( dt.glDrawBuffersATI == NULL ) {
      dt.glDrawBuffersATI = missing_glDrawBuffersATI;
    }

    // GL_ATI_element_array

    _getProcAddress( dt.glDrawElementArrayATI, glDrawElementArrayATI, "glDrawElementArrayATI" );
    if( dt.glDrawElementArrayATI == NULL ) {
      dt.glDrawElementArrayATI = missing_glDrawElementArrayATI;
    }
    _getProcAddress( dt.glDrawRangeElementArrayATI, glDrawRangeElementArrayATI, "glDrawRangeElementArrayATI" );
    if( dt.glDrawRangeElementArrayATI == NULL ) {
      dt.glDrawRangeElementArrayATI = missing_glDrawRangeElementArrayATI;
    }
    _getProcAddress( dt.glElementPointerATI, glElementPointerATI, "glElementPointerATI" );
    if( dt.glElementPointerATI == NULL ) {
      dt.glElementPointerATI = missing_glElementPointerATI;
    }

    // GL_ATI_envmap_bumpmap

    _getProcAddress( dt.glGetTexBumpParameterfvATI, glGetTexBumpParameterfvATI, "glGetTexBumpParameterfvATI" );
    if( dt.glGetTexBumpParameterfvATI == NULL ) {
      dt.glGetTexBumpParameterfvATI = missing_glGetTexBumpParameterfvATI;
    }
    _getProcAddress( dt.glGetTexBumpParameterivATI, glGetTexBumpParameterivATI, "glGetTexBumpParameterivATI" );
    if( dt.glGetTexBumpParameterivATI == NULL ) {
      dt.glGetTexBumpParameterivATI = missing_glGetTexBumpParameterivATI;
    }
    _getProcAddress( dt.glTexBumpParameterfvATI, glTexBumpParameterfvATI, "glTexBumpParameterfvATI" );
    if( dt.glTexBumpParameterfvATI == NULL ) {
      dt.glTexBumpParameterfvATI = missing_glTexBumpParameterfvATI;
    }
    _getProcAddress( dt.glTexBumpParameterivATI, glTexBumpParameterivATI, "glTexBumpParameterivATI" );
    if( dt.glTexBumpParameterivATI == NULL ) {
      dt.glTexBumpParameterivATI = missing_glTexBumpParameterivATI;
    }

    // GL_ATI_fragment_shader

    _getProcAddress( dt.glAlphaFragmentOp1ATI, glAlphaFragmentOp1ATI, "glAlphaFragmentOp1ATI" );
    if( dt.glAlphaFragmentOp1ATI == NULL ) {
      dt.glAlphaFragmentOp1ATI = missing_glAlphaFragmentOp1ATI;
    }
    _getProcAddress( dt.glAlphaFragmentOp2ATI, glAlphaFragmentOp2ATI, "glAlphaFragmentOp2ATI" );
    if( dt.glAlphaFragmentOp2ATI == NULL ) {
      dt.glAlphaFragmentOp2ATI = missing_glAlphaFragmentOp2ATI;
    }
    _getProcAddress( dt.glAlphaFragmentOp3ATI, glAlphaFragmentOp3ATI, "glAlphaFragmentOp3ATI" );
    if( dt.glAlphaFragmentOp3ATI == NULL ) {
      dt.glAlphaFragmentOp3ATI = missing_glAlphaFragmentOp3ATI;
    }
    _getProcAddress( dt.glBeginFragmentShaderATI, glBeginFragmentShaderATI, "glBeginFragmentShaderATI" );
    if( dt.glBeginFragmentShaderATI == NULL ) {
      dt.glBeginFragmentShaderATI = missing_glBeginFragmentShaderATI;
    }
    _getProcAddress( dt.glBindFragmentShaderATI, glBindFragmentShaderATI, "glBindFragmentShaderATI" );
    if( dt.glBindFragmentShaderATI == NULL ) {
      dt.glBindFragmentShaderATI = missing_glBindFragmentShaderATI;
    }
    _getProcAddress( dt.glColorFragmentOp1ATI, glColorFragmentOp1ATI, "glColorFragmentOp1ATI" );
    if( dt.glColorFragmentOp1ATI == NULL ) {
      dt.glColorFragmentOp1ATI = missing_glColorFragmentOp1ATI;
    }
    _getProcAddress( dt.glColorFragmentOp2ATI, glColorFragmentOp2ATI, "glColorFragmentOp2ATI" );
    if( dt.glColorFragmentOp2ATI == NULL ) {
      dt.glColorFragmentOp2ATI = missing_glColorFragmentOp2ATI;
    }
    _getProcAddress( dt.glColorFragmentOp3ATI, glColorFragmentOp3ATI, "glColorFragmentOp3ATI" );
    if( dt.glColorFragmentOp3ATI == NULL ) {
      dt.glColorFragmentOp3ATI = missing_glColorFragmentOp3ATI;
    }
    _getProcAddress( dt.glDeleteFragmentShaderATI, glDeleteFragmentShaderATI, "glDeleteFragmentShaderATI" );
    if( dt.glDeleteFragmentShaderATI == NULL ) {
      dt.glDeleteFragmentShaderATI = missing_glDeleteFragmentShaderATI;
    }
    _getProcAddress( dt.glEndFragmentShaderATI, glEndFragmentShaderATI, "glEndFragmentShaderATI" );
    if( dt.glEndFragmentShaderATI == NULL ) {
      dt.glEndFragmentShaderATI = missing_glEndFragmentShaderATI;
    }
    _getProcAddress( dt.glGenFragmentShadersATI, glGenFragmentShadersATI, "glGenFragmentShadersATI" );
    if( dt.glGenFragmentShadersATI == NULL ) {
      dt.glGenFragmentShadersATI = missing_glGenFragmentShadersATI;
    }
    _getProcAddress( dt.glPassTexCoordATI, glPassTexCoordATI, "glPassTexCoordATI" );
    if( dt.glPassTexCoordATI == NULL ) {
      dt.glPassTexCoordATI = missing_glPassTexCoordATI;
    }
    _getProcAddress( dt.glSampleMapATI, glSampleMapATI, "glSampleMapATI" );
    if( dt.glSampleMapATI == NULL ) {
      dt.glSampleMapATI = missing_glSampleMapATI;
    }
    _getProcAddress( dt.glSetFragmentShaderConstantATI, glSetFragmentShaderConstantATI, "glSetFragmentShaderConstantATI" );
    if( dt.glSetFragmentShaderConstantATI == NULL ) {
      dt.glSetFragmentShaderConstantATI = missing_glSetFragmentShaderConstantATI;
    }

    // GL_ATI_map_object_buffer

    _getProcAddress( dt.glMapObjectBufferATI, glMapObjectBufferATI, "glMapObjectBufferATI" );
    if( dt.glMapObjectBufferATI == NULL ) {
      dt.glMapObjectBufferATI = missing_glMapObjectBufferATI;
    }
    _getProcAddress( dt.glUnmapObjectBufferATI, glUnmapObjectBufferATI, "glUnmapObjectBufferATI" );
    if( dt.glUnmapObjectBufferATI == NULL ) {
      dt.glUnmapObjectBufferATI = missing_glUnmapObjectBufferATI;
    }

    // GL_ATI_pn_triangles

    _getProcAddress( dt.glPNTrianglesfATI, glPNTrianglesfATI, "glPNTrianglesfATI" );
    if( dt.glPNTrianglesfATI == NULL ) {
      dt.glPNTrianglesfATI = missing_glPNTrianglesfATI;
    }
    _getProcAddress( dt.glPNTrianglesiATI, glPNTrianglesiATI, "glPNTrianglesiATI" );
    if( dt.glPNTrianglesiATI == NULL ) {
      dt.glPNTrianglesiATI = missing_glPNTrianglesiATI;
    }

    // GL_ATI_separate_stencil

    _getProcAddress( dt.glStencilFuncSeparateATI, glStencilFuncSeparateATI, "glStencilFuncSeparateATI" );
    if( dt.glStencilFuncSeparateATI == NULL ) {
      dt.glStencilFuncSeparateATI = missing_glStencilFuncSeparateATI;
    }
    _getProcAddress( dt.glStencilOpSeparateATI, glStencilOpSeparateATI, "glStencilOpSeparateATI" );
    if( dt.glStencilOpSeparateATI == NULL ) {
      dt.glStencilOpSeparateATI = missing_glStencilOpSeparateATI;
    }

    // GL_ATI_vertex_array_object

    _getProcAddress( dt.glArrayObjectATI, glArrayObjectATI, "glArrayObjectATI" );
    if( dt.glArrayObjectATI == NULL ) {
      dt.glArrayObjectATI = missing_glArrayObjectATI;
    }
    _getProcAddress( dt.glFreeObjectBufferATI, glFreeObjectBufferATI, "glFreeObjectBufferATI" );
    if( dt.glFreeObjectBufferATI == NULL ) {
      dt.glFreeObjectBufferATI = missing_glFreeObjectBufferATI;
    }
    _getProcAddress( dt.glGetArrayObjectfvATI, glGetArrayObjectfvATI, "glGetArrayObjectfvATI" );
    if( dt.glGetArrayObjectfvATI == NULL ) {
      dt.glGetArrayObjectfvATI = missing_glGetArrayObjectfvATI;
    }
    _getProcAddress( dt.glGetArrayObjectivATI, glGetArrayObjectivATI, "glGetArrayObjectivATI" );
    if( dt.glGetArrayObjectivATI == NULL ) {
      dt.glGetArrayObjectivATI = missing_glGetArrayObjectivATI;
    }
    _getProcAddress( dt.glGetObjectBufferfvATI, glGetObjectBufferfvATI, "glGetObjectBufferfvATI" );
    if( dt.glGetObjectBufferfvATI == NULL ) {
      dt.glGetObjectBufferfvATI = missing_glGetObjectBufferfvATI;
    }
    _getProcAddress( dt.glGetObjectBufferivATI, glGetObjectBufferivATI, "glGetObjectBufferivATI" );
    if( dt.glGetObjectBufferivATI == NULL ) {
      dt.glGetObjectBufferivATI = missing_glGetObjectBufferivATI;
    }
    _getProcAddress( dt.glGetVariantArrayObjectfvATI, glGetVariantArrayObjectfvATI, "glGetVariantArrayObjectfvATI" );
    if( dt.glGetVariantArrayObjectfvATI == NULL ) {
      dt.glGetVariantArrayObjectfvATI = missing_glGetVariantArrayObjectfvATI;
    }
    _getProcAddress( dt.glGetVariantArrayObjectivATI, glGetVariantArrayObjectivATI, "glGetVariantArrayObjectivATI" );
    if( dt.glGetVariantArrayObjectivATI == NULL ) {
      dt.glGetVariantArrayObjectivATI = missing_glGetVariantArrayObjectivATI;
    }
    _getProcAddress( dt.glIsObjectBufferATI, glIsObjectBufferATI, "glIsObjectBufferATI" );
    if( dt.glIsObjectBufferATI == NULL ) {
      dt.glIsObjectBufferATI = missing_glIsObjectBufferATI;
    }
    _getProcAddress( dt.glNewObjectBufferATI, glNewObjectBufferATI, "glNewObjectBufferATI" );
    if( dt.glNewObjectBufferATI == NULL ) {
      dt.glNewObjectBufferATI = missing_glNewObjectBufferATI;
    }
    _getProcAddress( dt.glUpdateObjectBufferATI, glUpdateObjectBufferATI, "glUpdateObjectBufferATI" );
    if( dt.glUpdateObjectBufferATI == NULL ) {
      dt.glUpdateObjectBufferATI = missing_glUpdateObjectBufferATI;
    }
    _getProcAddress( dt.glVariantArrayObjectATI, glVariantArrayObjectATI, "glVariantArrayObjectATI" );
    if( dt.glVariantArrayObjectATI == NULL ) {
      dt.glVariantArrayObjectATI = missing_glVariantArrayObjectATI;
    }

    // GL_ATI_vertex_attrib_array_object

    _getProcAddress( dt.glGetVertexAttribArrayObjectfvATI, glGetVertexAttribArrayObjectfvATI, "glGetVertexAttribArrayObjectfvATI" );
    if( dt.glGetVertexAttribArrayObjectfvATI == NULL ) {
      dt.glGetVertexAttribArrayObjectfvATI = missing_glGetVertexAttribArrayObjectfvATI;
    }
    _getProcAddress( dt.glGetVertexAttribArrayObjectivATI, glGetVertexAttribArrayObjectivATI, "glGetVertexAttribArrayObjectivATI" );
    if( dt.glGetVertexAttribArrayObjectivATI == NULL ) {
      dt.glGetVertexAttribArrayObjectivATI = missing_glGetVertexAttribArrayObjectivATI;
    }
    _getProcAddress( dt.glVertexAttribArrayObjectATI, glVertexAttribArrayObjectATI, "glVertexAttribArrayObjectATI" );
    if( dt.glVertexAttribArrayObjectATI == NULL ) {
      dt.glVertexAttribArrayObjectATI = missing_glVertexAttribArrayObjectATI;
    }

    // GL_ATI_vertex_streams

    _getProcAddress( dt.glClientActiveVertexStreamATI, glClientActiveVertexStreamATI, "glClientActiveVertexStreamATI" );
    if( dt.glClientActiveVertexStreamATI == NULL ) {
      dt.glClientActiveVertexStreamATI = missing_glClientActiveVertexStreamATI;
    }
    _getProcAddress( dt.glNormalStream3bATI, glNormalStream3bATI, "glNormalStream3bATI" );
    if( dt.glNormalStream3bATI == NULL ) {
      dt.glNormalStream3bATI = missing_glNormalStream3bATI;
    }
    _getProcAddress( dt.glNormalStream3bvATI, glNormalStream3bvATI, "glNormalStream3bvATI" );
    if( dt.glNormalStream3bvATI == NULL ) {
      dt.glNormalStream3bvATI = missing_glNormalStream3bvATI;
    }
    _getProcAddress( dt.glNormalStream3dATI, glNormalStream3dATI, "glNormalStream3dATI" );
    if( dt.glNormalStream3dATI == NULL ) {
      dt.glNormalStream3dATI = missing_glNormalStream3dATI;
    }
    _getProcAddress( dt.glNormalStream3dvATI, glNormalStream3dvATI, "glNormalStream3dvATI" );
    if( dt.glNormalStream3dvATI == NULL ) {
      dt.glNormalStream3dvATI = missing_glNormalStream3dvATI;
    }
    _getProcAddress( dt.glNormalStream3fATI, glNormalStream3fATI, "glNormalStream3fATI" );
    if( dt.glNormalStream3fATI == NULL ) {
      dt.glNormalStream3fATI = missing_glNormalStream3fATI;
    }
    _getProcAddress( dt.glNormalStream3fvATI, glNormalStream3fvATI, "glNormalStream3fvATI" );
    if( dt.glNormalStream3fvATI == NULL ) {
      dt.glNormalStream3fvATI = missing_glNormalStream3fvATI;
    }
    _getProcAddress( dt.glNormalStream3iATI, glNormalStream3iATI, "glNormalStream3iATI" );
    if( dt.glNormalStream3iATI == NULL ) {
      dt.glNormalStream3iATI = missing_glNormalStream3iATI;
    }
    _getProcAddress( dt.glNormalStream3ivATI, glNormalStream3ivATI, "glNormalStream3ivATI" );
    if( dt.glNormalStream3ivATI == NULL ) {
      dt.glNormalStream3ivATI = missing_glNormalStream3ivATI;
    }
    _getProcAddress( dt.glNormalStream3sATI, glNormalStream3sATI, "glNormalStream3sATI" );
    if( dt.glNormalStream3sATI == NULL ) {
      dt.glNormalStream3sATI = missing_glNormalStream3sATI;
    }
    _getProcAddress( dt.glNormalStream3svATI, glNormalStream3svATI, "glNormalStream3svATI" );
    if( dt.glNormalStream3svATI == NULL ) {
      dt.glNormalStream3svATI = missing_glNormalStream3svATI;
    }
    _getProcAddress( dt.glVertexBlendEnvfATI, glVertexBlendEnvfATI, "glVertexBlendEnvfATI" );
    if( dt.glVertexBlendEnvfATI == NULL ) {
      dt.glVertexBlendEnvfATI = missing_glVertexBlendEnvfATI;
    }
    _getProcAddress( dt.glVertexBlendEnviATI, glVertexBlendEnviATI, "glVertexBlendEnviATI" );
    if( dt.glVertexBlendEnviATI == NULL ) {
      dt.glVertexBlendEnviATI = missing_glVertexBlendEnviATI;
    }
    _getProcAddress( dt.glVertexStream1dATI, glVertexStream1dATI, "glVertexStream1dATI" );
    if( dt.glVertexStream1dATI == NULL ) {
      dt.glVertexStream1dATI = missing_glVertexStream1dATI;
    }
    _getProcAddress( dt.glVertexStream1dvATI, glVertexStream1dvATI, "glVertexStream1dvATI" );
    if( dt.glVertexStream1dvATI == NULL ) {
      dt.glVertexStream1dvATI = missing_glVertexStream1dvATI;
    }
    _getProcAddress( dt.glVertexStream1fATI, glVertexStream1fATI, "glVertexStream1fATI" );
    if( dt.glVertexStream1fATI == NULL ) {
      dt.glVertexStream1fATI = missing_glVertexStream1fATI;
    }
    _getProcAddress( dt.glVertexStream1fvATI, glVertexStream1fvATI, "glVertexStream1fvATI" );
    if( dt.glVertexStream1fvATI == NULL ) {
      dt.glVertexStream1fvATI = missing_glVertexStream1fvATI;
    }
    _getProcAddress( dt.glVertexStream1iATI, glVertexStream1iATI, "glVertexStream1iATI" );
    if( dt.glVertexStream1iATI == NULL ) {
      dt.glVertexStream1iATI = missing_glVertexStream1iATI;
    }
    _getProcAddress( dt.glVertexStream1ivATI, glVertexStream1ivATI, "glVertexStream1ivATI" );
    if( dt.glVertexStream1ivATI == NULL ) {
      dt.glVertexStream1ivATI = missing_glVertexStream1ivATI;
    }
    _getProcAddress( dt.glVertexStream1sATI, glVertexStream1sATI, "glVertexStream1sATI" );
    if( dt.glVertexStream1sATI == NULL ) {
      dt.glVertexStream1sATI = missing_glVertexStream1sATI;
    }
    _getProcAddress( dt.glVertexStream1svATI, glVertexStream1svATI, "glVertexStream1svATI" );
    if( dt.glVertexStream1svATI == NULL ) {
      dt.glVertexStream1svATI = missing_glVertexStream1svATI;
    }
    _getProcAddress( dt.glVertexStream2dATI, glVertexStream2dATI, "glVertexStream2dATI" );
    if( dt.glVertexStream2dATI == NULL ) {
      dt.glVertexStream2dATI = missing_glVertexStream2dATI;
    }
    _getProcAddress( dt.glVertexStream2dvATI, glVertexStream2dvATI, "glVertexStream2dvATI" );
    if( dt.glVertexStream2dvATI == NULL ) {
      dt.glVertexStream2dvATI = missing_glVertexStream2dvATI;
    }
    _getProcAddress( dt.glVertexStream2fATI, glVertexStream2fATI, "glVertexStream2fATI" );
    if( dt.glVertexStream2fATI == NULL ) {
      dt.glVertexStream2fATI = missing_glVertexStream2fATI;
    }
    _getProcAddress( dt.glVertexStream2fvATI, glVertexStream2fvATI, "glVertexStream2fvATI" );
    if( dt.glVertexStream2fvATI == NULL ) {
      dt.glVertexStream2fvATI = missing_glVertexStream2fvATI;
    }
    _getProcAddress( dt.glVertexStream2iATI, glVertexStream2iATI, "glVertexStream2iATI" );
    if( dt.glVertexStream2iATI == NULL ) {
      dt.glVertexStream2iATI = missing_glVertexStream2iATI;
    }
    _getProcAddress( dt.glVertexStream2ivATI, glVertexStream2ivATI, "glVertexStream2ivATI" );
    if( dt.glVertexStream2ivATI == NULL ) {
      dt.glVertexStream2ivATI = missing_glVertexStream2ivATI;
    }
    _getProcAddress( dt.glVertexStream2sATI, glVertexStream2sATI, "glVertexStream2sATI" );
    if( dt.glVertexStream2sATI == NULL ) {
      dt.glVertexStream2sATI = missing_glVertexStream2sATI;
    }
    _getProcAddress( dt.glVertexStream2svATI, glVertexStream2svATI, "glVertexStream2svATI" );
    if( dt.glVertexStream2svATI == NULL ) {
      dt.glVertexStream2svATI = missing_glVertexStream2svATI;
    }
    _getProcAddress( dt.glVertexStream3dATI, glVertexStream3dATI, "glVertexStream3dATI" );
    if( dt.glVertexStream3dATI == NULL ) {
      dt.glVertexStream3dATI = missing_glVertexStream3dATI;
    }
    _getProcAddress( dt.glVertexStream3dvATI, glVertexStream3dvATI, "glVertexStream3dvATI" );
    if( dt.glVertexStream3dvATI == NULL ) {
      dt.glVertexStream3dvATI = missing_glVertexStream3dvATI;
    }
    _getProcAddress( dt.glVertexStream3fATI, glVertexStream3fATI, "glVertexStream3fATI" );
    if( dt.glVertexStream3fATI == NULL ) {
      dt.glVertexStream3fATI = missing_glVertexStream3fATI;
    }
    _getProcAddress( dt.glVertexStream3fvATI, glVertexStream3fvATI, "glVertexStream3fvATI" );
    if( dt.glVertexStream3fvATI == NULL ) {
      dt.glVertexStream3fvATI = missing_glVertexStream3fvATI;
    }
    _getProcAddress( dt.glVertexStream3iATI, glVertexStream3iATI, "glVertexStream3iATI" );
    if( dt.glVertexStream3iATI == NULL ) {
      dt.glVertexStream3iATI = missing_glVertexStream3iATI;
    }
    _getProcAddress( dt.glVertexStream3ivATI, glVertexStream3ivATI, "glVertexStream3ivATI" );
    if( dt.glVertexStream3ivATI == NULL ) {
      dt.glVertexStream3ivATI = missing_glVertexStream3ivATI;
    }
    _getProcAddress( dt.glVertexStream3sATI, glVertexStream3sATI, "glVertexStream3sATI" );
    if( dt.glVertexStream3sATI == NULL ) {
      dt.glVertexStream3sATI = missing_glVertexStream3sATI;
    }
    _getProcAddress( dt.glVertexStream3svATI, glVertexStream3svATI, "glVertexStream3svATI" );
    if( dt.glVertexStream3svATI == NULL ) {
      dt.glVertexStream3svATI = missing_glVertexStream3svATI;
    }
    _getProcAddress( dt.glVertexStream4dATI, glVertexStream4dATI, "glVertexStream4dATI" );
    if( dt.glVertexStream4dATI == NULL ) {
      dt.glVertexStream4dATI = missing_glVertexStream4dATI;
    }
    _getProcAddress( dt.glVertexStream4dvATI, glVertexStream4dvATI, "glVertexStream4dvATI" );
    if( dt.glVertexStream4dvATI == NULL ) {
      dt.glVertexStream4dvATI = missing_glVertexStream4dvATI;
    }
    _getProcAddress( dt.glVertexStream4fATI, glVertexStream4fATI, "glVertexStream4fATI" );
    if( dt.glVertexStream4fATI == NULL ) {
      dt.glVertexStream4fATI = missing_glVertexStream4fATI;
    }
    _getProcAddress( dt.glVertexStream4fvATI, glVertexStream4fvATI, "glVertexStream4fvATI" );
    if( dt.glVertexStream4fvATI == NULL ) {
      dt.glVertexStream4fvATI = missing_glVertexStream4fvATI;
    }
    _getProcAddress( dt.glVertexStream4iATI, glVertexStream4iATI, "glVertexStream4iATI" );
    if( dt.glVertexStream4iATI == NULL ) {
      dt.glVertexStream4iATI = missing_glVertexStream4iATI;
    }
    _getProcAddress( dt.glVertexStream4ivATI, glVertexStream4ivATI, "glVertexStream4ivATI" );
    if( dt.glVertexStream4ivATI == NULL ) {
      dt.glVertexStream4ivATI = missing_glVertexStream4ivATI;
    }
    _getProcAddress( dt.glVertexStream4sATI, glVertexStream4sATI, "glVertexStream4sATI" );
    if( dt.glVertexStream4sATI == NULL ) {
      dt.glVertexStream4sATI = missing_glVertexStream4sATI;
    }
    _getProcAddress( dt.glVertexStream4svATI, glVertexStream4svATI, "glVertexStream4svATI" );
    if( dt.glVertexStream4svATI == NULL ) {
      dt.glVertexStream4svATI = missing_glVertexStream4svATI;
    }

    // GL_EXT_bindable_uniform

    _getProcAddress( dt.glGetUniformBufferSizeEXT, glGetUniformBufferSizeEXT, "glGetUniformBufferSizeEXT" );
    if( dt.glGetUniformBufferSizeEXT == NULL ) {
      dt.glGetUniformBufferSizeEXT = missing_glGetUniformBufferSizeEXT;
    }
    _getProcAddress( dt.glGetUniformOffsetEXT, glGetUniformOffsetEXT, "glGetUniformOffsetEXT" );
    if( dt.glGetUniformOffsetEXT == NULL ) {
      dt.glGetUniformOffsetEXT = missing_glGetUniformOffsetEXT;
    }
    _getProcAddress( dt.glUniformBufferEXT, glUniformBufferEXT, "glUniformBufferEXT" );
    if( dt.glUniformBufferEXT == NULL ) {
      dt.glUniformBufferEXT = missing_glUniformBufferEXT;
    }

    // GL_EXT_blend_color

    _getProcAddress( dt.glBlendColorEXT, glBlendColorEXT, "glBlendColorEXT" );
    if( dt.glBlendColorEXT == NULL ) {
      dt.glBlendColorEXT = missing_glBlendColorEXT;
    }

    // GL_EXT_blend_equation_separate

    _getProcAddress( dt.glBlendEquationSeparateEXT, glBlendEquationSeparateEXT, "glBlendEquationSeparateEXT" );
    if( dt.glBlendEquationSeparateEXT == NULL ) {
      dt.glBlendEquationSeparateEXT = missing_glBlendEquationSeparateEXT;
    }

    // GL_EXT_blend_func_separate

    _getProcAddress( dt.glBlendFuncSeparateEXT, glBlendFuncSeparateEXT, "glBlendFuncSeparateEXT" );
    if( dt.glBlendFuncSeparateEXT == NULL ) {
      dt.glBlendFuncSeparateEXT = missing_glBlendFuncSeparateEXT;
    }

    // GL_EXT_blend_minmax

    _getProcAddress( dt.glBlendEquationEXT, glBlendEquationEXT, "glBlendEquationEXT" );
    if( dt.glBlendEquationEXT == NULL ) {
      dt.glBlendEquationEXT = missing_glBlendEquationEXT;
    }

    // GL_EXT_color_subtable

    _getProcAddress( dt.glColorSubTableEXT, glColorSubTableEXT, "glColorSubTableEXT" );
    if( dt.glColorSubTableEXT == NULL ) {
      dt.glColorSubTableEXT = missing_glColorSubTableEXT;
    }
    _getProcAddress( dt.glCopyColorSubTableEXT, glCopyColorSubTableEXT, "glCopyColorSubTableEXT" );
    if( dt.glCopyColorSubTableEXT == NULL ) {
      dt.glCopyColorSubTableEXT = missing_glCopyColorSubTableEXT;
    }

    // GL_EXT_compiled_vertex_array

    _getProcAddress( dt.glLockArraysEXT, glLockArraysEXT, "glLockArraysEXT" );
    if( dt.glLockArraysEXT == NULL ) {
      dt.glLockArraysEXT = missing_glLockArraysEXT;
    }
    _getProcAddress( dt.glUnlockArraysEXT, glUnlockArraysEXT, "glUnlockArraysEXT" );
    if( dt.glUnlockArraysEXT == NULL ) {
      dt.glUnlockArraysEXT = missing_glUnlockArraysEXT;
    }

    // GL_EXT_convolution

    _getProcAddress( dt.glConvolutionFilter1DEXT, glConvolutionFilter1DEXT, "glConvolutionFilter1DEXT" );
    if( dt.glConvolutionFilter1DEXT == NULL ) {
      dt.glConvolutionFilter1DEXT = missing_glConvolutionFilter1DEXT;
    }
    _getProcAddress( dt.glConvolutionFilter2DEXT, glConvolutionFilter2DEXT, "glConvolutionFilter2DEXT" );
    if( dt.glConvolutionFilter2DEXT == NULL ) {
      dt.glConvolutionFilter2DEXT = missing_glConvolutionFilter2DEXT;
    }
    _getProcAddress( dt.glConvolutionParameterfEXT, glConvolutionParameterfEXT, "glConvolutionParameterfEXT" );
    if( dt.glConvolutionParameterfEXT == NULL ) {
      dt.glConvolutionParameterfEXT = missing_glConvolutionParameterfEXT;
    }
    _getProcAddress( dt.glConvolutionParameterfvEXT, glConvolutionParameterfvEXT, "glConvolutionParameterfvEXT" );
    if( dt.glConvolutionParameterfvEXT == NULL ) {
      dt.glConvolutionParameterfvEXT = missing_glConvolutionParameterfvEXT;
    }
    _getProcAddress( dt.glConvolutionParameteriEXT, glConvolutionParameteriEXT, "glConvolutionParameteriEXT" );
    if( dt.glConvolutionParameteriEXT == NULL ) {
      dt.glConvolutionParameteriEXT = missing_glConvolutionParameteriEXT;
    }
    _getProcAddress( dt.glConvolutionParameterivEXT, glConvolutionParameterivEXT, "glConvolutionParameterivEXT" );
    if( dt.glConvolutionParameterivEXT == NULL ) {
      dt.glConvolutionParameterivEXT = missing_glConvolutionParameterivEXT;
    }
    _getProcAddress( dt.glCopyConvolutionFilter1DEXT, glCopyConvolutionFilter1DEXT, "glCopyConvolutionFilter1DEXT" );
    if( dt.glCopyConvolutionFilter1DEXT == NULL ) {
      dt.glCopyConvolutionFilter1DEXT = missing_glCopyConvolutionFilter1DEXT;
    }
    _getProcAddress( dt.glCopyConvolutionFilter2DEXT, glCopyConvolutionFilter2DEXT, "glCopyConvolutionFilter2DEXT" );
    if( dt.glCopyConvolutionFilter2DEXT == NULL ) {
      dt.glCopyConvolutionFilter2DEXT = missing_glCopyConvolutionFilter2DEXT;
    }
    _getProcAddress( dt.glGetConvolutionFilterEXT, glGetConvolutionFilterEXT, "glGetConvolutionFilterEXT" );
    if( dt.glGetConvolutionFilterEXT == NULL ) {
      dt.glGetConvolutionFilterEXT = missing_glGetConvolutionFilterEXT;
    }
    _getProcAddress( dt.glGetConvolutionParameterfvEXT, glGetConvolutionParameterfvEXT, "glGetConvolutionParameterfvEXT" );
    if( dt.glGetConvolutionParameterfvEXT == NULL ) {
      dt.glGetConvolutionParameterfvEXT = missing_glGetConvolutionParameterfvEXT;
    }
    _getProcAddress( dt.glGetConvolutionParameterivEXT, glGetConvolutionParameterivEXT, "glGetConvolutionParameterivEXT" );
    if( dt.glGetConvolutionParameterivEXT == NULL ) {
      dt.glGetConvolutionParameterivEXT = missing_glGetConvolutionParameterivEXT;
    }
    _getProcAddress( dt.glGetSeparableFilterEXT, glGetSeparableFilterEXT, "glGetSeparableFilterEXT" );
    if( dt.glGetSeparableFilterEXT == NULL ) {
      dt.glGetSeparableFilterEXT = missing_glGetSeparableFilterEXT;
    }
    _getProcAddress( dt.glSeparableFilter2DEXT, glSeparableFilter2DEXT, "glSeparableFilter2DEXT" );
    if( dt.glSeparableFilter2DEXT == NULL ) {
      dt.glSeparableFilter2DEXT = missing_glSeparableFilter2DEXT;
    }

    // GL_EXT_coordinate_frame

    _getProcAddress( dt.glBinormal3bEXT, glBinormal3bEXT, "glBinormal3bEXT" );
    if( dt.glBinormal3bEXT == NULL ) {
      dt.glBinormal3bEXT = missing_glBinormal3bEXT;
    }
    _getProcAddress( dt.glBinormal3bvEXT, glBinormal3bvEXT, "glBinormal3bvEXT" );
    if( dt.glBinormal3bvEXT == NULL ) {
      dt.glBinormal3bvEXT = missing_glBinormal3bvEXT;
    }
    _getProcAddress( dt.glBinormal3dEXT, glBinormal3dEXT, "glBinormal3dEXT" );
    if( dt.glBinormal3dEXT == NULL ) {
      dt.glBinormal3dEXT = missing_glBinormal3dEXT;
    }
    _getProcAddress( dt.glBinormal3dvEXT, glBinormal3dvEXT, "glBinormal3dvEXT" );
    if( dt.glBinormal3dvEXT == NULL ) {
      dt.glBinormal3dvEXT = missing_glBinormal3dvEXT;
    }
    _getProcAddress( dt.glBinormal3fEXT, glBinormal3fEXT, "glBinormal3fEXT" );
    if( dt.glBinormal3fEXT == NULL ) {
      dt.glBinormal3fEXT = missing_glBinormal3fEXT;
    }
    _getProcAddress( dt.glBinormal3fvEXT, glBinormal3fvEXT, "glBinormal3fvEXT" );
    if( dt.glBinormal3fvEXT == NULL ) {
      dt.glBinormal3fvEXT = missing_glBinormal3fvEXT;
    }
    _getProcAddress( dt.glBinormal3iEXT, glBinormal3iEXT, "glBinormal3iEXT" );
    if( dt.glBinormal3iEXT == NULL ) {
      dt.glBinormal3iEXT = missing_glBinormal3iEXT;
    }
    _getProcAddress( dt.glBinormal3ivEXT, glBinormal3ivEXT, "glBinormal3ivEXT" );
    if( dt.glBinormal3ivEXT == NULL ) {
      dt.glBinormal3ivEXT = missing_glBinormal3ivEXT;
    }
    _getProcAddress( dt.glBinormal3sEXT, glBinormal3sEXT, "glBinormal3sEXT" );
    if( dt.glBinormal3sEXT == NULL ) {
      dt.glBinormal3sEXT = missing_glBinormal3sEXT;
    }
    _getProcAddress( dt.glBinormal3svEXT, glBinormal3svEXT, "glBinormal3svEXT" );
    if( dt.glBinormal3svEXT == NULL ) {
      dt.glBinormal3svEXT = missing_glBinormal3svEXT;
    }
    _getProcAddress( dt.glBinormalPointerEXT, glBinormalPointerEXT, "glBinormalPointerEXT" );
    if( dt.glBinormalPointerEXT == NULL ) {
      dt.glBinormalPointerEXT = missing_glBinormalPointerEXT;
    }
    _getProcAddress( dt.glTangent3bEXT, glTangent3bEXT, "glTangent3bEXT" );
    if( dt.glTangent3bEXT == NULL ) {
      dt.glTangent3bEXT = missing_glTangent3bEXT;
    }
    _getProcAddress( dt.glTangent3bvEXT, glTangent3bvEXT, "glTangent3bvEXT" );
    if( dt.glTangent3bvEXT == NULL ) {
      dt.glTangent3bvEXT = missing_glTangent3bvEXT;
    }
    _getProcAddress( dt.glTangent3dEXT, glTangent3dEXT, "glTangent3dEXT" );
    if( dt.glTangent3dEXT == NULL ) {
      dt.glTangent3dEXT = missing_glTangent3dEXT;
    }
    _getProcAddress( dt.glTangent3dvEXT, glTangent3dvEXT, "glTangent3dvEXT" );
    if( dt.glTangent3dvEXT == NULL ) {
      dt.glTangent3dvEXT = missing_glTangent3dvEXT;
    }
    _getProcAddress( dt.glTangent3fEXT, glTangent3fEXT, "glTangent3fEXT" );
    if( dt.glTangent3fEXT == NULL ) {
      dt.glTangent3fEXT = missing_glTangent3fEXT;
    }
    _getProcAddress( dt.glTangent3fvEXT, glTangent3fvEXT, "glTangent3fvEXT" );
    if( dt.glTangent3fvEXT == NULL ) {
      dt.glTangent3fvEXT = missing_glTangent3fvEXT;
    }
    _getProcAddress( dt.glTangent3iEXT, glTangent3iEXT, "glTangent3iEXT" );
    if( dt.glTangent3iEXT == NULL ) {
      dt.glTangent3iEXT = missing_glTangent3iEXT;
    }
    _getProcAddress( dt.glTangent3ivEXT, glTangent3ivEXT, "glTangent3ivEXT" );
    if( dt.glTangent3ivEXT == NULL ) {
      dt.glTangent3ivEXT = missing_glTangent3ivEXT;
    }
    _getProcAddress( dt.glTangent3sEXT, glTangent3sEXT, "glTangent3sEXT" );
    if( dt.glTangent3sEXT == NULL ) {
      dt.glTangent3sEXT = missing_glTangent3sEXT;
    }
    _getProcAddress( dt.glTangent3svEXT, glTangent3svEXT, "glTangent3svEXT" );
    if( dt.glTangent3svEXT == NULL ) {
      dt.glTangent3svEXT = missing_glTangent3svEXT;
    }
    _getProcAddress( dt.glTangentPointerEXT, glTangentPointerEXT, "glTangentPointerEXT" );
    if( dt.glTangentPointerEXT == NULL ) {
      dt.glTangentPointerEXT = missing_glTangentPointerEXT;
    }

    // GL_EXT_copy_texture

    _getProcAddress( dt.glCopyTexImage1DEXT, glCopyTexImage1DEXT, "glCopyTexImage1DEXT" );
    if( dt.glCopyTexImage1DEXT == NULL ) {
      dt.glCopyTexImage1DEXT = missing_glCopyTexImage1DEXT;
    }
    _getProcAddress( dt.glCopyTexImage2DEXT, glCopyTexImage2DEXT, "glCopyTexImage2DEXT" );
    if( dt.glCopyTexImage2DEXT == NULL ) {
      dt.glCopyTexImage2DEXT = missing_glCopyTexImage2DEXT;
    }
    _getProcAddress( dt.glCopyTexSubImage1DEXT, glCopyTexSubImage1DEXT, "glCopyTexSubImage1DEXT" );
    if( dt.glCopyTexSubImage1DEXT == NULL ) {
      dt.glCopyTexSubImage1DEXT = missing_glCopyTexSubImage1DEXT;
    }
    _getProcAddress( dt.glCopyTexSubImage2DEXT, glCopyTexSubImage2DEXT, "glCopyTexSubImage2DEXT" );
    if( dt.glCopyTexSubImage2DEXT == NULL ) {
      dt.glCopyTexSubImage2DEXT = missing_glCopyTexSubImage2DEXT;
    }
    _getProcAddress( dt.glCopyTexSubImage3DEXT, glCopyTexSubImage3DEXT, "glCopyTexSubImage3DEXT" );
    if( dt.glCopyTexSubImage3DEXT == NULL ) {
      dt.glCopyTexSubImage3DEXT = missing_glCopyTexSubImage3DEXT;
    }

    // GL_EXT_cull_vertex

    _getProcAddress( dt.glCullParameterdvEXT, glCullParameterdvEXT, "glCullParameterdvEXT" );
    if( dt.glCullParameterdvEXT == NULL ) {
      dt.glCullParameterdvEXT = missing_glCullParameterdvEXT;
    }
    _getProcAddress( dt.glCullParameterfvEXT, glCullParameterfvEXT, "glCullParameterfvEXT" );
    if( dt.glCullParameterfvEXT == NULL ) {
      dt.glCullParameterfvEXT = missing_glCullParameterfvEXT;
    }

    // GL_EXT_debug_label

    _getProcAddress( dt.glGetObjectLabelEXT, glGetObjectLabelEXT, "glGetObjectLabelEXT" );
    if( dt.glGetObjectLabelEXT == NULL ) {
      dt.glGetObjectLabelEXT = missing_glGetObjectLabelEXT;
    }
    _getProcAddress( dt.glLabelObjectEXT, glLabelObjectEXT, "glLabelObjectEXT" );
    if( dt.glLabelObjectEXT == NULL ) {
      dt.glLabelObjectEXT = missing_glLabelObjectEXT;
    }

    // GL_EXT_debug_marker

    _getProcAddress( dt.glInsertEventMarkerEXT, glInsertEventMarkerEXT, "glInsertEventMarkerEXT" );
    if( dt.glInsertEventMarkerEXT == NULL ) {
      dt.glInsertEventMarkerEXT = missing_glInsertEventMarkerEXT;
    }
    _getProcAddress( dt.glPopGroupMarkerEXT, glPopGroupMarkerEXT, "glPopGroupMarkerEXT" );
    if( dt.glPopGroupMarkerEXT == NULL ) {
      dt.glPopGroupMarkerEXT = missing_glPopGroupMarkerEXT;
    }
    _getProcAddress( dt.glPushGroupMarkerEXT, glPushGroupMarkerEXT, "glPushGroupMarkerEXT" );
    if( dt.glPushGroupMarkerEXT == NULL ) {
      dt.glPushGroupMarkerEXT = missing_glPushGroupMarkerEXT;
    }

    // GL_EXT_depth_bounds_test

    _getProcAddress( dt.glDepthBoundsEXT, glDepthBoundsEXT, "glDepthBoundsEXT" );
    if( dt.glDepthBoundsEXT == NULL ) {
      dt.glDepthBoundsEXT = missing_glDepthBoundsEXT;
    }

    // GL_EXT_direct_state_access

    _getProcAddress( dt.glBindMultiTextureEXT, glBindMultiTextureEXT, "glBindMultiTextureEXT" );
    if( dt.glBindMultiTextureEXT == NULL ) {
      dt.glBindMultiTextureEXT = missing_glBindMultiTextureEXT;
    }
    _getProcAddress( dt.glCheckNamedFramebufferStatusEXT, glCheckNamedFramebufferStatusEXT, "glCheckNamedFramebufferStatusEXT" );
    if( dt.glCheckNamedFramebufferStatusEXT == NULL ) {
      dt.glCheckNamedFramebufferStatusEXT = missing_glCheckNamedFramebufferStatusEXT;
    }
    _getProcAddress( dt.glClientAttribDefaultEXT, glClientAttribDefaultEXT, "glClientAttribDefaultEXT" );
    if( dt.glClientAttribDefaultEXT == NULL ) {
      dt.glClientAttribDefaultEXT = missing_glClientAttribDefaultEXT;
    }
    _getProcAddress( dt.glCompressedMultiTexImage1DEXT, glCompressedMultiTexImage1DEXT, "glCompressedMultiTexImage1DEXT" );
    if( dt.glCompressedMultiTexImage1DEXT == NULL ) {
      dt.glCompressedMultiTexImage1DEXT = missing_glCompressedMultiTexImage1DEXT;
    }
    _getProcAddress( dt.glCompressedMultiTexImage2DEXT, glCompressedMultiTexImage2DEXT, "glCompressedMultiTexImage2DEXT" );
    if( dt.glCompressedMultiTexImage2DEXT == NULL ) {
      dt.glCompressedMultiTexImage2DEXT = missing_glCompressedMultiTexImage2DEXT;
    }
    _getProcAddress( dt.glCompressedMultiTexImage3DEXT, glCompressedMultiTexImage3DEXT, "glCompressedMultiTexImage3DEXT" );
    if( dt.glCompressedMultiTexImage3DEXT == NULL ) {
      dt.glCompressedMultiTexImage3DEXT = missing_glCompressedMultiTexImage3DEXT;
    }
    _getProcAddress( dt.glCompressedMultiTexSubImage1DEXT, glCompressedMultiTexSubImage1DEXT, "glCompressedMultiTexSubImage1DEXT" );
    if( dt.glCompressedMultiTexSubImage1DEXT == NULL ) {
      dt.glCompressedMultiTexSubImage1DEXT = missing_glCompressedMultiTexSubImage1DEXT;
    }
    _getProcAddress( dt.glCompressedMultiTexSubImage2DEXT, glCompressedMultiTexSubImage2DEXT, "glCompressedMultiTexSubImage2DEXT" );
    if( dt.glCompressedMultiTexSubImage2DEXT == NULL ) {
      dt.glCompressedMultiTexSubImage2DEXT = missing_glCompressedMultiTexSubImage2DEXT;
    }
    _getProcAddress( dt.glCompressedMultiTexSubImage3DEXT, glCompressedMultiTexSubImage3DEXT, "glCompressedMultiTexSubImage3DEXT" );
    if( dt.glCompressedMultiTexSubImage3DEXT == NULL ) {
      dt.glCompressedMultiTexSubImage3DEXT = missing_glCompressedMultiTexSubImage3DEXT;
    }
    _getProcAddress( dt.glCompressedTextureImage1DEXT, glCompressedTextureImage1DEXT, "glCompressedTextureImage1DEXT" );
    if( dt.glCompressedTextureImage1DEXT == NULL ) {
      dt.glCompressedTextureImage1DEXT = missing_glCompressedTextureImage1DEXT;
    }
    _getProcAddress( dt.glCompressedTextureImage2DEXT, glCompressedTextureImage2DEXT, "glCompressedTextureImage2DEXT" );
    if( dt.glCompressedTextureImage2DEXT == NULL ) {
      dt.glCompressedTextureImage2DEXT = missing_glCompressedTextureImage2DEXT;
    }
    _getProcAddress( dt.glCompressedTextureImage3DEXT, glCompressedTextureImage3DEXT, "glCompressedTextureImage3DEXT" );
    if( dt.glCompressedTextureImage3DEXT == NULL ) {
      dt.glCompressedTextureImage3DEXT = missing_glCompressedTextureImage3DEXT;
    }
    _getProcAddress( dt.glCompressedTextureSubImage1DEXT, glCompressedTextureSubImage1DEXT, "glCompressedTextureSubImage1DEXT" );
    if( dt.glCompressedTextureSubImage1DEXT == NULL ) {
      dt.glCompressedTextureSubImage1DEXT = missing_glCompressedTextureSubImage1DEXT;
    }
    _getProcAddress( dt.glCompressedTextureSubImage2DEXT, glCompressedTextureSubImage2DEXT, "glCompressedTextureSubImage2DEXT" );
    if( dt.glCompressedTextureSubImage2DEXT == NULL ) {
      dt.glCompressedTextureSubImage2DEXT = missing_glCompressedTextureSubImage2DEXT;
    }
    _getProcAddress( dt.glCompressedTextureSubImage3DEXT, glCompressedTextureSubImage3DEXT, "glCompressedTextureSubImage3DEXT" );
    if( dt.glCompressedTextureSubImage3DEXT == NULL ) {
      dt.glCompressedTextureSubImage3DEXT = missing_glCompressedTextureSubImage3DEXT;
    }
    _getProcAddress( dt.glCopyMultiTexImage1DEXT, glCopyMultiTexImage1DEXT, "glCopyMultiTexImage1DEXT" );
    if( dt.glCopyMultiTexImage1DEXT == NULL ) {
      dt.glCopyMultiTexImage1DEXT = missing_glCopyMultiTexImage1DEXT;
    }
    _getProcAddress( dt.glCopyMultiTexImage2DEXT, glCopyMultiTexImage2DEXT, "glCopyMultiTexImage2DEXT" );
    if( dt.glCopyMultiTexImage2DEXT == NULL ) {
      dt.glCopyMultiTexImage2DEXT = missing_glCopyMultiTexImage2DEXT;
    }
    _getProcAddress( dt.glCopyMultiTexSubImage1DEXT, glCopyMultiTexSubImage1DEXT, "glCopyMultiTexSubImage1DEXT" );
    if( dt.glCopyMultiTexSubImage1DEXT == NULL ) {
      dt.glCopyMultiTexSubImage1DEXT = missing_glCopyMultiTexSubImage1DEXT;
    }
    _getProcAddress( dt.glCopyMultiTexSubImage2DEXT, glCopyMultiTexSubImage2DEXT, "glCopyMultiTexSubImage2DEXT" );
    if( dt.glCopyMultiTexSubImage2DEXT == NULL ) {
      dt.glCopyMultiTexSubImage2DEXT = missing_glCopyMultiTexSubImage2DEXT;
    }
    _getProcAddress( dt.glCopyMultiTexSubImage3DEXT, glCopyMultiTexSubImage3DEXT, "glCopyMultiTexSubImage3DEXT" );
    if( dt.glCopyMultiTexSubImage3DEXT == NULL ) {
      dt.glCopyMultiTexSubImage3DEXT = missing_glCopyMultiTexSubImage3DEXT;
    }
    _getProcAddress( dt.glCopyTextureImage1DEXT, glCopyTextureImage1DEXT, "glCopyTextureImage1DEXT" );
    if( dt.glCopyTextureImage1DEXT == NULL ) {
      dt.glCopyTextureImage1DEXT = missing_glCopyTextureImage1DEXT;
    }
    _getProcAddress( dt.glCopyTextureImage2DEXT, glCopyTextureImage2DEXT, "glCopyTextureImage2DEXT" );
    if( dt.glCopyTextureImage2DEXT == NULL ) {
      dt.glCopyTextureImage2DEXT = missing_glCopyTextureImage2DEXT;
    }
    _getProcAddress( dt.glCopyTextureSubImage1DEXT, glCopyTextureSubImage1DEXT, "glCopyTextureSubImage1DEXT" );
    if( dt.glCopyTextureSubImage1DEXT == NULL ) {
      dt.glCopyTextureSubImage1DEXT = missing_glCopyTextureSubImage1DEXT;
    }
    _getProcAddress( dt.glCopyTextureSubImage2DEXT, glCopyTextureSubImage2DEXT, "glCopyTextureSubImage2DEXT" );
    if( dt.glCopyTextureSubImage2DEXT == NULL ) {
      dt.glCopyTextureSubImage2DEXT = missing_glCopyTextureSubImage2DEXT;
    }
    _getProcAddress( dt.glCopyTextureSubImage3DEXT, glCopyTextureSubImage3DEXT, "glCopyTextureSubImage3DEXT" );
    if( dt.glCopyTextureSubImage3DEXT == NULL ) {
      dt.glCopyTextureSubImage3DEXT = missing_glCopyTextureSubImage3DEXT;
    }
    _getProcAddress( dt.glDisableClientStateIndexedEXT, glDisableClientStateIndexedEXT, "glDisableClientStateIndexedEXT" );
    if( dt.glDisableClientStateIndexedEXT == NULL ) {
      dt.glDisableClientStateIndexedEXT = missing_glDisableClientStateIndexedEXT;
    }
    _getProcAddress( dt.glDisableClientStateiEXT, glDisableClientStateiEXT, "glDisableClientStateiEXT" );
    if( dt.glDisableClientStateiEXT == NULL ) {
      dt.glDisableClientStateiEXT = missing_glDisableClientStateiEXT;
    }
    _getProcAddress( dt.glDisableVertexArrayAttribEXT, glDisableVertexArrayAttribEXT, "glDisableVertexArrayAttribEXT" );
    if( dt.glDisableVertexArrayAttribEXT == NULL ) {
      dt.glDisableVertexArrayAttribEXT = missing_glDisableVertexArrayAttribEXT;
    }
    _getProcAddress( dt.glDisableVertexArrayEXT, glDisableVertexArrayEXT, "glDisableVertexArrayEXT" );
    if( dt.glDisableVertexArrayEXT == NULL ) {
      dt.glDisableVertexArrayEXT = missing_glDisableVertexArrayEXT;
    }
    _getProcAddress( dt.glEnableClientStateIndexedEXT, glEnableClientStateIndexedEXT, "glEnableClientStateIndexedEXT" );
    if( dt.glEnableClientStateIndexedEXT == NULL ) {
      dt.glEnableClientStateIndexedEXT = missing_glEnableClientStateIndexedEXT;
    }
    _getProcAddress( dt.glEnableClientStateiEXT, glEnableClientStateiEXT, "glEnableClientStateiEXT" );
    if( dt.glEnableClientStateiEXT == NULL ) {
      dt.glEnableClientStateiEXT = missing_glEnableClientStateiEXT;
    }
    _getProcAddress( dt.glEnableVertexArrayAttribEXT, glEnableVertexArrayAttribEXT, "glEnableVertexArrayAttribEXT" );
    if( dt.glEnableVertexArrayAttribEXT == NULL ) {
      dt.glEnableVertexArrayAttribEXT = missing_glEnableVertexArrayAttribEXT;
    }
    _getProcAddress( dt.glEnableVertexArrayEXT, glEnableVertexArrayEXT, "glEnableVertexArrayEXT" );
    if( dt.glEnableVertexArrayEXT == NULL ) {
      dt.glEnableVertexArrayEXT = missing_glEnableVertexArrayEXT;
    }
    _getProcAddress( dt.glFlushMappedNamedBufferRangeEXT, glFlushMappedNamedBufferRangeEXT, "glFlushMappedNamedBufferRangeEXT" );
    if( dt.glFlushMappedNamedBufferRangeEXT == NULL ) {
      dt.glFlushMappedNamedBufferRangeEXT = missing_glFlushMappedNamedBufferRangeEXT;
    }
    _getProcAddress( dt.glFramebufferDrawBufferEXT, glFramebufferDrawBufferEXT, "glFramebufferDrawBufferEXT" );
    if( dt.glFramebufferDrawBufferEXT == NULL ) {
      dt.glFramebufferDrawBufferEXT = missing_glFramebufferDrawBufferEXT;
    }
    _getProcAddress( dt.glFramebufferDrawBuffersEXT, glFramebufferDrawBuffersEXT, "glFramebufferDrawBuffersEXT" );
    if( dt.glFramebufferDrawBuffersEXT == NULL ) {
      dt.glFramebufferDrawBuffersEXT = missing_glFramebufferDrawBuffersEXT;
    }
    _getProcAddress( dt.glFramebufferReadBufferEXT, glFramebufferReadBufferEXT, "glFramebufferReadBufferEXT" );
    if( dt.glFramebufferReadBufferEXT == NULL ) {
      dt.glFramebufferReadBufferEXT = missing_glFramebufferReadBufferEXT;
    }
    _getProcAddress( dt.glGenerateMultiTexMipmapEXT, glGenerateMultiTexMipmapEXT, "glGenerateMultiTexMipmapEXT" );
    if( dt.glGenerateMultiTexMipmapEXT == NULL ) {
      dt.glGenerateMultiTexMipmapEXT = missing_glGenerateMultiTexMipmapEXT;
    }
    _getProcAddress( dt.glGenerateTextureMipmapEXT, glGenerateTextureMipmapEXT, "glGenerateTextureMipmapEXT" );
    if( dt.glGenerateTextureMipmapEXT == NULL ) {
      dt.glGenerateTextureMipmapEXT = missing_glGenerateTextureMipmapEXT;
    }
    _getProcAddress( dt.glGetCompressedMultiTexImageEXT, glGetCompressedMultiTexImageEXT, "glGetCompressedMultiTexImageEXT" );
    if( dt.glGetCompressedMultiTexImageEXT == NULL ) {
      dt.glGetCompressedMultiTexImageEXT = missing_glGetCompressedMultiTexImageEXT;
    }
    _getProcAddress( dt.glGetCompressedTextureImageEXT, glGetCompressedTextureImageEXT, "glGetCompressedTextureImageEXT" );
    if( dt.glGetCompressedTextureImageEXT == NULL ) {
      dt.glGetCompressedTextureImageEXT = missing_glGetCompressedTextureImageEXT;
    }
    _getProcAddress( dt.glGetDoubleIndexedvEXT, glGetDoubleIndexedvEXT, "glGetDoubleIndexedvEXT" );
    if( dt.glGetDoubleIndexedvEXT == NULL ) {
      dt.glGetDoubleIndexedvEXT = missing_glGetDoubleIndexedvEXT;
    }
    _getProcAddress( dt.glGetDoublei_vEXT, glGetDoublei_vEXT, "glGetDoublei_vEXT" );
    if( dt.glGetDoublei_vEXT == NULL ) {
      dt.glGetDoublei_vEXT = missing_glGetDoublei_vEXT;
    }
    _getProcAddress( dt.glGetFloatIndexedvEXT, glGetFloatIndexedvEXT, "glGetFloatIndexedvEXT" );
    if( dt.glGetFloatIndexedvEXT == NULL ) {
      dt.glGetFloatIndexedvEXT = missing_glGetFloatIndexedvEXT;
    }
    _getProcAddress( dt.glGetFloati_vEXT, glGetFloati_vEXT, "glGetFloati_vEXT" );
    if( dt.glGetFloati_vEXT == NULL ) {
      dt.glGetFloati_vEXT = missing_glGetFloati_vEXT;
    }
    _getProcAddress( dt.glGetFramebufferParameterivEXT, glGetFramebufferParameterivEXT, "glGetFramebufferParameterivEXT" );
    if( dt.glGetFramebufferParameterivEXT == NULL ) {
      dt.glGetFramebufferParameterivEXT = missing_glGetFramebufferParameterivEXT;
    }
    _getProcAddress( dt.glGetMultiTexEnvfvEXT, glGetMultiTexEnvfvEXT, "glGetMultiTexEnvfvEXT" );
    if( dt.glGetMultiTexEnvfvEXT == NULL ) {
      dt.glGetMultiTexEnvfvEXT = missing_glGetMultiTexEnvfvEXT;
    }
    _getProcAddress( dt.glGetMultiTexEnvivEXT, glGetMultiTexEnvivEXT, "glGetMultiTexEnvivEXT" );
    if( dt.glGetMultiTexEnvivEXT == NULL ) {
      dt.glGetMultiTexEnvivEXT = missing_glGetMultiTexEnvivEXT;
    }
    _getProcAddress( dt.glGetMultiTexGendvEXT, glGetMultiTexGendvEXT, "glGetMultiTexGendvEXT" );
    if( dt.glGetMultiTexGendvEXT == NULL ) {
      dt.glGetMultiTexGendvEXT = missing_glGetMultiTexGendvEXT;
    }
    _getProcAddress( dt.glGetMultiTexGenfvEXT, glGetMultiTexGenfvEXT, "glGetMultiTexGenfvEXT" );
    if( dt.glGetMultiTexGenfvEXT == NULL ) {
      dt.glGetMultiTexGenfvEXT = missing_glGetMultiTexGenfvEXT;
    }
    _getProcAddress( dt.glGetMultiTexGenivEXT, glGetMultiTexGenivEXT, "glGetMultiTexGenivEXT" );
    if( dt.glGetMultiTexGenivEXT == NULL ) {
      dt.glGetMultiTexGenivEXT = missing_glGetMultiTexGenivEXT;
    }
    _getProcAddress( dt.glGetMultiTexImageEXT, glGetMultiTexImageEXT, "glGetMultiTexImageEXT" );
    if( dt.glGetMultiTexImageEXT == NULL ) {
      dt.glGetMultiTexImageEXT = missing_glGetMultiTexImageEXT;
    }
    _getProcAddress( dt.glGetMultiTexLevelParameterfvEXT, glGetMultiTexLevelParameterfvEXT, "glGetMultiTexLevelParameterfvEXT" );
    if( dt.glGetMultiTexLevelParameterfvEXT == NULL ) {
      dt.glGetMultiTexLevelParameterfvEXT = missing_glGetMultiTexLevelParameterfvEXT;
    }
    _getProcAddress( dt.glGetMultiTexLevelParameterivEXT, glGetMultiTexLevelParameterivEXT, "glGetMultiTexLevelParameterivEXT" );
    if( dt.glGetMultiTexLevelParameterivEXT == NULL ) {
      dt.glGetMultiTexLevelParameterivEXT = missing_glGetMultiTexLevelParameterivEXT;
    }
    _getProcAddress( dt.glGetMultiTexParameterIivEXT, glGetMultiTexParameterIivEXT, "glGetMultiTexParameterIivEXT" );
    if( dt.glGetMultiTexParameterIivEXT == NULL ) {
      dt.glGetMultiTexParameterIivEXT = missing_glGetMultiTexParameterIivEXT;
    }
    _getProcAddress( dt.glGetMultiTexParameterIuivEXT, glGetMultiTexParameterIuivEXT, "glGetMultiTexParameterIuivEXT" );
    if( dt.glGetMultiTexParameterIuivEXT == NULL ) {
      dt.glGetMultiTexParameterIuivEXT = missing_glGetMultiTexParameterIuivEXT;
    }
    _getProcAddress( dt.glGetMultiTexParameterfvEXT, glGetMultiTexParameterfvEXT, "glGetMultiTexParameterfvEXT" );
    if( dt.glGetMultiTexParameterfvEXT == NULL ) {
      dt.glGetMultiTexParameterfvEXT = missing_glGetMultiTexParameterfvEXT;
    }
    _getProcAddress( dt.glGetMultiTexParameterivEXT, glGetMultiTexParameterivEXT, "glGetMultiTexParameterivEXT" );
    if( dt.glGetMultiTexParameterivEXT == NULL ) {
      dt.glGetMultiTexParameterivEXT = missing_glGetMultiTexParameterivEXT;
    }
    _getProcAddress( dt.glGetNamedBufferParameterivEXT, glGetNamedBufferParameterivEXT, "glGetNamedBufferParameterivEXT" );
    if( dt.glGetNamedBufferParameterivEXT == NULL ) {
      dt.glGetNamedBufferParameterivEXT = missing_glGetNamedBufferParameterivEXT;
    }
    _getProcAddress( dt.glGetNamedBufferPointervEXT, glGetNamedBufferPointervEXT, "glGetNamedBufferPointervEXT" );
    if( dt.glGetNamedBufferPointervEXT == NULL ) {
      dt.glGetNamedBufferPointervEXT = missing_glGetNamedBufferPointervEXT;
    }
    _getProcAddress( dt.glGetNamedBufferSubDataEXT, glGetNamedBufferSubDataEXT, "glGetNamedBufferSubDataEXT" );
    if( dt.glGetNamedBufferSubDataEXT == NULL ) {
      dt.glGetNamedBufferSubDataEXT = missing_glGetNamedBufferSubDataEXT;
    }
    _getProcAddress( dt.glGetNamedFramebufferAttachmentParameterivEXT, glGetNamedFramebufferAttachmentParameterivEXT, "glGetNamedFramebufferAttachmentParameterivEXT" );
    if( dt.glGetNamedFramebufferAttachmentParameterivEXT == NULL ) {
      dt.glGetNamedFramebufferAttachmentParameterivEXT = missing_glGetNamedFramebufferAttachmentParameterivEXT;
    }
    _getProcAddress( dt.glGetNamedProgramLocalParameterIivEXT, glGetNamedProgramLocalParameterIivEXT, "glGetNamedProgramLocalParameterIivEXT" );
    if( dt.glGetNamedProgramLocalParameterIivEXT == NULL ) {
      dt.glGetNamedProgramLocalParameterIivEXT = missing_glGetNamedProgramLocalParameterIivEXT;
    }
    _getProcAddress( dt.glGetNamedProgramLocalParameterIuivEXT, glGetNamedProgramLocalParameterIuivEXT, "glGetNamedProgramLocalParameterIuivEXT" );
    if( dt.glGetNamedProgramLocalParameterIuivEXT == NULL ) {
      dt.glGetNamedProgramLocalParameterIuivEXT = missing_glGetNamedProgramLocalParameterIuivEXT;
    }
    _getProcAddress( dt.glGetNamedProgramLocalParameterdvEXT, glGetNamedProgramLocalParameterdvEXT, "glGetNamedProgramLocalParameterdvEXT" );
    if( dt.glGetNamedProgramLocalParameterdvEXT == NULL ) {
      dt.glGetNamedProgramLocalParameterdvEXT = missing_glGetNamedProgramLocalParameterdvEXT;
    }
    _getProcAddress( dt.glGetNamedProgramLocalParameterfvEXT, glGetNamedProgramLocalParameterfvEXT, "glGetNamedProgramLocalParameterfvEXT" );
    if( dt.glGetNamedProgramLocalParameterfvEXT == NULL ) {
      dt.glGetNamedProgramLocalParameterfvEXT = missing_glGetNamedProgramLocalParameterfvEXT;
    }
    _getProcAddress( dt.glGetNamedProgramStringEXT, glGetNamedProgramStringEXT, "glGetNamedProgramStringEXT" );
    if( dt.glGetNamedProgramStringEXT == NULL ) {
      dt.glGetNamedProgramStringEXT = missing_glGetNamedProgramStringEXT;
    }
    _getProcAddress( dt.glGetNamedProgramivEXT, glGetNamedProgramivEXT, "glGetNamedProgramivEXT" );
    if( dt.glGetNamedProgramivEXT == NULL ) {
      dt.glGetNamedProgramivEXT = missing_glGetNamedProgramivEXT;
    }
    _getProcAddress( dt.glGetNamedRenderbufferParameterivEXT, glGetNamedRenderbufferParameterivEXT, "glGetNamedRenderbufferParameterivEXT" );
    if( dt.glGetNamedRenderbufferParameterivEXT == NULL ) {
      dt.glGetNamedRenderbufferParameterivEXT = missing_glGetNamedRenderbufferParameterivEXT;
    }
    _getProcAddress( dt.glGetPointerIndexedvEXT, glGetPointerIndexedvEXT, "glGetPointerIndexedvEXT" );
    if( dt.glGetPointerIndexedvEXT == NULL ) {
      dt.glGetPointerIndexedvEXT = missing_glGetPointerIndexedvEXT;
    }
    _getProcAddress( dt.glGetPointeri_vEXT, glGetPointeri_vEXT, "glGetPointeri_vEXT" );
    if( dt.glGetPointeri_vEXT == NULL ) {
      dt.glGetPointeri_vEXT = missing_glGetPointeri_vEXT;
    }
    _getProcAddress( dt.glGetTextureImageEXT, glGetTextureImageEXT, "glGetTextureImageEXT" );
    if( dt.glGetTextureImageEXT == NULL ) {
      dt.glGetTextureImageEXT = missing_glGetTextureImageEXT;
    }
    _getProcAddress( dt.glGetTextureLevelParameterfvEXT, glGetTextureLevelParameterfvEXT, "glGetTextureLevelParameterfvEXT" );
    if( dt.glGetTextureLevelParameterfvEXT == NULL ) {
      dt.glGetTextureLevelParameterfvEXT = missing_glGetTextureLevelParameterfvEXT;
    }
    _getProcAddress( dt.glGetTextureLevelParameterivEXT, glGetTextureLevelParameterivEXT, "glGetTextureLevelParameterivEXT" );
    if( dt.glGetTextureLevelParameterivEXT == NULL ) {
      dt.glGetTextureLevelParameterivEXT = missing_glGetTextureLevelParameterivEXT;
    }
    _getProcAddress( dt.glGetTextureParameterIivEXT, glGetTextureParameterIivEXT, "glGetTextureParameterIivEXT" );
    if( dt.glGetTextureParameterIivEXT == NULL ) {
      dt.glGetTextureParameterIivEXT = missing_glGetTextureParameterIivEXT;
    }
    _getProcAddress( dt.glGetTextureParameterIuivEXT, glGetTextureParameterIuivEXT, "glGetTextureParameterIuivEXT" );
    if( dt.glGetTextureParameterIuivEXT == NULL ) {
      dt.glGetTextureParameterIuivEXT = missing_glGetTextureParameterIuivEXT;
    }
    _getProcAddress( dt.glGetTextureParameterfvEXT, glGetTextureParameterfvEXT, "glGetTextureParameterfvEXT" );
    if( dt.glGetTextureParameterfvEXT == NULL ) {
      dt.glGetTextureParameterfvEXT = missing_glGetTextureParameterfvEXT;
    }
    _getProcAddress( dt.glGetTextureParameterivEXT, glGetTextureParameterivEXT, "glGetTextureParameterivEXT" );
    if( dt.glGetTextureParameterivEXT == NULL ) {
      dt.glGetTextureParameterivEXT = missing_glGetTextureParameterivEXT;
    }
    _getProcAddress( dt.glGetVertexArrayIntegeri_vEXT, glGetVertexArrayIntegeri_vEXT, "glGetVertexArrayIntegeri_vEXT" );
    if( dt.glGetVertexArrayIntegeri_vEXT == NULL ) {
      dt.glGetVertexArrayIntegeri_vEXT = missing_glGetVertexArrayIntegeri_vEXT;
    }
    _getProcAddress( dt.glGetVertexArrayIntegervEXT, glGetVertexArrayIntegervEXT, "glGetVertexArrayIntegervEXT" );
    if( dt.glGetVertexArrayIntegervEXT == NULL ) {
      dt.glGetVertexArrayIntegervEXT = missing_glGetVertexArrayIntegervEXT;
    }
    _getProcAddress( dt.glGetVertexArrayPointeri_vEXT, glGetVertexArrayPointeri_vEXT, "glGetVertexArrayPointeri_vEXT" );
    if( dt.glGetVertexArrayPointeri_vEXT == NULL ) {
      dt.glGetVertexArrayPointeri_vEXT = missing_glGetVertexArrayPointeri_vEXT;
    }
    _getProcAddress( dt.glGetVertexArrayPointervEXT, glGetVertexArrayPointervEXT, "glGetVertexArrayPointervEXT" );
    if( dt.glGetVertexArrayPointervEXT == NULL ) {
      dt.glGetVertexArrayPointervEXT = missing_glGetVertexArrayPointervEXT;
    }
    _getProcAddress( dt.glMapNamedBufferEXT, glMapNamedBufferEXT, "glMapNamedBufferEXT" );
    if( dt.glMapNamedBufferEXT == NULL ) {
      dt.glMapNamedBufferEXT = missing_glMapNamedBufferEXT;
    }
    _getProcAddress( dt.glMapNamedBufferRangeEXT, glMapNamedBufferRangeEXT, "glMapNamedBufferRangeEXT" );
    if( dt.glMapNamedBufferRangeEXT == NULL ) {
      dt.glMapNamedBufferRangeEXT = missing_glMapNamedBufferRangeEXT;
    }
    _getProcAddress( dt.glMatrixFrustumEXT, glMatrixFrustumEXT, "glMatrixFrustumEXT" );
    if( dt.glMatrixFrustumEXT == NULL ) {
      dt.glMatrixFrustumEXT = missing_glMatrixFrustumEXT;
    }
    _getProcAddress( dt.glMatrixLoadIdentityEXT, glMatrixLoadIdentityEXT, "glMatrixLoadIdentityEXT" );
    if( dt.glMatrixLoadIdentityEXT == NULL ) {
      dt.glMatrixLoadIdentityEXT = missing_glMatrixLoadIdentityEXT;
    }
    _getProcAddress( dt.glMatrixLoadTransposedEXT, glMatrixLoadTransposedEXT, "glMatrixLoadTransposedEXT" );
    if( dt.glMatrixLoadTransposedEXT == NULL ) {
      dt.glMatrixLoadTransposedEXT = missing_glMatrixLoadTransposedEXT;
    }
    _getProcAddress( dt.glMatrixLoadTransposefEXT, glMatrixLoadTransposefEXT, "glMatrixLoadTransposefEXT" );
    if( dt.glMatrixLoadTransposefEXT == NULL ) {
      dt.glMatrixLoadTransposefEXT = missing_glMatrixLoadTransposefEXT;
    }
    _getProcAddress( dt.glMatrixLoaddEXT, glMatrixLoaddEXT, "glMatrixLoaddEXT" );
    if( dt.glMatrixLoaddEXT == NULL ) {
      dt.glMatrixLoaddEXT = missing_glMatrixLoaddEXT;
    }
    _getProcAddress( dt.glMatrixLoadfEXT, glMatrixLoadfEXT, "glMatrixLoadfEXT" );
    if( dt.glMatrixLoadfEXT == NULL ) {
      dt.glMatrixLoadfEXT = missing_glMatrixLoadfEXT;
    }
    _getProcAddress( dt.glMatrixMultTransposedEXT, glMatrixMultTransposedEXT, "glMatrixMultTransposedEXT" );
    if( dt.glMatrixMultTransposedEXT == NULL ) {
      dt.glMatrixMultTransposedEXT = missing_glMatrixMultTransposedEXT;
    }
    _getProcAddress( dt.glMatrixMultTransposefEXT, glMatrixMultTransposefEXT, "glMatrixMultTransposefEXT" );
    if( dt.glMatrixMultTransposefEXT == NULL ) {
      dt.glMatrixMultTransposefEXT = missing_glMatrixMultTransposefEXT;
    }
    _getProcAddress( dt.glMatrixMultdEXT, glMatrixMultdEXT, "glMatrixMultdEXT" );
    if( dt.glMatrixMultdEXT == NULL ) {
      dt.glMatrixMultdEXT = missing_glMatrixMultdEXT;
    }
    _getProcAddress( dt.glMatrixMultfEXT, glMatrixMultfEXT, "glMatrixMultfEXT" );
    if( dt.glMatrixMultfEXT == NULL ) {
      dt.glMatrixMultfEXT = missing_glMatrixMultfEXT;
    }
    _getProcAddress( dt.glMatrixOrthoEXT, glMatrixOrthoEXT, "glMatrixOrthoEXT" );
    if( dt.glMatrixOrthoEXT == NULL ) {
      dt.glMatrixOrthoEXT = missing_glMatrixOrthoEXT;
    }
    _getProcAddress( dt.glMatrixPopEXT, glMatrixPopEXT, "glMatrixPopEXT" );
    if( dt.glMatrixPopEXT == NULL ) {
      dt.glMatrixPopEXT = missing_glMatrixPopEXT;
    }
    _getProcAddress( dt.glMatrixPushEXT, glMatrixPushEXT, "glMatrixPushEXT" );
    if( dt.glMatrixPushEXT == NULL ) {
      dt.glMatrixPushEXT = missing_glMatrixPushEXT;
    }
    _getProcAddress( dt.glMatrixRotatedEXT, glMatrixRotatedEXT, "glMatrixRotatedEXT" );
    if( dt.glMatrixRotatedEXT == NULL ) {
      dt.glMatrixRotatedEXT = missing_glMatrixRotatedEXT;
    }
    _getProcAddress( dt.glMatrixRotatefEXT, glMatrixRotatefEXT, "glMatrixRotatefEXT" );
    if( dt.glMatrixRotatefEXT == NULL ) {
      dt.glMatrixRotatefEXT = missing_glMatrixRotatefEXT;
    }
    _getProcAddress( dt.glMatrixScaledEXT, glMatrixScaledEXT, "glMatrixScaledEXT" );
    if( dt.glMatrixScaledEXT == NULL ) {
      dt.glMatrixScaledEXT = missing_glMatrixScaledEXT;
    }
    _getProcAddress( dt.glMatrixScalefEXT, glMatrixScalefEXT, "glMatrixScalefEXT" );
    if( dt.glMatrixScalefEXT == NULL ) {
      dt.glMatrixScalefEXT = missing_glMatrixScalefEXT;
    }
    _getProcAddress( dt.glMatrixTranslatedEXT, glMatrixTranslatedEXT, "glMatrixTranslatedEXT" );
    if( dt.glMatrixTranslatedEXT == NULL ) {
      dt.glMatrixTranslatedEXT = missing_glMatrixTranslatedEXT;
    }
    _getProcAddress( dt.glMatrixTranslatefEXT, glMatrixTranslatefEXT, "glMatrixTranslatefEXT" );
    if( dt.glMatrixTranslatefEXT == NULL ) {
      dt.glMatrixTranslatefEXT = missing_glMatrixTranslatefEXT;
    }
    _getProcAddress( dt.glMultiTexBufferEXT, glMultiTexBufferEXT, "glMultiTexBufferEXT" );
    if( dt.glMultiTexBufferEXT == NULL ) {
      dt.glMultiTexBufferEXT = missing_glMultiTexBufferEXT;
    }
    _getProcAddress( dt.glMultiTexCoordPointerEXT, glMultiTexCoordPointerEXT, "glMultiTexCoordPointerEXT" );
    if( dt.glMultiTexCoordPointerEXT == NULL ) {
      dt.glMultiTexCoordPointerEXT = missing_glMultiTexCoordPointerEXT;
    }
    _getProcAddress( dt.glMultiTexEnvfEXT, glMultiTexEnvfEXT, "glMultiTexEnvfEXT" );
    if( dt.glMultiTexEnvfEXT == NULL ) {
      dt.glMultiTexEnvfEXT = missing_glMultiTexEnvfEXT;
    }
    _getProcAddress( dt.glMultiTexEnvfvEXT, glMultiTexEnvfvEXT, "glMultiTexEnvfvEXT" );
    if( dt.glMultiTexEnvfvEXT == NULL ) {
      dt.glMultiTexEnvfvEXT = missing_glMultiTexEnvfvEXT;
    }
    _getProcAddress( dt.glMultiTexEnviEXT, glMultiTexEnviEXT, "glMultiTexEnviEXT" );
    if( dt.glMultiTexEnviEXT == NULL ) {
      dt.glMultiTexEnviEXT = missing_glMultiTexEnviEXT;
    }
    _getProcAddress( dt.glMultiTexEnvivEXT, glMultiTexEnvivEXT, "glMultiTexEnvivEXT" );
    if( dt.glMultiTexEnvivEXT == NULL ) {
      dt.glMultiTexEnvivEXT = missing_glMultiTexEnvivEXT;
    }
    _getProcAddress( dt.glMultiTexGendEXT, glMultiTexGendEXT, "glMultiTexGendEXT" );
    if( dt.glMultiTexGendEXT == NULL ) {
      dt.glMultiTexGendEXT = missing_glMultiTexGendEXT;
    }
    _getProcAddress( dt.glMultiTexGendvEXT, glMultiTexGendvEXT, "glMultiTexGendvEXT" );
    if( dt.glMultiTexGendvEXT == NULL ) {
      dt.glMultiTexGendvEXT = missing_glMultiTexGendvEXT;
    }
    _getProcAddress( dt.glMultiTexGenfEXT, glMultiTexGenfEXT, "glMultiTexGenfEXT" );
    if( dt.glMultiTexGenfEXT == NULL ) {
      dt.glMultiTexGenfEXT = missing_glMultiTexGenfEXT;
    }
    _getProcAddress( dt.glMultiTexGenfvEXT, glMultiTexGenfvEXT, "glMultiTexGenfvEXT" );
    if( dt.glMultiTexGenfvEXT == NULL ) {
      dt.glMultiTexGenfvEXT = missing_glMultiTexGenfvEXT;
    }
    _getProcAddress( dt.glMultiTexGeniEXT, glMultiTexGeniEXT, "glMultiTexGeniEXT" );
    if( dt.glMultiTexGeniEXT == NULL ) {
      dt.glMultiTexGeniEXT = missing_glMultiTexGeniEXT;
    }
    _getProcAddress( dt.glMultiTexGenivEXT, glMultiTexGenivEXT, "glMultiTexGenivEXT" );
    if( dt.glMultiTexGenivEXT == NULL ) {
      dt.glMultiTexGenivEXT = missing_glMultiTexGenivEXT;
    }
    _getProcAddress( dt.glMultiTexImage1DEXT, glMultiTexImage1DEXT, "glMultiTexImage1DEXT" );
    if( dt.glMultiTexImage1DEXT == NULL ) {
      dt.glMultiTexImage1DEXT = missing_glMultiTexImage1DEXT;
    }
    _getProcAddress( dt.glMultiTexImage2DEXT, glMultiTexImage2DEXT, "glMultiTexImage2DEXT" );
    if( dt.glMultiTexImage2DEXT == NULL ) {
      dt.glMultiTexImage2DEXT = missing_glMultiTexImage2DEXT;
    }
    _getProcAddress( dt.glMultiTexImage3DEXT, glMultiTexImage3DEXT, "glMultiTexImage3DEXT" );
    if( dt.glMultiTexImage3DEXT == NULL ) {
      dt.glMultiTexImage3DEXT = missing_glMultiTexImage3DEXT;
    }
    _getProcAddress( dt.glMultiTexParameterIivEXT, glMultiTexParameterIivEXT, "glMultiTexParameterIivEXT" );
    if( dt.glMultiTexParameterIivEXT == NULL ) {
      dt.glMultiTexParameterIivEXT = missing_glMultiTexParameterIivEXT;
    }
    _getProcAddress( dt.glMultiTexParameterIuivEXT, glMultiTexParameterIuivEXT, "glMultiTexParameterIuivEXT" );
    if( dt.glMultiTexParameterIuivEXT == NULL ) {
      dt.glMultiTexParameterIuivEXT = missing_glMultiTexParameterIuivEXT;
    }
    _getProcAddress( dt.glMultiTexParameterfEXT, glMultiTexParameterfEXT, "glMultiTexParameterfEXT" );
    if( dt.glMultiTexParameterfEXT == NULL ) {
      dt.glMultiTexParameterfEXT = missing_glMultiTexParameterfEXT;
    }
    _getProcAddress( dt.glMultiTexParameterfvEXT, glMultiTexParameterfvEXT, "glMultiTexParameterfvEXT" );
    if( dt.glMultiTexParameterfvEXT == NULL ) {
      dt.glMultiTexParameterfvEXT = missing_glMultiTexParameterfvEXT;
    }
    _getProcAddress( dt.glMultiTexParameteriEXT, glMultiTexParameteriEXT, "glMultiTexParameteriEXT" );
    if( dt.glMultiTexParameteriEXT == NULL ) {
      dt.glMultiTexParameteriEXT = missing_glMultiTexParameteriEXT;
    }
    _getProcAddress( dt.glMultiTexParameterivEXT, glMultiTexParameterivEXT, "glMultiTexParameterivEXT" );
    if( dt.glMultiTexParameterivEXT == NULL ) {
      dt.glMultiTexParameterivEXT = missing_glMultiTexParameterivEXT;
    }
    _getProcAddress( dt.glMultiTexRenderbufferEXT, glMultiTexRenderbufferEXT, "glMultiTexRenderbufferEXT" );
    if( dt.glMultiTexRenderbufferEXT == NULL ) {
      dt.glMultiTexRenderbufferEXT = missing_glMultiTexRenderbufferEXT;
    }
    _getProcAddress( dt.glMultiTexSubImage1DEXT, glMultiTexSubImage1DEXT, "glMultiTexSubImage1DEXT" );
    if( dt.glMultiTexSubImage1DEXT == NULL ) {
      dt.glMultiTexSubImage1DEXT = missing_glMultiTexSubImage1DEXT;
    }
    _getProcAddress( dt.glMultiTexSubImage2DEXT, glMultiTexSubImage2DEXT, "glMultiTexSubImage2DEXT" );
    if( dt.glMultiTexSubImage2DEXT == NULL ) {
      dt.glMultiTexSubImage2DEXT = missing_glMultiTexSubImage2DEXT;
    }
    _getProcAddress( dt.glMultiTexSubImage3DEXT, glMultiTexSubImage3DEXT, "glMultiTexSubImage3DEXT" );
    if( dt.glMultiTexSubImage3DEXT == NULL ) {
      dt.glMultiTexSubImage3DEXT = missing_glMultiTexSubImage3DEXT;
    }
    _getProcAddress( dt.glNamedBufferDataEXT, glNamedBufferDataEXT, "glNamedBufferDataEXT" );
    if( dt.glNamedBufferDataEXT == NULL ) {
      dt.glNamedBufferDataEXT = missing_glNamedBufferDataEXT;
    }
    _getProcAddress( dt.glNamedBufferSubDataEXT, glNamedBufferSubDataEXT, "glNamedBufferSubDataEXT" );
    if( dt.glNamedBufferSubDataEXT == NULL ) {
      dt.glNamedBufferSubDataEXT = missing_glNamedBufferSubDataEXT;
    }
    _getProcAddress( dt.glNamedCopyBufferSubDataEXT, glNamedCopyBufferSubDataEXT, "glNamedCopyBufferSubDataEXT" );
    if( dt.glNamedCopyBufferSubDataEXT == NULL ) {
      dt.glNamedCopyBufferSubDataEXT = missing_glNamedCopyBufferSubDataEXT;
    }
    _getProcAddress( dt.glNamedFramebufferRenderbufferEXT, glNamedFramebufferRenderbufferEXT, "glNamedFramebufferRenderbufferEXT" );
    if( dt.glNamedFramebufferRenderbufferEXT == NULL ) {
      dt.glNamedFramebufferRenderbufferEXT = missing_glNamedFramebufferRenderbufferEXT;
    }
    _getProcAddress( dt.glNamedFramebufferTexture1DEXT, glNamedFramebufferTexture1DEXT, "glNamedFramebufferTexture1DEXT" );
    if( dt.glNamedFramebufferTexture1DEXT == NULL ) {
      dt.glNamedFramebufferTexture1DEXT = missing_glNamedFramebufferTexture1DEXT;
    }
    _getProcAddress( dt.glNamedFramebufferTexture2DEXT, glNamedFramebufferTexture2DEXT, "glNamedFramebufferTexture2DEXT" );
    if( dt.glNamedFramebufferTexture2DEXT == NULL ) {
      dt.glNamedFramebufferTexture2DEXT = missing_glNamedFramebufferTexture2DEXT;
    }
    _getProcAddress( dt.glNamedFramebufferTexture3DEXT, glNamedFramebufferTexture3DEXT, "glNamedFramebufferTexture3DEXT" );
    if( dt.glNamedFramebufferTexture3DEXT == NULL ) {
      dt.glNamedFramebufferTexture3DEXT = missing_glNamedFramebufferTexture3DEXT;
    }
    _getProcAddress( dt.glNamedFramebufferTextureEXT, glNamedFramebufferTextureEXT, "glNamedFramebufferTextureEXT" );
    if( dt.glNamedFramebufferTextureEXT == NULL ) {
      dt.glNamedFramebufferTextureEXT = missing_glNamedFramebufferTextureEXT;
    }
    _getProcAddress( dt.glNamedFramebufferTextureFaceEXT, glNamedFramebufferTextureFaceEXT, "glNamedFramebufferTextureFaceEXT" );
    if( dt.glNamedFramebufferTextureFaceEXT == NULL ) {
      dt.glNamedFramebufferTextureFaceEXT = missing_glNamedFramebufferTextureFaceEXT;
    }
    _getProcAddress( dt.glNamedFramebufferTextureLayerEXT, glNamedFramebufferTextureLayerEXT, "glNamedFramebufferTextureLayerEXT" );
    if( dt.glNamedFramebufferTextureLayerEXT == NULL ) {
      dt.glNamedFramebufferTextureLayerEXT = missing_glNamedFramebufferTextureLayerEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameter4dEXT, glNamedProgramLocalParameter4dEXT, "glNamedProgramLocalParameter4dEXT" );
    if( dt.glNamedProgramLocalParameter4dEXT == NULL ) {
      dt.glNamedProgramLocalParameter4dEXT = missing_glNamedProgramLocalParameter4dEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameter4dvEXT, glNamedProgramLocalParameter4dvEXT, "glNamedProgramLocalParameter4dvEXT" );
    if( dt.glNamedProgramLocalParameter4dvEXT == NULL ) {
      dt.glNamedProgramLocalParameter4dvEXT = missing_glNamedProgramLocalParameter4dvEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameter4fEXT, glNamedProgramLocalParameter4fEXT, "glNamedProgramLocalParameter4fEXT" );
    if( dt.glNamedProgramLocalParameter4fEXT == NULL ) {
      dt.glNamedProgramLocalParameter4fEXT = missing_glNamedProgramLocalParameter4fEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameter4fvEXT, glNamedProgramLocalParameter4fvEXT, "glNamedProgramLocalParameter4fvEXT" );
    if( dt.glNamedProgramLocalParameter4fvEXT == NULL ) {
      dt.glNamedProgramLocalParameter4fvEXT = missing_glNamedProgramLocalParameter4fvEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameterI4iEXT, glNamedProgramLocalParameterI4iEXT, "glNamedProgramLocalParameterI4iEXT" );
    if( dt.glNamedProgramLocalParameterI4iEXT == NULL ) {
      dt.glNamedProgramLocalParameterI4iEXT = missing_glNamedProgramLocalParameterI4iEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameterI4ivEXT, glNamedProgramLocalParameterI4ivEXT, "glNamedProgramLocalParameterI4ivEXT" );
    if( dt.glNamedProgramLocalParameterI4ivEXT == NULL ) {
      dt.glNamedProgramLocalParameterI4ivEXT = missing_glNamedProgramLocalParameterI4ivEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameterI4uiEXT, glNamedProgramLocalParameterI4uiEXT, "glNamedProgramLocalParameterI4uiEXT" );
    if( dt.glNamedProgramLocalParameterI4uiEXT == NULL ) {
      dt.glNamedProgramLocalParameterI4uiEXT = missing_glNamedProgramLocalParameterI4uiEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameterI4uivEXT, glNamedProgramLocalParameterI4uivEXT, "glNamedProgramLocalParameterI4uivEXT" );
    if( dt.glNamedProgramLocalParameterI4uivEXT == NULL ) {
      dt.glNamedProgramLocalParameterI4uivEXT = missing_glNamedProgramLocalParameterI4uivEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParameters4fvEXT, glNamedProgramLocalParameters4fvEXT, "glNamedProgramLocalParameters4fvEXT" );
    if( dt.glNamedProgramLocalParameters4fvEXT == NULL ) {
      dt.glNamedProgramLocalParameters4fvEXT = missing_glNamedProgramLocalParameters4fvEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParametersI4ivEXT, glNamedProgramLocalParametersI4ivEXT, "glNamedProgramLocalParametersI4ivEXT" );
    if( dt.glNamedProgramLocalParametersI4ivEXT == NULL ) {
      dt.glNamedProgramLocalParametersI4ivEXT = missing_glNamedProgramLocalParametersI4ivEXT;
    }
    _getProcAddress( dt.glNamedProgramLocalParametersI4uivEXT, glNamedProgramLocalParametersI4uivEXT, "glNamedProgramLocalParametersI4uivEXT" );
    if( dt.glNamedProgramLocalParametersI4uivEXT == NULL ) {
      dt.glNamedProgramLocalParametersI4uivEXT = missing_glNamedProgramLocalParametersI4uivEXT;
    }
    _getProcAddress( dt.glNamedProgramStringEXT, glNamedProgramStringEXT, "glNamedProgramStringEXT" );
    if( dt.glNamedProgramStringEXT == NULL ) {
      dt.glNamedProgramStringEXT = missing_glNamedProgramStringEXT;
    }
    _getProcAddress( dt.glNamedRenderbufferStorageEXT, glNamedRenderbufferStorageEXT, "glNamedRenderbufferStorageEXT" );
    if( dt.glNamedRenderbufferStorageEXT == NULL ) {
      dt.glNamedRenderbufferStorageEXT = missing_glNamedRenderbufferStorageEXT;
    }
    _getProcAddress( dt.glNamedRenderbufferStorageMultisampleCoverageEXT, glNamedRenderbufferStorageMultisampleCoverageEXT, "glNamedRenderbufferStorageMultisampleCoverageEXT" );
    if( dt.glNamedRenderbufferStorageMultisampleCoverageEXT == NULL ) {
      dt.glNamedRenderbufferStorageMultisampleCoverageEXT = missing_glNamedRenderbufferStorageMultisampleCoverageEXT;
    }
    _getProcAddress( dt.glNamedRenderbufferStorageMultisampleEXT, glNamedRenderbufferStorageMultisampleEXT, "glNamedRenderbufferStorageMultisampleEXT" );
    if( dt.glNamedRenderbufferStorageMultisampleEXT == NULL ) {
      dt.glNamedRenderbufferStorageMultisampleEXT = missing_glNamedRenderbufferStorageMultisampleEXT;
    }
    _getProcAddress( dt.glProgramUniform1dEXT, glProgramUniform1dEXT, "glProgramUniform1dEXT" );
    if( dt.glProgramUniform1dEXT == NULL ) {
      dt.glProgramUniform1dEXT = missing_glProgramUniform1dEXT;
    }
    _getProcAddress( dt.glProgramUniform1dvEXT, glProgramUniform1dvEXT, "glProgramUniform1dvEXT" );
    if( dt.glProgramUniform1dvEXT == NULL ) {
      dt.glProgramUniform1dvEXT = missing_glProgramUniform1dvEXT;
    }
    _getProcAddress( dt.glProgramUniform1fEXT, glProgramUniform1fEXT, "glProgramUniform1fEXT" );
    if( dt.glProgramUniform1fEXT == NULL ) {
      dt.glProgramUniform1fEXT = missing_glProgramUniform1fEXT;
    }
    _getProcAddress( dt.glProgramUniform1fvEXT, glProgramUniform1fvEXT, "glProgramUniform1fvEXT" );
    if( dt.glProgramUniform1fvEXT == NULL ) {
      dt.glProgramUniform1fvEXT = missing_glProgramUniform1fvEXT;
    }
    _getProcAddress( dt.glProgramUniform1iEXT, glProgramUniform1iEXT, "glProgramUniform1iEXT" );
    if( dt.glProgramUniform1iEXT == NULL ) {
      dt.glProgramUniform1iEXT = missing_glProgramUniform1iEXT;
    }
    _getProcAddress( dt.glProgramUniform1ivEXT, glProgramUniform1ivEXT, "glProgramUniform1ivEXT" );
    if( dt.glProgramUniform1ivEXT == NULL ) {
      dt.glProgramUniform1ivEXT = missing_glProgramUniform1ivEXT;
    }
    _getProcAddress( dt.glProgramUniform1uiEXT, glProgramUniform1uiEXT, "glProgramUniform1uiEXT" );
    if( dt.glProgramUniform1uiEXT == NULL ) {
      dt.glProgramUniform1uiEXT = missing_glProgramUniform1uiEXT;
    }
    _getProcAddress( dt.glProgramUniform1uivEXT, glProgramUniform1uivEXT, "glProgramUniform1uivEXT" );
    if( dt.glProgramUniform1uivEXT == NULL ) {
      dt.glProgramUniform1uivEXT = missing_glProgramUniform1uivEXT;
    }
    _getProcAddress( dt.glProgramUniform2dEXT, glProgramUniform2dEXT, "glProgramUniform2dEXT" );
    if( dt.glProgramUniform2dEXT == NULL ) {
      dt.glProgramUniform2dEXT = missing_glProgramUniform2dEXT;
    }
    _getProcAddress( dt.glProgramUniform2dvEXT, glProgramUniform2dvEXT, "glProgramUniform2dvEXT" );
    if( dt.glProgramUniform2dvEXT == NULL ) {
      dt.glProgramUniform2dvEXT = missing_glProgramUniform2dvEXT;
    }
    _getProcAddress( dt.glProgramUniform2fEXT, glProgramUniform2fEXT, "glProgramUniform2fEXT" );
    if( dt.glProgramUniform2fEXT == NULL ) {
      dt.glProgramUniform2fEXT = missing_glProgramUniform2fEXT;
    }
    _getProcAddress( dt.glProgramUniform2fvEXT, glProgramUniform2fvEXT, "glProgramUniform2fvEXT" );
    if( dt.glProgramUniform2fvEXT == NULL ) {
      dt.glProgramUniform2fvEXT = missing_glProgramUniform2fvEXT;
    }
    _getProcAddress( dt.glProgramUniform2iEXT, glProgramUniform2iEXT, "glProgramUniform2iEXT" );
    if( dt.glProgramUniform2iEXT == NULL ) {
      dt.glProgramUniform2iEXT = missing_glProgramUniform2iEXT;
    }
    _getProcAddress( dt.glProgramUniform2ivEXT, glProgramUniform2ivEXT, "glProgramUniform2ivEXT" );
    if( dt.glProgramUniform2ivEXT == NULL ) {
      dt.glProgramUniform2ivEXT = missing_glProgramUniform2ivEXT;
    }
    _getProcAddress( dt.glProgramUniform2uiEXT, glProgramUniform2uiEXT, "glProgramUniform2uiEXT" );
    if( dt.glProgramUniform2uiEXT == NULL ) {
      dt.glProgramUniform2uiEXT = missing_glProgramUniform2uiEXT;
    }
    _getProcAddress( dt.glProgramUniform2uivEXT, glProgramUniform2uivEXT, "glProgramUniform2uivEXT" );
    if( dt.glProgramUniform2uivEXT == NULL ) {
      dt.glProgramUniform2uivEXT = missing_glProgramUniform2uivEXT;
    }
    _getProcAddress( dt.glProgramUniform3dEXT, glProgramUniform3dEXT, "glProgramUniform3dEXT" );
    if( dt.glProgramUniform3dEXT == NULL ) {
      dt.glProgramUniform3dEXT = missing_glProgramUniform3dEXT;
    }
    _getProcAddress( dt.glProgramUniform3dvEXT, glProgramUniform3dvEXT, "glProgramUniform3dvEXT" );
    if( dt.glProgramUniform3dvEXT == NULL ) {
      dt.glProgramUniform3dvEXT = missing_glProgramUniform3dvEXT;
    }
    _getProcAddress( dt.glProgramUniform3fEXT, glProgramUniform3fEXT, "glProgramUniform3fEXT" );
    if( dt.glProgramUniform3fEXT == NULL ) {
      dt.glProgramUniform3fEXT = missing_glProgramUniform3fEXT;
    }
    _getProcAddress( dt.glProgramUniform3fvEXT, glProgramUniform3fvEXT, "glProgramUniform3fvEXT" );
    if( dt.glProgramUniform3fvEXT == NULL ) {
      dt.glProgramUniform3fvEXT = missing_glProgramUniform3fvEXT;
    }
    _getProcAddress( dt.glProgramUniform3iEXT, glProgramUniform3iEXT, "glProgramUniform3iEXT" );
    if( dt.glProgramUniform3iEXT == NULL ) {
      dt.glProgramUniform3iEXT = missing_glProgramUniform3iEXT;
    }
    _getProcAddress( dt.glProgramUniform3ivEXT, glProgramUniform3ivEXT, "glProgramUniform3ivEXT" );
    if( dt.glProgramUniform3ivEXT == NULL ) {
      dt.glProgramUniform3ivEXT = missing_glProgramUniform3ivEXT;
    }
    _getProcAddress( dt.glProgramUniform3uiEXT, glProgramUniform3uiEXT, "glProgramUniform3uiEXT" );
    if( dt.glProgramUniform3uiEXT == NULL ) {
      dt.glProgramUniform3uiEXT = missing_glProgramUniform3uiEXT;
    }
    _getProcAddress( dt.glProgramUniform3uivEXT, glProgramUniform3uivEXT, "glProgramUniform3uivEXT" );
    if( dt.glProgramUniform3uivEXT == NULL ) {
      dt.glProgramUniform3uivEXT = missing_glProgramUniform3uivEXT;
    }
    _getProcAddress( dt.glProgramUniform4dEXT, glProgramUniform4dEXT, "glProgramUniform4dEXT" );
    if( dt.glProgramUniform4dEXT == NULL ) {
      dt.glProgramUniform4dEXT = missing_glProgramUniform4dEXT;
    }
    _getProcAddress( dt.glProgramUniform4dvEXT, glProgramUniform4dvEXT, "glProgramUniform4dvEXT" );
    if( dt.glProgramUniform4dvEXT == NULL ) {
      dt.glProgramUniform4dvEXT = missing_glProgramUniform4dvEXT;
    }
    _getProcAddress( dt.glProgramUniform4fEXT, glProgramUniform4fEXT, "glProgramUniform4fEXT" );
    if( dt.glProgramUniform4fEXT == NULL ) {
      dt.glProgramUniform4fEXT = missing_glProgramUniform4fEXT;
    }
    _getProcAddress( dt.glProgramUniform4fvEXT, glProgramUniform4fvEXT, "glProgramUniform4fvEXT" );
    if( dt.glProgramUniform4fvEXT == NULL ) {
      dt.glProgramUniform4fvEXT = missing_glProgramUniform4fvEXT;
    }
    _getProcAddress( dt.glProgramUniform4iEXT, glProgramUniform4iEXT, "glProgramUniform4iEXT" );
    if( dt.glProgramUniform4iEXT == NULL ) {
      dt.glProgramUniform4iEXT = missing_glProgramUniform4iEXT;
    }
    _getProcAddress( dt.glProgramUniform4ivEXT, glProgramUniform4ivEXT, "glProgramUniform4ivEXT" );
    if( dt.glProgramUniform4ivEXT == NULL ) {
      dt.glProgramUniform4ivEXT = missing_glProgramUniform4ivEXT;
    }
    _getProcAddress( dt.glProgramUniform4uiEXT, glProgramUniform4uiEXT, "glProgramUniform4uiEXT" );
    if( dt.glProgramUniform4uiEXT == NULL ) {
      dt.glProgramUniform4uiEXT = missing_glProgramUniform4uiEXT;
    }
    _getProcAddress( dt.glProgramUniform4uivEXT, glProgramUniform4uivEXT, "glProgramUniform4uivEXT" );
    if( dt.glProgramUniform4uivEXT == NULL ) {
      dt.glProgramUniform4uivEXT = missing_glProgramUniform4uivEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix2dvEXT, glProgramUniformMatrix2dvEXT, "glProgramUniformMatrix2dvEXT" );
    if( dt.glProgramUniformMatrix2dvEXT == NULL ) {
      dt.glProgramUniformMatrix2dvEXT = missing_glProgramUniformMatrix2dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix2fvEXT, glProgramUniformMatrix2fvEXT, "glProgramUniformMatrix2fvEXT" );
    if( dt.glProgramUniformMatrix2fvEXT == NULL ) {
      dt.glProgramUniformMatrix2fvEXT = missing_glProgramUniformMatrix2fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x3dvEXT, glProgramUniformMatrix2x3dvEXT, "glProgramUniformMatrix2x3dvEXT" );
    if( dt.glProgramUniformMatrix2x3dvEXT == NULL ) {
      dt.glProgramUniformMatrix2x3dvEXT = missing_glProgramUniformMatrix2x3dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x3fvEXT, glProgramUniformMatrix2x3fvEXT, "glProgramUniformMatrix2x3fvEXT" );
    if( dt.glProgramUniformMatrix2x3fvEXT == NULL ) {
      dt.glProgramUniformMatrix2x3fvEXT = missing_glProgramUniformMatrix2x3fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x4dvEXT, glProgramUniformMatrix2x4dvEXT, "glProgramUniformMatrix2x4dvEXT" );
    if( dt.glProgramUniformMatrix2x4dvEXT == NULL ) {
      dt.glProgramUniformMatrix2x4dvEXT = missing_glProgramUniformMatrix2x4dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix2x4fvEXT, glProgramUniformMatrix2x4fvEXT, "glProgramUniformMatrix2x4fvEXT" );
    if( dt.glProgramUniformMatrix2x4fvEXT == NULL ) {
      dt.glProgramUniformMatrix2x4fvEXT = missing_glProgramUniformMatrix2x4fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix3dvEXT, glProgramUniformMatrix3dvEXT, "glProgramUniformMatrix3dvEXT" );
    if( dt.glProgramUniformMatrix3dvEXT == NULL ) {
      dt.glProgramUniformMatrix3dvEXT = missing_glProgramUniformMatrix3dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix3fvEXT, glProgramUniformMatrix3fvEXT, "glProgramUniformMatrix3fvEXT" );
    if( dt.glProgramUniformMatrix3fvEXT == NULL ) {
      dt.glProgramUniformMatrix3fvEXT = missing_glProgramUniformMatrix3fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x2dvEXT, glProgramUniformMatrix3x2dvEXT, "glProgramUniformMatrix3x2dvEXT" );
    if( dt.glProgramUniformMatrix3x2dvEXT == NULL ) {
      dt.glProgramUniformMatrix3x2dvEXT = missing_glProgramUniformMatrix3x2dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x2fvEXT, glProgramUniformMatrix3x2fvEXT, "glProgramUniformMatrix3x2fvEXT" );
    if( dt.glProgramUniformMatrix3x2fvEXT == NULL ) {
      dt.glProgramUniformMatrix3x2fvEXT = missing_glProgramUniformMatrix3x2fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x4dvEXT, glProgramUniformMatrix3x4dvEXT, "glProgramUniformMatrix3x4dvEXT" );
    if( dt.glProgramUniformMatrix3x4dvEXT == NULL ) {
      dt.glProgramUniformMatrix3x4dvEXT = missing_glProgramUniformMatrix3x4dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix3x4fvEXT, glProgramUniformMatrix3x4fvEXT, "glProgramUniformMatrix3x4fvEXT" );
    if( dt.glProgramUniformMatrix3x4fvEXT == NULL ) {
      dt.glProgramUniformMatrix3x4fvEXT = missing_glProgramUniformMatrix3x4fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix4dvEXT, glProgramUniformMatrix4dvEXT, "glProgramUniformMatrix4dvEXT" );
    if( dt.glProgramUniformMatrix4dvEXT == NULL ) {
      dt.glProgramUniformMatrix4dvEXT = missing_glProgramUniformMatrix4dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix4fvEXT, glProgramUniformMatrix4fvEXT, "glProgramUniformMatrix4fvEXT" );
    if( dt.glProgramUniformMatrix4fvEXT == NULL ) {
      dt.glProgramUniformMatrix4fvEXT = missing_glProgramUniformMatrix4fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x2dvEXT, glProgramUniformMatrix4x2dvEXT, "glProgramUniformMatrix4x2dvEXT" );
    if( dt.glProgramUniformMatrix4x2dvEXT == NULL ) {
      dt.glProgramUniformMatrix4x2dvEXT = missing_glProgramUniformMatrix4x2dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x2fvEXT, glProgramUniformMatrix4x2fvEXT, "glProgramUniformMatrix4x2fvEXT" );
    if( dt.glProgramUniformMatrix4x2fvEXT == NULL ) {
      dt.glProgramUniformMatrix4x2fvEXT = missing_glProgramUniformMatrix4x2fvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x3dvEXT, glProgramUniformMatrix4x3dvEXT, "glProgramUniformMatrix4x3dvEXT" );
    if( dt.glProgramUniformMatrix4x3dvEXT == NULL ) {
      dt.glProgramUniformMatrix4x3dvEXT = missing_glProgramUniformMatrix4x3dvEXT;
    }
    _getProcAddress( dt.glProgramUniformMatrix4x3fvEXT, glProgramUniformMatrix4x3fvEXT, "glProgramUniformMatrix4x3fvEXT" );
    if( dt.glProgramUniformMatrix4x3fvEXT == NULL ) {
      dt.glProgramUniformMatrix4x3fvEXT = missing_glProgramUniformMatrix4x3fvEXT;
    }
    _getProcAddress( dt.glPushClientAttribDefaultEXT, glPushClientAttribDefaultEXT, "glPushClientAttribDefaultEXT" );
    if( dt.glPushClientAttribDefaultEXT == NULL ) {
      dt.glPushClientAttribDefaultEXT = missing_glPushClientAttribDefaultEXT;
    }
    _getProcAddress( dt.glTextureBufferEXT, glTextureBufferEXT, "glTextureBufferEXT" );
    if( dt.glTextureBufferEXT == NULL ) {
      dt.glTextureBufferEXT = missing_glTextureBufferEXT;
    }
    _getProcAddress( dt.glTextureImage1DEXT, glTextureImage1DEXT, "glTextureImage1DEXT" );
    if( dt.glTextureImage1DEXT == NULL ) {
      dt.glTextureImage1DEXT = missing_glTextureImage1DEXT;
    }
    _getProcAddress( dt.glTextureImage2DEXT, glTextureImage2DEXT, "glTextureImage2DEXT" );
    if( dt.glTextureImage2DEXT == NULL ) {
      dt.glTextureImage2DEXT = missing_glTextureImage2DEXT;
    }
    _getProcAddress( dt.glTextureImage3DEXT, glTextureImage3DEXT, "glTextureImage3DEXT" );
    if( dt.glTextureImage3DEXT == NULL ) {
      dt.glTextureImage3DEXT = missing_glTextureImage3DEXT;
    }
    _getProcAddress( dt.glTextureParameterIivEXT, glTextureParameterIivEXT, "glTextureParameterIivEXT" );
    if( dt.glTextureParameterIivEXT == NULL ) {
      dt.glTextureParameterIivEXT = missing_glTextureParameterIivEXT;
    }
    _getProcAddress( dt.glTextureParameterIuivEXT, glTextureParameterIuivEXT, "glTextureParameterIuivEXT" );
    if( dt.glTextureParameterIuivEXT == NULL ) {
      dt.glTextureParameterIuivEXT = missing_glTextureParameterIuivEXT;
    }
    _getProcAddress( dt.glTextureParameterfEXT, glTextureParameterfEXT, "glTextureParameterfEXT" );
    if( dt.glTextureParameterfEXT == NULL ) {
      dt.glTextureParameterfEXT = missing_glTextureParameterfEXT;
    }
    _getProcAddress( dt.glTextureParameterfvEXT, glTextureParameterfvEXT, "glTextureParameterfvEXT" );
    if( dt.glTextureParameterfvEXT == NULL ) {
      dt.glTextureParameterfvEXT = missing_glTextureParameterfvEXT;
    }
    _getProcAddress( dt.glTextureParameteriEXT, glTextureParameteriEXT, "glTextureParameteriEXT" );
    if( dt.glTextureParameteriEXT == NULL ) {
      dt.glTextureParameteriEXT = missing_glTextureParameteriEXT;
    }
    _getProcAddress( dt.glTextureParameterivEXT, glTextureParameterivEXT, "glTextureParameterivEXT" );
    if( dt.glTextureParameterivEXT == NULL ) {
      dt.glTextureParameterivEXT = missing_glTextureParameterivEXT;
    }
    _getProcAddress( dt.glTextureRenderbufferEXT, glTextureRenderbufferEXT, "glTextureRenderbufferEXT" );
    if( dt.glTextureRenderbufferEXT == NULL ) {
      dt.glTextureRenderbufferEXT = missing_glTextureRenderbufferEXT;
    }
    _getProcAddress( dt.glTextureSubImage1DEXT, glTextureSubImage1DEXT, "glTextureSubImage1DEXT" );
    if( dt.glTextureSubImage1DEXT == NULL ) {
      dt.glTextureSubImage1DEXT = missing_glTextureSubImage1DEXT;
    }
    _getProcAddress( dt.glTextureSubImage2DEXT, glTextureSubImage2DEXT, "glTextureSubImage2DEXT" );
    if( dt.glTextureSubImage2DEXT == NULL ) {
      dt.glTextureSubImage2DEXT = missing_glTextureSubImage2DEXT;
    }
    _getProcAddress( dt.glTextureSubImage3DEXT, glTextureSubImage3DEXT, "glTextureSubImage3DEXT" );
    if( dt.glTextureSubImage3DEXT == NULL ) {
      dt.glTextureSubImage3DEXT = missing_glTextureSubImage3DEXT;
    }
    _getProcAddress( dt.glUnmapNamedBufferEXT, glUnmapNamedBufferEXT, "glUnmapNamedBufferEXT" );
    if( dt.glUnmapNamedBufferEXT == NULL ) {
      dt.glUnmapNamedBufferEXT = missing_glUnmapNamedBufferEXT;
    }
    _getProcAddress( dt.glVertexArrayColorOffsetEXT, glVertexArrayColorOffsetEXT, "glVertexArrayColorOffsetEXT" );
    if( dt.glVertexArrayColorOffsetEXT == NULL ) {
      dt.glVertexArrayColorOffsetEXT = missing_glVertexArrayColorOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayEdgeFlagOffsetEXT, glVertexArrayEdgeFlagOffsetEXT, "glVertexArrayEdgeFlagOffsetEXT" );
    if( dt.glVertexArrayEdgeFlagOffsetEXT == NULL ) {
      dt.glVertexArrayEdgeFlagOffsetEXT = missing_glVertexArrayEdgeFlagOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayFogCoordOffsetEXT, glVertexArrayFogCoordOffsetEXT, "glVertexArrayFogCoordOffsetEXT" );
    if( dt.glVertexArrayFogCoordOffsetEXT == NULL ) {
      dt.glVertexArrayFogCoordOffsetEXT = missing_glVertexArrayFogCoordOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayIndexOffsetEXT, glVertexArrayIndexOffsetEXT, "glVertexArrayIndexOffsetEXT" );
    if( dt.glVertexArrayIndexOffsetEXT == NULL ) {
      dt.glVertexArrayIndexOffsetEXT = missing_glVertexArrayIndexOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayMultiTexCoordOffsetEXT, glVertexArrayMultiTexCoordOffsetEXT, "glVertexArrayMultiTexCoordOffsetEXT" );
    if( dt.glVertexArrayMultiTexCoordOffsetEXT == NULL ) {
      dt.glVertexArrayMultiTexCoordOffsetEXT = missing_glVertexArrayMultiTexCoordOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayNormalOffsetEXT, glVertexArrayNormalOffsetEXT, "glVertexArrayNormalOffsetEXT" );
    if( dt.glVertexArrayNormalOffsetEXT == NULL ) {
      dt.glVertexArrayNormalOffsetEXT = missing_glVertexArrayNormalOffsetEXT;
    }
    _getProcAddress( dt.glVertexArraySecondaryColorOffsetEXT, glVertexArraySecondaryColorOffsetEXT, "glVertexArraySecondaryColorOffsetEXT" );
    if( dt.glVertexArraySecondaryColorOffsetEXT == NULL ) {
      dt.glVertexArraySecondaryColorOffsetEXT = missing_glVertexArraySecondaryColorOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayTexCoordOffsetEXT, glVertexArrayTexCoordOffsetEXT, "glVertexArrayTexCoordOffsetEXT" );
    if( dt.glVertexArrayTexCoordOffsetEXT == NULL ) {
      dt.glVertexArrayTexCoordOffsetEXT = missing_glVertexArrayTexCoordOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribIOffsetEXT, glVertexArrayVertexAttribIOffsetEXT, "glVertexArrayVertexAttribIOffsetEXT" );
    if( dt.glVertexArrayVertexAttribIOffsetEXT == NULL ) {
      dt.glVertexArrayVertexAttribIOffsetEXT = missing_glVertexArrayVertexAttribIOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribOffsetEXT, glVertexArrayVertexAttribOffsetEXT, "glVertexArrayVertexAttribOffsetEXT" );
    if( dt.glVertexArrayVertexAttribOffsetEXT == NULL ) {
      dt.glVertexArrayVertexAttribOffsetEXT = missing_glVertexArrayVertexAttribOffsetEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexOffsetEXT, glVertexArrayVertexOffsetEXT, "glVertexArrayVertexOffsetEXT" );
    if( dt.glVertexArrayVertexOffsetEXT == NULL ) {
      dt.glVertexArrayVertexOffsetEXT = missing_glVertexArrayVertexOffsetEXT;
    }

    // GL_EXT_discard_framebuffer

    _getProcAddress( dt.glDiscardFramebufferEXT, glDiscardFramebufferEXT, "glDiscardFramebufferEXT" );
    if( dt.glDiscardFramebufferEXT == NULL ) {
      dt.glDiscardFramebufferEXT = missing_glDiscardFramebufferEXT;
    }

    // GL_EXT_disjoint_timer_query

    _getProcAddress( dt.glGetQueryObjectivEXT, glGetQueryObjectivEXT, "glGetQueryObjectivEXT" );
    if( dt.glGetQueryObjectivEXT == NULL ) {
      dt.glGetQueryObjectivEXT = missing_glGetQueryObjectivEXT;
    }
    _getProcAddress( dt.glQueryCounterEXT, glQueryCounterEXT, "glQueryCounterEXT" );
    if( dt.glQueryCounterEXT == NULL ) {
      dt.glQueryCounterEXT = missing_glQueryCounterEXT;
    }

    // GL_EXT_draw_buffers2

    _getProcAddress( dt.glColorMaskIndexedEXT, glColorMaskIndexedEXT, "glColorMaskIndexedEXT" );
    if( dt.glColorMaskIndexedEXT == NULL ) {
      dt.glColorMaskIndexedEXT = missing_glColorMaskIndexedEXT;
    }
    _getProcAddress( dt.glDisableIndexedEXT, glDisableIndexedEXT, "glDisableIndexedEXT" );
    if( dt.glDisableIndexedEXT == NULL ) {
      dt.glDisableIndexedEXT = missing_glDisableIndexedEXT;
    }
    _getProcAddress( dt.glEnableIndexedEXT, glEnableIndexedEXT, "glEnableIndexedEXT" );
    if( dt.glEnableIndexedEXT == NULL ) {
      dt.glEnableIndexedEXT = missing_glEnableIndexedEXT;
    }
    _getProcAddress( dt.glGetBooleanIndexedvEXT, glGetBooleanIndexedvEXT, "glGetBooleanIndexedvEXT" );
    if( dt.glGetBooleanIndexedvEXT == NULL ) {
      dt.glGetBooleanIndexedvEXT = missing_glGetBooleanIndexedvEXT;
    }
    _getProcAddress( dt.glGetIntegerIndexedvEXT, glGetIntegerIndexedvEXT, "glGetIntegerIndexedvEXT" );
    if( dt.glGetIntegerIndexedvEXT == NULL ) {
      dt.glGetIntegerIndexedvEXT = missing_glGetIntegerIndexedvEXT;
    }
    _getProcAddress( dt.glIsEnabledIndexedEXT, glIsEnabledIndexedEXT, "glIsEnabledIndexedEXT" );
    if( dt.glIsEnabledIndexedEXT == NULL ) {
      dt.glIsEnabledIndexedEXT = missing_glIsEnabledIndexedEXT;
    }

    // GL_EXT_draw_instanced

    _getProcAddress( dt.glDrawArraysInstancedEXT, glDrawArraysInstancedEXT, "glDrawArraysInstancedEXT" );
    if( dt.glDrawArraysInstancedEXT == NULL ) {
      dt.glDrawArraysInstancedEXT = missing_glDrawArraysInstancedEXT;
    }
    _getProcAddress( dt.glDrawElementsInstancedEXT, glDrawElementsInstancedEXT, "glDrawElementsInstancedEXT" );
    if( dt.glDrawElementsInstancedEXT == NULL ) {
      dt.glDrawElementsInstancedEXT = missing_glDrawElementsInstancedEXT;
    }

    // GL_EXT_draw_range_elements

    _getProcAddress( dt.glDrawRangeElementsEXT, glDrawRangeElementsEXT, "glDrawRangeElementsEXT" );
    if( dt.glDrawRangeElementsEXT == NULL ) {
      dt.glDrawRangeElementsEXT = missing_glDrawRangeElementsEXT;
    }

    // GL_EXT_fog_coord

    _getProcAddress( dt.glFogCoordPointerEXT, glFogCoordPointerEXT, "glFogCoordPointerEXT" );
    if( dt.glFogCoordPointerEXT == NULL ) {
      dt.glFogCoordPointerEXT = missing_glFogCoordPointerEXT;
    }
    _getProcAddress( dt.glFogCoorddEXT, glFogCoorddEXT, "glFogCoorddEXT" );
    if( dt.glFogCoorddEXT == NULL ) {
      dt.glFogCoorddEXT = missing_glFogCoorddEXT;
    }
    _getProcAddress( dt.glFogCoorddvEXT, glFogCoorddvEXT, "glFogCoorddvEXT" );
    if( dt.glFogCoorddvEXT == NULL ) {
      dt.glFogCoorddvEXT = missing_glFogCoorddvEXT;
    }
    _getProcAddress( dt.glFogCoordfEXT, glFogCoordfEXT, "glFogCoordfEXT" );
    if( dt.glFogCoordfEXT == NULL ) {
      dt.glFogCoordfEXT = missing_glFogCoordfEXT;
    }
    _getProcAddress( dt.glFogCoordfvEXT, glFogCoordfvEXT, "glFogCoordfvEXT" );
    if( dt.glFogCoordfvEXT == NULL ) {
      dt.glFogCoordfvEXT = missing_glFogCoordfvEXT;
    }

    // GL_EXT_fragment_lighting

    _getProcAddress( dt.glFragmentColorMaterialEXT, glFragmentColorMaterialEXT, "glFragmentColorMaterialEXT" );
    if( dt.glFragmentColorMaterialEXT == NULL ) {
      dt.glFragmentColorMaterialEXT = missing_glFragmentColorMaterialEXT;
    }
    _getProcAddress( dt.glFragmentLightModelfEXT, glFragmentLightModelfEXT, "glFragmentLightModelfEXT" );
    if( dt.glFragmentLightModelfEXT == NULL ) {
      dt.glFragmentLightModelfEXT = missing_glFragmentLightModelfEXT;
    }
    _getProcAddress( dt.glFragmentLightModelfvEXT, glFragmentLightModelfvEXT, "glFragmentLightModelfvEXT" );
    if( dt.glFragmentLightModelfvEXT == NULL ) {
      dt.glFragmentLightModelfvEXT = missing_glFragmentLightModelfvEXT;
    }
    _getProcAddress( dt.glFragmentLightModeliEXT, glFragmentLightModeliEXT, "glFragmentLightModeliEXT" );
    if( dt.glFragmentLightModeliEXT == NULL ) {
      dt.glFragmentLightModeliEXT = missing_glFragmentLightModeliEXT;
    }
    _getProcAddress( dt.glFragmentLightModelivEXT, glFragmentLightModelivEXT, "glFragmentLightModelivEXT" );
    if( dt.glFragmentLightModelivEXT == NULL ) {
      dt.glFragmentLightModelivEXT = missing_glFragmentLightModelivEXT;
    }
    _getProcAddress( dt.glFragmentLightfEXT, glFragmentLightfEXT, "glFragmentLightfEXT" );
    if( dt.glFragmentLightfEXT == NULL ) {
      dt.glFragmentLightfEXT = missing_glFragmentLightfEXT;
    }
    _getProcAddress( dt.glFragmentLightfvEXT, glFragmentLightfvEXT, "glFragmentLightfvEXT" );
    if( dt.glFragmentLightfvEXT == NULL ) {
      dt.glFragmentLightfvEXT = missing_glFragmentLightfvEXT;
    }
    _getProcAddress( dt.glFragmentLightiEXT, glFragmentLightiEXT, "glFragmentLightiEXT" );
    if( dt.glFragmentLightiEXT == NULL ) {
      dt.glFragmentLightiEXT = missing_glFragmentLightiEXT;
    }
    _getProcAddress( dt.glFragmentLightivEXT, glFragmentLightivEXT, "glFragmentLightivEXT" );
    if( dt.glFragmentLightivEXT == NULL ) {
      dt.glFragmentLightivEXT = missing_glFragmentLightivEXT;
    }
    _getProcAddress( dt.glFragmentMaterialfEXT, glFragmentMaterialfEXT, "glFragmentMaterialfEXT" );
    if( dt.glFragmentMaterialfEXT == NULL ) {
      dt.glFragmentMaterialfEXT = missing_glFragmentMaterialfEXT;
    }
    _getProcAddress( dt.glFragmentMaterialfvEXT, glFragmentMaterialfvEXT, "glFragmentMaterialfvEXT" );
    if( dt.glFragmentMaterialfvEXT == NULL ) {
      dt.glFragmentMaterialfvEXT = missing_glFragmentMaterialfvEXT;
    }
    _getProcAddress( dt.glFragmentMaterialiEXT, glFragmentMaterialiEXT, "glFragmentMaterialiEXT" );
    if( dt.glFragmentMaterialiEXT == NULL ) {
      dt.glFragmentMaterialiEXT = missing_glFragmentMaterialiEXT;
    }
    _getProcAddress( dt.glFragmentMaterialivEXT, glFragmentMaterialivEXT, "glFragmentMaterialivEXT" );
    if( dt.glFragmentMaterialivEXT == NULL ) {
      dt.glFragmentMaterialivEXT = missing_glFragmentMaterialivEXT;
    }
    _getProcAddress( dt.glGetFragmentLightfvEXT, glGetFragmentLightfvEXT, "glGetFragmentLightfvEXT" );
    if( dt.glGetFragmentLightfvEXT == NULL ) {
      dt.glGetFragmentLightfvEXT = missing_glGetFragmentLightfvEXT;
    }
    _getProcAddress( dt.glGetFragmentLightivEXT, glGetFragmentLightivEXT, "glGetFragmentLightivEXT" );
    if( dt.glGetFragmentLightivEXT == NULL ) {
      dt.glGetFragmentLightivEXT = missing_glGetFragmentLightivEXT;
    }
    _getProcAddress( dt.glGetFragmentMaterialfvEXT, glGetFragmentMaterialfvEXT, "glGetFragmentMaterialfvEXT" );
    if( dt.glGetFragmentMaterialfvEXT == NULL ) {
      dt.glGetFragmentMaterialfvEXT = missing_glGetFragmentMaterialfvEXT;
    }
    _getProcAddress( dt.glGetFragmentMaterialivEXT, glGetFragmentMaterialivEXT, "glGetFragmentMaterialivEXT" );
    if( dt.glGetFragmentMaterialivEXT == NULL ) {
      dt.glGetFragmentMaterialivEXT = missing_glGetFragmentMaterialivEXT;
    }
    _getProcAddress( dt.glLightEnviEXT, glLightEnviEXT, "glLightEnviEXT" );
    if( dt.glLightEnviEXT == NULL ) {
      dt.glLightEnviEXT = missing_glLightEnviEXT;
    }

    // GL_EXT_framebuffer_blit

    _getProcAddress( dt.glBlitFramebufferEXT, glBlitFramebufferEXT, "glBlitFramebufferEXT" );
    if( dt.glBlitFramebufferEXT == NULL ) {
      dt.glBlitFramebufferEXT = missing_glBlitFramebufferEXT;
    }

    // GL_EXT_framebuffer_multisample

    _getProcAddress( dt.glRenderbufferStorageMultisampleEXT, glRenderbufferStorageMultisampleEXT, "glRenderbufferStorageMultisampleEXT" );
    if( dt.glRenderbufferStorageMultisampleEXT == NULL ) {
      dt.glRenderbufferStorageMultisampleEXT = missing_glRenderbufferStorageMultisampleEXT;
    }

    // GL_EXT_framebuffer_object

    _getProcAddress( dt.glBindFramebufferEXT, glBindFramebufferEXT, "glBindFramebufferEXT" );
    if( dt.glBindFramebufferEXT == NULL ) {
      dt.glBindFramebufferEXT = missing_glBindFramebufferEXT;
    }
    _getProcAddress( dt.glBindRenderbufferEXT, glBindRenderbufferEXT, "glBindRenderbufferEXT" );
    if( dt.glBindRenderbufferEXT == NULL ) {
      dt.glBindRenderbufferEXT = missing_glBindRenderbufferEXT;
    }
    _getProcAddress( dt.glCheckFramebufferStatusEXT, glCheckFramebufferStatusEXT, "glCheckFramebufferStatusEXT" );
    if( dt.glCheckFramebufferStatusEXT == NULL ) {
      dt.glCheckFramebufferStatusEXT = missing_glCheckFramebufferStatusEXT;
    }
    _getProcAddress( dt.glDeleteFramebuffersEXT, glDeleteFramebuffersEXT, "glDeleteFramebuffersEXT" );
    if( dt.glDeleteFramebuffersEXT == NULL ) {
      dt.glDeleteFramebuffersEXT = missing_glDeleteFramebuffersEXT;
    }
    _getProcAddress( dt.glDeleteRenderbuffersEXT, glDeleteRenderbuffersEXT, "glDeleteRenderbuffersEXT" );
    if( dt.glDeleteRenderbuffersEXT == NULL ) {
      dt.glDeleteRenderbuffersEXT = missing_glDeleteRenderbuffersEXT;
    }
    _getProcAddress( dt.glFramebufferRenderbufferEXT, glFramebufferRenderbufferEXT, "glFramebufferRenderbufferEXT" );
    if( dt.glFramebufferRenderbufferEXT == NULL ) {
      dt.glFramebufferRenderbufferEXT = missing_glFramebufferRenderbufferEXT;
    }
    _getProcAddress( dt.glFramebufferTexture1DEXT, glFramebufferTexture1DEXT, "glFramebufferTexture1DEXT" );
    if( dt.glFramebufferTexture1DEXT == NULL ) {
      dt.glFramebufferTexture1DEXT = missing_glFramebufferTexture1DEXT;
    }
    _getProcAddress( dt.glFramebufferTexture2DEXT, glFramebufferTexture2DEXT, "glFramebufferTexture2DEXT" );
    if( dt.glFramebufferTexture2DEXT == NULL ) {
      dt.glFramebufferTexture2DEXT = missing_glFramebufferTexture2DEXT;
    }
    _getProcAddress( dt.glFramebufferTexture3DEXT, glFramebufferTexture3DEXT, "glFramebufferTexture3DEXT" );
    if( dt.glFramebufferTexture3DEXT == NULL ) {
      dt.glFramebufferTexture3DEXT = missing_glFramebufferTexture3DEXT;
    }
    _getProcAddress( dt.glGenFramebuffersEXT, glGenFramebuffersEXT, "glGenFramebuffersEXT" );
    if( dt.glGenFramebuffersEXT == NULL ) {
      dt.glGenFramebuffersEXT = missing_glGenFramebuffersEXT;
    }
    _getProcAddress( dt.glGenRenderbuffersEXT, glGenRenderbuffersEXT, "glGenRenderbuffersEXT" );
    if( dt.glGenRenderbuffersEXT == NULL ) {
      dt.glGenRenderbuffersEXT = missing_glGenRenderbuffersEXT;
    }
    _getProcAddress( dt.glGenerateMipmapEXT, glGenerateMipmapEXT, "glGenerateMipmapEXT" );
    if( dt.glGenerateMipmapEXT == NULL ) {
      dt.glGenerateMipmapEXT = missing_glGenerateMipmapEXT;
    }
    _getProcAddress( dt.glGetFramebufferAttachmentParameterivEXT, glGetFramebufferAttachmentParameterivEXT, "glGetFramebufferAttachmentParameterivEXT" );
    if( dt.glGetFramebufferAttachmentParameterivEXT == NULL ) {
      dt.glGetFramebufferAttachmentParameterivEXT = missing_glGetFramebufferAttachmentParameterivEXT;
    }
    _getProcAddress( dt.glGetRenderbufferParameterivEXT, glGetRenderbufferParameterivEXT, "glGetRenderbufferParameterivEXT" );
    if( dt.glGetRenderbufferParameterivEXT == NULL ) {
      dt.glGetRenderbufferParameterivEXT = missing_glGetRenderbufferParameterivEXT;
    }
    _getProcAddress( dt.glIsFramebufferEXT, glIsFramebufferEXT, "glIsFramebufferEXT" );
    if( dt.glIsFramebufferEXT == NULL ) {
      dt.glIsFramebufferEXT = missing_glIsFramebufferEXT;
    }
    _getProcAddress( dt.glIsRenderbufferEXT, glIsRenderbufferEXT, "glIsRenderbufferEXT" );
    if( dt.glIsRenderbufferEXT == NULL ) {
      dt.glIsRenderbufferEXT = missing_glIsRenderbufferEXT;
    }
    _getProcAddress( dt.glRenderbufferStorageEXT, glRenderbufferStorageEXT, "glRenderbufferStorageEXT" );
    if( dt.glRenderbufferStorageEXT == NULL ) {
      dt.glRenderbufferStorageEXT = missing_glRenderbufferStorageEXT;
    }

    // GL_EXT_geometry_shader4

    _getProcAddress( dt.glFramebufferTextureEXT, glFramebufferTextureEXT, "glFramebufferTextureEXT" );
    if( dt.glFramebufferTextureEXT == NULL ) {
      dt.glFramebufferTextureEXT = missing_glFramebufferTextureEXT;
    }
    _getProcAddress( dt.glFramebufferTextureFaceEXT, glFramebufferTextureFaceEXT, "glFramebufferTextureFaceEXT" );
    if( dt.glFramebufferTextureFaceEXT == NULL ) {
      dt.glFramebufferTextureFaceEXT = missing_glFramebufferTextureFaceEXT;
    }
    _getProcAddress( dt.glProgramParameteriEXT, glProgramParameteriEXT, "glProgramParameteriEXT" );
    if( dt.glProgramParameteriEXT == NULL ) {
      dt.glProgramParameteriEXT = missing_glProgramParameteriEXT;
    }

    // GL_EXT_gpu_program_parameters

    _getProcAddress( dt.glProgramEnvParameters4fvEXT, glProgramEnvParameters4fvEXT, "glProgramEnvParameters4fvEXT" );
    if( dt.glProgramEnvParameters4fvEXT == NULL ) {
      dt.glProgramEnvParameters4fvEXT = missing_glProgramEnvParameters4fvEXT;
    }
    _getProcAddress( dt.glProgramLocalParameters4fvEXT, glProgramLocalParameters4fvEXT, "glProgramLocalParameters4fvEXT" );
    if( dt.glProgramLocalParameters4fvEXT == NULL ) {
      dt.glProgramLocalParameters4fvEXT = missing_glProgramLocalParameters4fvEXT;
    }

    // GL_EXT_gpu_shader4

    _getProcAddress( dt.glBindFragDataLocationEXT, glBindFragDataLocationEXT, "glBindFragDataLocationEXT" );
    if( dt.glBindFragDataLocationEXT == NULL ) {
      dt.glBindFragDataLocationEXT = missing_glBindFragDataLocationEXT;
    }
    _getProcAddress( dt.glGetFragDataLocationEXT, glGetFragDataLocationEXT, "glGetFragDataLocationEXT" );
    if( dt.glGetFragDataLocationEXT == NULL ) {
      dt.glGetFragDataLocationEXT = missing_glGetFragDataLocationEXT;
    }
    _getProcAddress( dt.glGetUniformuivEXT, glGetUniformuivEXT, "glGetUniformuivEXT" );
    if( dt.glGetUniformuivEXT == NULL ) {
      dt.glGetUniformuivEXT = missing_glGetUniformuivEXT;
    }
    _getProcAddress( dt.glGetVertexAttribIivEXT, glGetVertexAttribIivEXT, "glGetVertexAttribIivEXT" );
    if( dt.glGetVertexAttribIivEXT == NULL ) {
      dt.glGetVertexAttribIivEXT = missing_glGetVertexAttribIivEXT;
    }
    _getProcAddress( dt.glGetVertexAttribIuivEXT, glGetVertexAttribIuivEXT, "glGetVertexAttribIuivEXT" );
    if( dt.glGetVertexAttribIuivEXT == NULL ) {
      dt.glGetVertexAttribIuivEXT = missing_glGetVertexAttribIuivEXT;
    }
    _getProcAddress( dt.glUniform1uiEXT, glUniform1uiEXT, "glUniform1uiEXT" );
    if( dt.glUniform1uiEXT == NULL ) {
      dt.glUniform1uiEXT = missing_glUniform1uiEXT;
    }
    _getProcAddress( dt.glUniform1uivEXT, glUniform1uivEXT, "glUniform1uivEXT" );
    if( dt.glUniform1uivEXT == NULL ) {
      dt.glUniform1uivEXT = missing_glUniform1uivEXT;
    }
    _getProcAddress( dt.glUniform2uiEXT, glUniform2uiEXT, "glUniform2uiEXT" );
    if( dt.glUniform2uiEXT == NULL ) {
      dt.glUniform2uiEXT = missing_glUniform2uiEXT;
    }
    _getProcAddress( dt.glUniform2uivEXT, glUniform2uivEXT, "glUniform2uivEXT" );
    if( dt.glUniform2uivEXT == NULL ) {
      dt.glUniform2uivEXT = missing_glUniform2uivEXT;
    }
    _getProcAddress( dt.glUniform3uiEXT, glUniform3uiEXT, "glUniform3uiEXT" );
    if( dt.glUniform3uiEXT == NULL ) {
      dt.glUniform3uiEXT = missing_glUniform3uiEXT;
    }
    _getProcAddress( dt.glUniform3uivEXT, glUniform3uivEXT, "glUniform3uivEXT" );
    if( dt.glUniform3uivEXT == NULL ) {
      dt.glUniform3uivEXT = missing_glUniform3uivEXT;
    }
    _getProcAddress( dt.glUniform4uiEXT, glUniform4uiEXT, "glUniform4uiEXT" );
    if( dt.glUniform4uiEXT == NULL ) {
      dt.glUniform4uiEXT = missing_glUniform4uiEXT;
    }
    _getProcAddress( dt.glUniform4uivEXT, glUniform4uivEXT, "glUniform4uivEXT" );
    if( dt.glUniform4uivEXT == NULL ) {
      dt.glUniform4uivEXT = missing_glUniform4uivEXT;
    }
    _getProcAddress( dt.glVertexAttribI1iEXT, glVertexAttribI1iEXT, "glVertexAttribI1iEXT" );
    if( dt.glVertexAttribI1iEXT == NULL ) {
      dt.glVertexAttribI1iEXT = missing_glVertexAttribI1iEXT;
    }
    _getProcAddress( dt.glVertexAttribI1ivEXT, glVertexAttribI1ivEXT, "glVertexAttribI1ivEXT" );
    if( dt.glVertexAttribI1ivEXT == NULL ) {
      dt.glVertexAttribI1ivEXT = missing_glVertexAttribI1ivEXT;
    }
    _getProcAddress( dt.glVertexAttribI1uiEXT, glVertexAttribI1uiEXT, "glVertexAttribI1uiEXT" );
    if( dt.glVertexAttribI1uiEXT == NULL ) {
      dt.glVertexAttribI1uiEXT = missing_glVertexAttribI1uiEXT;
    }
    _getProcAddress( dt.glVertexAttribI1uivEXT, glVertexAttribI1uivEXT, "glVertexAttribI1uivEXT" );
    if( dt.glVertexAttribI1uivEXT == NULL ) {
      dt.glVertexAttribI1uivEXT = missing_glVertexAttribI1uivEXT;
    }
    _getProcAddress( dt.glVertexAttribI2iEXT, glVertexAttribI2iEXT, "glVertexAttribI2iEXT" );
    if( dt.glVertexAttribI2iEXT == NULL ) {
      dt.glVertexAttribI2iEXT = missing_glVertexAttribI2iEXT;
    }
    _getProcAddress( dt.glVertexAttribI2ivEXT, glVertexAttribI2ivEXT, "glVertexAttribI2ivEXT" );
    if( dt.glVertexAttribI2ivEXT == NULL ) {
      dt.glVertexAttribI2ivEXT = missing_glVertexAttribI2ivEXT;
    }
    _getProcAddress( dt.glVertexAttribI2uiEXT, glVertexAttribI2uiEXT, "glVertexAttribI2uiEXT" );
    if( dt.glVertexAttribI2uiEXT == NULL ) {
      dt.glVertexAttribI2uiEXT = missing_glVertexAttribI2uiEXT;
    }
    _getProcAddress( dt.glVertexAttribI2uivEXT, glVertexAttribI2uivEXT, "glVertexAttribI2uivEXT" );
    if( dt.glVertexAttribI2uivEXT == NULL ) {
      dt.glVertexAttribI2uivEXT = missing_glVertexAttribI2uivEXT;
    }
    _getProcAddress( dt.glVertexAttribI3iEXT, glVertexAttribI3iEXT, "glVertexAttribI3iEXT" );
    if( dt.glVertexAttribI3iEXT == NULL ) {
      dt.glVertexAttribI3iEXT = missing_glVertexAttribI3iEXT;
    }
    _getProcAddress( dt.glVertexAttribI3ivEXT, glVertexAttribI3ivEXT, "glVertexAttribI3ivEXT" );
    if( dt.glVertexAttribI3ivEXT == NULL ) {
      dt.glVertexAttribI3ivEXT = missing_glVertexAttribI3ivEXT;
    }
    _getProcAddress( dt.glVertexAttribI3uiEXT, glVertexAttribI3uiEXT, "glVertexAttribI3uiEXT" );
    if( dt.glVertexAttribI3uiEXT == NULL ) {
      dt.glVertexAttribI3uiEXT = missing_glVertexAttribI3uiEXT;
    }
    _getProcAddress( dt.glVertexAttribI3uivEXT, glVertexAttribI3uivEXT, "glVertexAttribI3uivEXT" );
    if( dt.glVertexAttribI3uivEXT == NULL ) {
      dt.glVertexAttribI3uivEXT = missing_glVertexAttribI3uivEXT;
    }
    _getProcAddress( dt.glVertexAttribI4bvEXT, glVertexAttribI4bvEXT, "glVertexAttribI4bvEXT" );
    if( dt.glVertexAttribI4bvEXT == NULL ) {
      dt.glVertexAttribI4bvEXT = missing_glVertexAttribI4bvEXT;
    }
    _getProcAddress( dt.glVertexAttribI4iEXT, glVertexAttribI4iEXT, "glVertexAttribI4iEXT" );
    if( dt.glVertexAttribI4iEXT == NULL ) {
      dt.glVertexAttribI4iEXT = missing_glVertexAttribI4iEXT;
    }
    _getProcAddress( dt.glVertexAttribI4ivEXT, glVertexAttribI4ivEXT, "glVertexAttribI4ivEXT" );
    if( dt.glVertexAttribI4ivEXT == NULL ) {
      dt.glVertexAttribI4ivEXT = missing_glVertexAttribI4ivEXT;
    }
    _getProcAddress( dt.glVertexAttribI4svEXT, glVertexAttribI4svEXT, "glVertexAttribI4svEXT" );
    if( dt.glVertexAttribI4svEXT == NULL ) {
      dt.glVertexAttribI4svEXT = missing_glVertexAttribI4svEXT;
    }
    _getProcAddress( dt.glVertexAttribI4ubvEXT, glVertexAttribI4ubvEXT, "glVertexAttribI4ubvEXT" );
    if( dt.glVertexAttribI4ubvEXT == NULL ) {
      dt.glVertexAttribI4ubvEXT = missing_glVertexAttribI4ubvEXT;
    }
    _getProcAddress( dt.glVertexAttribI4uiEXT, glVertexAttribI4uiEXT, "glVertexAttribI4uiEXT" );
    if( dt.glVertexAttribI4uiEXT == NULL ) {
      dt.glVertexAttribI4uiEXT = missing_glVertexAttribI4uiEXT;
    }
    _getProcAddress( dt.glVertexAttribI4uivEXT, glVertexAttribI4uivEXT, "glVertexAttribI4uivEXT" );
    if( dt.glVertexAttribI4uivEXT == NULL ) {
      dt.glVertexAttribI4uivEXT = missing_glVertexAttribI4uivEXT;
    }
    _getProcAddress( dt.glVertexAttribI4usvEXT, glVertexAttribI4usvEXT, "glVertexAttribI4usvEXT" );
    if( dt.glVertexAttribI4usvEXT == NULL ) {
      dt.glVertexAttribI4usvEXT = missing_glVertexAttribI4usvEXT;
    }
    _getProcAddress( dt.glVertexAttribIPointerEXT, glVertexAttribIPointerEXT, "glVertexAttribIPointerEXT" );
    if( dt.glVertexAttribIPointerEXT == NULL ) {
      dt.glVertexAttribIPointerEXT = missing_glVertexAttribIPointerEXT;
    }

    // GL_EXT_histogram

    _getProcAddress( dt.glGetHistogramEXT, glGetHistogramEXT, "glGetHistogramEXT" );
    if( dt.glGetHistogramEXT == NULL ) {
      dt.glGetHistogramEXT = missing_glGetHistogramEXT;
    }
    _getProcAddress( dt.glGetHistogramParameterfvEXT, glGetHistogramParameterfvEXT, "glGetHistogramParameterfvEXT" );
    if( dt.glGetHistogramParameterfvEXT == NULL ) {
      dt.glGetHistogramParameterfvEXT = missing_glGetHistogramParameterfvEXT;
    }
    _getProcAddress( dt.glGetHistogramParameterivEXT, glGetHistogramParameterivEXT, "glGetHistogramParameterivEXT" );
    if( dt.glGetHistogramParameterivEXT == NULL ) {
      dt.glGetHistogramParameterivEXT = missing_glGetHistogramParameterivEXT;
    }
    _getProcAddress( dt.glGetMinmaxEXT, glGetMinmaxEXT, "glGetMinmaxEXT" );
    if( dt.glGetMinmaxEXT == NULL ) {
      dt.glGetMinmaxEXT = missing_glGetMinmaxEXT;
    }
    _getProcAddress( dt.glGetMinmaxParameterfvEXT, glGetMinmaxParameterfvEXT, "glGetMinmaxParameterfvEXT" );
    if( dt.glGetMinmaxParameterfvEXT == NULL ) {
      dt.glGetMinmaxParameterfvEXT = missing_glGetMinmaxParameterfvEXT;
    }
    _getProcAddress( dt.glGetMinmaxParameterivEXT, glGetMinmaxParameterivEXT, "glGetMinmaxParameterivEXT" );
    if( dt.glGetMinmaxParameterivEXT == NULL ) {
      dt.glGetMinmaxParameterivEXT = missing_glGetMinmaxParameterivEXT;
    }
    _getProcAddress( dt.glHistogramEXT, glHistogramEXT, "glHistogramEXT" );
    if( dt.glHistogramEXT == NULL ) {
      dt.glHistogramEXT = missing_glHistogramEXT;
    }
    _getProcAddress( dt.glMinmaxEXT, glMinmaxEXT, "glMinmaxEXT" );
    if( dt.glMinmaxEXT == NULL ) {
      dt.glMinmaxEXT = missing_glMinmaxEXT;
    }
    _getProcAddress( dt.glResetHistogramEXT, glResetHistogramEXT, "glResetHistogramEXT" );
    if( dt.glResetHistogramEXT == NULL ) {
      dt.glResetHistogramEXT = missing_glResetHistogramEXT;
    }
    _getProcAddress( dt.glResetMinmaxEXT, glResetMinmaxEXT, "glResetMinmaxEXT" );
    if( dt.glResetMinmaxEXT == NULL ) {
      dt.glResetMinmaxEXT = missing_glResetMinmaxEXT;
    }

    // GL_EXT_index_func

    _getProcAddress( dt.glIndexFuncEXT, glIndexFuncEXT, "glIndexFuncEXT" );
    if( dt.glIndexFuncEXT == NULL ) {
      dt.glIndexFuncEXT = missing_glIndexFuncEXT;
    }

    // GL_EXT_index_material

    _getProcAddress( dt.glIndexMaterialEXT, glIndexMaterialEXT, "glIndexMaterialEXT" );
    if( dt.glIndexMaterialEXT == NULL ) {
      dt.glIndexMaterialEXT = missing_glIndexMaterialEXT;
    }

    // GL_EXT_light_texture

    _getProcAddress( dt.glApplyTextureEXT, glApplyTextureEXT, "glApplyTextureEXT" );
    if( dt.glApplyTextureEXT == NULL ) {
      dt.glApplyTextureEXT = missing_glApplyTextureEXT;
    }
    _getProcAddress( dt.glTextureLightEXT, glTextureLightEXT, "glTextureLightEXT" );
    if( dt.glTextureLightEXT == NULL ) {
      dt.glTextureLightEXT = missing_glTextureLightEXT;
    }
    _getProcAddress( dt.glTextureMaterialEXT, glTextureMaterialEXT, "glTextureMaterialEXT" );
    if( dt.glTextureMaterialEXT == NULL ) {
      dt.glTextureMaterialEXT = missing_glTextureMaterialEXT;
    }

    // GL_EXT_map_buffer_range

    _getProcAddress( dt.glFlushMappedBufferRangeEXT, glFlushMappedBufferRangeEXT, "glFlushMappedBufferRangeEXT" );
    if( dt.glFlushMappedBufferRangeEXT == NULL ) {
      dt.glFlushMappedBufferRangeEXT = missing_glFlushMappedBufferRangeEXT;
    }
    _getProcAddress( dt.glMapBufferRangeEXT, glMapBufferRangeEXT, "glMapBufferRangeEXT" );
    if( dt.glMapBufferRangeEXT == NULL ) {
      dt.glMapBufferRangeEXT = missing_glMapBufferRangeEXT;
    }

    // GL_EXT_multi_draw_arrays

    _getProcAddress( dt.glMultiDrawArraysEXT, glMultiDrawArraysEXT, "glMultiDrawArraysEXT" );
    if( dt.glMultiDrawArraysEXT == NULL ) {
      dt.glMultiDrawArraysEXT = missing_glMultiDrawArraysEXT;
    }
    _getProcAddress( dt.glMultiDrawElementsEXT, glMultiDrawElementsEXT, "glMultiDrawElementsEXT" );
    if( dt.glMultiDrawElementsEXT == NULL ) {
      dt.glMultiDrawElementsEXT = missing_glMultiDrawElementsEXT;
    }

    // GL_EXT_multisample

    _getProcAddress( dt.glSampleMaskEXT, glSampleMaskEXT, "glSampleMaskEXT" );
    if( dt.glSampleMaskEXT == NULL ) {
      dt.glSampleMaskEXT = missing_glSampleMaskEXT;
    }
    _getProcAddress( dt.glSamplePatternEXT, glSamplePatternEXT, "glSamplePatternEXT" );
    if( dt.glSamplePatternEXT == NULL ) {
      dt.glSamplePatternEXT = missing_glSamplePatternEXT;
    }

    // GL_EXT_multisampled_render_to_texture

    _getProcAddress( dt.glFramebufferTexture2DMultisampleEXT, glFramebufferTexture2DMultisampleEXT, "glFramebufferTexture2DMultisampleEXT" );
    if( dt.glFramebufferTexture2DMultisampleEXT == NULL ) {
      dt.glFramebufferTexture2DMultisampleEXT = missing_glFramebufferTexture2DMultisampleEXT;
    }

    // GL_EXT_multiview_draw_buffers

    _getProcAddress( dt.glDrawBuffersIndexedEXT, glDrawBuffersIndexedEXT, "glDrawBuffersIndexedEXT" );
    if( dt.glDrawBuffersIndexedEXT == NULL ) {
      dt.glDrawBuffersIndexedEXT = missing_glDrawBuffersIndexedEXT;
    }
    _getProcAddress( dt.glGetIntegeri_vEXT, glGetIntegeri_vEXT, "glGetIntegeri_vEXT" );
    if( dt.glGetIntegeri_vEXT == NULL ) {
      dt.glGetIntegeri_vEXT = missing_glGetIntegeri_vEXT;
    }
    _getProcAddress( dt.glReadBufferIndexedEXT, glReadBufferIndexedEXT, "glReadBufferIndexedEXT" );
    if( dt.glReadBufferIndexedEXT == NULL ) {
      dt.glReadBufferIndexedEXT = missing_glReadBufferIndexedEXT;
    }

    // GL_EXT_occlusion_query_boolean

    _getProcAddress( dt.glBeginQueryEXT, glBeginQueryEXT, "glBeginQueryEXT" );
    if( dt.glBeginQueryEXT == NULL ) {
      dt.glBeginQueryEXT = missing_glBeginQueryEXT;
    }
    _getProcAddress( dt.glDeleteQueriesEXT, glDeleteQueriesEXT, "glDeleteQueriesEXT" );
    if( dt.glDeleteQueriesEXT == NULL ) {
      dt.glDeleteQueriesEXT = missing_glDeleteQueriesEXT;
    }
    _getProcAddress( dt.glEndQueryEXT, glEndQueryEXT, "glEndQueryEXT" );
    if( dt.glEndQueryEXT == NULL ) {
      dt.glEndQueryEXT = missing_glEndQueryEXT;
    }
    _getProcAddress( dt.glGenQueriesEXT, glGenQueriesEXT, "glGenQueriesEXT" );
    if( dt.glGenQueriesEXT == NULL ) {
      dt.glGenQueriesEXT = missing_glGenQueriesEXT;
    }
    _getProcAddress( dt.glGetQueryObjectuivEXT, glGetQueryObjectuivEXT, "glGetQueryObjectuivEXT" );
    if( dt.glGetQueryObjectuivEXT == NULL ) {
      dt.glGetQueryObjectuivEXT = missing_glGetQueryObjectuivEXT;
    }
    _getProcAddress( dt.glGetQueryivEXT, glGetQueryivEXT, "glGetQueryivEXT" );
    if( dt.glGetQueryivEXT == NULL ) {
      dt.glGetQueryivEXT = missing_glGetQueryivEXT;
    }
    _getProcAddress( dt.glIsQueryEXT, glIsQueryEXT, "glIsQueryEXT" );
    if( dt.glIsQueryEXT == NULL ) {
      dt.glIsQueryEXT = missing_glIsQueryEXT;
    }

    // GL_EXT_paletted_texture

    _getProcAddress( dt.glColorTableEXT, glColorTableEXT, "glColorTableEXT" );
    if( dt.glColorTableEXT == NULL ) {
      dt.glColorTableEXT = missing_glColorTableEXT;
    }
    _getProcAddress( dt.glGetColorTableEXT, glGetColorTableEXT, "glGetColorTableEXT" );
    if( dt.glGetColorTableEXT == NULL ) {
      dt.glGetColorTableEXT = missing_glGetColorTableEXT;
    }
    _getProcAddress( dt.glGetColorTableParameterfvEXT, glGetColorTableParameterfvEXT, "glGetColorTableParameterfvEXT" );
    if( dt.glGetColorTableParameterfvEXT == NULL ) {
      dt.glGetColorTableParameterfvEXT = missing_glGetColorTableParameterfvEXT;
    }
    _getProcAddress( dt.glGetColorTableParameterivEXT, glGetColorTableParameterivEXT, "glGetColorTableParameterivEXT" );
    if( dt.glGetColorTableParameterivEXT == NULL ) {
      dt.glGetColorTableParameterivEXT = missing_glGetColorTableParameterivEXT;
    }

    // GL_EXT_pixel_transform

    _getProcAddress( dt.glGetPixelTransformParameterfvEXT, glGetPixelTransformParameterfvEXT, "glGetPixelTransformParameterfvEXT" );
    if( dt.glGetPixelTransformParameterfvEXT == NULL ) {
      dt.glGetPixelTransformParameterfvEXT = missing_glGetPixelTransformParameterfvEXT;
    }
    _getProcAddress( dt.glGetPixelTransformParameterivEXT, glGetPixelTransformParameterivEXT, "glGetPixelTransformParameterivEXT" );
    if( dt.glGetPixelTransformParameterivEXT == NULL ) {
      dt.glGetPixelTransformParameterivEXT = missing_glGetPixelTransformParameterivEXT;
    }
    _getProcAddress( dt.glPixelTransformParameterfEXT, glPixelTransformParameterfEXT, "glPixelTransformParameterfEXT" );
    if( dt.glPixelTransformParameterfEXT == NULL ) {
      dt.glPixelTransformParameterfEXT = missing_glPixelTransformParameterfEXT;
    }
    _getProcAddress( dt.glPixelTransformParameterfvEXT, glPixelTransformParameterfvEXT, "glPixelTransformParameterfvEXT" );
    if( dt.glPixelTransformParameterfvEXT == NULL ) {
      dt.glPixelTransformParameterfvEXT = missing_glPixelTransformParameterfvEXT;
    }
    _getProcAddress( dt.glPixelTransformParameteriEXT, glPixelTransformParameteriEXT, "glPixelTransformParameteriEXT" );
    if( dt.glPixelTransformParameteriEXT == NULL ) {
      dt.glPixelTransformParameteriEXT = missing_glPixelTransformParameteriEXT;
    }
    _getProcAddress( dt.glPixelTransformParameterivEXT, glPixelTransformParameterivEXT, "glPixelTransformParameterivEXT" );
    if( dt.glPixelTransformParameterivEXT == NULL ) {
      dt.glPixelTransformParameterivEXT = missing_glPixelTransformParameterivEXT;
    }

    // GL_EXT_point_parameters

    _getProcAddress( dt.glPointParameterfEXT, glPointParameterfEXT, "glPointParameterfEXT" );
    if( dt.glPointParameterfEXT == NULL ) {
      dt.glPointParameterfEXT = missing_glPointParameterfEXT;
    }
    _getProcAddress( dt.glPointParameterfvEXT, glPointParameterfvEXT, "glPointParameterfvEXT" );
    if( dt.glPointParameterfvEXT == NULL ) {
      dt.glPointParameterfvEXT = missing_glPointParameterfvEXT;
    }

    // GL_EXT_polygon_offset

    _getProcAddress( dt.glPolygonOffsetEXT, glPolygonOffsetEXT, "glPolygonOffsetEXT" );
    if( dt.glPolygonOffsetEXT == NULL ) {
      dt.glPolygonOffsetEXT = missing_glPolygonOffsetEXT;
    }

    // GL_EXT_provoking_vertex

    _getProcAddress( dt.glProvokingVertexEXT, glProvokingVertexEXT, "glProvokingVertexEXT" );
    if( dt.glProvokingVertexEXT == NULL ) {
      dt.glProvokingVertexEXT = missing_glProvokingVertexEXT;
    }

    // GL_EXT_robustness

    _getProcAddress( dt.glGetnUniformfvEXT, glGetnUniformfvEXT, "glGetnUniformfvEXT" );
    if( dt.glGetnUniformfvEXT == NULL ) {
      dt.glGetnUniformfvEXT = missing_glGetnUniformfvEXT;
    }
    _getProcAddress( dt.glGetnUniformivEXT, glGetnUniformivEXT, "glGetnUniformivEXT" );
    if( dt.glGetnUniformivEXT == NULL ) {
      dt.glGetnUniformivEXT = missing_glGetnUniformivEXT;
    }
    _getProcAddress( dt.glReadnPixelsEXT, glReadnPixelsEXT, "glReadnPixelsEXT" );
    if( dt.glReadnPixelsEXT == NULL ) {
      dt.glReadnPixelsEXT = missing_glReadnPixelsEXT;
    }

    // GL_EXT_scene_marker

    _getProcAddress( dt.glBeginSceneEXT, glBeginSceneEXT, "glBeginSceneEXT" );
    if( dt.glBeginSceneEXT == NULL ) {
      dt.glBeginSceneEXT = missing_glBeginSceneEXT;
    }
    _getProcAddress( dt.glEndSceneEXT, glEndSceneEXT, "glEndSceneEXT" );
    if( dt.glEndSceneEXT == NULL ) {
      dt.glEndSceneEXT = missing_glEndSceneEXT;
    }

    // GL_EXT_secondary_color

    _getProcAddress( dt.glSecondaryColor3bEXT, glSecondaryColor3bEXT, "glSecondaryColor3bEXT" );
    if( dt.glSecondaryColor3bEXT == NULL ) {
      dt.glSecondaryColor3bEXT = missing_glSecondaryColor3bEXT;
    }
    _getProcAddress( dt.glSecondaryColor3bvEXT, glSecondaryColor3bvEXT, "glSecondaryColor3bvEXT" );
    if( dt.glSecondaryColor3bvEXT == NULL ) {
      dt.glSecondaryColor3bvEXT = missing_glSecondaryColor3bvEXT;
    }
    _getProcAddress( dt.glSecondaryColor3dEXT, glSecondaryColor3dEXT, "glSecondaryColor3dEXT" );
    if( dt.glSecondaryColor3dEXT == NULL ) {
      dt.glSecondaryColor3dEXT = missing_glSecondaryColor3dEXT;
    }
    _getProcAddress( dt.glSecondaryColor3dvEXT, glSecondaryColor3dvEXT, "glSecondaryColor3dvEXT" );
    if( dt.glSecondaryColor3dvEXT == NULL ) {
      dt.glSecondaryColor3dvEXT = missing_glSecondaryColor3dvEXT;
    }
    _getProcAddress( dt.glSecondaryColor3fEXT, glSecondaryColor3fEXT, "glSecondaryColor3fEXT" );
    if( dt.glSecondaryColor3fEXT == NULL ) {
      dt.glSecondaryColor3fEXT = missing_glSecondaryColor3fEXT;
    }
    _getProcAddress( dt.glSecondaryColor3fvEXT, glSecondaryColor3fvEXT, "glSecondaryColor3fvEXT" );
    if( dt.glSecondaryColor3fvEXT == NULL ) {
      dt.glSecondaryColor3fvEXT = missing_glSecondaryColor3fvEXT;
    }
    _getProcAddress( dt.glSecondaryColor3iEXT, glSecondaryColor3iEXT, "glSecondaryColor3iEXT" );
    if( dt.glSecondaryColor3iEXT == NULL ) {
      dt.glSecondaryColor3iEXT = missing_glSecondaryColor3iEXT;
    }
    _getProcAddress( dt.glSecondaryColor3ivEXT, glSecondaryColor3ivEXT, "glSecondaryColor3ivEXT" );
    if( dt.glSecondaryColor3ivEXT == NULL ) {
      dt.glSecondaryColor3ivEXT = missing_glSecondaryColor3ivEXT;
    }
    _getProcAddress( dt.glSecondaryColor3sEXT, glSecondaryColor3sEXT, "glSecondaryColor3sEXT" );
    if( dt.glSecondaryColor3sEXT == NULL ) {
      dt.glSecondaryColor3sEXT = missing_glSecondaryColor3sEXT;
    }
    _getProcAddress( dt.glSecondaryColor3svEXT, glSecondaryColor3svEXT, "glSecondaryColor3svEXT" );
    if( dt.glSecondaryColor3svEXT == NULL ) {
      dt.glSecondaryColor3svEXT = missing_glSecondaryColor3svEXT;
    }
    _getProcAddress( dt.glSecondaryColor3ubEXT, glSecondaryColor3ubEXT, "glSecondaryColor3ubEXT" );
    if( dt.glSecondaryColor3ubEXT == NULL ) {
      dt.glSecondaryColor3ubEXT = missing_glSecondaryColor3ubEXT;
    }
    _getProcAddress( dt.glSecondaryColor3ubvEXT, glSecondaryColor3ubvEXT, "glSecondaryColor3ubvEXT" );
    if( dt.glSecondaryColor3ubvEXT == NULL ) {
      dt.glSecondaryColor3ubvEXT = missing_glSecondaryColor3ubvEXT;
    }
    _getProcAddress( dt.glSecondaryColor3uiEXT, glSecondaryColor3uiEXT, "glSecondaryColor3uiEXT" );
    if( dt.glSecondaryColor3uiEXT == NULL ) {
      dt.glSecondaryColor3uiEXT = missing_glSecondaryColor3uiEXT;
    }
    _getProcAddress( dt.glSecondaryColor3uivEXT, glSecondaryColor3uivEXT, "glSecondaryColor3uivEXT" );
    if( dt.glSecondaryColor3uivEXT == NULL ) {
      dt.glSecondaryColor3uivEXT = missing_glSecondaryColor3uivEXT;
    }
    _getProcAddress( dt.glSecondaryColor3usEXT, glSecondaryColor3usEXT, "glSecondaryColor3usEXT" );
    if( dt.glSecondaryColor3usEXT == NULL ) {
      dt.glSecondaryColor3usEXT = missing_glSecondaryColor3usEXT;
    }
    _getProcAddress( dt.glSecondaryColor3usvEXT, glSecondaryColor3usvEXT, "glSecondaryColor3usvEXT" );
    if( dt.glSecondaryColor3usvEXT == NULL ) {
      dt.glSecondaryColor3usvEXT = missing_glSecondaryColor3usvEXT;
    }
    _getProcAddress( dt.glSecondaryColorPointerEXT, glSecondaryColorPointerEXT, "glSecondaryColorPointerEXT" );
    if( dt.glSecondaryColorPointerEXT == NULL ) {
      dt.glSecondaryColorPointerEXT = missing_glSecondaryColorPointerEXT;
    }

    // GL_EXT_separate_shader_objects

    _getProcAddress( dt.glActiveProgramEXT, glActiveProgramEXT, "glActiveProgramEXT" );
    if( dt.glActiveProgramEXT == NULL ) {
      dt.glActiveProgramEXT = missing_glActiveProgramEXT;
    }
    _getProcAddress( dt.glCreateShaderProgramEXT, glCreateShaderProgramEXT, "glCreateShaderProgramEXT" );
    if( dt.glCreateShaderProgramEXT == NULL ) {
      dt.glCreateShaderProgramEXT = missing_glCreateShaderProgramEXT;
    }
    _getProcAddress( dt.glUseShaderProgramEXT, glUseShaderProgramEXT, "glUseShaderProgramEXT" );
    if( dt.glUseShaderProgramEXT == NULL ) {
      dt.glUseShaderProgramEXT = missing_glUseShaderProgramEXT;
    }

    // GL_EXT_shader_image_load_store

    _getProcAddress( dt.glBindImageTextureEXT, glBindImageTextureEXT, "glBindImageTextureEXT" );
    if( dt.glBindImageTextureEXT == NULL ) {
      dt.glBindImageTextureEXT = missing_glBindImageTextureEXT;
    }
    _getProcAddress( dt.glMemoryBarrierEXT, glMemoryBarrierEXT, "glMemoryBarrierEXT" );
    if( dt.glMemoryBarrierEXT == NULL ) {
      dt.glMemoryBarrierEXT = missing_glMemoryBarrierEXT;
    }

    // GL_EXT_stencil_clear_tag

    _getProcAddress( dt.glStencilClearTagEXT, glStencilClearTagEXT, "glStencilClearTagEXT" );
    if( dt.glStencilClearTagEXT == NULL ) {
      dt.glStencilClearTagEXT = missing_glStencilClearTagEXT;
    }

    // GL_EXT_stencil_two_side

    _getProcAddress( dt.glActiveStencilFaceEXT, glActiveStencilFaceEXT, "glActiveStencilFaceEXT" );
    if( dt.glActiveStencilFaceEXT == NULL ) {
      dt.glActiveStencilFaceEXT = missing_glActiveStencilFaceEXT;
    }

    // GL_EXT_subtexture

    _getProcAddress( dt.glTexSubImage1DEXT, glTexSubImage1DEXT, "glTexSubImage1DEXT" );
    if( dt.glTexSubImage1DEXT == NULL ) {
      dt.glTexSubImage1DEXT = missing_glTexSubImage1DEXT;
    }
    _getProcAddress( dt.glTexSubImage2DEXT, glTexSubImage2DEXT, "glTexSubImage2DEXT" );
    if( dt.glTexSubImage2DEXT == NULL ) {
      dt.glTexSubImage2DEXT = missing_glTexSubImage2DEXT;
    }
    _getProcAddress( dt.glTexSubImage3DEXT, glTexSubImage3DEXT, "glTexSubImage3DEXT" );
    if( dt.glTexSubImage3DEXT == NULL ) {
      dt.glTexSubImage3DEXT = missing_glTexSubImage3DEXT;
    }

    // GL_EXT_texture3D

    _getProcAddress( dt.glTexImage3DEXT, glTexImage3DEXT, "glTexImage3DEXT" );
    if( dt.glTexImage3DEXT == NULL ) {
      dt.glTexImage3DEXT = missing_glTexImage3DEXT;
    }

    // GL_EXT_texture_array

    _getProcAddress( dt.glFramebufferTextureLayerEXT, glFramebufferTextureLayerEXT, "glFramebufferTextureLayerEXT" );
    if( dt.glFramebufferTextureLayerEXT == NULL ) {
      dt.glFramebufferTextureLayerEXT = missing_glFramebufferTextureLayerEXT;
    }

    // GL_EXT_texture_buffer_object

    _getProcAddress( dt.glTexBufferEXT, glTexBufferEXT, "glTexBufferEXT" );
    if( dt.glTexBufferEXT == NULL ) {
      dt.glTexBufferEXT = missing_glTexBufferEXT;
    }

    // GL_EXT_texture_integer

    _getProcAddress( dt.glClearColorIiEXT, glClearColorIiEXT, "glClearColorIiEXT" );
    if( dt.glClearColorIiEXT == NULL ) {
      dt.glClearColorIiEXT = missing_glClearColorIiEXT;
    }
    _getProcAddress( dt.glClearColorIuiEXT, glClearColorIuiEXT, "glClearColorIuiEXT" );
    if( dt.glClearColorIuiEXT == NULL ) {
      dt.glClearColorIuiEXT = missing_glClearColorIuiEXT;
    }
    _getProcAddress( dt.glGetTexParameterIivEXT, glGetTexParameterIivEXT, "glGetTexParameterIivEXT" );
    if( dt.glGetTexParameterIivEXT == NULL ) {
      dt.glGetTexParameterIivEXT = missing_glGetTexParameterIivEXT;
    }
    _getProcAddress( dt.glGetTexParameterIuivEXT, glGetTexParameterIuivEXT, "glGetTexParameterIuivEXT" );
    if( dt.glGetTexParameterIuivEXT == NULL ) {
      dt.glGetTexParameterIuivEXT = missing_glGetTexParameterIuivEXT;
    }
    _getProcAddress( dt.glTexParameterIivEXT, glTexParameterIivEXT, "glTexParameterIivEXT" );
    if( dt.glTexParameterIivEXT == NULL ) {
      dt.glTexParameterIivEXT = missing_glTexParameterIivEXT;
    }
    _getProcAddress( dt.glTexParameterIuivEXT, glTexParameterIuivEXT, "glTexParameterIuivEXT" );
    if( dt.glTexParameterIuivEXT == NULL ) {
      dt.glTexParameterIuivEXT = missing_glTexParameterIuivEXT;
    }

    // GL_EXT_texture_object

    _getProcAddress( dt.glAreTexturesResidentEXT, glAreTexturesResidentEXT, "glAreTexturesResidentEXT" );
    if( dt.glAreTexturesResidentEXT == NULL ) {
      dt.glAreTexturesResidentEXT = missing_glAreTexturesResidentEXT;
    }
    _getProcAddress( dt.glBindTextureEXT, glBindTextureEXT, "glBindTextureEXT" );
    if( dt.glBindTextureEXT == NULL ) {
      dt.glBindTextureEXT = missing_glBindTextureEXT;
    }
    _getProcAddress( dt.glDeleteTexturesEXT, glDeleteTexturesEXT, "glDeleteTexturesEXT" );
    if( dt.glDeleteTexturesEXT == NULL ) {
      dt.glDeleteTexturesEXT = missing_glDeleteTexturesEXT;
    }
    _getProcAddress( dt.glGenTexturesEXT, glGenTexturesEXT, "glGenTexturesEXT" );
    if( dt.glGenTexturesEXT == NULL ) {
      dt.glGenTexturesEXT = missing_glGenTexturesEXT;
    }
    _getProcAddress( dt.glIsTextureEXT, glIsTextureEXT, "glIsTextureEXT" );
    if( dt.glIsTextureEXT == NULL ) {
      dt.glIsTextureEXT = missing_glIsTextureEXT;
    }
    _getProcAddress( dt.glPrioritizeTexturesEXT, glPrioritizeTexturesEXT, "glPrioritizeTexturesEXT" );
    if( dt.glPrioritizeTexturesEXT == NULL ) {
      dt.glPrioritizeTexturesEXT = missing_glPrioritizeTexturesEXT;
    }

    // GL_EXT_texture_perturb_normal

    _getProcAddress( dt.glTextureNormalEXT, glTextureNormalEXT, "glTextureNormalEXT" );
    if( dt.glTextureNormalEXT == NULL ) {
      dt.glTextureNormalEXT = missing_glTextureNormalEXT;
    }

    // GL_EXT_texture_storage

    _getProcAddress( dt.glTexStorage1DEXT, glTexStorage1DEXT, "glTexStorage1DEXT" );
    if( dt.glTexStorage1DEXT == NULL ) {
      dt.glTexStorage1DEXT = missing_glTexStorage1DEXT;
    }
    _getProcAddress( dt.glTexStorage2DEXT, glTexStorage2DEXT, "glTexStorage2DEXT" );
    if( dt.glTexStorage2DEXT == NULL ) {
      dt.glTexStorage2DEXT = missing_glTexStorage2DEXT;
    }
    _getProcAddress( dt.glTexStorage3DEXT, glTexStorage3DEXT, "glTexStorage3DEXT" );
    if( dt.glTexStorage3DEXT == NULL ) {
      dt.glTexStorage3DEXT = missing_glTexStorage3DEXT;
    }

    // GL_EXT_timer_query

    _getProcAddress( dt.glGetQueryObjecti64vEXT, glGetQueryObjecti64vEXT, "glGetQueryObjecti64vEXT" );
    if( dt.glGetQueryObjecti64vEXT == NULL ) {
      dt.glGetQueryObjecti64vEXT = missing_glGetQueryObjecti64vEXT;
    }
    _getProcAddress( dt.glGetQueryObjectui64vEXT, glGetQueryObjectui64vEXT, "glGetQueryObjectui64vEXT" );
    if( dt.glGetQueryObjectui64vEXT == NULL ) {
      dt.glGetQueryObjectui64vEXT = missing_glGetQueryObjectui64vEXT;
    }

    // GL_EXT_transform_feedback

    _getProcAddress( dt.glBeginTransformFeedbackEXT, glBeginTransformFeedbackEXT, "glBeginTransformFeedbackEXT" );
    if( dt.glBeginTransformFeedbackEXT == NULL ) {
      dt.glBeginTransformFeedbackEXT = missing_glBeginTransformFeedbackEXT;
    }
    _getProcAddress( dt.glBindBufferBaseEXT, glBindBufferBaseEXT, "glBindBufferBaseEXT" );
    if( dt.glBindBufferBaseEXT == NULL ) {
      dt.glBindBufferBaseEXT = missing_glBindBufferBaseEXT;
    }
    _getProcAddress( dt.glBindBufferOffsetEXT, glBindBufferOffsetEXT, "glBindBufferOffsetEXT" );
    if( dt.glBindBufferOffsetEXT == NULL ) {
      dt.glBindBufferOffsetEXT = missing_glBindBufferOffsetEXT;
    }
    _getProcAddress( dt.glBindBufferRangeEXT, glBindBufferRangeEXT, "glBindBufferRangeEXT" );
    if( dt.glBindBufferRangeEXT == NULL ) {
      dt.glBindBufferRangeEXT = missing_glBindBufferRangeEXT;
    }
    _getProcAddress( dt.glEndTransformFeedbackEXT, glEndTransformFeedbackEXT, "glEndTransformFeedbackEXT" );
    if( dt.glEndTransformFeedbackEXT == NULL ) {
      dt.glEndTransformFeedbackEXT = missing_glEndTransformFeedbackEXT;
    }
    _getProcAddress( dt.glGetTransformFeedbackVaryingEXT, glGetTransformFeedbackVaryingEXT, "glGetTransformFeedbackVaryingEXT" );
    if( dt.glGetTransformFeedbackVaryingEXT == NULL ) {
      dt.glGetTransformFeedbackVaryingEXT = missing_glGetTransformFeedbackVaryingEXT;
    }
    _getProcAddress( dt.glTransformFeedbackVaryingsEXT, glTransformFeedbackVaryingsEXT, "glTransformFeedbackVaryingsEXT" );
    if( dt.glTransformFeedbackVaryingsEXT == NULL ) {
      dt.glTransformFeedbackVaryingsEXT = missing_glTransformFeedbackVaryingsEXT;
    }

    // GL_EXT_vertex_array

    _getProcAddress( dt.glArrayElementEXT, glArrayElementEXT, "glArrayElementEXT" );
    if( dt.glArrayElementEXT == NULL ) {
      dt.glArrayElementEXT = missing_glArrayElementEXT;
    }
    _getProcAddress( dt.glColorPointerEXT, glColorPointerEXT, "glColorPointerEXT" );
    if( dt.glColorPointerEXT == NULL ) {
      dt.glColorPointerEXT = missing_glColorPointerEXT;
    }
    _getProcAddress( dt.glDrawArraysEXT, glDrawArraysEXT, "glDrawArraysEXT" );
    if( dt.glDrawArraysEXT == NULL ) {
      dt.glDrawArraysEXT = missing_glDrawArraysEXT;
    }
    _getProcAddress( dt.glEdgeFlagPointerEXT, glEdgeFlagPointerEXT, "glEdgeFlagPointerEXT" );
    if( dt.glEdgeFlagPointerEXT == NULL ) {
      dt.glEdgeFlagPointerEXT = missing_glEdgeFlagPointerEXT;
    }
    _getProcAddress( dt.glGetPointervEXT, glGetPointervEXT, "glGetPointervEXT" );
    if( dt.glGetPointervEXT == NULL ) {
      dt.glGetPointervEXT = missing_glGetPointervEXT;
    }
    _getProcAddress( dt.glIndexPointerEXT, glIndexPointerEXT, "glIndexPointerEXT" );
    if( dt.glIndexPointerEXT == NULL ) {
      dt.glIndexPointerEXT = missing_glIndexPointerEXT;
    }
    _getProcAddress( dt.glNormalPointerEXT, glNormalPointerEXT, "glNormalPointerEXT" );
    if( dt.glNormalPointerEXT == NULL ) {
      dt.glNormalPointerEXT = missing_glNormalPointerEXT;
    }
    _getProcAddress( dt.glTexCoordPointerEXT, glTexCoordPointerEXT, "glTexCoordPointerEXT" );
    if( dt.glTexCoordPointerEXT == NULL ) {
      dt.glTexCoordPointerEXT = missing_glTexCoordPointerEXT;
    }
    _getProcAddress( dt.glVertexPointerEXT, glVertexPointerEXT, "glVertexPointerEXT" );
    if( dt.glVertexPointerEXT == NULL ) {
      dt.glVertexPointerEXT = missing_glVertexPointerEXT;
    }

    // GL_EXT_vertex_attrib_64bit

    _getProcAddress( dt.glGetVertexAttribLdvEXT, glGetVertexAttribLdvEXT, "glGetVertexAttribLdvEXT" );
    if( dt.glGetVertexAttribLdvEXT == NULL ) {
      dt.glGetVertexAttribLdvEXT = missing_glGetVertexAttribLdvEXT;
    }
    _getProcAddress( dt.glVertexArrayVertexAttribLOffsetEXT, glVertexArrayVertexAttribLOffsetEXT, "glVertexArrayVertexAttribLOffsetEXT" );
    if( dt.glVertexArrayVertexAttribLOffsetEXT == NULL ) {
      dt.glVertexArrayVertexAttribLOffsetEXT = missing_glVertexArrayVertexAttribLOffsetEXT;
    }
    _getProcAddress( dt.glVertexAttribL1dEXT, glVertexAttribL1dEXT, "glVertexAttribL1dEXT" );
    if( dt.glVertexAttribL1dEXT == NULL ) {
      dt.glVertexAttribL1dEXT = missing_glVertexAttribL1dEXT;
    }
    _getProcAddress( dt.glVertexAttribL1dvEXT, glVertexAttribL1dvEXT, "glVertexAttribL1dvEXT" );
    if( dt.glVertexAttribL1dvEXT == NULL ) {
      dt.glVertexAttribL1dvEXT = missing_glVertexAttribL1dvEXT;
    }
    _getProcAddress( dt.glVertexAttribL2dEXT, glVertexAttribL2dEXT, "glVertexAttribL2dEXT" );
    if( dt.glVertexAttribL2dEXT == NULL ) {
      dt.glVertexAttribL2dEXT = missing_glVertexAttribL2dEXT;
    }
    _getProcAddress( dt.glVertexAttribL2dvEXT, glVertexAttribL2dvEXT, "glVertexAttribL2dvEXT" );
    if( dt.glVertexAttribL2dvEXT == NULL ) {
      dt.glVertexAttribL2dvEXT = missing_glVertexAttribL2dvEXT;
    }
    _getProcAddress( dt.glVertexAttribL3dEXT, glVertexAttribL3dEXT, "glVertexAttribL3dEXT" );
    if( dt.glVertexAttribL3dEXT == NULL ) {
      dt.glVertexAttribL3dEXT = missing_glVertexAttribL3dEXT;
    }
    _getProcAddress( dt.glVertexAttribL3dvEXT, glVertexAttribL3dvEXT, "glVertexAttribL3dvEXT" );
    if( dt.glVertexAttribL3dvEXT == NULL ) {
      dt.glVertexAttribL3dvEXT = missing_glVertexAttribL3dvEXT;
    }
    _getProcAddress( dt.glVertexAttribL4dEXT, glVertexAttribL4dEXT, "glVertexAttribL4dEXT" );
    if( dt.glVertexAttribL4dEXT == NULL ) {
      dt.glVertexAttribL4dEXT = missing_glVertexAttribL4dEXT;
    }
    _getProcAddress( dt.glVertexAttribL4dvEXT, glVertexAttribL4dvEXT, "glVertexAttribL4dvEXT" );
    if( dt.glVertexAttribL4dvEXT == NULL ) {
      dt.glVertexAttribL4dvEXT = missing_glVertexAttribL4dvEXT;
    }
    _getProcAddress( dt.glVertexAttribLPointerEXT, glVertexAttribLPointerEXT, "glVertexAttribLPointerEXT" );
    if( dt.glVertexAttribLPointerEXT == NULL ) {
      dt.glVertexAttribLPointerEXT = missing_glVertexAttribLPointerEXT;
    }

    // GL_EXT_vertex_shader

    _getProcAddress( dt.glBeginVertexShaderEXT, glBeginVertexShaderEXT, "glBeginVertexShaderEXT" );
    if( dt.glBeginVertexShaderEXT == NULL ) {
      dt.glBeginVertexShaderEXT = missing_glBeginVertexShaderEXT;
    }
    _getProcAddress( dt.glBindLightParameterEXT, glBindLightParameterEXT, "glBindLightParameterEXT" );
    if( dt.glBindLightParameterEXT == NULL ) {
      dt.glBindLightParameterEXT = missing_glBindLightParameterEXT;
    }
    _getProcAddress( dt.glBindMaterialParameterEXT, glBindMaterialParameterEXT, "glBindMaterialParameterEXT" );
    if( dt.glBindMaterialParameterEXT == NULL ) {
      dt.glBindMaterialParameterEXT = missing_glBindMaterialParameterEXT;
    }
    _getProcAddress( dt.glBindParameterEXT, glBindParameterEXT, "glBindParameterEXT" );
    if( dt.glBindParameterEXT == NULL ) {
      dt.glBindParameterEXT = missing_glBindParameterEXT;
    }
    _getProcAddress( dt.glBindTexGenParameterEXT, glBindTexGenParameterEXT, "glBindTexGenParameterEXT" );
    if( dt.glBindTexGenParameterEXT == NULL ) {
      dt.glBindTexGenParameterEXT = missing_glBindTexGenParameterEXT;
    }
    _getProcAddress( dt.glBindTextureUnitParameterEXT, glBindTextureUnitParameterEXT, "glBindTextureUnitParameterEXT" );
    if( dt.glBindTextureUnitParameterEXT == NULL ) {
      dt.glBindTextureUnitParameterEXT = missing_glBindTextureUnitParameterEXT;
    }
    _getProcAddress( dt.glBindVertexShaderEXT, glBindVertexShaderEXT, "glBindVertexShaderEXT" );
    if( dt.glBindVertexShaderEXT == NULL ) {
      dt.glBindVertexShaderEXT = missing_glBindVertexShaderEXT;
    }
    _getProcAddress( dt.glDeleteVertexShaderEXT, glDeleteVertexShaderEXT, "glDeleteVertexShaderEXT" );
    if( dt.glDeleteVertexShaderEXT == NULL ) {
      dt.glDeleteVertexShaderEXT = missing_glDeleteVertexShaderEXT;
    }
    _getProcAddress( dt.glDisableVariantClientStateEXT, glDisableVariantClientStateEXT, "glDisableVariantClientStateEXT" );
    if( dt.glDisableVariantClientStateEXT == NULL ) {
      dt.glDisableVariantClientStateEXT = missing_glDisableVariantClientStateEXT;
    }
    _getProcAddress( dt.glEnableVariantClientStateEXT, glEnableVariantClientStateEXT, "glEnableVariantClientStateEXT" );
    if( dt.glEnableVariantClientStateEXT == NULL ) {
      dt.glEnableVariantClientStateEXT = missing_glEnableVariantClientStateEXT;
    }
    _getProcAddress( dt.glEndVertexShaderEXT, glEndVertexShaderEXT, "glEndVertexShaderEXT" );
    if( dt.glEndVertexShaderEXT == NULL ) {
      dt.glEndVertexShaderEXT = missing_glEndVertexShaderEXT;
    }
    _getProcAddress( dt.glExtractComponentEXT, glExtractComponentEXT, "glExtractComponentEXT" );
    if( dt.glExtractComponentEXT == NULL ) {
      dt.glExtractComponentEXT = missing_glExtractComponentEXT;
    }
    _getProcAddress( dt.glGenSymbolsEXT, glGenSymbolsEXT, "glGenSymbolsEXT" );
    if( dt.glGenSymbolsEXT == NULL ) {
      dt.glGenSymbolsEXT = missing_glGenSymbolsEXT;
    }
    _getProcAddress( dt.glGenVertexShadersEXT, glGenVertexShadersEXT, "glGenVertexShadersEXT" );
    if( dt.glGenVertexShadersEXT == NULL ) {
      dt.glGenVertexShadersEXT = missing_glGenVertexShadersEXT;
    }
    _getProcAddress( dt.glGetInvariantBooleanvEXT, glGetInvariantBooleanvEXT, "glGetInvariantBooleanvEXT" );
    if( dt.glGetInvariantBooleanvEXT == NULL ) {
      dt.glGetInvariantBooleanvEXT = missing_glGetInvariantBooleanvEXT;
    }
    _getProcAddress( dt.glGetInvariantFloatvEXT, glGetInvariantFloatvEXT, "glGetInvariantFloatvEXT" );
    if( dt.glGetInvariantFloatvEXT == NULL ) {
      dt.glGetInvariantFloatvEXT = missing_glGetInvariantFloatvEXT;
    }
    _getProcAddress( dt.glGetInvariantIntegervEXT, glGetInvariantIntegervEXT, "glGetInvariantIntegervEXT" );
    if( dt.glGetInvariantIntegervEXT == NULL ) {
      dt.glGetInvariantIntegervEXT = missing_glGetInvariantIntegervEXT;
    }
    _getProcAddress( dt.glGetLocalConstantBooleanvEXT, glGetLocalConstantBooleanvEXT, "glGetLocalConstantBooleanvEXT" );
    if( dt.glGetLocalConstantBooleanvEXT == NULL ) {
      dt.glGetLocalConstantBooleanvEXT = missing_glGetLocalConstantBooleanvEXT;
    }
    _getProcAddress( dt.glGetLocalConstantFloatvEXT, glGetLocalConstantFloatvEXT, "glGetLocalConstantFloatvEXT" );
    if( dt.glGetLocalConstantFloatvEXT == NULL ) {
      dt.glGetLocalConstantFloatvEXT = missing_glGetLocalConstantFloatvEXT;
    }
    _getProcAddress( dt.glGetLocalConstantIntegervEXT, glGetLocalConstantIntegervEXT, "glGetLocalConstantIntegervEXT" );
    if( dt.glGetLocalConstantIntegervEXT == NULL ) {
      dt.glGetLocalConstantIntegervEXT = missing_glGetLocalConstantIntegervEXT;
    }
    _getProcAddress( dt.glGetVariantBooleanvEXT, glGetVariantBooleanvEXT, "glGetVariantBooleanvEXT" );
    if( dt.glGetVariantBooleanvEXT == NULL ) {
      dt.glGetVariantBooleanvEXT = missing_glGetVariantBooleanvEXT;
    }
    _getProcAddress( dt.glGetVariantFloatvEXT, glGetVariantFloatvEXT, "glGetVariantFloatvEXT" );
    if( dt.glGetVariantFloatvEXT == NULL ) {
      dt.glGetVariantFloatvEXT = missing_glGetVariantFloatvEXT;
    }
    _getProcAddress( dt.glGetVariantIntegervEXT, glGetVariantIntegervEXT, "glGetVariantIntegervEXT" );
    if( dt.glGetVariantIntegervEXT == NULL ) {
      dt.glGetVariantIntegervEXT = missing_glGetVariantIntegervEXT;
    }
    _getProcAddress( dt.glGetVariantPointervEXT, glGetVariantPointervEXT, "glGetVariantPointervEXT" );
    if( dt.glGetVariantPointervEXT == NULL ) {
      dt.glGetVariantPointervEXT = missing_glGetVariantPointervEXT;
    }
    _getProcAddress( dt.glInsertComponentEXT, glInsertComponentEXT, "glInsertComponentEXT" );
    if( dt.glInsertComponentEXT == NULL ) {
      dt.glInsertComponentEXT = missing_glInsertComponentEXT;
    }
    _getProcAddress( dt.glIsVariantEnabledEXT, glIsVariantEnabledEXT, "glIsVariantEnabledEXT" );
    if( dt.glIsVariantEnabledEXT == NULL ) {
      dt.glIsVariantEnabledEXT = missing_glIsVariantEnabledEXT;
    }
    _getProcAddress( dt.glSetInvariantEXT, glSetInvariantEXT, "glSetInvariantEXT" );
    if( dt.glSetInvariantEXT == NULL ) {
      dt.glSetInvariantEXT = missing_glSetInvariantEXT;
    }
    _getProcAddress( dt.glSetLocalConstantEXT, glSetLocalConstantEXT, "glSetLocalConstantEXT" );
    if( dt.glSetLocalConstantEXT == NULL ) {
      dt.glSetLocalConstantEXT = missing_glSetLocalConstantEXT;
    }
    _getProcAddress( dt.glShaderOp1EXT, glShaderOp1EXT, "glShaderOp1EXT" );
    if( dt.glShaderOp1EXT == NULL ) {
      dt.glShaderOp1EXT = missing_glShaderOp1EXT;
    }
    _getProcAddress( dt.glShaderOp2EXT, glShaderOp2EXT, "glShaderOp2EXT" );
    if( dt.glShaderOp2EXT == NULL ) {
      dt.glShaderOp2EXT = missing_glShaderOp2EXT;
    }
    _getProcAddress( dt.glShaderOp3EXT, glShaderOp3EXT, "glShaderOp3EXT" );
    if( dt.glShaderOp3EXT == NULL ) {
      dt.glShaderOp3EXT = missing_glShaderOp3EXT;
    }
    _getProcAddress( dt.glSwizzleEXT, glSwizzleEXT, "glSwizzleEXT" );
    if( dt.glSwizzleEXT == NULL ) {
      dt.glSwizzleEXT = missing_glSwizzleEXT;
    }
    _getProcAddress( dt.glVariantPointerEXT, glVariantPointerEXT, "glVariantPointerEXT" );
    if( dt.glVariantPointerEXT == NULL ) {
      dt.glVariantPointerEXT = missing_glVariantPointerEXT;
    }
    _getProcAddress( dt.glVariantbvEXT, glVariantbvEXT, "glVariantbvEXT" );
    if( dt.glVariantbvEXT == NULL ) {
      dt.glVariantbvEXT = missing_glVariantbvEXT;
    }
    _getProcAddress( dt.glVariantdvEXT, glVariantdvEXT, "glVariantdvEXT" );
    if( dt.glVariantdvEXT == NULL ) {
      dt.glVariantdvEXT = missing_glVariantdvEXT;
    }
    _getProcAddress( dt.glVariantfvEXT, glVariantfvEXT, "glVariantfvEXT" );
    if( dt.glVariantfvEXT == NULL ) {
      dt.glVariantfvEXT = missing_glVariantfvEXT;
    }
    _getProcAddress( dt.glVariantivEXT, glVariantivEXT, "glVariantivEXT" );
    if( dt.glVariantivEXT == NULL ) {
      dt.glVariantivEXT = missing_glVariantivEXT;
    }
    _getProcAddress( dt.glVariantsvEXT, glVariantsvEXT, "glVariantsvEXT" );
    if( dt.glVariantsvEXT == NULL ) {
      dt.glVariantsvEXT = missing_glVariantsvEXT;
    }
    _getProcAddress( dt.glVariantubvEXT, glVariantubvEXT, "glVariantubvEXT" );
    if( dt.glVariantubvEXT == NULL ) {
      dt.glVariantubvEXT = missing_glVariantubvEXT;
    }
    _getProcAddress( dt.glVariantuivEXT, glVariantuivEXT, "glVariantuivEXT" );
    if( dt.glVariantuivEXT == NULL ) {
      dt.glVariantuivEXT = missing_glVariantuivEXT;
    }
    _getProcAddress( dt.glVariantusvEXT, glVariantusvEXT, "glVariantusvEXT" );
    if( dt.glVariantusvEXT == NULL ) {
      dt.glVariantusvEXT = missing_glVariantusvEXT;
    }
    _getProcAddress( dt.glWriteMaskEXT, glWriteMaskEXT, "glWriteMaskEXT" );
    if( dt.glWriteMaskEXT == NULL ) {
      dt.glWriteMaskEXT = missing_glWriteMaskEXT;
    }

    // GL_EXT_vertex_weighting

    _getProcAddress( dt.glVertexWeightPointerEXT, glVertexWeightPointerEXT, "glVertexWeightPointerEXT" );
    if( dt.glVertexWeightPointerEXT == NULL ) {
      dt.glVertexWeightPointerEXT = missing_glVertexWeightPointerEXT;
    }
    _getProcAddress( dt.glVertexWeightfEXT, glVertexWeightfEXT, "glVertexWeightfEXT" );
    if( dt.glVertexWeightfEXT == NULL ) {
      dt.glVertexWeightfEXT = missing_glVertexWeightfEXT;
    }
    _getProcAddress( dt.glVertexWeightfvEXT, glVertexWeightfvEXT, "glVertexWeightfvEXT" );
    if( dt.glVertexWeightfvEXT == NULL ) {
      dt.glVertexWeightfvEXT = missing_glVertexWeightfvEXT;
    }

    // GL_EXT_x11_sync_object

    _getProcAddress( dt.glImportSyncEXT, glImportSyncEXT, "glImportSyncEXT" );
    if( dt.glImportSyncEXT == NULL ) {
      dt.glImportSyncEXT = missing_glImportSyncEXT;
    }

    // GL_GREMEDY_frame_terminator

    _getProcAddress( dt.glFrameTerminatorGREMEDY, glFrameTerminatorGREMEDY, "glFrameTerminatorGREMEDY" );
    if( dt.glFrameTerminatorGREMEDY == NULL ) {
      dt.glFrameTerminatorGREMEDY = missing_glFrameTerminatorGREMEDY;
    }

    // GL_GREMEDY_string_marker

    _getProcAddress( dt.glStringMarkerGREMEDY, glStringMarkerGREMEDY, "glStringMarkerGREMEDY" );
    if( dt.glStringMarkerGREMEDY == NULL ) {
      dt.glStringMarkerGREMEDY = missing_glStringMarkerGREMEDY;
    }

    // GL_HP_image_transform

    _getProcAddress( dt.glGetImageTransformParameterfvHP, glGetImageTransformParameterfvHP, "glGetImageTransformParameterfvHP" );
    if( dt.glGetImageTransformParameterfvHP == NULL ) {
      dt.glGetImageTransformParameterfvHP = missing_glGetImageTransformParameterfvHP;
    }
    _getProcAddress( dt.glGetImageTransformParameterivHP, glGetImageTransformParameterivHP, "glGetImageTransformParameterivHP" );
    if( dt.glGetImageTransformParameterivHP == NULL ) {
      dt.glGetImageTransformParameterivHP = missing_glGetImageTransformParameterivHP;
    }
    _getProcAddress( dt.glImageTransformParameterfHP, glImageTransformParameterfHP, "glImageTransformParameterfHP" );
    if( dt.glImageTransformParameterfHP == NULL ) {
      dt.glImageTransformParameterfHP = missing_glImageTransformParameterfHP;
    }
    _getProcAddress( dt.glImageTransformParameterfvHP, glImageTransformParameterfvHP, "glImageTransformParameterfvHP" );
    if( dt.glImageTransformParameterfvHP == NULL ) {
      dt.glImageTransformParameterfvHP = missing_glImageTransformParameterfvHP;
    }
    _getProcAddress( dt.glImageTransformParameteriHP, glImageTransformParameteriHP, "glImageTransformParameteriHP" );
    if( dt.glImageTransformParameteriHP == NULL ) {
      dt.glImageTransformParameteriHP = missing_glImageTransformParameteriHP;
    }
    _getProcAddress( dt.glImageTransformParameterivHP, glImageTransformParameterivHP, "glImageTransformParameterivHP" );
    if( dt.glImageTransformParameterivHP == NULL ) {
      dt.glImageTransformParameterivHP = missing_glImageTransformParameterivHP;
    }

    // GL_IBM_multimode_draw_arrays

    _getProcAddress( dt.glMultiModeDrawArraysIBM, glMultiModeDrawArraysIBM, "glMultiModeDrawArraysIBM" );
    if( dt.glMultiModeDrawArraysIBM == NULL ) {
      dt.glMultiModeDrawArraysIBM = missing_glMultiModeDrawArraysIBM;
    }
    _getProcAddress( dt.glMultiModeDrawElementsIBM, glMultiModeDrawElementsIBM, "glMultiModeDrawElementsIBM" );
    if( dt.glMultiModeDrawElementsIBM == NULL ) {
      dt.glMultiModeDrawElementsIBM = missing_glMultiModeDrawElementsIBM;
    }

    // GL_IBM_vertex_array_lists

    _getProcAddress( dt.glColorPointerListIBM, glColorPointerListIBM, "glColorPointerListIBM" );
    if( dt.glColorPointerListIBM == NULL ) {
      dt.glColorPointerListIBM = missing_glColorPointerListIBM;
    }
    _getProcAddress( dt.glEdgeFlagPointerListIBM, glEdgeFlagPointerListIBM, "glEdgeFlagPointerListIBM" );
    if( dt.glEdgeFlagPointerListIBM == NULL ) {
      dt.glEdgeFlagPointerListIBM = missing_glEdgeFlagPointerListIBM;
    }
    _getProcAddress( dt.glFogCoordPointerListIBM, glFogCoordPointerListIBM, "glFogCoordPointerListIBM" );
    if( dt.glFogCoordPointerListIBM == NULL ) {
      dt.glFogCoordPointerListIBM = missing_glFogCoordPointerListIBM;
    }
    _getProcAddress( dt.glIndexPointerListIBM, glIndexPointerListIBM, "glIndexPointerListIBM" );
    if( dt.glIndexPointerListIBM == NULL ) {
      dt.glIndexPointerListIBM = missing_glIndexPointerListIBM;
    }
    _getProcAddress( dt.glNormalPointerListIBM, glNormalPointerListIBM, "glNormalPointerListIBM" );
    if( dt.glNormalPointerListIBM == NULL ) {
      dt.glNormalPointerListIBM = missing_glNormalPointerListIBM;
    }
    _getProcAddress( dt.glSecondaryColorPointerListIBM, glSecondaryColorPointerListIBM, "glSecondaryColorPointerListIBM" );
    if( dt.glSecondaryColorPointerListIBM == NULL ) {
      dt.glSecondaryColorPointerListIBM = missing_glSecondaryColorPointerListIBM;
    }
    _getProcAddress( dt.glTexCoordPointerListIBM, glTexCoordPointerListIBM, "glTexCoordPointerListIBM" );
    if( dt.glTexCoordPointerListIBM == NULL ) {
      dt.glTexCoordPointerListIBM = missing_glTexCoordPointerListIBM;
    }
    _getProcAddress( dt.glVertexPointerListIBM, glVertexPointerListIBM, "glVertexPointerListIBM" );
    if( dt.glVertexPointerListIBM == NULL ) {
      dt.glVertexPointerListIBM = missing_glVertexPointerListIBM;
    }

    // GL_IMG_multisampled_render_to_texture

    _getProcAddress( dt.glFramebufferTexture2DMultisampleIMG, glFramebufferTexture2DMultisampleIMG, "glFramebufferTexture2DMultisampleIMG" );
    if( dt.glFramebufferTexture2DMultisampleIMG == NULL ) {
      dt.glFramebufferTexture2DMultisampleIMG = missing_glFramebufferTexture2DMultisampleIMG;
    }
    _getProcAddress( dt.glRenderbufferStorageMultisampleIMG, glRenderbufferStorageMultisampleIMG, "glRenderbufferStorageMultisampleIMG" );
    if( dt.glRenderbufferStorageMultisampleIMG == NULL ) {
      dt.glRenderbufferStorageMultisampleIMG = missing_glRenderbufferStorageMultisampleIMG;
    }

    // GL_INGR_blend_func_separate

    _getProcAddress( dt.glBlendFuncSeparateINGR, glBlendFuncSeparateINGR, "glBlendFuncSeparateINGR" );
    if( dt.glBlendFuncSeparateINGR == NULL ) {
      dt.glBlendFuncSeparateINGR = missing_glBlendFuncSeparateINGR;
    }

    // GL_INTEL_map_texture

    _getProcAddress( dt.glMapTexture2DINTEL, glMapTexture2DINTEL, "glMapTexture2DINTEL" );
    if( dt.glMapTexture2DINTEL == NULL ) {
      dt.glMapTexture2DINTEL = missing_glMapTexture2DINTEL;
    }
    _getProcAddress( dt.glSyncTextureINTEL, glSyncTextureINTEL, "glSyncTextureINTEL" );
    if( dt.glSyncTextureINTEL == NULL ) {
      dt.glSyncTextureINTEL = missing_glSyncTextureINTEL;
    }
    _getProcAddress( dt.glUnmapTexture2DINTEL, glUnmapTexture2DINTEL, "glUnmapTexture2DINTEL" );
    if( dt.glUnmapTexture2DINTEL == NULL ) {
      dt.glUnmapTexture2DINTEL = missing_glUnmapTexture2DINTEL;
    }

    // GL_INTEL_parallel_arrays

    _getProcAddress( dt.glColorPointervINTEL, glColorPointervINTEL, "glColorPointervINTEL" );
    if( dt.glColorPointervINTEL == NULL ) {
      dt.glColorPointervINTEL = missing_glColorPointervINTEL;
    }
    _getProcAddress( dt.glNormalPointervINTEL, glNormalPointervINTEL, "glNormalPointervINTEL" );
    if( dt.glNormalPointervINTEL == NULL ) {
      dt.glNormalPointervINTEL = missing_glNormalPointervINTEL;
    }
    _getProcAddress( dt.glTexCoordPointervINTEL, glTexCoordPointervINTEL, "glTexCoordPointervINTEL" );
    if( dt.glTexCoordPointervINTEL == NULL ) {
      dt.glTexCoordPointervINTEL = missing_glTexCoordPointervINTEL;
    }
    _getProcAddress( dt.glVertexPointervINTEL, glVertexPointervINTEL, "glVertexPointervINTEL" );
    if( dt.glVertexPointervINTEL == NULL ) {
      dt.glVertexPointervINTEL = missing_glVertexPointervINTEL;
    }

    // GL_INTEL_texture_scissor

    _getProcAddress( dt.glTexScissorFuncINTEL, glTexScissorFuncINTEL, "glTexScissorFuncINTEL" );
    if( dt.glTexScissorFuncINTEL == NULL ) {
      dt.glTexScissorFuncINTEL = missing_glTexScissorFuncINTEL;
    }
    _getProcAddress( dt.glTexScissorINTEL, glTexScissorINTEL, "glTexScissorINTEL" );
    if( dt.glTexScissorINTEL == NULL ) {
      dt.glTexScissorINTEL = missing_glTexScissorINTEL;
    }

    // GL_KHR_debug

    _getProcAddress( dt.glDebugMessageCallback, glDebugMessageCallback, "glDebugMessageCallback" );
    if( dt.glDebugMessageCallback == NULL ) {
      dt.glDebugMessageCallback = missing_glDebugMessageCallback;
    }
    _getProcAddress( dt.glDebugMessageControl, glDebugMessageControl, "glDebugMessageControl" );
    if( dt.glDebugMessageControl == NULL ) {
      dt.glDebugMessageControl = missing_glDebugMessageControl;
    }
    _getProcAddress( dt.glDebugMessageInsert, glDebugMessageInsert, "glDebugMessageInsert" );
    if( dt.glDebugMessageInsert == NULL ) {
      dt.glDebugMessageInsert = missing_glDebugMessageInsert;
    }
    _getProcAddress( dt.glGetDebugMessageLog, glGetDebugMessageLog, "glGetDebugMessageLog" );
    if( dt.glGetDebugMessageLog == NULL ) {
      dt.glGetDebugMessageLog = missing_glGetDebugMessageLog;
    }
    _getProcAddress( dt.glGetObjectLabel, glGetObjectLabel, "glGetObjectLabel" );
    if( dt.glGetObjectLabel == NULL ) {
      dt.glGetObjectLabel = missing_glGetObjectLabel;
    }
    _getProcAddress( dt.glGetObjectPtrLabel, glGetObjectPtrLabel, "glGetObjectPtrLabel" );
    if( dt.glGetObjectPtrLabel == NULL ) {
      dt.glGetObjectPtrLabel = missing_glGetObjectPtrLabel;
    }
    _getProcAddress( dt.glObjectLabel, glObjectLabel, "glObjectLabel" );
    if( dt.glObjectLabel == NULL ) {
      dt.glObjectLabel = missing_glObjectLabel;
    }
    _getProcAddress( dt.glObjectPtrLabel, glObjectPtrLabel, "glObjectPtrLabel" );
    if( dt.glObjectPtrLabel == NULL ) {
      dt.glObjectPtrLabel = missing_glObjectPtrLabel;
    }
    _getProcAddress( dt.glPopDebugGroup, glPopDebugGroup, "glPopDebugGroup" );
    if( dt.glPopDebugGroup == NULL ) {
      dt.glPopDebugGroup = missing_glPopDebugGroup;
    }
    _getProcAddress( dt.glPushDebugGroup, glPushDebugGroup, "glPushDebugGroup" );
    if( dt.glPushDebugGroup == NULL ) {
      dt.glPushDebugGroup = missing_glPushDebugGroup;
    }

    // GL_KTX_buffer_region

    _getProcAddress( dt.glBufferRegionEnabled, glBufferRegionEnabled, "glBufferRegionEnabled" );
    if( dt.glBufferRegionEnabled == NULL ) {
      dt.glBufferRegionEnabled = missing_glBufferRegionEnabled;
    }
    _getProcAddress( dt.glDeleteBufferRegion, glDeleteBufferRegion, "glDeleteBufferRegion" );
    if( dt.glDeleteBufferRegion == NULL ) {
      dt.glDeleteBufferRegion = missing_glDeleteBufferRegion;
    }
    _getProcAddress( dt.glDrawBufferRegion, glDrawBufferRegion, "glDrawBufferRegion" );
    if( dt.glDrawBufferRegion == NULL ) {
      dt.glDrawBufferRegion = missing_glDrawBufferRegion;
    }
    _getProcAddress( dt.glNewBufferRegion, glNewBufferRegion, "glNewBufferRegion" );
    if( dt.glNewBufferRegion == NULL ) {
      dt.glNewBufferRegion = missing_glNewBufferRegion;
    }
    _getProcAddress( dt.glReadBufferRegion, glReadBufferRegion, "glReadBufferRegion" );
    if( dt.glReadBufferRegion == NULL ) {
      dt.glReadBufferRegion = missing_glReadBufferRegion;
    }

    // GL_MESA_resize_buffers

    _getProcAddress( dt.glResizeBuffersMESA, glResizeBuffersMESA, "glResizeBuffersMESA" );
    if( dt.glResizeBuffersMESA == NULL ) {
      dt.glResizeBuffersMESA = missing_glResizeBuffersMESA;
    }

    // GL_MESA_window_pos

    _getProcAddress( dt.glWindowPos2dMESA, glWindowPos2dMESA, "glWindowPos2dMESA" );
    if( dt.glWindowPos2dMESA == NULL ) {
      dt.glWindowPos2dMESA = missing_glWindowPos2dMESA;
    }
    _getProcAddress( dt.glWindowPos2dvMESA, glWindowPos2dvMESA, "glWindowPos2dvMESA" );
    if( dt.glWindowPos2dvMESA == NULL ) {
      dt.glWindowPos2dvMESA = missing_glWindowPos2dvMESA;
    }
    _getProcAddress( dt.glWindowPos2fMESA, glWindowPos2fMESA, "glWindowPos2fMESA" );
    if( dt.glWindowPos2fMESA == NULL ) {
      dt.glWindowPos2fMESA = missing_glWindowPos2fMESA;
    }
    _getProcAddress( dt.glWindowPos2fvMESA, glWindowPos2fvMESA, "glWindowPos2fvMESA" );
    if( dt.glWindowPos2fvMESA == NULL ) {
      dt.glWindowPos2fvMESA = missing_glWindowPos2fvMESA;
    }
    _getProcAddress( dt.glWindowPos2iMESA, glWindowPos2iMESA, "glWindowPos2iMESA" );
    if( dt.glWindowPos2iMESA == NULL ) {
      dt.glWindowPos2iMESA = missing_glWindowPos2iMESA;
    }
    _getProcAddress( dt.glWindowPos2ivMESA, glWindowPos2ivMESA, "glWindowPos2ivMESA" );
    if( dt.glWindowPos2ivMESA == NULL ) {
      dt.glWindowPos2ivMESA = missing_glWindowPos2ivMESA;
    }
    _getProcAddress( dt.glWindowPos2sMESA, glWindowPos2sMESA, "glWindowPos2sMESA" );
    if( dt.glWindowPos2sMESA == NULL ) {
      dt.glWindowPos2sMESA = missing_glWindowPos2sMESA;
    }
    _getProcAddress( dt.glWindowPos2svMESA, glWindowPos2svMESA, "glWindowPos2svMESA" );
    if( dt.glWindowPos2svMESA == NULL ) {
      dt.glWindowPos2svMESA = missing_glWindowPos2svMESA;
    }
    _getProcAddress( dt.glWindowPos3dMESA, glWindowPos3dMESA, "glWindowPos3dMESA" );
    if( dt.glWindowPos3dMESA == NULL ) {
      dt.glWindowPos3dMESA = missing_glWindowPos3dMESA;
    }
    _getProcAddress( dt.glWindowPos3dvMESA, glWindowPos3dvMESA, "glWindowPos3dvMESA" );
    if( dt.glWindowPos3dvMESA == NULL ) {
      dt.glWindowPos3dvMESA = missing_glWindowPos3dvMESA;
    }
    _getProcAddress( dt.glWindowPos3fMESA, glWindowPos3fMESA, "glWindowPos3fMESA" );
    if( dt.glWindowPos3fMESA == NULL ) {
      dt.glWindowPos3fMESA = missing_glWindowPos3fMESA;
    }
    _getProcAddress( dt.glWindowPos3fvMESA, glWindowPos3fvMESA, "glWindowPos3fvMESA" );
    if( dt.glWindowPos3fvMESA == NULL ) {
      dt.glWindowPos3fvMESA = missing_glWindowPos3fvMESA;
    }
    _getProcAddress( dt.glWindowPos3iMESA, glWindowPos3iMESA, "glWindowPos3iMESA" );
    if( dt.glWindowPos3iMESA == NULL ) {
      dt.glWindowPos3iMESA = missing_glWindowPos3iMESA;
    }
    _getProcAddress( dt.glWindowPos3ivMESA, glWindowPos3ivMESA, "glWindowPos3ivMESA" );
    if( dt.glWindowPos3ivMESA == NULL ) {
      dt.glWindowPos3ivMESA = missing_glWindowPos3ivMESA;
    }
    _getProcAddress( dt.glWindowPos3sMESA, glWindowPos3sMESA, "glWindowPos3sMESA" );
    if( dt.glWindowPos3sMESA == NULL ) {
      dt.glWindowPos3sMESA = missing_glWindowPos3sMESA;
    }
    _getProcAddress( dt.glWindowPos3svMESA, glWindowPos3svMESA, "glWindowPos3svMESA" );
    if( dt.glWindowPos3svMESA == NULL ) {
      dt.glWindowPos3svMESA = missing_glWindowPos3svMESA;
    }
    _getProcAddress( dt.glWindowPos4dMESA, glWindowPos4dMESA, "glWindowPos4dMESA" );
    if( dt.glWindowPos4dMESA == NULL ) {
      dt.glWindowPos4dMESA = missing_glWindowPos4dMESA;
    }
    _getProcAddress( dt.glWindowPos4dvMESA, glWindowPos4dvMESA, "glWindowPos4dvMESA" );
    if( dt.glWindowPos4dvMESA == NULL ) {
      dt.glWindowPos4dvMESA = missing_glWindowPos4dvMESA;
    }
    _getProcAddress( dt.glWindowPos4fMESA, glWindowPos4fMESA, "glWindowPos4fMESA" );
    if( dt.glWindowPos4fMESA == NULL ) {
      dt.glWindowPos4fMESA = missing_glWindowPos4fMESA;
    }
    _getProcAddress( dt.glWindowPos4fvMESA, glWindowPos4fvMESA, "glWindowPos4fvMESA" );
    if( dt.glWindowPos4fvMESA == NULL ) {
      dt.glWindowPos4fvMESA = missing_glWindowPos4fvMESA;
    }
    _getProcAddress( dt.glWindowPos4iMESA, glWindowPos4iMESA, "glWindowPos4iMESA" );
    if( dt.glWindowPos4iMESA == NULL ) {
      dt.glWindowPos4iMESA = missing_glWindowPos4iMESA;
    }
    _getProcAddress( dt.glWindowPos4ivMESA, glWindowPos4ivMESA, "glWindowPos4ivMESA" );
    if( dt.glWindowPos4ivMESA == NULL ) {
      dt.glWindowPos4ivMESA = missing_glWindowPos4ivMESA;
    }
    _getProcAddress( dt.glWindowPos4sMESA, glWindowPos4sMESA, "glWindowPos4sMESA" );
    if( dt.glWindowPos4sMESA == NULL ) {
      dt.glWindowPos4sMESA = missing_glWindowPos4sMESA;
    }
    _getProcAddress( dt.glWindowPos4svMESA, glWindowPos4svMESA, "glWindowPos4svMESA" );
    if( dt.glWindowPos4svMESA == NULL ) {
      dt.glWindowPos4svMESA = missing_glWindowPos4svMESA;
    }

    // GL_NVX_conditional_render

    _getProcAddress( dt.glBeginConditionalRenderNVX, glBeginConditionalRenderNVX, "glBeginConditionalRenderNVX" );
    if( dt.glBeginConditionalRenderNVX == NULL ) {
      dt.glBeginConditionalRenderNVX = missing_glBeginConditionalRenderNVX;
    }
    _getProcAddress( dt.glEndConditionalRenderNVX, glEndConditionalRenderNVX, "glEndConditionalRenderNVX" );
    if( dt.glEndConditionalRenderNVX == NULL ) {
      dt.glEndConditionalRenderNVX = missing_glEndConditionalRenderNVX;
    }

    // GL_NV_bindless_texture

    _getProcAddress( dt.glGetImageHandleNV, glGetImageHandleNV, "glGetImageHandleNV" );
    if( dt.glGetImageHandleNV == NULL ) {
      dt.glGetImageHandleNV = missing_glGetImageHandleNV;
    }
    _getProcAddress( dt.glGetTextureHandleNV, glGetTextureHandleNV, "glGetTextureHandleNV" );
    if( dt.glGetTextureHandleNV == NULL ) {
      dt.glGetTextureHandleNV = missing_glGetTextureHandleNV;
    }
    _getProcAddress( dt.glGetTextureSamplerHandleNV, glGetTextureSamplerHandleNV, "glGetTextureSamplerHandleNV" );
    if( dt.glGetTextureSamplerHandleNV == NULL ) {
      dt.glGetTextureSamplerHandleNV = missing_glGetTextureSamplerHandleNV;
    }
    _getProcAddress( dt.glIsImageHandleResidentNV, glIsImageHandleResidentNV, "glIsImageHandleResidentNV" );
    if( dt.glIsImageHandleResidentNV == NULL ) {
      dt.glIsImageHandleResidentNV = missing_glIsImageHandleResidentNV;
    }
    _getProcAddress( dt.glIsTextureHandleResidentNV, glIsTextureHandleResidentNV, "glIsTextureHandleResidentNV" );
    if( dt.glIsTextureHandleResidentNV == NULL ) {
      dt.glIsTextureHandleResidentNV = missing_glIsTextureHandleResidentNV;
    }
    _getProcAddress( dt.glMakeImageHandleNonResidentNV, glMakeImageHandleNonResidentNV, "glMakeImageHandleNonResidentNV" );
    if( dt.glMakeImageHandleNonResidentNV == NULL ) {
      dt.glMakeImageHandleNonResidentNV = missing_glMakeImageHandleNonResidentNV;
    }
    _getProcAddress( dt.glMakeImageHandleResidentNV, glMakeImageHandleResidentNV, "glMakeImageHandleResidentNV" );
    if( dt.glMakeImageHandleResidentNV == NULL ) {
      dt.glMakeImageHandleResidentNV = missing_glMakeImageHandleResidentNV;
    }
    _getProcAddress( dt.glMakeTextureHandleNonResidentNV, glMakeTextureHandleNonResidentNV, "glMakeTextureHandleNonResidentNV" );
    if( dt.glMakeTextureHandleNonResidentNV == NULL ) {
      dt.glMakeTextureHandleNonResidentNV = missing_glMakeTextureHandleNonResidentNV;
    }
    _getProcAddress( dt.glMakeTextureHandleResidentNV, glMakeTextureHandleResidentNV, "glMakeTextureHandleResidentNV" );
    if( dt.glMakeTextureHandleResidentNV == NULL ) {
      dt.glMakeTextureHandleResidentNV = missing_glMakeTextureHandleResidentNV;
    }
    _getProcAddress( dt.glProgramUniformHandleui64NV, glProgramUniformHandleui64NV, "glProgramUniformHandleui64NV" );
    if( dt.glProgramUniformHandleui64NV == NULL ) {
      dt.glProgramUniformHandleui64NV = missing_glProgramUniformHandleui64NV;
    }
    _getProcAddress( dt.glProgramUniformHandleui64vNV, glProgramUniformHandleui64vNV, "glProgramUniformHandleui64vNV" );
    if( dt.glProgramUniformHandleui64vNV == NULL ) {
      dt.glProgramUniformHandleui64vNV = missing_glProgramUniformHandleui64vNV;
    }
    _getProcAddress( dt.glUniformHandleui64NV, glUniformHandleui64NV, "glUniformHandleui64NV" );
    if( dt.glUniformHandleui64NV == NULL ) {
      dt.glUniformHandleui64NV = missing_glUniformHandleui64NV;
    }
    _getProcAddress( dt.glUniformHandleui64vNV, glUniformHandleui64vNV, "glUniformHandleui64vNV" );
    if( dt.glUniformHandleui64vNV == NULL ) {
      dt.glUniformHandleui64vNV = missing_glUniformHandleui64vNV;
    }

    // GL_NV_blend_equation_advanced

    _getProcAddress( dt.glBlendBarrierNV, glBlendBarrierNV, "glBlendBarrierNV" );
    if( dt.glBlendBarrierNV == NULL ) {
      dt.glBlendBarrierNV = missing_glBlendBarrierNV;
    }
    _getProcAddress( dt.glBlendParameteriNV, glBlendParameteriNV, "glBlendParameteriNV" );
    if( dt.glBlendParameteriNV == NULL ) {
      dt.glBlendParameteriNV = missing_glBlendParameteriNV;
    }

    // GL_NV_conditional_render

    _getProcAddress( dt.glBeginConditionalRenderNV, glBeginConditionalRenderNV, "glBeginConditionalRenderNV" );
    if( dt.glBeginConditionalRenderNV == NULL ) {
      dt.glBeginConditionalRenderNV = missing_glBeginConditionalRenderNV;
    }
    _getProcAddress( dt.glEndConditionalRenderNV, glEndConditionalRenderNV, "glEndConditionalRenderNV" );
    if( dt.glEndConditionalRenderNV == NULL ) {
      dt.glEndConditionalRenderNV = missing_glEndConditionalRenderNV;
    }

    // GL_NV_copy_buffer

    _getProcAddress( dt.glCopyBufferSubDataNV, glCopyBufferSubDataNV, "glCopyBufferSubDataNV" );
    if( dt.glCopyBufferSubDataNV == NULL ) {
      dt.glCopyBufferSubDataNV = missing_glCopyBufferSubDataNV;
    }

    // GL_NV_copy_image

    _getProcAddress( dt.glCopyImageSubDataNV, glCopyImageSubDataNV, "glCopyImageSubDataNV" );
    if( dt.glCopyImageSubDataNV == NULL ) {
      dt.glCopyImageSubDataNV = missing_glCopyImageSubDataNV;
    }

    // GL_NV_coverage_sample

    _getProcAddress( dt.glCoverageMaskNV, glCoverageMaskNV, "glCoverageMaskNV" );
    if( dt.glCoverageMaskNV == NULL ) {
      dt.glCoverageMaskNV = missing_glCoverageMaskNV;
    }
    _getProcAddress( dt.glCoverageOperationNV, glCoverageOperationNV, "glCoverageOperationNV" );
    if( dt.glCoverageOperationNV == NULL ) {
      dt.glCoverageOperationNV = missing_glCoverageOperationNV;
    }

    // GL_NV_depth_buffer_float

    _getProcAddress( dt.glClearDepthdNV, glClearDepthdNV, "glClearDepthdNV" );
    if( dt.glClearDepthdNV == NULL ) {
      dt.glClearDepthdNV = missing_glClearDepthdNV;
    }
    _getProcAddress( dt.glDepthBoundsdNV, glDepthBoundsdNV, "glDepthBoundsdNV" );
    if( dt.glDepthBoundsdNV == NULL ) {
      dt.glDepthBoundsdNV = missing_glDepthBoundsdNV;
    }
    _getProcAddress( dt.glDepthRangedNV, glDepthRangedNV, "glDepthRangedNV" );
    if( dt.glDepthRangedNV == NULL ) {
      dt.glDepthRangedNV = missing_glDepthRangedNV;
    }

    // GL_NV_draw_buffers

    _getProcAddress( dt.glDrawBuffersNV, glDrawBuffersNV, "glDrawBuffersNV" );
    if( dt.glDrawBuffersNV == NULL ) {
      dt.glDrawBuffersNV = missing_glDrawBuffersNV;
    }

    // GL_NV_draw_texture

    _getProcAddress( dt.glDrawTextureNV, glDrawTextureNV, "glDrawTextureNV" );
    if( dt.glDrawTextureNV == NULL ) {
      dt.glDrawTextureNV = missing_glDrawTextureNV;
    }

    // GL_NV_evaluators

    _getProcAddress( dt.glEvalMapsNV, glEvalMapsNV, "glEvalMapsNV" );
    if( dt.glEvalMapsNV == NULL ) {
      dt.glEvalMapsNV = missing_glEvalMapsNV;
    }
    _getProcAddress( dt.glGetMapAttribParameterfvNV, glGetMapAttribParameterfvNV, "glGetMapAttribParameterfvNV" );
    if( dt.glGetMapAttribParameterfvNV == NULL ) {
      dt.glGetMapAttribParameterfvNV = missing_glGetMapAttribParameterfvNV;
    }
    _getProcAddress( dt.glGetMapAttribParameterivNV, glGetMapAttribParameterivNV, "glGetMapAttribParameterivNV" );
    if( dt.glGetMapAttribParameterivNV == NULL ) {
      dt.glGetMapAttribParameterivNV = missing_glGetMapAttribParameterivNV;
    }
    _getProcAddress( dt.glGetMapControlPointsNV, glGetMapControlPointsNV, "glGetMapControlPointsNV" );
    if( dt.glGetMapControlPointsNV == NULL ) {
      dt.glGetMapControlPointsNV = missing_glGetMapControlPointsNV;
    }
    _getProcAddress( dt.glGetMapParameterfvNV, glGetMapParameterfvNV, "glGetMapParameterfvNV" );
    if( dt.glGetMapParameterfvNV == NULL ) {
      dt.glGetMapParameterfvNV = missing_glGetMapParameterfvNV;
    }
    _getProcAddress( dt.glGetMapParameterivNV, glGetMapParameterivNV, "glGetMapParameterivNV" );
    if( dt.glGetMapParameterivNV == NULL ) {
      dt.glGetMapParameterivNV = missing_glGetMapParameterivNV;
    }
    _getProcAddress( dt.glMapControlPointsNV, glMapControlPointsNV, "glMapControlPointsNV" );
    if( dt.glMapControlPointsNV == NULL ) {
      dt.glMapControlPointsNV = missing_glMapControlPointsNV;
    }
    _getProcAddress( dt.glMapParameterfvNV, glMapParameterfvNV, "glMapParameterfvNV" );
    if( dt.glMapParameterfvNV == NULL ) {
      dt.glMapParameterfvNV = missing_glMapParameterfvNV;
    }
    _getProcAddress( dt.glMapParameterivNV, glMapParameterivNV, "glMapParameterivNV" );
    if( dt.glMapParameterivNV == NULL ) {
      dt.glMapParameterivNV = missing_glMapParameterivNV;
    }

    // GL_NV_explicit_multisample

    _getProcAddress( dt.glGetMultisamplefvNV, glGetMultisamplefvNV, "glGetMultisamplefvNV" );
    if( dt.glGetMultisamplefvNV == NULL ) {
      dt.glGetMultisamplefvNV = missing_glGetMultisamplefvNV;
    }
    _getProcAddress( dt.glSampleMaskIndexedNV, glSampleMaskIndexedNV, "glSampleMaskIndexedNV" );
    if( dt.glSampleMaskIndexedNV == NULL ) {
      dt.glSampleMaskIndexedNV = missing_glSampleMaskIndexedNV;
    }
    _getProcAddress( dt.glTexRenderbufferNV, glTexRenderbufferNV, "glTexRenderbufferNV" );
    if( dt.glTexRenderbufferNV == NULL ) {
      dt.glTexRenderbufferNV = missing_glTexRenderbufferNV;
    }

    // GL_NV_fence

    _getProcAddress( dt.glDeleteFencesNV, glDeleteFencesNV, "glDeleteFencesNV" );
    if( dt.glDeleteFencesNV == NULL ) {
      dt.glDeleteFencesNV = missing_glDeleteFencesNV;
    }
    _getProcAddress( dt.glFinishFenceNV, glFinishFenceNV, "glFinishFenceNV" );
    if( dt.glFinishFenceNV == NULL ) {
      dt.glFinishFenceNV = missing_glFinishFenceNV;
    }
    _getProcAddress( dt.glGenFencesNV, glGenFencesNV, "glGenFencesNV" );
    if( dt.glGenFencesNV == NULL ) {
      dt.glGenFencesNV = missing_glGenFencesNV;
    }
    _getProcAddress( dt.glGetFenceivNV, glGetFenceivNV, "glGetFenceivNV" );
    if( dt.glGetFenceivNV == NULL ) {
      dt.glGetFenceivNV = missing_glGetFenceivNV;
    }
    _getProcAddress( dt.glIsFenceNV, glIsFenceNV, "glIsFenceNV" );
    if( dt.glIsFenceNV == NULL ) {
      dt.glIsFenceNV = missing_glIsFenceNV;
    }
    _getProcAddress( dt.glSetFenceNV, glSetFenceNV, "glSetFenceNV" );
    if( dt.glSetFenceNV == NULL ) {
      dt.glSetFenceNV = missing_glSetFenceNV;
    }
    _getProcAddress( dt.glTestFenceNV, glTestFenceNV, "glTestFenceNV" );
    if( dt.glTestFenceNV == NULL ) {
      dt.glTestFenceNV = missing_glTestFenceNV;
    }

    // GL_NV_fragment_program

    _getProcAddress( dt.glGetProgramNamedParameterdvNV, glGetProgramNamedParameterdvNV, "glGetProgramNamedParameterdvNV" );
    if( dt.glGetProgramNamedParameterdvNV == NULL ) {
      dt.glGetProgramNamedParameterdvNV = missing_glGetProgramNamedParameterdvNV;
    }
    _getProcAddress( dt.glGetProgramNamedParameterfvNV, glGetProgramNamedParameterfvNV, "glGetProgramNamedParameterfvNV" );
    if( dt.glGetProgramNamedParameterfvNV == NULL ) {
      dt.glGetProgramNamedParameterfvNV = missing_glGetProgramNamedParameterfvNV;
    }
    _getProcAddress( dt.glProgramNamedParameter4dNV, glProgramNamedParameter4dNV, "glProgramNamedParameter4dNV" );
    if( dt.glProgramNamedParameter4dNV == NULL ) {
      dt.glProgramNamedParameter4dNV = missing_glProgramNamedParameter4dNV;
    }
    _getProcAddress( dt.glProgramNamedParameter4dvNV, glProgramNamedParameter4dvNV, "glProgramNamedParameter4dvNV" );
    if( dt.glProgramNamedParameter4dvNV == NULL ) {
      dt.glProgramNamedParameter4dvNV = missing_glProgramNamedParameter4dvNV;
    }
    _getProcAddress( dt.glProgramNamedParameter4fNV, glProgramNamedParameter4fNV, "glProgramNamedParameter4fNV" );
    if( dt.glProgramNamedParameter4fNV == NULL ) {
      dt.glProgramNamedParameter4fNV = missing_glProgramNamedParameter4fNV;
    }
    _getProcAddress( dt.glProgramNamedParameter4fvNV, glProgramNamedParameter4fvNV, "glProgramNamedParameter4fvNV" );
    if( dt.glProgramNamedParameter4fvNV == NULL ) {
      dt.glProgramNamedParameter4fvNV = missing_glProgramNamedParameter4fvNV;
    }

    // GL_NV_framebuffer_blit

    _getProcAddress( dt.glBlitFramebufferNV, glBlitFramebufferNV, "glBlitFramebufferNV" );
    if( dt.glBlitFramebufferNV == NULL ) {
      dt.glBlitFramebufferNV = missing_glBlitFramebufferNV;
    }

    // GL_NV_framebuffer_multisample_coverage

    _getProcAddress( dt.glRenderbufferStorageMultisampleCoverageNV, glRenderbufferStorageMultisampleCoverageNV, "glRenderbufferStorageMultisampleCoverageNV" );
    if( dt.glRenderbufferStorageMultisampleCoverageNV == NULL ) {
      dt.glRenderbufferStorageMultisampleCoverageNV = missing_glRenderbufferStorageMultisampleCoverageNV;
    }

    // GL_NV_geometry_program4

    _getProcAddress( dt.glProgramVertexLimitNV, glProgramVertexLimitNV, "glProgramVertexLimitNV" );
    if( dt.glProgramVertexLimitNV == NULL ) {
      dt.glProgramVertexLimitNV = missing_glProgramVertexLimitNV;
    }

    // GL_NV_gpu_program4

    _getProcAddress( dt.glGetProgramEnvParameterIivNV, glGetProgramEnvParameterIivNV, "glGetProgramEnvParameterIivNV" );
    if( dt.glGetProgramEnvParameterIivNV == NULL ) {
      dt.glGetProgramEnvParameterIivNV = missing_glGetProgramEnvParameterIivNV;
    }
    _getProcAddress( dt.glGetProgramEnvParameterIuivNV, glGetProgramEnvParameterIuivNV, "glGetProgramEnvParameterIuivNV" );
    if( dt.glGetProgramEnvParameterIuivNV == NULL ) {
      dt.glGetProgramEnvParameterIuivNV = missing_glGetProgramEnvParameterIuivNV;
    }
    _getProcAddress( dt.glGetProgramLocalParameterIivNV, glGetProgramLocalParameterIivNV, "glGetProgramLocalParameterIivNV" );
    if( dt.glGetProgramLocalParameterIivNV == NULL ) {
      dt.glGetProgramLocalParameterIivNV = missing_glGetProgramLocalParameterIivNV;
    }
    _getProcAddress( dt.glGetProgramLocalParameterIuivNV, glGetProgramLocalParameterIuivNV, "glGetProgramLocalParameterIuivNV" );
    if( dt.glGetProgramLocalParameterIuivNV == NULL ) {
      dt.glGetProgramLocalParameterIuivNV = missing_glGetProgramLocalParameterIuivNV;
    }
    _getProcAddress( dt.glProgramEnvParameterI4iNV, glProgramEnvParameterI4iNV, "glProgramEnvParameterI4iNV" );
    if( dt.glProgramEnvParameterI4iNV == NULL ) {
      dt.glProgramEnvParameterI4iNV = missing_glProgramEnvParameterI4iNV;
    }
    _getProcAddress( dt.glProgramEnvParameterI4ivNV, glProgramEnvParameterI4ivNV, "glProgramEnvParameterI4ivNV" );
    if( dt.glProgramEnvParameterI4ivNV == NULL ) {
      dt.glProgramEnvParameterI4ivNV = missing_glProgramEnvParameterI4ivNV;
    }
    _getProcAddress( dt.glProgramEnvParameterI4uiNV, glProgramEnvParameterI4uiNV, "glProgramEnvParameterI4uiNV" );
    if( dt.glProgramEnvParameterI4uiNV == NULL ) {
      dt.glProgramEnvParameterI4uiNV = missing_glProgramEnvParameterI4uiNV;
    }
    _getProcAddress( dt.glProgramEnvParameterI4uivNV, glProgramEnvParameterI4uivNV, "glProgramEnvParameterI4uivNV" );
    if( dt.glProgramEnvParameterI4uivNV == NULL ) {
      dt.glProgramEnvParameterI4uivNV = missing_glProgramEnvParameterI4uivNV;
    }
    _getProcAddress( dt.glProgramEnvParametersI4ivNV, glProgramEnvParametersI4ivNV, "glProgramEnvParametersI4ivNV" );
    if( dt.glProgramEnvParametersI4ivNV == NULL ) {
      dt.glProgramEnvParametersI4ivNV = missing_glProgramEnvParametersI4ivNV;
    }
    _getProcAddress( dt.glProgramEnvParametersI4uivNV, glProgramEnvParametersI4uivNV, "glProgramEnvParametersI4uivNV" );
    if( dt.glProgramEnvParametersI4uivNV == NULL ) {
      dt.glProgramEnvParametersI4uivNV = missing_glProgramEnvParametersI4uivNV;
    }
    _getProcAddress( dt.glProgramLocalParameterI4iNV, glProgramLocalParameterI4iNV, "glProgramLocalParameterI4iNV" );
    if( dt.glProgramLocalParameterI4iNV == NULL ) {
      dt.glProgramLocalParameterI4iNV = missing_glProgramLocalParameterI4iNV;
    }
    _getProcAddress( dt.glProgramLocalParameterI4ivNV, glProgramLocalParameterI4ivNV, "glProgramLocalParameterI4ivNV" );
    if( dt.glProgramLocalParameterI4ivNV == NULL ) {
      dt.glProgramLocalParameterI4ivNV = missing_glProgramLocalParameterI4ivNV;
    }
    _getProcAddress( dt.glProgramLocalParameterI4uiNV, glProgramLocalParameterI4uiNV, "glProgramLocalParameterI4uiNV" );
    if( dt.glProgramLocalParameterI4uiNV == NULL ) {
      dt.glProgramLocalParameterI4uiNV = missing_glProgramLocalParameterI4uiNV;
    }
    _getProcAddress( dt.glProgramLocalParameterI4uivNV, glProgramLocalParameterI4uivNV, "glProgramLocalParameterI4uivNV" );
    if( dt.glProgramLocalParameterI4uivNV == NULL ) {
      dt.glProgramLocalParameterI4uivNV = missing_glProgramLocalParameterI4uivNV;
    }
    _getProcAddress( dt.glProgramLocalParametersI4ivNV, glProgramLocalParametersI4ivNV, "glProgramLocalParametersI4ivNV" );
    if( dt.glProgramLocalParametersI4ivNV == NULL ) {
      dt.glProgramLocalParametersI4ivNV = missing_glProgramLocalParametersI4ivNV;
    }
    _getProcAddress( dt.glProgramLocalParametersI4uivNV, glProgramLocalParametersI4uivNV, "glProgramLocalParametersI4uivNV" );
    if( dt.glProgramLocalParametersI4uivNV == NULL ) {
      dt.glProgramLocalParametersI4uivNV = missing_glProgramLocalParametersI4uivNV;
    }

    // GL_NV_gpu_shader5

    _getProcAddress( dt.glGetUniformi64vNV, glGetUniformi64vNV, "glGetUniformi64vNV" );
    if( dt.glGetUniformi64vNV == NULL ) {
      dt.glGetUniformi64vNV = missing_glGetUniformi64vNV;
    }
    _getProcAddress( dt.glProgramUniform1i64NV, glProgramUniform1i64NV, "glProgramUniform1i64NV" );
    if( dt.glProgramUniform1i64NV == NULL ) {
      dt.glProgramUniform1i64NV = missing_glProgramUniform1i64NV;
    }
    _getProcAddress( dt.glProgramUniform1i64vNV, glProgramUniform1i64vNV, "glProgramUniform1i64vNV" );
    if( dt.glProgramUniform1i64vNV == NULL ) {
      dt.glProgramUniform1i64vNV = missing_glProgramUniform1i64vNV;
    }
    _getProcAddress( dt.glProgramUniform1ui64NV, glProgramUniform1ui64NV, "glProgramUniform1ui64NV" );
    if( dt.glProgramUniform1ui64NV == NULL ) {
      dt.glProgramUniform1ui64NV = missing_glProgramUniform1ui64NV;
    }
    _getProcAddress( dt.glProgramUniform1ui64vNV, glProgramUniform1ui64vNV, "glProgramUniform1ui64vNV" );
    if( dt.glProgramUniform1ui64vNV == NULL ) {
      dt.glProgramUniform1ui64vNV = missing_glProgramUniform1ui64vNV;
    }
    _getProcAddress( dt.glProgramUniform2i64NV, glProgramUniform2i64NV, "glProgramUniform2i64NV" );
    if( dt.glProgramUniform2i64NV == NULL ) {
      dt.glProgramUniform2i64NV = missing_glProgramUniform2i64NV;
    }
    _getProcAddress( dt.glProgramUniform2i64vNV, glProgramUniform2i64vNV, "glProgramUniform2i64vNV" );
    if( dt.glProgramUniform2i64vNV == NULL ) {
      dt.glProgramUniform2i64vNV = missing_glProgramUniform2i64vNV;
    }
    _getProcAddress( dt.glProgramUniform2ui64NV, glProgramUniform2ui64NV, "glProgramUniform2ui64NV" );
    if( dt.glProgramUniform2ui64NV == NULL ) {
      dt.glProgramUniform2ui64NV = missing_glProgramUniform2ui64NV;
    }
    _getProcAddress( dt.glProgramUniform2ui64vNV, glProgramUniform2ui64vNV, "glProgramUniform2ui64vNV" );
    if( dt.glProgramUniform2ui64vNV == NULL ) {
      dt.glProgramUniform2ui64vNV = missing_glProgramUniform2ui64vNV;
    }
    _getProcAddress( dt.glProgramUniform3i64NV, glProgramUniform3i64NV, "glProgramUniform3i64NV" );
    if( dt.glProgramUniform3i64NV == NULL ) {
      dt.glProgramUniform3i64NV = missing_glProgramUniform3i64NV;
    }
    _getProcAddress( dt.glProgramUniform3i64vNV, glProgramUniform3i64vNV, "glProgramUniform3i64vNV" );
    if( dt.glProgramUniform3i64vNV == NULL ) {
      dt.glProgramUniform3i64vNV = missing_glProgramUniform3i64vNV;
    }
    _getProcAddress( dt.glProgramUniform3ui64NV, glProgramUniform3ui64NV, "glProgramUniform3ui64NV" );
    if( dt.glProgramUniform3ui64NV == NULL ) {
      dt.glProgramUniform3ui64NV = missing_glProgramUniform3ui64NV;
    }
    _getProcAddress( dt.glProgramUniform3ui64vNV, glProgramUniform3ui64vNV, "glProgramUniform3ui64vNV" );
    if( dt.glProgramUniform3ui64vNV == NULL ) {
      dt.glProgramUniform3ui64vNV = missing_glProgramUniform3ui64vNV;
    }
    _getProcAddress( dt.glProgramUniform4i64NV, glProgramUniform4i64NV, "glProgramUniform4i64NV" );
    if( dt.glProgramUniform4i64NV == NULL ) {
      dt.glProgramUniform4i64NV = missing_glProgramUniform4i64NV;
    }
    _getProcAddress( dt.glProgramUniform4i64vNV, glProgramUniform4i64vNV, "glProgramUniform4i64vNV" );
    if( dt.glProgramUniform4i64vNV == NULL ) {
      dt.glProgramUniform4i64vNV = missing_glProgramUniform4i64vNV;
    }
    _getProcAddress( dt.glProgramUniform4ui64NV, glProgramUniform4ui64NV, "glProgramUniform4ui64NV" );
    if( dt.glProgramUniform4ui64NV == NULL ) {
      dt.glProgramUniform4ui64NV = missing_glProgramUniform4ui64NV;
    }
    _getProcAddress( dt.glProgramUniform4ui64vNV, glProgramUniform4ui64vNV, "glProgramUniform4ui64vNV" );
    if( dt.glProgramUniform4ui64vNV == NULL ) {
      dt.glProgramUniform4ui64vNV = missing_glProgramUniform4ui64vNV;
    }
    _getProcAddress( dt.glUniform1i64NV, glUniform1i64NV, "glUniform1i64NV" );
    if( dt.glUniform1i64NV == NULL ) {
      dt.glUniform1i64NV = missing_glUniform1i64NV;
    }
    _getProcAddress( dt.glUniform1i64vNV, glUniform1i64vNV, "glUniform1i64vNV" );
    if( dt.glUniform1i64vNV == NULL ) {
      dt.glUniform1i64vNV = missing_glUniform1i64vNV;
    }
    _getProcAddress( dt.glUniform1ui64NV, glUniform1ui64NV, "glUniform1ui64NV" );
    if( dt.glUniform1ui64NV == NULL ) {
      dt.glUniform1ui64NV = missing_glUniform1ui64NV;
    }
    _getProcAddress( dt.glUniform1ui64vNV, glUniform1ui64vNV, "glUniform1ui64vNV" );
    if( dt.glUniform1ui64vNV == NULL ) {
      dt.glUniform1ui64vNV = missing_glUniform1ui64vNV;
    }
    _getProcAddress( dt.glUniform2i64NV, glUniform2i64NV, "glUniform2i64NV" );
    if( dt.glUniform2i64NV == NULL ) {
      dt.glUniform2i64NV = missing_glUniform2i64NV;
    }
    _getProcAddress( dt.glUniform2i64vNV, glUniform2i64vNV, "glUniform2i64vNV" );
    if( dt.glUniform2i64vNV == NULL ) {
      dt.glUniform2i64vNV = missing_glUniform2i64vNV;
    }
    _getProcAddress( dt.glUniform2ui64NV, glUniform2ui64NV, "glUniform2ui64NV" );
    if( dt.glUniform2ui64NV == NULL ) {
      dt.glUniform2ui64NV = missing_glUniform2ui64NV;
    }
    _getProcAddress( dt.glUniform2ui64vNV, glUniform2ui64vNV, "glUniform2ui64vNV" );
    if( dt.glUniform2ui64vNV == NULL ) {
      dt.glUniform2ui64vNV = missing_glUniform2ui64vNV;
    }
    _getProcAddress( dt.glUniform3i64NV, glUniform3i64NV, "glUniform3i64NV" );
    if( dt.glUniform3i64NV == NULL ) {
      dt.glUniform3i64NV = missing_glUniform3i64NV;
    }
    _getProcAddress( dt.glUniform3i64vNV, glUniform3i64vNV, "glUniform3i64vNV" );
    if( dt.glUniform3i64vNV == NULL ) {
      dt.glUniform3i64vNV = missing_glUniform3i64vNV;
    }
    _getProcAddress( dt.glUniform3ui64NV, glUniform3ui64NV, "glUniform3ui64NV" );
    if( dt.glUniform3ui64NV == NULL ) {
      dt.glUniform3ui64NV = missing_glUniform3ui64NV;
    }
    _getProcAddress( dt.glUniform3ui64vNV, glUniform3ui64vNV, "glUniform3ui64vNV" );
    if( dt.glUniform3ui64vNV == NULL ) {
      dt.glUniform3ui64vNV = missing_glUniform3ui64vNV;
    }
    _getProcAddress( dt.glUniform4i64NV, glUniform4i64NV, "glUniform4i64NV" );
    if( dt.glUniform4i64NV == NULL ) {
      dt.glUniform4i64NV = missing_glUniform4i64NV;
    }
    _getProcAddress( dt.glUniform4i64vNV, glUniform4i64vNV, "glUniform4i64vNV" );
    if( dt.glUniform4i64vNV == NULL ) {
      dt.glUniform4i64vNV = missing_glUniform4i64vNV;
    }
    _getProcAddress( dt.glUniform4ui64NV, glUniform4ui64NV, "glUniform4ui64NV" );
    if( dt.glUniform4ui64NV == NULL ) {
      dt.glUniform4ui64NV = missing_glUniform4ui64NV;
    }
    _getProcAddress( dt.glUniform4ui64vNV, glUniform4ui64vNV, "glUniform4ui64vNV" );
    if( dt.glUniform4ui64vNV == NULL ) {
      dt.glUniform4ui64vNV = missing_glUniform4ui64vNV;
    }

    // GL_NV_half_float

    _getProcAddress( dt.glColor3hNV, glColor3hNV, "glColor3hNV" );
    if( dt.glColor3hNV == NULL ) {
      dt.glColor3hNV = missing_glColor3hNV;
    }
    _getProcAddress( dt.glColor3hvNV, glColor3hvNV, "glColor3hvNV" );
    if( dt.glColor3hvNV == NULL ) {
      dt.glColor3hvNV = missing_glColor3hvNV;
    }
    _getProcAddress( dt.glColor4hNV, glColor4hNV, "glColor4hNV" );
    if( dt.glColor4hNV == NULL ) {
      dt.glColor4hNV = missing_glColor4hNV;
    }
    _getProcAddress( dt.glColor4hvNV, glColor4hvNV, "glColor4hvNV" );
    if( dt.glColor4hvNV == NULL ) {
      dt.glColor4hvNV = missing_glColor4hvNV;
    }
    _getProcAddress( dt.glFogCoordhNV, glFogCoordhNV, "glFogCoordhNV" );
    if( dt.glFogCoordhNV == NULL ) {
      dt.glFogCoordhNV = missing_glFogCoordhNV;
    }
    _getProcAddress( dt.glFogCoordhvNV, glFogCoordhvNV, "glFogCoordhvNV" );
    if( dt.glFogCoordhvNV == NULL ) {
      dt.glFogCoordhvNV = missing_glFogCoordhvNV;
    }
    _getProcAddress( dt.glMultiTexCoord1hNV, glMultiTexCoord1hNV, "glMultiTexCoord1hNV" );
    if( dt.glMultiTexCoord1hNV == NULL ) {
      dt.glMultiTexCoord1hNV = missing_glMultiTexCoord1hNV;
    }
    _getProcAddress( dt.glMultiTexCoord1hvNV, glMultiTexCoord1hvNV, "glMultiTexCoord1hvNV" );
    if( dt.glMultiTexCoord1hvNV == NULL ) {
      dt.glMultiTexCoord1hvNV = missing_glMultiTexCoord1hvNV;
    }
    _getProcAddress( dt.glMultiTexCoord2hNV, glMultiTexCoord2hNV, "glMultiTexCoord2hNV" );
    if( dt.glMultiTexCoord2hNV == NULL ) {
      dt.glMultiTexCoord2hNV = missing_glMultiTexCoord2hNV;
    }
    _getProcAddress( dt.glMultiTexCoord2hvNV, glMultiTexCoord2hvNV, "glMultiTexCoord2hvNV" );
    if( dt.glMultiTexCoord2hvNV == NULL ) {
      dt.glMultiTexCoord2hvNV = missing_glMultiTexCoord2hvNV;
    }
    _getProcAddress( dt.glMultiTexCoord3hNV, glMultiTexCoord3hNV, "glMultiTexCoord3hNV" );
    if( dt.glMultiTexCoord3hNV == NULL ) {
      dt.glMultiTexCoord3hNV = missing_glMultiTexCoord3hNV;
    }
    _getProcAddress( dt.glMultiTexCoord3hvNV, glMultiTexCoord3hvNV, "glMultiTexCoord3hvNV" );
    if( dt.glMultiTexCoord3hvNV == NULL ) {
      dt.glMultiTexCoord3hvNV = missing_glMultiTexCoord3hvNV;
    }
    _getProcAddress( dt.glMultiTexCoord4hNV, glMultiTexCoord4hNV, "glMultiTexCoord4hNV" );
    if( dt.glMultiTexCoord4hNV == NULL ) {
      dt.glMultiTexCoord4hNV = missing_glMultiTexCoord4hNV;
    }
    _getProcAddress( dt.glMultiTexCoord4hvNV, glMultiTexCoord4hvNV, "glMultiTexCoord4hvNV" );
    if( dt.glMultiTexCoord4hvNV == NULL ) {
      dt.glMultiTexCoord4hvNV = missing_glMultiTexCoord4hvNV;
    }
    _getProcAddress( dt.glNormal3hNV, glNormal3hNV, "glNormal3hNV" );
    if( dt.glNormal3hNV == NULL ) {
      dt.glNormal3hNV = missing_glNormal3hNV;
    }
    _getProcAddress( dt.glNormal3hvNV, glNormal3hvNV, "glNormal3hvNV" );
    if( dt.glNormal3hvNV == NULL ) {
      dt.glNormal3hvNV = missing_glNormal3hvNV;
    }
    _getProcAddress( dt.glSecondaryColor3hNV, glSecondaryColor3hNV, "glSecondaryColor3hNV" );
    if( dt.glSecondaryColor3hNV == NULL ) {
      dt.glSecondaryColor3hNV = missing_glSecondaryColor3hNV;
    }
    _getProcAddress( dt.glSecondaryColor3hvNV, glSecondaryColor3hvNV, "glSecondaryColor3hvNV" );
    if( dt.glSecondaryColor3hvNV == NULL ) {
      dt.glSecondaryColor3hvNV = missing_glSecondaryColor3hvNV;
    }
    _getProcAddress( dt.glTexCoord1hNV, glTexCoord1hNV, "glTexCoord1hNV" );
    if( dt.glTexCoord1hNV == NULL ) {
      dt.glTexCoord1hNV = missing_glTexCoord1hNV;
    }
    _getProcAddress( dt.glTexCoord1hvNV, glTexCoord1hvNV, "glTexCoord1hvNV" );
    if( dt.glTexCoord1hvNV == NULL ) {
      dt.glTexCoord1hvNV = missing_glTexCoord1hvNV;
    }
    _getProcAddress( dt.glTexCoord2hNV, glTexCoord2hNV, "glTexCoord2hNV" );
    if( dt.glTexCoord2hNV == NULL ) {
      dt.glTexCoord2hNV = missing_glTexCoord2hNV;
    }
    _getProcAddress( dt.glTexCoord2hvNV, glTexCoord2hvNV, "glTexCoord2hvNV" );
    if( dt.glTexCoord2hvNV == NULL ) {
      dt.glTexCoord2hvNV = missing_glTexCoord2hvNV;
    }
    _getProcAddress( dt.glTexCoord3hNV, glTexCoord3hNV, "glTexCoord3hNV" );
    if( dt.glTexCoord3hNV == NULL ) {
      dt.glTexCoord3hNV = missing_glTexCoord3hNV;
    }
    _getProcAddress( dt.glTexCoord3hvNV, glTexCoord3hvNV, "glTexCoord3hvNV" );
    if( dt.glTexCoord3hvNV == NULL ) {
      dt.glTexCoord3hvNV = missing_glTexCoord3hvNV;
    }
    _getProcAddress( dt.glTexCoord4hNV, glTexCoord4hNV, "glTexCoord4hNV" );
    if( dt.glTexCoord4hNV == NULL ) {
      dt.glTexCoord4hNV = missing_glTexCoord4hNV;
    }
    _getProcAddress( dt.glTexCoord4hvNV, glTexCoord4hvNV, "glTexCoord4hvNV" );
    if( dt.glTexCoord4hvNV == NULL ) {
      dt.glTexCoord4hvNV = missing_glTexCoord4hvNV;
    }
    _getProcAddress( dt.glVertex2hNV, glVertex2hNV, "glVertex2hNV" );
    if( dt.glVertex2hNV == NULL ) {
      dt.glVertex2hNV = missing_glVertex2hNV;
    }
    _getProcAddress( dt.glVertex2hvNV, glVertex2hvNV, "glVertex2hvNV" );
    if( dt.glVertex2hvNV == NULL ) {
      dt.glVertex2hvNV = missing_glVertex2hvNV;
    }
    _getProcAddress( dt.glVertex3hNV, glVertex3hNV, "glVertex3hNV" );
    if( dt.glVertex3hNV == NULL ) {
      dt.glVertex3hNV = missing_glVertex3hNV;
    }
    _getProcAddress( dt.glVertex3hvNV, glVertex3hvNV, "glVertex3hvNV" );
    if( dt.glVertex3hvNV == NULL ) {
      dt.glVertex3hvNV = missing_glVertex3hvNV;
    }
    _getProcAddress( dt.glVertex4hNV, glVertex4hNV, "glVertex4hNV" );
    if( dt.glVertex4hNV == NULL ) {
      dt.glVertex4hNV = missing_glVertex4hNV;
    }
    _getProcAddress( dt.glVertex4hvNV, glVertex4hvNV, "glVertex4hvNV" );
    if( dt.glVertex4hvNV == NULL ) {
      dt.glVertex4hvNV = missing_glVertex4hvNV;
    }
    _getProcAddress( dt.glVertexAttrib1hNV, glVertexAttrib1hNV, "glVertexAttrib1hNV" );
    if( dt.glVertexAttrib1hNV == NULL ) {
      dt.glVertexAttrib1hNV = missing_glVertexAttrib1hNV;
    }
    _getProcAddress( dt.glVertexAttrib1hvNV, glVertexAttrib1hvNV, "glVertexAttrib1hvNV" );
    if( dt.glVertexAttrib1hvNV == NULL ) {
      dt.glVertexAttrib1hvNV = missing_glVertexAttrib1hvNV;
    }
    _getProcAddress( dt.glVertexAttrib2hNV, glVertexAttrib2hNV, "glVertexAttrib2hNV" );
    if( dt.glVertexAttrib2hNV == NULL ) {
      dt.glVertexAttrib2hNV = missing_glVertexAttrib2hNV;
    }
    _getProcAddress( dt.glVertexAttrib2hvNV, glVertexAttrib2hvNV, "glVertexAttrib2hvNV" );
    if( dt.glVertexAttrib2hvNV == NULL ) {
      dt.glVertexAttrib2hvNV = missing_glVertexAttrib2hvNV;
    }
    _getProcAddress( dt.glVertexAttrib3hNV, glVertexAttrib3hNV, "glVertexAttrib3hNV" );
    if( dt.glVertexAttrib3hNV == NULL ) {
      dt.glVertexAttrib3hNV = missing_glVertexAttrib3hNV;
    }
    _getProcAddress( dt.glVertexAttrib3hvNV, glVertexAttrib3hvNV, "glVertexAttrib3hvNV" );
    if( dt.glVertexAttrib3hvNV == NULL ) {
      dt.glVertexAttrib3hvNV = missing_glVertexAttrib3hvNV;
    }
    _getProcAddress( dt.glVertexAttrib4hNV, glVertexAttrib4hNV, "glVertexAttrib4hNV" );
    if( dt.glVertexAttrib4hNV == NULL ) {
      dt.glVertexAttrib4hNV = missing_glVertexAttrib4hNV;
    }
    _getProcAddress( dt.glVertexAttrib4hvNV, glVertexAttrib4hvNV, "glVertexAttrib4hvNV" );
    if( dt.glVertexAttrib4hvNV == NULL ) {
      dt.glVertexAttrib4hvNV = missing_glVertexAttrib4hvNV;
    }
    _getProcAddress( dt.glVertexAttribs1hvNV, glVertexAttribs1hvNV, "glVertexAttribs1hvNV" );
    if( dt.glVertexAttribs1hvNV == NULL ) {
      dt.glVertexAttribs1hvNV = missing_glVertexAttribs1hvNV;
    }
    _getProcAddress( dt.glVertexAttribs2hvNV, glVertexAttribs2hvNV, "glVertexAttribs2hvNV" );
    if( dt.glVertexAttribs2hvNV == NULL ) {
      dt.glVertexAttribs2hvNV = missing_glVertexAttribs2hvNV;
    }
    _getProcAddress( dt.glVertexAttribs3hvNV, glVertexAttribs3hvNV, "glVertexAttribs3hvNV" );
    if( dt.glVertexAttribs3hvNV == NULL ) {
      dt.glVertexAttribs3hvNV = missing_glVertexAttribs3hvNV;
    }
    _getProcAddress( dt.glVertexAttribs4hvNV, glVertexAttribs4hvNV, "glVertexAttribs4hvNV" );
    if( dt.glVertexAttribs4hvNV == NULL ) {
      dt.glVertexAttribs4hvNV = missing_glVertexAttribs4hvNV;
    }
    _getProcAddress( dt.glVertexWeighthNV, glVertexWeighthNV, "glVertexWeighthNV" );
    if( dt.glVertexWeighthNV == NULL ) {
      dt.glVertexWeighthNV = missing_glVertexWeighthNV;
    }
    _getProcAddress( dt.glVertexWeighthvNV, glVertexWeighthvNV, "glVertexWeighthvNV" );
    if( dt.glVertexWeighthvNV == NULL ) {
      dt.glVertexWeighthvNV = missing_glVertexWeighthvNV;
    }

    // GL_NV_non_square_matrices

    _getProcAddress( dt.glUniformMatrix2x3fvNV, glUniformMatrix2x3fvNV, "glUniformMatrix2x3fvNV" );
    if( dt.glUniformMatrix2x3fvNV == NULL ) {
      dt.glUniformMatrix2x3fvNV = missing_glUniformMatrix2x3fvNV;
    }
    _getProcAddress( dt.glUniformMatrix2x4fvNV, glUniformMatrix2x4fvNV, "glUniformMatrix2x4fvNV" );
    if( dt.glUniformMatrix2x4fvNV == NULL ) {
      dt.glUniformMatrix2x4fvNV = missing_glUniformMatrix2x4fvNV;
    }
    _getProcAddress( dt.glUniformMatrix3x2fvNV, glUniformMatrix3x2fvNV, "glUniformMatrix3x2fvNV" );
    if( dt.glUniformMatrix3x2fvNV == NULL ) {
      dt.glUniformMatrix3x2fvNV = missing_glUniformMatrix3x2fvNV;
    }
    _getProcAddress( dt.glUniformMatrix3x4fvNV, glUniformMatrix3x4fvNV, "glUniformMatrix3x4fvNV" );
    if( dt.glUniformMatrix3x4fvNV == NULL ) {
      dt.glUniformMatrix3x4fvNV = missing_glUniformMatrix3x4fvNV;
    }
    _getProcAddress( dt.glUniformMatrix4x2fvNV, glUniformMatrix4x2fvNV, "glUniformMatrix4x2fvNV" );
    if( dt.glUniformMatrix4x2fvNV == NULL ) {
      dt.glUniformMatrix4x2fvNV = missing_glUniformMatrix4x2fvNV;
    }
    _getProcAddress( dt.glUniformMatrix4x3fvNV, glUniformMatrix4x3fvNV, "glUniformMatrix4x3fvNV" );
    if( dt.glUniformMatrix4x3fvNV == NULL ) {
      dt.glUniformMatrix4x3fvNV = missing_glUniformMatrix4x3fvNV;
    }

    // GL_NV_occlusion_query

    _getProcAddress( dt.glBeginOcclusionQueryNV, glBeginOcclusionQueryNV, "glBeginOcclusionQueryNV" );
    if( dt.glBeginOcclusionQueryNV == NULL ) {
      dt.glBeginOcclusionQueryNV = missing_glBeginOcclusionQueryNV;
    }
    _getProcAddress( dt.glDeleteOcclusionQueriesNV, glDeleteOcclusionQueriesNV, "glDeleteOcclusionQueriesNV" );
    if( dt.glDeleteOcclusionQueriesNV == NULL ) {
      dt.glDeleteOcclusionQueriesNV = missing_glDeleteOcclusionQueriesNV;
    }
    _getProcAddress( dt.glEndOcclusionQueryNV, glEndOcclusionQueryNV, "glEndOcclusionQueryNV" );
    if( dt.glEndOcclusionQueryNV == NULL ) {
      dt.glEndOcclusionQueryNV = missing_glEndOcclusionQueryNV;
    }
    _getProcAddress( dt.glGenOcclusionQueriesNV, glGenOcclusionQueriesNV, "glGenOcclusionQueriesNV" );
    if( dt.glGenOcclusionQueriesNV == NULL ) {
      dt.glGenOcclusionQueriesNV = missing_glGenOcclusionQueriesNV;
    }
    _getProcAddress( dt.glGetOcclusionQueryivNV, glGetOcclusionQueryivNV, "glGetOcclusionQueryivNV" );
    if( dt.glGetOcclusionQueryivNV == NULL ) {
      dt.glGetOcclusionQueryivNV = missing_glGetOcclusionQueryivNV;
    }
    _getProcAddress( dt.glGetOcclusionQueryuivNV, glGetOcclusionQueryuivNV, "glGetOcclusionQueryuivNV" );
    if( dt.glGetOcclusionQueryuivNV == NULL ) {
      dt.glGetOcclusionQueryuivNV = missing_glGetOcclusionQueryuivNV;
    }
    _getProcAddress( dt.glIsOcclusionQueryNV, glIsOcclusionQueryNV, "glIsOcclusionQueryNV" );
    if( dt.glIsOcclusionQueryNV == NULL ) {
      dt.glIsOcclusionQueryNV = missing_glIsOcclusionQueryNV;
    }

    // GL_NV_parameter_buffer_object

    _getProcAddress( dt.glProgramBufferParametersIivNV, glProgramBufferParametersIivNV, "glProgramBufferParametersIivNV" );
    if( dt.glProgramBufferParametersIivNV == NULL ) {
      dt.glProgramBufferParametersIivNV = missing_glProgramBufferParametersIivNV;
    }
    _getProcAddress( dt.glProgramBufferParametersIuivNV, glProgramBufferParametersIuivNV, "glProgramBufferParametersIuivNV" );
    if( dt.glProgramBufferParametersIuivNV == NULL ) {
      dt.glProgramBufferParametersIuivNV = missing_glProgramBufferParametersIuivNV;
    }
    _getProcAddress( dt.glProgramBufferParametersfvNV, glProgramBufferParametersfvNV, "glProgramBufferParametersfvNV" );
    if( dt.glProgramBufferParametersfvNV == NULL ) {
      dt.glProgramBufferParametersfvNV = missing_glProgramBufferParametersfvNV;
    }

    // GL_NV_path_rendering

    _getProcAddress( dt.glCopyPathNV, glCopyPathNV, "glCopyPathNV" );
    if( dt.glCopyPathNV == NULL ) {
      dt.glCopyPathNV = missing_glCopyPathNV;
    }
    _getProcAddress( dt.glCoverFillPathInstancedNV, glCoverFillPathInstancedNV, "glCoverFillPathInstancedNV" );
    if( dt.glCoverFillPathInstancedNV == NULL ) {
      dt.glCoverFillPathInstancedNV = missing_glCoverFillPathInstancedNV;
    }
    _getProcAddress( dt.glCoverFillPathNV, glCoverFillPathNV, "glCoverFillPathNV" );
    if( dt.glCoverFillPathNV == NULL ) {
      dt.glCoverFillPathNV = missing_glCoverFillPathNV;
    }
    _getProcAddress( dt.glCoverStrokePathInstancedNV, glCoverStrokePathInstancedNV, "glCoverStrokePathInstancedNV" );
    if( dt.glCoverStrokePathInstancedNV == NULL ) {
      dt.glCoverStrokePathInstancedNV = missing_glCoverStrokePathInstancedNV;
    }
    _getProcAddress( dt.glCoverStrokePathNV, glCoverStrokePathNV, "glCoverStrokePathNV" );
    if( dt.glCoverStrokePathNV == NULL ) {
      dt.glCoverStrokePathNV = missing_glCoverStrokePathNV;
    }
    _getProcAddress( dt.glDeletePathsNV, glDeletePathsNV, "glDeletePathsNV" );
    if( dt.glDeletePathsNV == NULL ) {
      dt.glDeletePathsNV = missing_glDeletePathsNV;
    }
    _getProcAddress( dt.glGenPathsNV, glGenPathsNV, "glGenPathsNV" );
    if( dt.glGenPathsNV == NULL ) {
      dt.glGenPathsNV = missing_glGenPathsNV;
    }
    _getProcAddress( dt.glGetPathColorGenfvNV, glGetPathColorGenfvNV, "glGetPathColorGenfvNV" );
    if( dt.glGetPathColorGenfvNV == NULL ) {
      dt.glGetPathColorGenfvNV = missing_glGetPathColorGenfvNV;
    }
    _getProcAddress( dt.glGetPathColorGenivNV, glGetPathColorGenivNV, "glGetPathColorGenivNV" );
    if( dt.glGetPathColorGenivNV == NULL ) {
      dt.glGetPathColorGenivNV = missing_glGetPathColorGenivNV;
    }
    _getProcAddress( dt.glGetPathCommandsNV, glGetPathCommandsNV, "glGetPathCommandsNV" );
    if( dt.glGetPathCommandsNV == NULL ) {
      dt.glGetPathCommandsNV = missing_glGetPathCommandsNV;
    }
    _getProcAddress( dt.glGetPathCoordsNV, glGetPathCoordsNV, "glGetPathCoordsNV" );
    if( dt.glGetPathCoordsNV == NULL ) {
      dt.glGetPathCoordsNV = missing_glGetPathCoordsNV;
    }
    _getProcAddress( dt.glGetPathDashArrayNV, glGetPathDashArrayNV, "glGetPathDashArrayNV" );
    if( dt.glGetPathDashArrayNV == NULL ) {
      dt.glGetPathDashArrayNV = missing_glGetPathDashArrayNV;
    }
    _getProcAddress( dt.glGetPathLengthNV, glGetPathLengthNV, "glGetPathLengthNV" );
    if( dt.glGetPathLengthNV == NULL ) {
      dt.glGetPathLengthNV = missing_glGetPathLengthNV;
    }
    _getProcAddress( dt.glGetPathMetricRangeNV, glGetPathMetricRangeNV, "glGetPathMetricRangeNV" );
    if( dt.glGetPathMetricRangeNV == NULL ) {
      dt.glGetPathMetricRangeNV = missing_glGetPathMetricRangeNV;
    }
    _getProcAddress( dt.glGetPathMetricsNV, glGetPathMetricsNV, "glGetPathMetricsNV" );
    if( dt.glGetPathMetricsNV == NULL ) {
      dt.glGetPathMetricsNV = missing_glGetPathMetricsNV;
    }
    _getProcAddress( dt.glGetPathParameterfvNV, glGetPathParameterfvNV, "glGetPathParameterfvNV" );
    if( dt.glGetPathParameterfvNV == NULL ) {
      dt.glGetPathParameterfvNV = missing_glGetPathParameterfvNV;
    }
    _getProcAddress( dt.glGetPathParameterivNV, glGetPathParameterivNV, "glGetPathParameterivNV" );
    if( dt.glGetPathParameterivNV == NULL ) {
      dt.glGetPathParameterivNV = missing_glGetPathParameterivNV;
    }
    _getProcAddress( dt.glGetPathSpacingNV, glGetPathSpacingNV, "glGetPathSpacingNV" );
    if( dt.glGetPathSpacingNV == NULL ) {
      dt.glGetPathSpacingNV = missing_glGetPathSpacingNV;
    }
    _getProcAddress( dt.glGetPathTexGenfvNV, glGetPathTexGenfvNV, "glGetPathTexGenfvNV" );
    if( dt.glGetPathTexGenfvNV == NULL ) {
      dt.glGetPathTexGenfvNV = missing_glGetPathTexGenfvNV;
    }
    _getProcAddress( dt.glGetPathTexGenivNV, glGetPathTexGenivNV, "glGetPathTexGenivNV" );
    if( dt.glGetPathTexGenivNV == NULL ) {
      dt.glGetPathTexGenivNV = missing_glGetPathTexGenivNV;
    }
    _getProcAddress( dt.glInterpolatePathsNV, glInterpolatePathsNV, "glInterpolatePathsNV" );
    if( dt.glInterpolatePathsNV == NULL ) {
      dt.glInterpolatePathsNV = missing_glInterpolatePathsNV;
    }
    _getProcAddress( dt.glIsPathNV, glIsPathNV, "glIsPathNV" );
    if( dt.glIsPathNV == NULL ) {
      dt.glIsPathNV = missing_glIsPathNV;
    }
    _getProcAddress( dt.glIsPointInFillPathNV, glIsPointInFillPathNV, "glIsPointInFillPathNV" );
    if( dt.glIsPointInFillPathNV == NULL ) {
      dt.glIsPointInFillPathNV = missing_glIsPointInFillPathNV;
    }
    _getProcAddress( dt.glIsPointInStrokePathNV, glIsPointInStrokePathNV, "glIsPointInStrokePathNV" );
    if( dt.glIsPointInStrokePathNV == NULL ) {
      dt.glIsPointInStrokePathNV = missing_glIsPointInStrokePathNV;
    }
    _getProcAddress( dt.glPathColorGenNV, glPathColorGenNV, "glPathColorGenNV" );
    if( dt.glPathColorGenNV == NULL ) {
      dt.glPathColorGenNV = missing_glPathColorGenNV;
    }
    _getProcAddress( dt.glPathCommandsNV, glPathCommandsNV, "glPathCommandsNV" );
    if( dt.glPathCommandsNV == NULL ) {
      dt.glPathCommandsNV = missing_glPathCommandsNV;
    }
    _getProcAddress( dt.glPathCoordsNV, glPathCoordsNV, "glPathCoordsNV" );
    if( dt.glPathCoordsNV == NULL ) {
      dt.glPathCoordsNV = missing_glPathCoordsNV;
    }
    _getProcAddress( dt.glPathCoverDepthFuncNV, glPathCoverDepthFuncNV, "glPathCoverDepthFuncNV" );
    if( dt.glPathCoverDepthFuncNV == NULL ) {
      dt.glPathCoverDepthFuncNV = missing_glPathCoverDepthFuncNV;
    }
    _getProcAddress( dt.glPathDashArrayNV, glPathDashArrayNV, "glPathDashArrayNV" );
    if( dt.glPathDashArrayNV == NULL ) {
      dt.glPathDashArrayNV = missing_glPathDashArrayNV;
    }
    _getProcAddress( dt.glPathFogGenNV, glPathFogGenNV, "glPathFogGenNV" );
    if( dt.glPathFogGenNV == NULL ) {
      dt.glPathFogGenNV = missing_glPathFogGenNV;
    }
    _getProcAddress( dt.glPathGlyphRangeNV, glPathGlyphRangeNV, "glPathGlyphRangeNV" );
    if( dt.glPathGlyphRangeNV == NULL ) {
      dt.glPathGlyphRangeNV = missing_glPathGlyphRangeNV;
    }
    _getProcAddress( dt.glPathGlyphsNV, glPathGlyphsNV, "glPathGlyphsNV" );
    if( dt.glPathGlyphsNV == NULL ) {
      dt.glPathGlyphsNV = missing_glPathGlyphsNV;
    }
    _getProcAddress( dt.glPathParameterfNV, glPathParameterfNV, "glPathParameterfNV" );
    if( dt.glPathParameterfNV == NULL ) {
      dt.glPathParameterfNV = missing_glPathParameterfNV;
    }
    _getProcAddress( dt.glPathParameterfvNV, glPathParameterfvNV, "glPathParameterfvNV" );
    if( dt.glPathParameterfvNV == NULL ) {
      dt.glPathParameterfvNV = missing_glPathParameterfvNV;
    }
    _getProcAddress( dt.glPathParameteriNV, glPathParameteriNV, "glPathParameteriNV" );
    if( dt.glPathParameteriNV == NULL ) {
      dt.glPathParameteriNV = missing_glPathParameteriNV;
    }
    _getProcAddress( dt.glPathParameterivNV, glPathParameterivNV, "glPathParameterivNV" );
    if( dt.glPathParameterivNV == NULL ) {
      dt.glPathParameterivNV = missing_glPathParameterivNV;
    }
    _getProcAddress( dt.glPathStencilDepthOffsetNV, glPathStencilDepthOffsetNV, "glPathStencilDepthOffsetNV" );
    if( dt.glPathStencilDepthOffsetNV == NULL ) {
      dt.glPathStencilDepthOffsetNV = missing_glPathStencilDepthOffsetNV;
    }
    _getProcAddress( dt.glPathStencilFuncNV, glPathStencilFuncNV, "glPathStencilFuncNV" );
    if( dt.glPathStencilFuncNV == NULL ) {
      dt.glPathStencilFuncNV = missing_glPathStencilFuncNV;
    }
    _getProcAddress( dt.glPathStringNV, glPathStringNV, "glPathStringNV" );
    if( dt.glPathStringNV == NULL ) {
      dt.glPathStringNV = missing_glPathStringNV;
    }
    _getProcAddress( dt.glPathSubCommandsNV, glPathSubCommandsNV, "glPathSubCommandsNV" );
    if( dt.glPathSubCommandsNV == NULL ) {
      dt.glPathSubCommandsNV = missing_glPathSubCommandsNV;
    }
    _getProcAddress( dt.glPathSubCoordsNV, glPathSubCoordsNV, "glPathSubCoordsNV" );
    if( dt.glPathSubCoordsNV == NULL ) {
      dt.glPathSubCoordsNV = missing_glPathSubCoordsNV;
    }
    _getProcAddress( dt.glPathTexGenNV, glPathTexGenNV, "glPathTexGenNV" );
    if( dt.glPathTexGenNV == NULL ) {
      dt.glPathTexGenNV = missing_glPathTexGenNV;
    }
    _getProcAddress( dt.glPointAlongPathNV, glPointAlongPathNV, "glPointAlongPathNV" );
    if( dt.glPointAlongPathNV == NULL ) {
      dt.glPointAlongPathNV = missing_glPointAlongPathNV;
    }
    _getProcAddress( dt.glStencilFillPathInstancedNV, glStencilFillPathInstancedNV, "glStencilFillPathInstancedNV" );
    if( dt.glStencilFillPathInstancedNV == NULL ) {
      dt.glStencilFillPathInstancedNV = missing_glStencilFillPathInstancedNV;
    }
    _getProcAddress( dt.glStencilFillPathNV, glStencilFillPathNV, "glStencilFillPathNV" );
    if( dt.glStencilFillPathNV == NULL ) {
      dt.glStencilFillPathNV = missing_glStencilFillPathNV;
    }
    _getProcAddress( dt.glStencilStrokePathInstancedNV, glStencilStrokePathInstancedNV, "glStencilStrokePathInstancedNV" );
    if( dt.glStencilStrokePathInstancedNV == NULL ) {
      dt.glStencilStrokePathInstancedNV = missing_glStencilStrokePathInstancedNV;
    }
    _getProcAddress( dt.glStencilStrokePathNV, glStencilStrokePathNV, "glStencilStrokePathNV" );
    if( dt.glStencilStrokePathNV == NULL ) {
      dt.glStencilStrokePathNV = missing_glStencilStrokePathNV;
    }
    _getProcAddress( dt.glTransformPathNV, glTransformPathNV, "glTransformPathNV" );
    if( dt.glTransformPathNV == NULL ) {
      dt.glTransformPathNV = missing_glTransformPathNV;
    }
    _getProcAddress( dt.glWeightPathsNV, glWeightPathsNV, "glWeightPathsNV" );
    if( dt.glWeightPathsNV == NULL ) {
      dt.glWeightPathsNV = missing_glWeightPathsNV;
    }

    // GL_NV_pixel_data_range

    _getProcAddress( dt.glFlushPixelDataRangeNV, glFlushPixelDataRangeNV, "glFlushPixelDataRangeNV" );
    if( dt.glFlushPixelDataRangeNV == NULL ) {
      dt.glFlushPixelDataRangeNV = missing_glFlushPixelDataRangeNV;
    }
    _getProcAddress( dt.glPixelDataRangeNV, glPixelDataRangeNV, "glPixelDataRangeNV" );
    if( dt.glPixelDataRangeNV == NULL ) {
      dt.glPixelDataRangeNV = missing_glPixelDataRangeNV;
    }

    // GL_NV_point_sprite

    _getProcAddress( dt.glPointParameteriNV, glPointParameteriNV, "glPointParameteriNV" );
    if( dt.glPointParameteriNV == NULL ) {
      dt.glPointParameteriNV = missing_glPointParameteriNV;
    }
    _getProcAddress( dt.glPointParameterivNV, glPointParameterivNV, "glPointParameterivNV" );
    if( dt.glPointParameterivNV == NULL ) {
      dt.glPointParameterivNV = missing_glPointParameterivNV;
    }

    // GL_NV_present_video

    _getProcAddress( dt.glGetVideoi64vNV, glGetVideoi64vNV, "glGetVideoi64vNV" );
    if( dt.glGetVideoi64vNV == NULL ) {
      dt.glGetVideoi64vNV = missing_glGetVideoi64vNV;
    }
    _getProcAddress( dt.glGetVideoivNV, glGetVideoivNV, "glGetVideoivNV" );
    if( dt.glGetVideoivNV == NULL ) {
      dt.glGetVideoivNV = missing_glGetVideoivNV;
    }
    _getProcAddress( dt.glGetVideoui64vNV, glGetVideoui64vNV, "glGetVideoui64vNV" );
    if( dt.glGetVideoui64vNV == NULL ) {
      dt.glGetVideoui64vNV = missing_glGetVideoui64vNV;
    }
    _getProcAddress( dt.glGetVideouivNV, glGetVideouivNV, "glGetVideouivNV" );
    if( dt.glGetVideouivNV == NULL ) {
      dt.glGetVideouivNV = missing_glGetVideouivNV;
    }
    _getProcAddress( dt.glPresentFrameDualFillNV, glPresentFrameDualFillNV, "glPresentFrameDualFillNV" );
    if( dt.glPresentFrameDualFillNV == NULL ) {
      dt.glPresentFrameDualFillNV = missing_glPresentFrameDualFillNV;
    }
    _getProcAddress( dt.glPresentFrameKeyedNV, glPresentFrameKeyedNV, "glPresentFrameKeyedNV" );
    if( dt.glPresentFrameKeyedNV == NULL ) {
      dt.glPresentFrameKeyedNV = missing_glPresentFrameKeyedNV;
    }

    // GL_NV_primitive_restart

    _getProcAddress( dt.glPrimitiveRestartIndexNV, glPrimitiveRestartIndexNV, "glPrimitiveRestartIndexNV" );
    if( dt.glPrimitiveRestartIndexNV == NULL ) {
      dt.glPrimitiveRestartIndexNV = missing_glPrimitiveRestartIndexNV;
    }
    _getProcAddress( dt.glPrimitiveRestartNV, glPrimitiveRestartNV, "glPrimitiveRestartNV" );
    if( dt.glPrimitiveRestartNV == NULL ) {
      dt.glPrimitiveRestartNV = missing_glPrimitiveRestartNV;
    }

    // GL_NV_read_buffer

    _getProcAddress( dt.glReadBufferNV, glReadBufferNV, "glReadBufferNV" );
    if( dt.glReadBufferNV == NULL ) {
      dt.glReadBufferNV = missing_glReadBufferNV;
    }

    // GL_NV_register_combiners

    _getProcAddress( dt.glCombinerInputNV, glCombinerInputNV, "glCombinerInputNV" );
    if( dt.glCombinerInputNV == NULL ) {
      dt.glCombinerInputNV = missing_glCombinerInputNV;
    }
    _getProcAddress( dt.glCombinerOutputNV, glCombinerOutputNV, "glCombinerOutputNV" );
    if( dt.glCombinerOutputNV == NULL ) {
      dt.glCombinerOutputNV = missing_glCombinerOutputNV;
    }
    _getProcAddress( dt.glCombinerParameterfNV, glCombinerParameterfNV, "glCombinerParameterfNV" );
    if( dt.glCombinerParameterfNV == NULL ) {
      dt.glCombinerParameterfNV = missing_glCombinerParameterfNV;
    }
    _getProcAddress( dt.glCombinerParameterfvNV, glCombinerParameterfvNV, "glCombinerParameterfvNV" );
    if( dt.glCombinerParameterfvNV == NULL ) {
      dt.glCombinerParameterfvNV = missing_glCombinerParameterfvNV;
    }
    _getProcAddress( dt.glCombinerParameteriNV, glCombinerParameteriNV, "glCombinerParameteriNV" );
    if( dt.glCombinerParameteriNV == NULL ) {
      dt.glCombinerParameteriNV = missing_glCombinerParameteriNV;
    }
    _getProcAddress( dt.glCombinerParameterivNV, glCombinerParameterivNV, "glCombinerParameterivNV" );
    if( dt.glCombinerParameterivNV == NULL ) {
      dt.glCombinerParameterivNV = missing_glCombinerParameterivNV;
    }
    _getProcAddress( dt.glFinalCombinerInputNV, glFinalCombinerInputNV, "glFinalCombinerInputNV" );
    if( dt.glFinalCombinerInputNV == NULL ) {
      dt.glFinalCombinerInputNV = missing_glFinalCombinerInputNV;
    }
    _getProcAddress( dt.glGetCombinerInputParameterfvNV, glGetCombinerInputParameterfvNV, "glGetCombinerInputParameterfvNV" );
    if( dt.glGetCombinerInputParameterfvNV == NULL ) {
      dt.glGetCombinerInputParameterfvNV = missing_glGetCombinerInputParameterfvNV;
    }
    _getProcAddress( dt.glGetCombinerInputParameterivNV, glGetCombinerInputParameterivNV, "glGetCombinerInputParameterivNV" );
    if( dt.glGetCombinerInputParameterivNV == NULL ) {
      dt.glGetCombinerInputParameterivNV = missing_glGetCombinerInputParameterivNV;
    }
    _getProcAddress( dt.glGetCombinerOutputParameterfvNV, glGetCombinerOutputParameterfvNV, "glGetCombinerOutputParameterfvNV" );
    if( dt.glGetCombinerOutputParameterfvNV == NULL ) {
      dt.glGetCombinerOutputParameterfvNV = missing_glGetCombinerOutputParameterfvNV;
    }
    _getProcAddress( dt.glGetCombinerOutputParameterivNV, glGetCombinerOutputParameterivNV, "glGetCombinerOutputParameterivNV" );
    if( dt.glGetCombinerOutputParameterivNV == NULL ) {
      dt.glGetCombinerOutputParameterivNV = missing_glGetCombinerOutputParameterivNV;
    }
    _getProcAddress( dt.glGetFinalCombinerInputParameterfvNV, glGetFinalCombinerInputParameterfvNV, "glGetFinalCombinerInputParameterfvNV" );
    if( dt.glGetFinalCombinerInputParameterfvNV == NULL ) {
      dt.glGetFinalCombinerInputParameterfvNV = missing_glGetFinalCombinerInputParameterfvNV;
    }
    _getProcAddress( dt.glGetFinalCombinerInputParameterivNV, glGetFinalCombinerInputParameterivNV, "glGetFinalCombinerInputParameterivNV" );
    if( dt.glGetFinalCombinerInputParameterivNV == NULL ) {
      dt.glGetFinalCombinerInputParameterivNV = missing_glGetFinalCombinerInputParameterivNV;
    }

    // GL_NV_register_combiners2

    _getProcAddress( dt.glCombinerStageParameterfvNV, glCombinerStageParameterfvNV, "glCombinerStageParameterfvNV" );
    if( dt.glCombinerStageParameterfvNV == NULL ) {
      dt.glCombinerStageParameterfvNV = missing_glCombinerStageParameterfvNV;
    }
    _getProcAddress( dt.glGetCombinerStageParameterfvNV, glGetCombinerStageParameterfvNV, "glGetCombinerStageParameterfvNV" );
    if( dt.glGetCombinerStageParameterfvNV == NULL ) {
      dt.glGetCombinerStageParameterfvNV = missing_glGetCombinerStageParameterfvNV;
    }

    // GL_NV_shader_buffer_load

    _getProcAddress( dt.glGetBufferParameterui64vNV, glGetBufferParameterui64vNV, "glGetBufferParameterui64vNV" );
    if( dt.glGetBufferParameterui64vNV == NULL ) {
      dt.glGetBufferParameterui64vNV = missing_glGetBufferParameterui64vNV;
    }
    _getProcAddress( dt.glGetIntegerui64vNV, glGetIntegerui64vNV, "glGetIntegerui64vNV" );
    if( dt.glGetIntegerui64vNV == NULL ) {
      dt.glGetIntegerui64vNV = missing_glGetIntegerui64vNV;
    }
    _getProcAddress( dt.glGetNamedBufferParameterui64vNV, glGetNamedBufferParameterui64vNV, "glGetNamedBufferParameterui64vNV" );
    if( dt.glGetNamedBufferParameterui64vNV == NULL ) {
      dt.glGetNamedBufferParameterui64vNV = missing_glGetNamedBufferParameterui64vNV;
    }
    _getProcAddress( dt.glGetUniformui64vNV, glGetUniformui64vNV, "glGetUniformui64vNV" );
    if( dt.glGetUniformui64vNV == NULL ) {
      dt.glGetUniformui64vNV = missing_glGetUniformui64vNV;
    }
    _getProcAddress( dt.glIsBufferResidentNV, glIsBufferResidentNV, "glIsBufferResidentNV" );
    if( dt.glIsBufferResidentNV == NULL ) {
      dt.glIsBufferResidentNV = missing_glIsBufferResidentNV;
    }
    _getProcAddress( dt.glIsNamedBufferResidentNV, glIsNamedBufferResidentNV, "glIsNamedBufferResidentNV" );
    if( dt.glIsNamedBufferResidentNV == NULL ) {
      dt.glIsNamedBufferResidentNV = missing_glIsNamedBufferResidentNV;
    }
    _getProcAddress( dt.glMakeBufferNonResidentNV, glMakeBufferNonResidentNV, "glMakeBufferNonResidentNV" );
    if( dt.glMakeBufferNonResidentNV == NULL ) {
      dt.glMakeBufferNonResidentNV = missing_glMakeBufferNonResidentNV;
    }
    _getProcAddress( dt.glMakeBufferResidentNV, glMakeBufferResidentNV, "glMakeBufferResidentNV" );
    if( dt.glMakeBufferResidentNV == NULL ) {
      dt.glMakeBufferResidentNV = missing_glMakeBufferResidentNV;
    }
    _getProcAddress( dt.glMakeNamedBufferNonResidentNV, glMakeNamedBufferNonResidentNV, "glMakeNamedBufferNonResidentNV" );
    if( dt.glMakeNamedBufferNonResidentNV == NULL ) {
      dt.glMakeNamedBufferNonResidentNV = missing_glMakeNamedBufferNonResidentNV;
    }
    _getProcAddress( dt.glMakeNamedBufferResidentNV, glMakeNamedBufferResidentNV, "glMakeNamedBufferResidentNV" );
    if( dt.glMakeNamedBufferResidentNV == NULL ) {
      dt.glMakeNamedBufferResidentNV = missing_glMakeNamedBufferResidentNV;
    }
    _getProcAddress( dt.glProgramUniformui64NV, glProgramUniformui64NV, "glProgramUniformui64NV" );
    if( dt.glProgramUniformui64NV == NULL ) {
      dt.glProgramUniformui64NV = missing_glProgramUniformui64NV;
    }
    _getProcAddress( dt.glProgramUniformui64vNV, glProgramUniformui64vNV, "glProgramUniformui64vNV" );
    if( dt.glProgramUniformui64vNV == NULL ) {
      dt.glProgramUniformui64vNV = missing_glProgramUniformui64vNV;
    }
    _getProcAddress( dt.glUniformui64NV, glUniformui64NV, "glUniformui64NV" );
    if( dt.glUniformui64NV == NULL ) {
      dt.glUniformui64NV = missing_glUniformui64NV;
    }
    _getProcAddress( dt.glUniformui64vNV, glUniformui64vNV, "glUniformui64vNV" );
    if( dt.glUniformui64vNV == NULL ) {
      dt.glUniformui64vNV = missing_glUniformui64vNV;
    }

    // GL_NV_texture_barrier

    _getProcAddress( dt.glTextureBarrierNV, glTextureBarrierNV, "glTextureBarrierNV" );
    if( dt.glTextureBarrierNV == NULL ) {
      dt.glTextureBarrierNV = missing_glTextureBarrierNV;
    }

    // GL_NV_texture_multisample

    _getProcAddress( dt.glTexImage2DMultisampleCoverageNV, glTexImage2DMultisampleCoverageNV, "glTexImage2DMultisampleCoverageNV" );
    if( dt.glTexImage2DMultisampleCoverageNV == NULL ) {
      dt.glTexImage2DMultisampleCoverageNV = missing_glTexImage2DMultisampleCoverageNV;
    }
    _getProcAddress( dt.glTexImage3DMultisampleCoverageNV, glTexImage3DMultisampleCoverageNV, "glTexImage3DMultisampleCoverageNV" );
    if( dt.glTexImage3DMultisampleCoverageNV == NULL ) {
      dt.glTexImage3DMultisampleCoverageNV = missing_glTexImage3DMultisampleCoverageNV;
    }
    _getProcAddress( dt.glTextureImage2DMultisampleCoverageNV, glTextureImage2DMultisampleCoverageNV, "glTextureImage2DMultisampleCoverageNV" );
    if( dt.glTextureImage2DMultisampleCoverageNV == NULL ) {
      dt.glTextureImage2DMultisampleCoverageNV = missing_glTextureImage2DMultisampleCoverageNV;
    }
    _getProcAddress( dt.glTextureImage2DMultisampleNV, glTextureImage2DMultisampleNV, "glTextureImage2DMultisampleNV" );
    if( dt.glTextureImage2DMultisampleNV == NULL ) {
      dt.glTextureImage2DMultisampleNV = missing_glTextureImage2DMultisampleNV;
    }
    _getProcAddress( dt.glTextureImage3DMultisampleCoverageNV, glTextureImage3DMultisampleCoverageNV, "glTextureImage3DMultisampleCoverageNV" );
    if( dt.glTextureImage3DMultisampleCoverageNV == NULL ) {
      dt.glTextureImage3DMultisampleCoverageNV = missing_glTextureImage3DMultisampleCoverageNV;
    }
    _getProcAddress( dt.glTextureImage3DMultisampleNV, glTextureImage3DMultisampleNV, "glTextureImage3DMultisampleNV" );
    if( dt.glTextureImage3DMultisampleNV == NULL ) {
      dt.glTextureImage3DMultisampleNV = missing_glTextureImage3DMultisampleNV;
    }

    // GL_NV_transform_feedback

    _getProcAddress( dt.glActiveVaryingNV, glActiveVaryingNV, "glActiveVaryingNV" );
    if( dt.glActiveVaryingNV == NULL ) {
      dt.glActiveVaryingNV = missing_glActiveVaryingNV;
    }
    _getProcAddress( dt.glBeginTransformFeedbackNV, glBeginTransformFeedbackNV, "glBeginTransformFeedbackNV" );
    if( dt.glBeginTransformFeedbackNV == NULL ) {
      dt.glBeginTransformFeedbackNV = missing_glBeginTransformFeedbackNV;
    }
    _getProcAddress( dt.glBindBufferBaseNV, glBindBufferBaseNV, "glBindBufferBaseNV" );
    if( dt.glBindBufferBaseNV == NULL ) {
      dt.glBindBufferBaseNV = missing_glBindBufferBaseNV;
    }
    _getProcAddress( dt.glBindBufferOffsetNV, glBindBufferOffsetNV, "glBindBufferOffsetNV" );
    if( dt.glBindBufferOffsetNV == NULL ) {
      dt.glBindBufferOffsetNV = missing_glBindBufferOffsetNV;
    }
    _getProcAddress( dt.glBindBufferRangeNV, glBindBufferRangeNV, "glBindBufferRangeNV" );
    if( dt.glBindBufferRangeNV == NULL ) {
      dt.glBindBufferRangeNV = missing_glBindBufferRangeNV;
    }
    _getProcAddress( dt.glEndTransformFeedbackNV, glEndTransformFeedbackNV, "glEndTransformFeedbackNV" );
    if( dt.glEndTransformFeedbackNV == NULL ) {
      dt.glEndTransformFeedbackNV = missing_glEndTransformFeedbackNV;
    }
    _getProcAddress( dt.glGetActiveVaryingNV, glGetActiveVaryingNV, "glGetActiveVaryingNV" );
    if( dt.glGetActiveVaryingNV == NULL ) {
      dt.glGetActiveVaryingNV = missing_glGetActiveVaryingNV;
    }
    _getProcAddress( dt.glGetTransformFeedbackVaryingNV, glGetTransformFeedbackVaryingNV, "glGetTransformFeedbackVaryingNV" );
    if( dt.glGetTransformFeedbackVaryingNV == NULL ) {
      dt.glGetTransformFeedbackVaryingNV = missing_glGetTransformFeedbackVaryingNV;
    }
    _getProcAddress( dt.glGetVaryingLocationNV, glGetVaryingLocationNV, "glGetVaryingLocationNV" );
    if( dt.glGetVaryingLocationNV == NULL ) {
      dt.glGetVaryingLocationNV = missing_glGetVaryingLocationNV;
    }
    _getProcAddress( dt.glTransformFeedbackAttribsNV, glTransformFeedbackAttribsNV, "glTransformFeedbackAttribsNV" );
    if( dt.glTransformFeedbackAttribsNV == NULL ) {
      dt.glTransformFeedbackAttribsNV = missing_glTransformFeedbackAttribsNV;
    }
    _getProcAddress( dt.glTransformFeedbackVaryingsNV, glTransformFeedbackVaryingsNV, "glTransformFeedbackVaryingsNV" );
    if( dt.glTransformFeedbackVaryingsNV == NULL ) {
      dt.glTransformFeedbackVaryingsNV = missing_glTransformFeedbackVaryingsNV;
    }

    // GL_NV_transform_feedback2

    _getProcAddress( dt.glBindTransformFeedbackNV, glBindTransformFeedbackNV, "glBindTransformFeedbackNV" );
    if( dt.glBindTransformFeedbackNV == NULL ) {
      dt.glBindTransformFeedbackNV = missing_glBindTransformFeedbackNV;
    }
    _getProcAddress( dt.glDeleteTransformFeedbacksNV, glDeleteTransformFeedbacksNV, "glDeleteTransformFeedbacksNV" );
    if( dt.glDeleteTransformFeedbacksNV == NULL ) {
      dt.glDeleteTransformFeedbacksNV = missing_glDeleteTransformFeedbacksNV;
    }
    _getProcAddress( dt.glDrawTransformFeedbackNV, glDrawTransformFeedbackNV, "glDrawTransformFeedbackNV" );
    if( dt.glDrawTransformFeedbackNV == NULL ) {
      dt.glDrawTransformFeedbackNV = missing_glDrawTransformFeedbackNV;
    }
    _getProcAddress( dt.glGenTransformFeedbacksNV, glGenTransformFeedbacksNV, "glGenTransformFeedbacksNV" );
    if( dt.glGenTransformFeedbacksNV == NULL ) {
      dt.glGenTransformFeedbacksNV = missing_glGenTransformFeedbacksNV;
    }
    _getProcAddress( dt.glIsTransformFeedbackNV, glIsTransformFeedbackNV, "glIsTransformFeedbackNV" );
    if( dt.glIsTransformFeedbackNV == NULL ) {
      dt.glIsTransformFeedbackNV = missing_glIsTransformFeedbackNV;
    }
    _getProcAddress( dt.glPauseTransformFeedbackNV, glPauseTransformFeedbackNV, "glPauseTransformFeedbackNV" );
    if( dt.glPauseTransformFeedbackNV == NULL ) {
      dt.glPauseTransformFeedbackNV = missing_glPauseTransformFeedbackNV;
    }
    _getProcAddress( dt.glResumeTransformFeedbackNV, glResumeTransformFeedbackNV, "glResumeTransformFeedbackNV" );
    if( dt.glResumeTransformFeedbackNV == NULL ) {
      dt.glResumeTransformFeedbackNV = missing_glResumeTransformFeedbackNV;
    }

    // GL_NV_vdpau_interop

    _getProcAddress( dt.glVDPAUFiniNV, glVDPAUFiniNV, "glVDPAUFiniNV" );
    if( dt.glVDPAUFiniNV == NULL ) {
      dt.glVDPAUFiniNV = missing_glVDPAUFiniNV;
    }
    _getProcAddress( dt.glVDPAUGetSurfaceivNV, glVDPAUGetSurfaceivNV, "glVDPAUGetSurfaceivNV" );
    if( dt.glVDPAUGetSurfaceivNV == NULL ) {
      dt.glVDPAUGetSurfaceivNV = missing_glVDPAUGetSurfaceivNV;
    }
    _getProcAddress( dt.glVDPAUInitNV, glVDPAUInitNV, "glVDPAUInitNV" );
    if( dt.glVDPAUInitNV == NULL ) {
      dt.glVDPAUInitNV = missing_glVDPAUInitNV;
    }
    _getProcAddress( dt.glVDPAUIsSurfaceNV, glVDPAUIsSurfaceNV, "glVDPAUIsSurfaceNV" );
    if( dt.glVDPAUIsSurfaceNV == NULL ) {
      dt.glVDPAUIsSurfaceNV = missing_glVDPAUIsSurfaceNV;
    }
    _getProcAddress( dt.glVDPAUMapSurfacesNV, glVDPAUMapSurfacesNV, "glVDPAUMapSurfacesNV" );
    if( dt.glVDPAUMapSurfacesNV == NULL ) {
      dt.glVDPAUMapSurfacesNV = missing_glVDPAUMapSurfacesNV;
    }
    _getProcAddress( dt.glVDPAURegisterOutputSurfaceNV, glVDPAURegisterOutputSurfaceNV, "glVDPAURegisterOutputSurfaceNV" );
    if( dt.glVDPAURegisterOutputSurfaceNV == NULL ) {
      dt.glVDPAURegisterOutputSurfaceNV = missing_glVDPAURegisterOutputSurfaceNV;
    }
    _getProcAddress( dt.glVDPAURegisterVideoSurfaceNV, glVDPAURegisterVideoSurfaceNV, "glVDPAURegisterVideoSurfaceNV" );
    if( dt.glVDPAURegisterVideoSurfaceNV == NULL ) {
      dt.glVDPAURegisterVideoSurfaceNV = missing_glVDPAURegisterVideoSurfaceNV;
    }
    _getProcAddress( dt.glVDPAUSurfaceAccessNV, glVDPAUSurfaceAccessNV, "glVDPAUSurfaceAccessNV" );
    if( dt.glVDPAUSurfaceAccessNV == NULL ) {
      dt.glVDPAUSurfaceAccessNV = missing_glVDPAUSurfaceAccessNV;
    }
    _getProcAddress( dt.glVDPAUUnmapSurfacesNV, glVDPAUUnmapSurfacesNV, "glVDPAUUnmapSurfacesNV" );
    if( dt.glVDPAUUnmapSurfacesNV == NULL ) {
      dt.glVDPAUUnmapSurfacesNV = missing_glVDPAUUnmapSurfacesNV;
    }
    _getProcAddress( dt.glVDPAUUnregisterSurfaceNV, glVDPAUUnregisterSurfaceNV, "glVDPAUUnregisterSurfaceNV" );
    if( dt.glVDPAUUnregisterSurfaceNV == NULL ) {
      dt.glVDPAUUnregisterSurfaceNV = missing_glVDPAUUnregisterSurfaceNV;
    }

    // GL_NV_vertex_array_range

    _getProcAddress( dt.glFlushVertexArrayRangeNV, glFlushVertexArrayRangeNV, "glFlushVertexArrayRangeNV" );
    if( dt.glFlushVertexArrayRangeNV == NULL ) {
      dt.glFlushVertexArrayRangeNV = missing_glFlushVertexArrayRangeNV;
    }
    _getProcAddress( dt.glVertexArrayRangeNV, glVertexArrayRangeNV, "glVertexArrayRangeNV" );
    if( dt.glVertexArrayRangeNV == NULL ) {
      dt.glVertexArrayRangeNV = missing_glVertexArrayRangeNV;
    }

    // GL_NV_vertex_attrib_integer_64bit

    _getProcAddress( dt.glGetVertexAttribLi64vNV, glGetVertexAttribLi64vNV, "glGetVertexAttribLi64vNV" );
    if( dt.glGetVertexAttribLi64vNV == NULL ) {
      dt.glGetVertexAttribLi64vNV = missing_glGetVertexAttribLi64vNV;
    }
    _getProcAddress( dt.glGetVertexAttribLui64vNV, glGetVertexAttribLui64vNV, "glGetVertexAttribLui64vNV" );
    if( dt.glGetVertexAttribLui64vNV == NULL ) {
      dt.glGetVertexAttribLui64vNV = missing_glGetVertexAttribLui64vNV;
    }
    _getProcAddress( dt.glVertexAttribL1i64NV, glVertexAttribL1i64NV, "glVertexAttribL1i64NV" );
    if( dt.glVertexAttribL1i64NV == NULL ) {
      dt.glVertexAttribL1i64NV = missing_glVertexAttribL1i64NV;
    }
    _getProcAddress( dt.glVertexAttribL1i64vNV, glVertexAttribL1i64vNV, "glVertexAttribL1i64vNV" );
    if( dt.glVertexAttribL1i64vNV == NULL ) {
      dt.glVertexAttribL1i64vNV = missing_glVertexAttribL1i64vNV;
    }
    _getProcAddress( dt.glVertexAttribL1ui64NV, glVertexAttribL1ui64NV, "glVertexAttribL1ui64NV" );
    if( dt.glVertexAttribL1ui64NV == NULL ) {
      dt.glVertexAttribL1ui64NV = missing_glVertexAttribL1ui64NV;
    }
    _getProcAddress( dt.glVertexAttribL1ui64vNV, glVertexAttribL1ui64vNV, "glVertexAttribL1ui64vNV" );
    if( dt.glVertexAttribL1ui64vNV == NULL ) {
      dt.glVertexAttribL1ui64vNV = missing_glVertexAttribL1ui64vNV;
    }
    _getProcAddress( dt.glVertexAttribL2i64NV, glVertexAttribL2i64NV, "glVertexAttribL2i64NV" );
    if( dt.glVertexAttribL2i64NV == NULL ) {
      dt.glVertexAttribL2i64NV = missing_glVertexAttribL2i64NV;
    }
    _getProcAddress( dt.glVertexAttribL2i64vNV, glVertexAttribL2i64vNV, "glVertexAttribL2i64vNV" );
    if( dt.glVertexAttribL2i64vNV == NULL ) {
      dt.glVertexAttribL2i64vNV = missing_glVertexAttribL2i64vNV;
    }
    _getProcAddress( dt.glVertexAttribL2ui64NV, glVertexAttribL2ui64NV, "glVertexAttribL2ui64NV" );
    if( dt.glVertexAttribL2ui64NV == NULL ) {
      dt.glVertexAttribL2ui64NV = missing_glVertexAttribL2ui64NV;
    }
    _getProcAddress( dt.glVertexAttribL2ui64vNV, glVertexAttribL2ui64vNV, "glVertexAttribL2ui64vNV" );
    if( dt.glVertexAttribL2ui64vNV == NULL ) {
      dt.glVertexAttribL2ui64vNV = missing_glVertexAttribL2ui64vNV;
    }
    _getProcAddress( dt.glVertexAttribL3i64NV, glVertexAttribL3i64NV, "glVertexAttribL3i64NV" );
    if( dt.glVertexAttribL3i64NV == NULL ) {
      dt.glVertexAttribL3i64NV = missing_glVertexAttribL3i64NV;
    }
    _getProcAddress( dt.glVertexAttribL3i64vNV, glVertexAttribL3i64vNV, "glVertexAttribL3i64vNV" );
    if( dt.glVertexAttribL3i64vNV == NULL ) {
      dt.glVertexAttribL3i64vNV = missing_glVertexAttribL3i64vNV;
    }
    _getProcAddress( dt.glVertexAttribL3ui64NV, glVertexAttribL3ui64NV, "glVertexAttribL3ui64NV" );
    if( dt.glVertexAttribL3ui64NV == NULL ) {
      dt.glVertexAttribL3ui64NV = missing_glVertexAttribL3ui64NV;
    }
    _getProcAddress( dt.glVertexAttribL3ui64vNV, glVertexAttribL3ui64vNV, "glVertexAttribL3ui64vNV" );
    if( dt.glVertexAttribL3ui64vNV == NULL ) {
      dt.glVertexAttribL3ui64vNV = missing_glVertexAttribL3ui64vNV;
    }
    _getProcAddress( dt.glVertexAttribL4i64NV, glVertexAttribL4i64NV, "glVertexAttribL4i64NV" );
    if( dt.glVertexAttribL4i64NV == NULL ) {
      dt.glVertexAttribL4i64NV = missing_glVertexAttribL4i64NV;
    }
    _getProcAddress( dt.glVertexAttribL4i64vNV, glVertexAttribL4i64vNV, "glVertexAttribL4i64vNV" );
    if( dt.glVertexAttribL4i64vNV == NULL ) {
      dt.glVertexAttribL4i64vNV = missing_glVertexAttribL4i64vNV;
    }
    _getProcAddress( dt.glVertexAttribL4ui64NV, glVertexAttribL4ui64NV, "glVertexAttribL4ui64NV" );
    if( dt.glVertexAttribL4ui64NV == NULL ) {
      dt.glVertexAttribL4ui64NV = missing_glVertexAttribL4ui64NV;
    }
    _getProcAddress( dt.glVertexAttribL4ui64vNV, glVertexAttribL4ui64vNV, "glVertexAttribL4ui64vNV" );
    if( dt.glVertexAttribL4ui64vNV == NULL ) {
      dt.glVertexAttribL4ui64vNV = missing_glVertexAttribL4ui64vNV;
    }
    _getProcAddress( dt.glVertexAttribLFormatNV, glVertexAttribLFormatNV, "glVertexAttribLFormatNV" );
    if( dt.glVertexAttribLFormatNV == NULL ) {
      dt.glVertexAttribLFormatNV = missing_glVertexAttribLFormatNV;
    }

    // GL_NV_vertex_buffer_unified_memory

    _getProcAddress( dt.glBufferAddressRangeNV, glBufferAddressRangeNV, "glBufferAddressRangeNV" );
    if( dt.glBufferAddressRangeNV == NULL ) {
      dt.glBufferAddressRangeNV = missing_glBufferAddressRangeNV;
    }
    _getProcAddress( dt.glColorFormatNV, glColorFormatNV, "glColorFormatNV" );
    if( dt.glColorFormatNV == NULL ) {
      dt.glColorFormatNV = missing_glColorFormatNV;
    }
    _getProcAddress( dt.glEdgeFlagFormatNV, glEdgeFlagFormatNV, "glEdgeFlagFormatNV" );
    if( dt.glEdgeFlagFormatNV == NULL ) {
      dt.glEdgeFlagFormatNV = missing_glEdgeFlagFormatNV;
    }
    _getProcAddress( dt.glFogCoordFormatNV, glFogCoordFormatNV, "glFogCoordFormatNV" );
    if( dt.glFogCoordFormatNV == NULL ) {
      dt.glFogCoordFormatNV = missing_glFogCoordFormatNV;
    }
    _getProcAddress( dt.glGetIntegerui64i_vNV, glGetIntegerui64i_vNV, "glGetIntegerui64i_vNV" );
    if( dt.glGetIntegerui64i_vNV == NULL ) {
      dt.glGetIntegerui64i_vNV = missing_glGetIntegerui64i_vNV;
    }
    _getProcAddress( dt.glIndexFormatNV, glIndexFormatNV, "glIndexFormatNV" );
    if( dt.glIndexFormatNV == NULL ) {
      dt.glIndexFormatNV = missing_glIndexFormatNV;
    }
    _getProcAddress( dt.glNormalFormatNV, glNormalFormatNV, "glNormalFormatNV" );
    if( dt.glNormalFormatNV == NULL ) {
      dt.glNormalFormatNV = missing_glNormalFormatNV;
    }
    _getProcAddress( dt.glSecondaryColorFormatNV, glSecondaryColorFormatNV, "glSecondaryColorFormatNV" );
    if( dt.glSecondaryColorFormatNV == NULL ) {
      dt.glSecondaryColorFormatNV = missing_glSecondaryColorFormatNV;
    }
    _getProcAddress( dt.glTexCoordFormatNV, glTexCoordFormatNV, "glTexCoordFormatNV" );
    if( dt.glTexCoordFormatNV == NULL ) {
      dt.glTexCoordFormatNV = missing_glTexCoordFormatNV;
    }
    _getProcAddress( dt.glVertexAttribFormatNV, glVertexAttribFormatNV, "glVertexAttribFormatNV" );
    if( dt.glVertexAttribFormatNV == NULL ) {
      dt.glVertexAttribFormatNV = missing_glVertexAttribFormatNV;
    }
    _getProcAddress( dt.glVertexAttribIFormatNV, glVertexAttribIFormatNV, "glVertexAttribIFormatNV" );
    if( dt.glVertexAttribIFormatNV == NULL ) {
      dt.glVertexAttribIFormatNV = missing_glVertexAttribIFormatNV;
    }
    _getProcAddress( dt.glVertexFormatNV, glVertexFormatNV, "glVertexFormatNV" );
    if( dt.glVertexFormatNV == NULL ) {
      dt.glVertexFormatNV = missing_glVertexFormatNV;
    }

    // GL_NV_vertex_program

    _getProcAddress( dt.glAreProgramsResidentNV, glAreProgramsResidentNV, "glAreProgramsResidentNV" );
    if( dt.glAreProgramsResidentNV == NULL ) {
      dt.glAreProgramsResidentNV = missing_glAreProgramsResidentNV;
    }
    _getProcAddress( dt.glBindProgramNV, glBindProgramNV, "glBindProgramNV" );
    if( dt.glBindProgramNV == NULL ) {
      dt.glBindProgramNV = missing_glBindProgramNV;
    }
    _getProcAddress( dt.glDeleteProgramsNV, glDeleteProgramsNV, "glDeleteProgramsNV" );
    if( dt.glDeleteProgramsNV == NULL ) {
      dt.glDeleteProgramsNV = missing_glDeleteProgramsNV;
    }
    _getProcAddress( dt.glExecuteProgramNV, glExecuteProgramNV, "glExecuteProgramNV" );
    if( dt.glExecuteProgramNV == NULL ) {
      dt.glExecuteProgramNV = missing_glExecuteProgramNV;
    }
    _getProcAddress( dt.glGenProgramsNV, glGenProgramsNV, "glGenProgramsNV" );
    if( dt.glGenProgramsNV == NULL ) {
      dt.glGenProgramsNV = missing_glGenProgramsNV;
    }
    _getProcAddress( dt.glGetProgramParameterdvNV, glGetProgramParameterdvNV, "glGetProgramParameterdvNV" );
    if( dt.glGetProgramParameterdvNV == NULL ) {
      dt.glGetProgramParameterdvNV = missing_glGetProgramParameterdvNV;
    }
    _getProcAddress( dt.glGetProgramParameterfvNV, glGetProgramParameterfvNV, "glGetProgramParameterfvNV" );
    if( dt.glGetProgramParameterfvNV == NULL ) {
      dt.glGetProgramParameterfvNV = missing_glGetProgramParameterfvNV;
    }
    _getProcAddress( dt.glGetProgramStringNV, glGetProgramStringNV, "glGetProgramStringNV" );
    if( dt.glGetProgramStringNV == NULL ) {
      dt.glGetProgramStringNV = missing_glGetProgramStringNV;
    }
    _getProcAddress( dt.glGetProgramivNV, glGetProgramivNV, "glGetProgramivNV" );
    if( dt.glGetProgramivNV == NULL ) {
      dt.glGetProgramivNV = missing_glGetProgramivNV;
    }
    _getProcAddress( dt.glGetTrackMatrixivNV, glGetTrackMatrixivNV, "glGetTrackMatrixivNV" );
    if( dt.glGetTrackMatrixivNV == NULL ) {
      dt.glGetTrackMatrixivNV = missing_glGetTrackMatrixivNV;
    }
    _getProcAddress( dt.glGetVertexAttribPointervNV, glGetVertexAttribPointervNV, "glGetVertexAttribPointervNV" );
    if( dt.glGetVertexAttribPointervNV == NULL ) {
      dt.glGetVertexAttribPointervNV = missing_glGetVertexAttribPointervNV;
    }
    _getProcAddress( dt.glGetVertexAttribdvNV, glGetVertexAttribdvNV, "glGetVertexAttribdvNV" );
    if( dt.glGetVertexAttribdvNV == NULL ) {
      dt.glGetVertexAttribdvNV = missing_glGetVertexAttribdvNV;
    }
    _getProcAddress( dt.glGetVertexAttribfvNV, glGetVertexAttribfvNV, "glGetVertexAttribfvNV" );
    if( dt.glGetVertexAttribfvNV == NULL ) {
      dt.glGetVertexAttribfvNV = missing_glGetVertexAttribfvNV;
    }
    _getProcAddress( dt.glGetVertexAttribivNV, glGetVertexAttribivNV, "glGetVertexAttribivNV" );
    if( dt.glGetVertexAttribivNV == NULL ) {
      dt.glGetVertexAttribivNV = missing_glGetVertexAttribivNV;
    }
    _getProcAddress( dt.glIsProgramNV, glIsProgramNV, "glIsProgramNV" );
    if( dt.glIsProgramNV == NULL ) {
      dt.glIsProgramNV = missing_glIsProgramNV;
    }
    _getProcAddress( dt.glLoadProgramNV, glLoadProgramNV, "glLoadProgramNV" );
    if( dt.glLoadProgramNV == NULL ) {
      dt.glLoadProgramNV = missing_glLoadProgramNV;
    }
    _getProcAddress( dt.glProgramParameter4dNV, glProgramParameter4dNV, "glProgramParameter4dNV" );
    if( dt.glProgramParameter4dNV == NULL ) {
      dt.glProgramParameter4dNV = missing_glProgramParameter4dNV;
    }
    _getProcAddress( dt.glProgramParameter4dvNV, glProgramParameter4dvNV, "glProgramParameter4dvNV" );
    if( dt.glProgramParameter4dvNV == NULL ) {
      dt.glProgramParameter4dvNV = missing_glProgramParameter4dvNV;
    }
    _getProcAddress( dt.glProgramParameter4fNV, glProgramParameter4fNV, "glProgramParameter4fNV" );
    if( dt.glProgramParameter4fNV == NULL ) {
      dt.glProgramParameter4fNV = missing_glProgramParameter4fNV;
    }
    _getProcAddress( dt.glProgramParameter4fvNV, glProgramParameter4fvNV, "glProgramParameter4fvNV" );
    if( dt.glProgramParameter4fvNV == NULL ) {
      dt.glProgramParameter4fvNV = missing_glProgramParameter4fvNV;
    }
    _getProcAddress( dt.glProgramParameters4dvNV, glProgramParameters4dvNV, "glProgramParameters4dvNV" );
    if( dt.glProgramParameters4dvNV == NULL ) {
      dt.glProgramParameters4dvNV = missing_glProgramParameters4dvNV;
    }
    _getProcAddress( dt.glProgramParameters4fvNV, glProgramParameters4fvNV, "glProgramParameters4fvNV" );
    if( dt.glProgramParameters4fvNV == NULL ) {
      dt.glProgramParameters4fvNV = missing_glProgramParameters4fvNV;
    }
    _getProcAddress( dt.glRequestResidentProgramsNV, glRequestResidentProgramsNV, "glRequestResidentProgramsNV" );
    if( dt.glRequestResidentProgramsNV == NULL ) {
      dt.glRequestResidentProgramsNV = missing_glRequestResidentProgramsNV;
    }
    _getProcAddress( dt.glTrackMatrixNV, glTrackMatrixNV, "glTrackMatrixNV" );
    if( dt.glTrackMatrixNV == NULL ) {
      dt.glTrackMatrixNV = missing_glTrackMatrixNV;
    }
    _getProcAddress( dt.glVertexAttrib1dNV, glVertexAttrib1dNV, "glVertexAttrib1dNV" );
    if( dt.glVertexAttrib1dNV == NULL ) {
      dt.glVertexAttrib1dNV = missing_glVertexAttrib1dNV;
    }
    _getProcAddress( dt.glVertexAttrib1dvNV, glVertexAttrib1dvNV, "glVertexAttrib1dvNV" );
    if( dt.glVertexAttrib1dvNV == NULL ) {
      dt.glVertexAttrib1dvNV = missing_glVertexAttrib1dvNV;
    }
    _getProcAddress( dt.glVertexAttrib1fNV, glVertexAttrib1fNV, "glVertexAttrib1fNV" );
    if( dt.glVertexAttrib1fNV == NULL ) {
      dt.glVertexAttrib1fNV = missing_glVertexAttrib1fNV;
    }
    _getProcAddress( dt.glVertexAttrib1fvNV, glVertexAttrib1fvNV, "glVertexAttrib1fvNV" );
    if( dt.glVertexAttrib1fvNV == NULL ) {
      dt.glVertexAttrib1fvNV = missing_glVertexAttrib1fvNV;
    }
    _getProcAddress( dt.glVertexAttrib1sNV, glVertexAttrib1sNV, "glVertexAttrib1sNV" );
    if( dt.glVertexAttrib1sNV == NULL ) {
      dt.glVertexAttrib1sNV = missing_glVertexAttrib1sNV;
    }
    _getProcAddress( dt.glVertexAttrib1svNV, glVertexAttrib1svNV, "glVertexAttrib1svNV" );
    if( dt.glVertexAttrib1svNV == NULL ) {
      dt.glVertexAttrib1svNV = missing_glVertexAttrib1svNV;
    }
    _getProcAddress( dt.glVertexAttrib2dNV, glVertexAttrib2dNV, "glVertexAttrib2dNV" );
    if( dt.glVertexAttrib2dNV == NULL ) {
      dt.glVertexAttrib2dNV = missing_glVertexAttrib2dNV;
    }
    _getProcAddress( dt.glVertexAttrib2dvNV, glVertexAttrib2dvNV, "glVertexAttrib2dvNV" );
    if( dt.glVertexAttrib2dvNV == NULL ) {
      dt.glVertexAttrib2dvNV = missing_glVertexAttrib2dvNV;
    }
    _getProcAddress( dt.glVertexAttrib2fNV, glVertexAttrib2fNV, "glVertexAttrib2fNV" );
    if( dt.glVertexAttrib2fNV == NULL ) {
      dt.glVertexAttrib2fNV = missing_glVertexAttrib2fNV;
    }
    _getProcAddress( dt.glVertexAttrib2fvNV, glVertexAttrib2fvNV, "glVertexAttrib2fvNV" );
    if( dt.glVertexAttrib2fvNV == NULL ) {
      dt.glVertexAttrib2fvNV = missing_glVertexAttrib2fvNV;
    }
    _getProcAddress( dt.glVertexAttrib2sNV, glVertexAttrib2sNV, "glVertexAttrib2sNV" );
    if( dt.glVertexAttrib2sNV == NULL ) {
      dt.glVertexAttrib2sNV = missing_glVertexAttrib2sNV;
    }
    _getProcAddress( dt.glVertexAttrib2svNV, glVertexAttrib2svNV, "glVertexAttrib2svNV" );
    if( dt.glVertexAttrib2svNV == NULL ) {
      dt.glVertexAttrib2svNV = missing_glVertexAttrib2svNV;
    }
    _getProcAddress( dt.glVertexAttrib3dNV, glVertexAttrib3dNV, "glVertexAttrib3dNV" );
    if( dt.glVertexAttrib3dNV == NULL ) {
      dt.glVertexAttrib3dNV = missing_glVertexAttrib3dNV;
    }
    _getProcAddress( dt.glVertexAttrib3dvNV, glVertexAttrib3dvNV, "glVertexAttrib3dvNV" );
    if( dt.glVertexAttrib3dvNV == NULL ) {
      dt.glVertexAttrib3dvNV = missing_glVertexAttrib3dvNV;
    }
    _getProcAddress( dt.glVertexAttrib3fNV, glVertexAttrib3fNV, "glVertexAttrib3fNV" );
    if( dt.glVertexAttrib3fNV == NULL ) {
      dt.glVertexAttrib3fNV = missing_glVertexAttrib3fNV;
    }
    _getProcAddress( dt.glVertexAttrib3fvNV, glVertexAttrib3fvNV, "glVertexAttrib3fvNV" );
    if( dt.glVertexAttrib3fvNV == NULL ) {
      dt.glVertexAttrib3fvNV = missing_glVertexAttrib3fvNV;
    }
    _getProcAddress( dt.glVertexAttrib3sNV, glVertexAttrib3sNV, "glVertexAttrib3sNV" );
    if( dt.glVertexAttrib3sNV == NULL ) {
      dt.glVertexAttrib3sNV = missing_glVertexAttrib3sNV;
    }
    _getProcAddress( dt.glVertexAttrib3svNV, glVertexAttrib3svNV, "glVertexAttrib3svNV" );
    if( dt.glVertexAttrib3svNV == NULL ) {
      dt.glVertexAttrib3svNV = missing_glVertexAttrib3svNV;
    }
    _getProcAddress( dt.glVertexAttrib4dNV, glVertexAttrib4dNV, "glVertexAttrib4dNV" );
    if( dt.glVertexAttrib4dNV == NULL ) {
      dt.glVertexAttrib4dNV = missing_glVertexAttrib4dNV;
    }
    _getProcAddress( dt.glVertexAttrib4dvNV, glVertexAttrib4dvNV, "glVertexAttrib4dvNV" );
    if( dt.glVertexAttrib4dvNV == NULL ) {
      dt.glVertexAttrib4dvNV = missing_glVertexAttrib4dvNV;
    }
    _getProcAddress( dt.glVertexAttrib4fNV, glVertexAttrib4fNV, "glVertexAttrib4fNV" );
    if( dt.glVertexAttrib4fNV == NULL ) {
      dt.glVertexAttrib4fNV = missing_glVertexAttrib4fNV;
    }
    _getProcAddress( dt.glVertexAttrib4fvNV, glVertexAttrib4fvNV, "glVertexAttrib4fvNV" );
    if( dt.glVertexAttrib4fvNV == NULL ) {
      dt.glVertexAttrib4fvNV = missing_glVertexAttrib4fvNV;
    }
    _getProcAddress( dt.glVertexAttrib4sNV, glVertexAttrib4sNV, "glVertexAttrib4sNV" );
    if( dt.glVertexAttrib4sNV == NULL ) {
      dt.glVertexAttrib4sNV = missing_glVertexAttrib4sNV;
    }
    _getProcAddress( dt.glVertexAttrib4svNV, glVertexAttrib4svNV, "glVertexAttrib4svNV" );
    if( dt.glVertexAttrib4svNV == NULL ) {
      dt.glVertexAttrib4svNV = missing_glVertexAttrib4svNV;
    }
    _getProcAddress( dt.glVertexAttrib4ubNV, glVertexAttrib4ubNV, "glVertexAttrib4ubNV" );
    if( dt.glVertexAttrib4ubNV == NULL ) {
      dt.glVertexAttrib4ubNV = missing_glVertexAttrib4ubNV;
    }
    _getProcAddress( dt.glVertexAttrib4ubvNV, glVertexAttrib4ubvNV, "glVertexAttrib4ubvNV" );
    if( dt.glVertexAttrib4ubvNV == NULL ) {
      dt.glVertexAttrib4ubvNV = missing_glVertexAttrib4ubvNV;
    }
    _getProcAddress( dt.glVertexAttribPointerNV, glVertexAttribPointerNV, "glVertexAttribPointerNV" );
    if( dt.glVertexAttribPointerNV == NULL ) {
      dt.glVertexAttribPointerNV = missing_glVertexAttribPointerNV;
    }
    _getProcAddress( dt.glVertexAttribs1dvNV, glVertexAttribs1dvNV, "glVertexAttribs1dvNV" );
    if( dt.glVertexAttribs1dvNV == NULL ) {
      dt.glVertexAttribs1dvNV = missing_glVertexAttribs1dvNV;
    }
    _getProcAddress( dt.glVertexAttribs1fvNV, glVertexAttribs1fvNV, "glVertexAttribs1fvNV" );
    if( dt.glVertexAttribs1fvNV == NULL ) {
      dt.glVertexAttribs1fvNV = missing_glVertexAttribs1fvNV;
    }
    _getProcAddress( dt.glVertexAttribs1svNV, glVertexAttribs1svNV, "glVertexAttribs1svNV" );
    if( dt.glVertexAttribs1svNV == NULL ) {
      dt.glVertexAttribs1svNV = missing_glVertexAttribs1svNV;
    }
    _getProcAddress( dt.glVertexAttribs2dvNV, glVertexAttribs2dvNV, "glVertexAttribs2dvNV" );
    if( dt.glVertexAttribs2dvNV == NULL ) {
      dt.glVertexAttribs2dvNV = missing_glVertexAttribs2dvNV;
    }
    _getProcAddress( dt.glVertexAttribs2fvNV, glVertexAttribs2fvNV, "glVertexAttribs2fvNV" );
    if( dt.glVertexAttribs2fvNV == NULL ) {
      dt.glVertexAttribs2fvNV = missing_glVertexAttribs2fvNV;
    }
    _getProcAddress( dt.glVertexAttribs2svNV, glVertexAttribs2svNV, "glVertexAttribs2svNV" );
    if( dt.glVertexAttribs2svNV == NULL ) {
      dt.glVertexAttribs2svNV = missing_glVertexAttribs2svNV;
    }
    _getProcAddress( dt.glVertexAttribs3dvNV, glVertexAttribs3dvNV, "glVertexAttribs3dvNV" );
    if( dt.glVertexAttribs3dvNV == NULL ) {
      dt.glVertexAttribs3dvNV = missing_glVertexAttribs3dvNV;
    }
    _getProcAddress( dt.glVertexAttribs3fvNV, glVertexAttribs3fvNV, "glVertexAttribs3fvNV" );
    if( dt.glVertexAttribs3fvNV == NULL ) {
      dt.glVertexAttribs3fvNV = missing_glVertexAttribs3fvNV;
    }
    _getProcAddress( dt.glVertexAttribs3svNV, glVertexAttribs3svNV, "glVertexAttribs3svNV" );
    if( dt.glVertexAttribs3svNV == NULL ) {
      dt.glVertexAttribs3svNV = missing_glVertexAttribs3svNV;
    }
    _getProcAddress( dt.glVertexAttribs4dvNV, glVertexAttribs4dvNV, "glVertexAttribs4dvNV" );
    if( dt.glVertexAttribs4dvNV == NULL ) {
      dt.glVertexAttribs4dvNV = missing_glVertexAttribs4dvNV;
    }
    _getProcAddress( dt.glVertexAttribs4fvNV, glVertexAttribs4fvNV, "glVertexAttribs4fvNV" );
    if( dt.glVertexAttribs4fvNV == NULL ) {
      dt.glVertexAttribs4fvNV = missing_glVertexAttribs4fvNV;
    }
    _getProcAddress( dt.glVertexAttribs4svNV, glVertexAttribs4svNV, "glVertexAttribs4svNV" );
    if( dt.glVertexAttribs4svNV == NULL ) {
      dt.glVertexAttribs4svNV = missing_glVertexAttribs4svNV;
    }
    _getProcAddress( dt.glVertexAttribs4ubvNV, glVertexAttribs4ubvNV, "glVertexAttribs4ubvNV" );
    if( dt.glVertexAttribs4ubvNV == NULL ) {
      dt.glVertexAttribs4ubvNV = missing_glVertexAttribs4ubvNV;
    }

    // GL_NV_video_capture

    _getProcAddress( dt.glBeginVideoCaptureNV, glBeginVideoCaptureNV, "glBeginVideoCaptureNV" );
    if( dt.glBeginVideoCaptureNV == NULL ) {
      dt.glBeginVideoCaptureNV = missing_glBeginVideoCaptureNV;
    }
    _getProcAddress( dt.glBindVideoCaptureStreamBufferNV, glBindVideoCaptureStreamBufferNV, "glBindVideoCaptureStreamBufferNV" );
    if( dt.glBindVideoCaptureStreamBufferNV == NULL ) {
      dt.glBindVideoCaptureStreamBufferNV = missing_glBindVideoCaptureStreamBufferNV;
    }
    _getProcAddress( dt.glBindVideoCaptureStreamTextureNV, glBindVideoCaptureStreamTextureNV, "glBindVideoCaptureStreamTextureNV" );
    if( dt.glBindVideoCaptureStreamTextureNV == NULL ) {
      dt.glBindVideoCaptureStreamTextureNV = missing_glBindVideoCaptureStreamTextureNV;
    }
    _getProcAddress( dt.glEndVideoCaptureNV, glEndVideoCaptureNV, "glEndVideoCaptureNV" );
    if( dt.glEndVideoCaptureNV == NULL ) {
      dt.glEndVideoCaptureNV = missing_glEndVideoCaptureNV;
    }
    _getProcAddress( dt.glGetVideoCaptureStreamdvNV, glGetVideoCaptureStreamdvNV, "glGetVideoCaptureStreamdvNV" );
    if( dt.glGetVideoCaptureStreamdvNV == NULL ) {
      dt.glGetVideoCaptureStreamdvNV = missing_glGetVideoCaptureStreamdvNV;
    }
    _getProcAddress( dt.glGetVideoCaptureStreamfvNV, glGetVideoCaptureStreamfvNV, "glGetVideoCaptureStreamfvNV" );
    if( dt.glGetVideoCaptureStreamfvNV == NULL ) {
      dt.glGetVideoCaptureStreamfvNV = missing_glGetVideoCaptureStreamfvNV;
    }
    _getProcAddress( dt.glGetVideoCaptureStreamivNV, glGetVideoCaptureStreamivNV, "glGetVideoCaptureStreamivNV" );
    if( dt.glGetVideoCaptureStreamivNV == NULL ) {
      dt.glGetVideoCaptureStreamivNV = missing_glGetVideoCaptureStreamivNV;
    }
    _getProcAddress( dt.glGetVideoCaptureivNV, glGetVideoCaptureivNV, "glGetVideoCaptureivNV" );
    if( dt.glGetVideoCaptureivNV == NULL ) {
      dt.glGetVideoCaptureivNV = missing_glGetVideoCaptureivNV;
    }
    _getProcAddress( dt.glVideoCaptureNV, glVideoCaptureNV, "glVideoCaptureNV" );
    if( dt.glVideoCaptureNV == NULL ) {
      dt.glVideoCaptureNV = missing_glVideoCaptureNV;
    }
    _getProcAddress( dt.glVideoCaptureStreamParameterdvNV, glVideoCaptureStreamParameterdvNV, "glVideoCaptureStreamParameterdvNV" );
    if( dt.glVideoCaptureStreamParameterdvNV == NULL ) {
      dt.glVideoCaptureStreamParameterdvNV = missing_glVideoCaptureStreamParameterdvNV;
    }
    _getProcAddress( dt.glVideoCaptureStreamParameterfvNV, glVideoCaptureStreamParameterfvNV, "glVideoCaptureStreamParameterfvNV" );
    if( dt.glVideoCaptureStreamParameterfvNV == NULL ) {
      dt.glVideoCaptureStreamParameterfvNV = missing_glVideoCaptureStreamParameterfvNV;
    }
    _getProcAddress( dt.glVideoCaptureStreamParameterivNV, glVideoCaptureStreamParameterivNV, "glVideoCaptureStreamParameterivNV" );
    if( dt.glVideoCaptureStreamParameterivNV == NULL ) {
      dt.glVideoCaptureStreamParameterivNV = missing_glVideoCaptureStreamParameterivNV;
    }

    // GL_OES_blend_equation_separate

    _getProcAddress( dt.glBlendEquationSeparateOES, glBlendEquationSeparateOES, "glBlendEquationSeparateOES" );
    if( dt.glBlendEquationSeparateOES == NULL ) {
      dt.glBlendEquationSeparateOES = missing_glBlendEquationSeparateOES;
    }

    // GL_OES_blend_func_separate

    _getProcAddress( dt.glBlendFuncSeparateOES, glBlendFuncSeparateOES, "glBlendFuncSeparateOES" );
    if( dt.glBlendFuncSeparateOES == NULL ) {
      dt.glBlendFuncSeparateOES = missing_glBlendFuncSeparateOES;
    }

    // GL_OES_blend_subtract

    _getProcAddress( dt.glBlendEquationOES, glBlendEquationOES, "glBlendEquationOES" );
    if( dt.glBlendEquationOES == NULL ) {
      dt.glBlendEquationOES = missing_glBlendEquationOES;
    }

    // GL_OES_framebuffer_object

    _getProcAddress( dt.glBindFramebufferOES, glBindFramebufferOES, "glBindFramebufferOES" );
    if( dt.glBindFramebufferOES == NULL ) {
      dt.glBindFramebufferOES = missing_glBindFramebufferOES;
    }
    _getProcAddress( dt.glBindRenderbufferOES, glBindRenderbufferOES, "glBindRenderbufferOES" );
    if( dt.glBindRenderbufferOES == NULL ) {
      dt.glBindRenderbufferOES = missing_glBindRenderbufferOES;
    }
    _getProcAddress( dt.glCheckFramebufferStatusOES, glCheckFramebufferStatusOES, "glCheckFramebufferStatusOES" );
    if( dt.glCheckFramebufferStatusOES == NULL ) {
      dt.glCheckFramebufferStatusOES = missing_glCheckFramebufferStatusOES;
    }
    _getProcAddress( dt.glDeleteFramebuffersOES, glDeleteFramebuffersOES, "glDeleteFramebuffersOES" );
    if( dt.glDeleteFramebuffersOES == NULL ) {
      dt.glDeleteFramebuffersOES = missing_glDeleteFramebuffersOES;
    }
    _getProcAddress( dt.glDeleteRenderbuffersOES, glDeleteRenderbuffersOES, "glDeleteRenderbuffersOES" );
    if( dt.glDeleteRenderbuffersOES == NULL ) {
      dt.glDeleteRenderbuffersOES = missing_glDeleteRenderbuffersOES;
    }
    _getProcAddress( dt.glFramebufferRenderbufferOES, glFramebufferRenderbufferOES, "glFramebufferRenderbufferOES" );
    if( dt.glFramebufferRenderbufferOES == NULL ) {
      dt.glFramebufferRenderbufferOES = missing_glFramebufferRenderbufferOES;
    }
    _getProcAddress( dt.glFramebufferTexture2DOES, glFramebufferTexture2DOES, "glFramebufferTexture2DOES" );
    if( dt.glFramebufferTexture2DOES == NULL ) {
      dt.glFramebufferTexture2DOES = missing_glFramebufferTexture2DOES;
    }
    _getProcAddress( dt.glGenFramebuffersOES, glGenFramebuffersOES, "glGenFramebuffersOES" );
    if( dt.glGenFramebuffersOES == NULL ) {
      dt.glGenFramebuffersOES = missing_glGenFramebuffersOES;
    }
    _getProcAddress( dt.glGenRenderbuffersOES, glGenRenderbuffersOES, "glGenRenderbuffersOES" );
    if( dt.glGenRenderbuffersOES == NULL ) {
      dt.glGenRenderbuffersOES = missing_glGenRenderbuffersOES;
    }
    _getProcAddress( dt.glGenerateMipmapOES, glGenerateMipmapOES, "glGenerateMipmapOES" );
    if( dt.glGenerateMipmapOES == NULL ) {
      dt.glGenerateMipmapOES = missing_glGenerateMipmapOES;
    }
    _getProcAddress( dt.glGetFramebufferAttachmentParameterivOES, glGetFramebufferAttachmentParameterivOES, "glGetFramebufferAttachmentParameterivOES" );
    if( dt.glGetFramebufferAttachmentParameterivOES == NULL ) {
      dt.glGetFramebufferAttachmentParameterivOES = missing_glGetFramebufferAttachmentParameterivOES;
    }
    _getProcAddress( dt.glGetRenderbufferParameterivOES, glGetRenderbufferParameterivOES, "glGetRenderbufferParameterivOES" );
    if( dt.glGetRenderbufferParameterivOES == NULL ) {
      dt.glGetRenderbufferParameterivOES = missing_glGetRenderbufferParameterivOES;
    }
    _getProcAddress( dt.glIsFramebufferOES, glIsFramebufferOES, "glIsFramebufferOES" );
    if( dt.glIsFramebufferOES == NULL ) {
      dt.glIsFramebufferOES = missing_glIsFramebufferOES;
    }
    _getProcAddress( dt.glIsRenderbufferOES, glIsRenderbufferOES, "glIsRenderbufferOES" );
    if( dt.glIsRenderbufferOES == NULL ) {
      dt.glIsRenderbufferOES = missing_glIsRenderbufferOES;
    }
    _getProcAddress( dt.glRenderbufferStorageOES, glRenderbufferStorageOES, "glRenderbufferStorageOES" );
    if( dt.glRenderbufferStorageOES == NULL ) {
      dt.glRenderbufferStorageOES = missing_glRenderbufferStorageOES;
    }

    // GL_OES_get_program_binary

    _getProcAddress( dt.glGetProgramBinaryOES, glGetProgramBinaryOES, "glGetProgramBinaryOES" );
    if( dt.glGetProgramBinaryOES == NULL ) {
      dt.glGetProgramBinaryOES = missing_glGetProgramBinaryOES;
    }
    _getProcAddress( dt.glProgramBinaryOES, glProgramBinaryOES, "glProgramBinaryOES" );
    if( dt.glProgramBinaryOES == NULL ) {
      dt.glProgramBinaryOES = missing_glProgramBinaryOES;
    }

    // GL_OES_mapbuffer

    _getProcAddress( dt.glGetBufferPointervOES, glGetBufferPointervOES, "glGetBufferPointervOES" );
    if( dt.glGetBufferPointervOES == NULL ) {
      dt.glGetBufferPointervOES = missing_glGetBufferPointervOES;
    }
    _getProcAddress( dt.glMapBufferOES, glMapBufferOES, "glMapBufferOES" );
    if( dt.glMapBufferOES == NULL ) {
      dt.glMapBufferOES = missing_glMapBufferOES;
    }
    _getProcAddress( dt.glUnmapBufferOES, glUnmapBufferOES, "glUnmapBufferOES" );
    if( dt.glUnmapBufferOES == NULL ) {
      dt.glUnmapBufferOES = missing_glUnmapBufferOES;
    }

    // GL_OES_matrix_palette

    _getProcAddress( dt.glCurrentPaletteMatrixOES, glCurrentPaletteMatrixOES, "glCurrentPaletteMatrixOES" );
    if( dt.glCurrentPaletteMatrixOES == NULL ) {
      dt.glCurrentPaletteMatrixOES = missing_glCurrentPaletteMatrixOES;
    }
    _getProcAddress( dt.glMatrixIndexPointerOES, glMatrixIndexPointerOES, "glMatrixIndexPointerOES" );
    if( dt.glMatrixIndexPointerOES == NULL ) {
      dt.glMatrixIndexPointerOES = missing_glMatrixIndexPointerOES;
    }
    _getProcAddress( dt.glWeightPointerOES, glWeightPointerOES, "glWeightPointerOES" );
    if( dt.glWeightPointerOES == NULL ) {
      dt.glWeightPointerOES = missing_glWeightPointerOES;
    }

    // GL_OES_single_precision

    _getProcAddress( dt.glClearDepthfOES, glClearDepthfOES, "glClearDepthfOES" );
    if( dt.glClearDepthfOES == NULL ) {
      dt.glClearDepthfOES = missing_glClearDepthfOES;
    }
    _getProcAddress( dt.glClipPlanefOES, glClipPlanefOES, "glClipPlanefOES" );
    if( dt.glClipPlanefOES == NULL ) {
      dt.glClipPlanefOES = missing_glClipPlanefOES;
    }
    _getProcAddress( dt.glDepthRangefOES, glDepthRangefOES, "glDepthRangefOES" );
    if( dt.glDepthRangefOES == NULL ) {
      dt.glDepthRangefOES = missing_glDepthRangefOES;
    }
    _getProcAddress( dt.glFrustumfOES, glFrustumfOES, "glFrustumfOES" );
    if( dt.glFrustumfOES == NULL ) {
      dt.glFrustumfOES = missing_glFrustumfOES;
    }
    _getProcAddress( dt.glGetClipPlanefOES, glGetClipPlanefOES, "glGetClipPlanefOES" );
    if( dt.glGetClipPlanefOES == NULL ) {
      dt.glGetClipPlanefOES = missing_glGetClipPlanefOES;
    }
    _getProcAddress( dt.glOrthofOES, glOrthofOES, "glOrthofOES" );
    if( dt.glOrthofOES == NULL ) {
      dt.glOrthofOES = missing_glOrthofOES;
    }

    // GL_OES_texture_3D

    _getProcAddress( dt.glCompressedTexImage3DOES, glCompressedTexImage3DOES, "glCompressedTexImage3DOES" );
    if( dt.glCompressedTexImage3DOES == NULL ) {
      dt.glCompressedTexImage3DOES = missing_glCompressedTexImage3DOES;
    }
    _getProcAddress( dt.glCompressedTexSubImage3DOES, glCompressedTexSubImage3DOES, "glCompressedTexSubImage3DOES" );
    if( dt.glCompressedTexSubImage3DOES == NULL ) {
      dt.glCompressedTexSubImage3DOES = missing_glCompressedTexSubImage3DOES;
    }
    _getProcAddress( dt.glCopyTexSubImage3DOES, glCopyTexSubImage3DOES, "glCopyTexSubImage3DOES" );
    if( dt.glCopyTexSubImage3DOES == NULL ) {
      dt.glCopyTexSubImage3DOES = missing_glCopyTexSubImage3DOES;
    }
    _getProcAddress( dt.glFramebufferTexture3DOES, glFramebufferTexture3DOES, "glFramebufferTexture3DOES" );
    if( dt.glFramebufferTexture3DOES == NULL ) {
      dt.glFramebufferTexture3DOES = missing_glFramebufferTexture3DOES;
    }
    _getProcAddress( dt.glTexImage3DOES, glTexImage3DOES, "glTexImage3DOES" );
    if( dt.glTexImage3DOES == NULL ) {
      dt.glTexImage3DOES = missing_glTexImage3DOES;
    }
    _getProcAddress( dt.glTexSubImage3DOES, glTexSubImage3DOES, "glTexSubImage3DOES" );
    if( dt.glTexSubImage3DOES == NULL ) {
      dt.glTexSubImage3DOES = missing_glTexSubImage3DOES;
    }

    // GL_OES_texture_cube_map

    _getProcAddress( dt.glGetTexGenfvOES, glGetTexGenfvOES, "glGetTexGenfvOES" );
    if( dt.glGetTexGenfvOES == NULL ) {
      dt.glGetTexGenfvOES = missing_glGetTexGenfvOES;
    }
    _getProcAddress( dt.glGetTexGenivOES, glGetTexGenivOES, "glGetTexGenivOES" );
    if( dt.glGetTexGenivOES == NULL ) {
      dt.glGetTexGenivOES = missing_glGetTexGenivOES;
    }
    _getProcAddress( dt.glGetTexGenxvOES, glGetTexGenxvOES, "glGetTexGenxvOES" );
    if( dt.glGetTexGenxvOES == NULL ) {
      dt.glGetTexGenxvOES = missing_glGetTexGenxvOES;
    }
    _getProcAddress( dt.glTexGenfOES, glTexGenfOES, "glTexGenfOES" );
    if( dt.glTexGenfOES == NULL ) {
      dt.glTexGenfOES = missing_glTexGenfOES;
    }
    _getProcAddress( dt.glTexGenfvOES, glTexGenfvOES, "glTexGenfvOES" );
    if( dt.glTexGenfvOES == NULL ) {
      dt.glTexGenfvOES = missing_glTexGenfvOES;
    }
    _getProcAddress( dt.glTexGeniOES, glTexGeniOES, "glTexGeniOES" );
    if( dt.glTexGeniOES == NULL ) {
      dt.glTexGeniOES = missing_glTexGeniOES;
    }
    _getProcAddress( dt.glTexGenivOES, glTexGenivOES, "glTexGenivOES" );
    if( dt.glTexGenivOES == NULL ) {
      dt.glTexGenivOES = missing_glTexGenivOES;
    }
    _getProcAddress( dt.glTexGenxOES, glTexGenxOES, "glTexGenxOES" );
    if( dt.glTexGenxOES == NULL ) {
      dt.glTexGenxOES = missing_glTexGenxOES;
    }
    _getProcAddress( dt.glTexGenxvOES, glTexGenxvOES, "glTexGenxvOES" );
    if( dt.glTexGenxvOES == NULL ) {
      dt.glTexGenxvOES = missing_glTexGenxvOES;
    }

    // GL_OES_vertex_array_object

    _getProcAddress( dt.glBindVertexArrayOES, glBindVertexArrayOES, "glBindVertexArrayOES" );
    if( dt.glBindVertexArrayOES == NULL ) {
      dt.glBindVertexArrayOES = missing_glBindVertexArrayOES;
    }
    _getProcAddress( dt.glDeleteVertexArraysOES, glDeleteVertexArraysOES, "glDeleteVertexArraysOES" );
    if( dt.glDeleteVertexArraysOES == NULL ) {
      dt.glDeleteVertexArraysOES = missing_glDeleteVertexArraysOES;
    }
    _getProcAddress( dt.glGenVertexArraysOES, glGenVertexArraysOES, "glGenVertexArraysOES" );
    if( dt.glGenVertexArraysOES == NULL ) {
      dt.glGenVertexArraysOES = missing_glGenVertexArraysOES;
    }
    _getProcAddress( dt.glIsVertexArrayOES, glIsVertexArrayOES, "glIsVertexArrayOES" );
    if( dt.glIsVertexArrayOES == NULL ) {
      dt.glIsVertexArrayOES = missing_glIsVertexArrayOES;
    }

    // GL_PGI_misc_hints

    _getProcAddress( dt.glHintPGI, glHintPGI, "glHintPGI" );
    if( dt.glHintPGI == NULL ) {
      dt.glHintPGI = missing_glHintPGI;
    }

    // GL_QCOM_alpha_test

    _getProcAddress( dt.glAlphaFuncQCOM, glAlphaFuncQCOM, "glAlphaFuncQCOM" );
    if( dt.glAlphaFuncQCOM == NULL ) {
      dt.glAlphaFuncQCOM = missing_glAlphaFuncQCOM;
    }

    // GL_QCOM_driver_control

    _getProcAddress( dt.glDisableDriverControlQCOM, glDisableDriverControlQCOM, "glDisableDriverControlQCOM" );
    if( dt.glDisableDriverControlQCOM == NULL ) {
      dt.glDisableDriverControlQCOM = missing_glDisableDriverControlQCOM;
    }
    _getProcAddress( dt.glEnableDriverControlQCOM, glEnableDriverControlQCOM, "glEnableDriverControlQCOM" );
    if( dt.glEnableDriverControlQCOM == NULL ) {
      dt.glEnableDriverControlQCOM = missing_glEnableDriverControlQCOM;
    }
    _getProcAddress( dt.glGetDriverControlStringQCOM, glGetDriverControlStringQCOM, "glGetDriverControlStringQCOM" );
    if( dt.glGetDriverControlStringQCOM == NULL ) {
      dt.glGetDriverControlStringQCOM = missing_glGetDriverControlStringQCOM;
    }
    _getProcAddress( dt.glGetDriverControlsQCOM, glGetDriverControlsQCOM, "glGetDriverControlsQCOM" );
    if( dt.glGetDriverControlsQCOM == NULL ) {
      dt.glGetDriverControlsQCOM = missing_glGetDriverControlsQCOM;
    }

    // GL_QCOM_extended_get

    _getProcAddress( dt.glExtGetBufferPointervQCOM, glExtGetBufferPointervQCOM, "glExtGetBufferPointervQCOM" );
    if( dt.glExtGetBufferPointervQCOM == NULL ) {
      dt.glExtGetBufferPointervQCOM = missing_glExtGetBufferPointervQCOM;
    }
    _getProcAddress( dt.glExtGetBuffersQCOM, glExtGetBuffersQCOM, "glExtGetBuffersQCOM" );
    if( dt.glExtGetBuffersQCOM == NULL ) {
      dt.glExtGetBuffersQCOM = missing_glExtGetBuffersQCOM;
    }
    _getProcAddress( dt.glExtGetFramebuffersQCOM, glExtGetFramebuffersQCOM, "glExtGetFramebuffersQCOM" );
    if( dt.glExtGetFramebuffersQCOM == NULL ) {
      dt.glExtGetFramebuffersQCOM = missing_glExtGetFramebuffersQCOM;
    }
    _getProcAddress( dt.glExtGetRenderbuffersQCOM, glExtGetRenderbuffersQCOM, "glExtGetRenderbuffersQCOM" );
    if( dt.glExtGetRenderbuffersQCOM == NULL ) {
      dt.glExtGetRenderbuffersQCOM = missing_glExtGetRenderbuffersQCOM;
    }
    _getProcAddress( dt.glExtGetTexLevelParameterivQCOM, glExtGetTexLevelParameterivQCOM, "glExtGetTexLevelParameterivQCOM" );
    if( dt.glExtGetTexLevelParameterivQCOM == NULL ) {
      dt.glExtGetTexLevelParameterivQCOM = missing_glExtGetTexLevelParameterivQCOM;
    }
    _getProcAddress( dt.glExtGetTexSubImageQCOM, glExtGetTexSubImageQCOM, "glExtGetTexSubImageQCOM" );
    if( dt.glExtGetTexSubImageQCOM == NULL ) {
      dt.glExtGetTexSubImageQCOM = missing_glExtGetTexSubImageQCOM;
    }
    _getProcAddress( dt.glExtGetTexturesQCOM, glExtGetTexturesQCOM, "glExtGetTexturesQCOM" );
    if( dt.glExtGetTexturesQCOM == NULL ) {
      dt.glExtGetTexturesQCOM = missing_glExtGetTexturesQCOM;
    }
    _getProcAddress( dt.glExtTexObjectStateOverrideiQCOM, glExtTexObjectStateOverrideiQCOM, "glExtTexObjectStateOverrideiQCOM" );
    if( dt.glExtTexObjectStateOverrideiQCOM == NULL ) {
      dt.glExtTexObjectStateOverrideiQCOM = missing_glExtTexObjectStateOverrideiQCOM;
    }

    // GL_QCOM_extended_get2

    _getProcAddress( dt.glExtGetProgramBinarySourceQCOM, glExtGetProgramBinarySourceQCOM, "glExtGetProgramBinarySourceQCOM" );
    if( dt.glExtGetProgramBinarySourceQCOM == NULL ) {
      dt.glExtGetProgramBinarySourceQCOM = missing_glExtGetProgramBinarySourceQCOM;
    }
    _getProcAddress( dt.glExtGetProgramsQCOM, glExtGetProgramsQCOM, "glExtGetProgramsQCOM" );
    if( dt.glExtGetProgramsQCOM == NULL ) {
      dt.glExtGetProgramsQCOM = missing_glExtGetProgramsQCOM;
    }
    _getProcAddress( dt.glExtGetShadersQCOM, glExtGetShadersQCOM, "glExtGetShadersQCOM" );
    if( dt.glExtGetShadersQCOM == NULL ) {
      dt.glExtGetShadersQCOM = missing_glExtGetShadersQCOM;
    }
    _getProcAddress( dt.glExtIsProgramBinaryQCOM, glExtIsProgramBinaryQCOM, "glExtIsProgramBinaryQCOM" );
    if( dt.glExtIsProgramBinaryQCOM == NULL ) {
      dt.glExtIsProgramBinaryQCOM = missing_glExtIsProgramBinaryQCOM;
    }

    // GL_QCOM_tiled_rendering

    _getProcAddress( dt.glEndTilingQCOM, glEndTilingQCOM, "glEndTilingQCOM" );
    if( dt.glEndTilingQCOM == NULL ) {
      dt.glEndTilingQCOM = missing_glEndTilingQCOM;
    }
    _getProcAddress( dt.glStartTilingQCOM, glStartTilingQCOM, "glStartTilingQCOM" );
    if( dt.glStartTilingQCOM == NULL ) {
      dt.glStartTilingQCOM = missing_glStartTilingQCOM;
    }

    // GL_REGAL_ES1_0_compatibility

    _getProcAddress( dt.glAlphaFuncx, glAlphaFuncx, "glAlphaFuncx" );
    if( dt.glAlphaFuncx == NULL ) {
      dt.glAlphaFuncx = missing_glAlphaFuncx;
    }
    _getProcAddress( dt.glClearColorx, glClearColorx, "glClearColorx" );
    if( dt.glClearColorx == NULL ) {
      dt.glClearColorx = missing_glClearColorx;
    }
    _getProcAddress( dt.glClearDepthx, glClearDepthx, "glClearDepthx" );
    if( dt.glClearDepthx == NULL ) {
      dt.glClearDepthx = missing_glClearDepthx;
    }
    _getProcAddress( dt.glColor4x, glColor4x, "glColor4x" );
    if( dt.glColor4x == NULL ) {
      dt.glColor4x = missing_glColor4x;
    }
    _getProcAddress( dt.glDepthRangex, glDepthRangex, "glDepthRangex" );
    if( dt.glDepthRangex == NULL ) {
      dt.glDepthRangex = missing_glDepthRangex;
    }
    _getProcAddress( dt.glFogx, glFogx, "glFogx" );
    if( dt.glFogx == NULL ) {
      dt.glFogx = missing_glFogx;
    }
    _getProcAddress( dt.glFogxv, glFogxv, "glFogxv" );
    if( dt.glFogxv == NULL ) {
      dt.glFogxv = missing_glFogxv;
    }
    _getProcAddress( dt.glFrustumf, glFrustumf, "glFrustumf" );
    if( dt.glFrustumf == NULL ) {
      dt.glFrustumf = missing_glFrustumf;
    }
    _getProcAddress( dt.glFrustumx, glFrustumx, "glFrustumx" );
    if( dt.glFrustumx == NULL ) {
      dt.glFrustumx = missing_glFrustumx;
    }
    _getProcAddress( dt.glLightModelx, glLightModelx, "glLightModelx" );
    if( dt.glLightModelx == NULL ) {
      dt.glLightModelx = missing_glLightModelx;
    }
    _getProcAddress( dt.glLightModelxv, glLightModelxv, "glLightModelxv" );
    if( dt.glLightModelxv == NULL ) {
      dt.glLightModelxv = missing_glLightModelxv;
    }
    _getProcAddress( dt.glLightx, glLightx, "glLightx" );
    if( dt.glLightx == NULL ) {
      dt.glLightx = missing_glLightx;
    }
    _getProcAddress( dt.glLightxv, glLightxv, "glLightxv" );
    if( dt.glLightxv == NULL ) {
      dt.glLightxv = missing_glLightxv;
    }
    _getProcAddress( dt.glLineWidthx, glLineWidthx, "glLineWidthx" );
    if( dt.glLineWidthx == NULL ) {
      dt.glLineWidthx = missing_glLineWidthx;
    }
    _getProcAddress( dt.glLoadMatrixx, glLoadMatrixx, "glLoadMatrixx" );
    if( dt.glLoadMatrixx == NULL ) {
      dt.glLoadMatrixx = missing_glLoadMatrixx;
    }
    _getProcAddress( dt.glMaterialx, glMaterialx, "glMaterialx" );
    if( dt.glMaterialx == NULL ) {
      dt.glMaterialx = missing_glMaterialx;
    }
    _getProcAddress( dt.glMaterialxv, glMaterialxv, "glMaterialxv" );
    if( dt.glMaterialxv == NULL ) {
      dt.glMaterialxv = missing_glMaterialxv;
    }
    _getProcAddress( dt.glMultMatrixx, glMultMatrixx, "glMultMatrixx" );
    if( dt.glMultMatrixx == NULL ) {
      dt.glMultMatrixx = missing_glMultMatrixx;
    }
    _getProcAddress( dt.glMultiTexCoord4x, glMultiTexCoord4x, "glMultiTexCoord4x" );
    if( dt.glMultiTexCoord4x == NULL ) {
      dt.glMultiTexCoord4x = missing_glMultiTexCoord4x;
    }
    _getProcAddress( dt.glNormal3x, glNormal3x, "glNormal3x" );
    if( dt.glNormal3x == NULL ) {
      dt.glNormal3x = missing_glNormal3x;
    }
    _getProcAddress( dt.glOrthof, glOrthof, "glOrthof" );
    if( dt.glOrthof == NULL ) {
      dt.glOrthof = missing_glOrthof;
    }
    _getProcAddress( dt.glOrthox, glOrthox, "glOrthox" );
    if( dt.glOrthox == NULL ) {
      dt.glOrthox = missing_glOrthox;
    }
    _getProcAddress( dt.glPointSizex, glPointSizex, "glPointSizex" );
    if( dt.glPointSizex == NULL ) {
      dt.glPointSizex = missing_glPointSizex;
    }
    _getProcAddress( dt.glPolygonOffsetx, glPolygonOffsetx, "glPolygonOffsetx" );
    if( dt.glPolygonOffsetx == NULL ) {
      dt.glPolygonOffsetx = missing_glPolygonOffsetx;
    }
    _getProcAddress( dt.glRotatex, glRotatex, "glRotatex" );
    if( dt.glRotatex == NULL ) {
      dt.glRotatex = missing_glRotatex;
    }
    _getProcAddress( dt.glSampleCoveragex, glSampleCoveragex, "glSampleCoveragex" );
    if( dt.glSampleCoveragex == NULL ) {
      dt.glSampleCoveragex = missing_glSampleCoveragex;
    }
    _getProcAddress( dt.glScalex, glScalex, "glScalex" );
    if( dt.glScalex == NULL ) {
      dt.glScalex = missing_glScalex;
    }
    _getProcAddress( dt.glTexEnvx, glTexEnvx, "glTexEnvx" );
    if( dt.glTexEnvx == NULL ) {
      dt.glTexEnvx = missing_glTexEnvx;
    }
    _getProcAddress( dt.glTexEnvxv, glTexEnvxv, "glTexEnvxv" );
    if( dt.glTexEnvxv == NULL ) {
      dt.glTexEnvxv = missing_glTexEnvxv;
    }
    _getProcAddress( dt.glTexParameterx, glTexParameterx, "glTexParameterx" );
    if( dt.glTexParameterx == NULL ) {
      dt.glTexParameterx = missing_glTexParameterx;
    }
    _getProcAddress( dt.glTranslatex, glTranslatex, "glTranslatex" );
    if( dt.glTranslatex == NULL ) {
      dt.glTranslatex = missing_glTranslatex;
    }

    // GL_REGAL_ES1_1_compatibility

    _getProcAddress( dt.glClipPlanef, glClipPlanef, "glClipPlanef" );
    if( dt.glClipPlanef == NULL ) {
      dt.glClipPlanef = missing_glClipPlanef;
    }
    _getProcAddress( dt.glClipPlanex, glClipPlanex, "glClipPlanex" );
    if( dt.glClipPlanex == NULL ) {
      dt.glClipPlanex = missing_glClipPlanex;
    }
    _getProcAddress( dt.glGetClipPlanef, glGetClipPlanef, "glGetClipPlanef" );
    if( dt.glGetClipPlanef == NULL ) {
      dt.glGetClipPlanef = missing_glGetClipPlanef;
    }
    _getProcAddress( dt.glGetClipPlanex, glGetClipPlanex, "glGetClipPlanex" );
    if( dt.glGetClipPlanex == NULL ) {
      dt.glGetClipPlanex = missing_glGetClipPlanex;
    }
    _getProcAddress( dt.glGetFixedv, glGetFixedv, "glGetFixedv" );
    if( dt.glGetFixedv == NULL ) {
      dt.glGetFixedv = missing_glGetFixedv;
    }
    _getProcAddress( dt.glGetLightxv, glGetLightxv, "glGetLightxv" );
    if( dt.glGetLightxv == NULL ) {
      dt.glGetLightxv = missing_glGetLightxv;
    }
    _getProcAddress( dt.glGetMaterialxv, glGetMaterialxv, "glGetMaterialxv" );
    if( dt.glGetMaterialxv == NULL ) {
      dt.glGetMaterialxv = missing_glGetMaterialxv;
    }
    _getProcAddress( dt.glGetTexEnvxv, glGetTexEnvxv, "glGetTexEnvxv" );
    if( dt.glGetTexEnvxv == NULL ) {
      dt.glGetTexEnvxv = missing_glGetTexEnvxv;
    }
    _getProcAddress( dt.glGetTexParameterxv, glGetTexParameterxv, "glGetTexParameterxv" );
    if( dt.glGetTexParameterxv == NULL ) {
      dt.glGetTexParameterxv = missing_glGetTexParameterxv;
    }
    _getProcAddress( dt.glPointParameterx, glPointParameterx, "glPointParameterx" );
    if( dt.glPointParameterx == NULL ) {
      dt.glPointParameterx = missing_glPointParameterx;
    }
    _getProcAddress( dt.glPointParameterxv, glPointParameterxv, "glPointParameterxv" );
    if( dt.glPointParameterxv == NULL ) {
      dt.glPointParameterxv = missing_glPointParameterxv;
    }
    _getProcAddress( dt.glPointSizePointerOES, glPointSizePointerOES, "glPointSizePointerOES" );
    if( dt.glPointSizePointerOES == NULL ) {
      dt.glPointSizePointerOES = missing_glPointSizePointerOES;
    }
    _getProcAddress( dt.glTexParameterxv, glTexParameterxv, "glTexParameterxv" );
    if( dt.glTexParameterxv == NULL ) {
      dt.glTexParameterxv = missing_glTexParameterxv;
    }

    // GL_REGAL_log

    _getProcAddress( dt.glLogMessageCallbackREGAL, glLogMessageCallbackREGAL, "glLogMessageCallbackREGAL" );
    if( dt.glLogMessageCallbackREGAL == NULL ) {
      dt.glLogMessageCallbackREGAL = missing_glLogMessageCallbackREGAL;
    }

    // GL_SGIS_detail_texture

    _getProcAddress( dt.glDetailTexFuncSGIS, glDetailTexFuncSGIS, "glDetailTexFuncSGIS" );
    if( dt.glDetailTexFuncSGIS == NULL ) {
      dt.glDetailTexFuncSGIS = missing_glDetailTexFuncSGIS;
    }
    _getProcAddress( dt.glGetDetailTexFuncSGIS, glGetDetailTexFuncSGIS, "glGetDetailTexFuncSGIS" );
    if( dt.glGetDetailTexFuncSGIS == NULL ) {
      dt.glGetDetailTexFuncSGIS = missing_glGetDetailTexFuncSGIS;
    }

    // GL_SGIS_fog_function

    _getProcAddress( dt.glFogFuncSGIS, glFogFuncSGIS, "glFogFuncSGIS" );
    if( dt.glFogFuncSGIS == NULL ) {
      dt.glFogFuncSGIS = missing_glFogFuncSGIS;
    }
    _getProcAddress( dt.glGetFogFuncSGIS, glGetFogFuncSGIS, "glGetFogFuncSGIS" );
    if( dt.glGetFogFuncSGIS == NULL ) {
      dt.glGetFogFuncSGIS = missing_glGetFogFuncSGIS;
    }

    // GL_SGIS_multisample

    _getProcAddress( dt.glSampleMaskSGIS, glSampleMaskSGIS, "glSampleMaskSGIS" );
    if( dt.glSampleMaskSGIS == NULL ) {
      dt.glSampleMaskSGIS = missing_glSampleMaskSGIS;
    }
    _getProcAddress( dt.glSamplePatternSGIS, glSamplePatternSGIS, "glSamplePatternSGIS" );
    if( dt.glSamplePatternSGIS == NULL ) {
      dt.glSamplePatternSGIS = missing_glSamplePatternSGIS;
    }

    // GL_SGIS_pixel_texture

    _getProcAddress( dt.glGetPixelTexGenParameterfvSGIS, glGetPixelTexGenParameterfvSGIS, "glGetPixelTexGenParameterfvSGIS" );
    if( dt.glGetPixelTexGenParameterfvSGIS == NULL ) {
      dt.glGetPixelTexGenParameterfvSGIS = missing_glGetPixelTexGenParameterfvSGIS;
    }
    _getProcAddress( dt.glGetPixelTexGenParameterivSGIS, glGetPixelTexGenParameterivSGIS, "glGetPixelTexGenParameterivSGIS" );
    if( dt.glGetPixelTexGenParameterivSGIS == NULL ) {
      dt.glGetPixelTexGenParameterivSGIS = missing_glGetPixelTexGenParameterivSGIS;
    }
    _getProcAddress( dt.glPixelTexGenParameterfSGIS, glPixelTexGenParameterfSGIS, "glPixelTexGenParameterfSGIS" );
    if( dt.glPixelTexGenParameterfSGIS == NULL ) {
      dt.glPixelTexGenParameterfSGIS = missing_glPixelTexGenParameterfSGIS;
    }
    _getProcAddress( dt.glPixelTexGenParameterfvSGIS, glPixelTexGenParameterfvSGIS, "glPixelTexGenParameterfvSGIS" );
    if( dt.glPixelTexGenParameterfvSGIS == NULL ) {
      dt.glPixelTexGenParameterfvSGIS = missing_glPixelTexGenParameterfvSGIS;
    }
    _getProcAddress( dt.glPixelTexGenParameteriSGIS, glPixelTexGenParameteriSGIS, "glPixelTexGenParameteriSGIS" );
    if( dt.glPixelTexGenParameteriSGIS == NULL ) {
      dt.glPixelTexGenParameteriSGIS = missing_glPixelTexGenParameteriSGIS;
    }
    _getProcAddress( dt.glPixelTexGenParameterivSGIS, glPixelTexGenParameterivSGIS, "glPixelTexGenParameterivSGIS" );
    if( dt.glPixelTexGenParameterivSGIS == NULL ) {
      dt.glPixelTexGenParameterivSGIS = missing_glPixelTexGenParameterivSGIS;
    }

    // GL_SGIS_point_parameters

    _getProcAddress( dt.glPointParameterfSGIS, glPointParameterfSGIS, "glPointParameterfSGIS" );
    if( dt.glPointParameterfSGIS == NULL ) {
      dt.glPointParameterfSGIS = missing_glPointParameterfSGIS;
    }
    _getProcAddress( dt.glPointParameterfvSGIS, glPointParameterfvSGIS, "glPointParameterfvSGIS" );
    if( dt.glPointParameterfvSGIS == NULL ) {
      dt.glPointParameterfvSGIS = missing_glPointParameterfvSGIS;
    }

    // GL_SGIS_sharpen_texture

    _getProcAddress( dt.glGetSharpenTexFuncSGIS, glGetSharpenTexFuncSGIS, "glGetSharpenTexFuncSGIS" );
    if( dt.glGetSharpenTexFuncSGIS == NULL ) {
      dt.glGetSharpenTexFuncSGIS = missing_glGetSharpenTexFuncSGIS;
    }
    _getProcAddress( dt.glSharpenTexFuncSGIS, glSharpenTexFuncSGIS, "glSharpenTexFuncSGIS" );
    if( dt.glSharpenTexFuncSGIS == NULL ) {
      dt.glSharpenTexFuncSGIS = missing_glSharpenTexFuncSGIS;
    }

    // GL_SGIS_texture4D

    _getProcAddress( dt.glTexImage4DSGIS, glTexImage4DSGIS, "glTexImage4DSGIS" );
    if( dt.glTexImage4DSGIS == NULL ) {
      dt.glTexImage4DSGIS = missing_glTexImage4DSGIS;
    }
    _getProcAddress( dt.glTexSubImage4DSGIS, glTexSubImage4DSGIS, "glTexSubImage4DSGIS" );
    if( dt.glTexSubImage4DSGIS == NULL ) {
      dt.glTexSubImage4DSGIS = missing_glTexSubImage4DSGIS;
    }

    // GL_SGIS_texture_color_mask

    _getProcAddress( dt.glTextureColorMaskSGIS, glTextureColorMaskSGIS, "glTextureColorMaskSGIS" );
    if( dt.glTextureColorMaskSGIS == NULL ) {
      dt.glTextureColorMaskSGIS = missing_glTextureColorMaskSGIS;
    }

    // GL_SGIS_texture_filter4

    _getProcAddress( dt.glGetTexFilterFuncSGIS, glGetTexFilterFuncSGIS, "glGetTexFilterFuncSGIS" );
    if( dt.glGetTexFilterFuncSGIS == NULL ) {
      dt.glGetTexFilterFuncSGIS = missing_glGetTexFilterFuncSGIS;
    }
    _getProcAddress( dt.glTexFilterFuncSGIS, glTexFilterFuncSGIS, "glTexFilterFuncSGIS" );
    if( dt.glTexFilterFuncSGIS == NULL ) {
      dt.glTexFilterFuncSGIS = missing_glTexFilterFuncSGIS;
    }

    // GL_SGIX_async

    _getProcAddress( dt.glAsyncMarkerSGIX, glAsyncMarkerSGIX, "glAsyncMarkerSGIX" );
    if( dt.glAsyncMarkerSGIX == NULL ) {
      dt.glAsyncMarkerSGIX = missing_glAsyncMarkerSGIX;
    }
    _getProcAddress( dt.glDeleteAsyncMarkersSGIX, glDeleteAsyncMarkersSGIX, "glDeleteAsyncMarkersSGIX" );
    if( dt.glDeleteAsyncMarkersSGIX == NULL ) {
      dt.glDeleteAsyncMarkersSGIX = missing_glDeleteAsyncMarkersSGIX;
    }
    _getProcAddress( dt.glFinishAsyncSGIX, glFinishAsyncSGIX, "glFinishAsyncSGIX" );
    if( dt.glFinishAsyncSGIX == NULL ) {
      dt.glFinishAsyncSGIX = missing_glFinishAsyncSGIX;
    }
    _getProcAddress( dt.glGenAsyncMarkersSGIX, glGenAsyncMarkersSGIX, "glGenAsyncMarkersSGIX" );
    if( dt.glGenAsyncMarkersSGIX == NULL ) {
      dt.glGenAsyncMarkersSGIX = missing_glGenAsyncMarkersSGIX;
    }
    _getProcAddress( dt.glIsAsyncMarkerSGIX, glIsAsyncMarkerSGIX, "glIsAsyncMarkerSGIX" );
    if( dt.glIsAsyncMarkerSGIX == NULL ) {
      dt.glIsAsyncMarkerSGIX = missing_glIsAsyncMarkerSGIX;
    }
    _getProcAddress( dt.glPollAsyncSGIX, glPollAsyncSGIX, "glPollAsyncSGIX" );
    if( dt.glPollAsyncSGIX == NULL ) {
      dt.glPollAsyncSGIX = missing_glPollAsyncSGIX;
    }

    // GL_SGIX_flush_raster

    _getProcAddress( dt.glFlushRasterSGIX, glFlushRasterSGIX, "glFlushRasterSGIX" );
    if( dt.glFlushRasterSGIX == NULL ) {
      dt.glFlushRasterSGIX = missing_glFlushRasterSGIX;
    }

    // GL_SGIX_fog_texture

    _getProcAddress( dt.glTextureFogSGIX, glTextureFogSGIX, "glTextureFogSGIX" );
    if( dt.glTextureFogSGIX == NULL ) {
      dt.glTextureFogSGIX = missing_glTextureFogSGIX;
    }

    // GL_SGIX_fragment_lighting

    _getProcAddress( dt.glFragmentColorMaterialSGIX, glFragmentColorMaterialSGIX, "glFragmentColorMaterialSGIX" );
    if( dt.glFragmentColorMaterialSGIX == NULL ) {
      dt.glFragmentColorMaterialSGIX = missing_glFragmentColorMaterialSGIX;
    }
    _getProcAddress( dt.glFragmentLightModelfSGIX, glFragmentLightModelfSGIX, "glFragmentLightModelfSGIX" );
    if( dt.glFragmentLightModelfSGIX == NULL ) {
      dt.glFragmentLightModelfSGIX = missing_glFragmentLightModelfSGIX;
    }
    _getProcAddress( dt.glFragmentLightModelfvSGIX, glFragmentLightModelfvSGIX, "glFragmentLightModelfvSGIX" );
    if( dt.glFragmentLightModelfvSGIX == NULL ) {
      dt.glFragmentLightModelfvSGIX = missing_glFragmentLightModelfvSGIX;
    }
    _getProcAddress( dt.glFragmentLightModeliSGIX, glFragmentLightModeliSGIX, "glFragmentLightModeliSGIX" );
    if( dt.glFragmentLightModeliSGIX == NULL ) {
      dt.glFragmentLightModeliSGIX = missing_glFragmentLightModeliSGIX;
    }
    _getProcAddress( dt.glFragmentLightModelivSGIX, glFragmentLightModelivSGIX, "glFragmentLightModelivSGIX" );
    if( dt.glFragmentLightModelivSGIX == NULL ) {
      dt.glFragmentLightModelivSGIX = missing_glFragmentLightModelivSGIX;
    }
    _getProcAddress( dt.glFragmentLightfSGIX, glFragmentLightfSGIX, "glFragmentLightfSGIX" );
    if( dt.glFragmentLightfSGIX == NULL ) {
      dt.glFragmentLightfSGIX = missing_glFragmentLightfSGIX;
    }
    _getProcAddress( dt.glFragmentLightfvSGIX, glFragmentLightfvSGIX, "glFragmentLightfvSGIX" );
    if( dt.glFragmentLightfvSGIX == NULL ) {
      dt.glFragmentLightfvSGIX = missing_glFragmentLightfvSGIX;
    }
    _getProcAddress( dt.glFragmentLightiSGIX, glFragmentLightiSGIX, "glFragmentLightiSGIX" );
    if( dt.glFragmentLightiSGIX == NULL ) {
      dt.glFragmentLightiSGIX = missing_glFragmentLightiSGIX;
    }
    _getProcAddress( dt.glFragmentLightivSGIX, glFragmentLightivSGIX, "glFragmentLightivSGIX" );
    if( dt.glFragmentLightivSGIX == NULL ) {
      dt.glFragmentLightivSGIX = missing_glFragmentLightivSGIX;
    }
    _getProcAddress( dt.glFragmentMaterialfSGIX, glFragmentMaterialfSGIX, "glFragmentMaterialfSGIX" );
    if( dt.glFragmentMaterialfSGIX == NULL ) {
      dt.glFragmentMaterialfSGIX = missing_glFragmentMaterialfSGIX;
    }
    _getProcAddress( dt.glFragmentMaterialfvSGIX, glFragmentMaterialfvSGIX, "glFragmentMaterialfvSGIX" );
    if( dt.glFragmentMaterialfvSGIX == NULL ) {
      dt.glFragmentMaterialfvSGIX = missing_glFragmentMaterialfvSGIX;
    }
    _getProcAddress( dt.glFragmentMaterialiSGIX, glFragmentMaterialiSGIX, "glFragmentMaterialiSGIX" );
    if( dt.glFragmentMaterialiSGIX == NULL ) {
      dt.glFragmentMaterialiSGIX = missing_glFragmentMaterialiSGIX;
    }
    _getProcAddress( dt.glFragmentMaterialivSGIX, glFragmentMaterialivSGIX, "glFragmentMaterialivSGIX" );
    if( dt.glFragmentMaterialivSGIX == NULL ) {
      dt.glFragmentMaterialivSGIX = missing_glFragmentMaterialivSGIX;
    }
    _getProcAddress( dt.glGetFragmentLightfvSGIX, glGetFragmentLightfvSGIX, "glGetFragmentLightfvSGIX" );
    if( dt.glGetFragmentLightfvSGIX == NULL ) {
      dt.glGetFragmentLightfvSGIX = missing_glGetFragmentLightfvSGIX;
    }
    _getProcAddress( dt.glGetFragmentLightivSGIX, glGetFragmentLightivSGIX, "glGetFragmentLightivSGIX" );
    if( dt.glGetFragmentLightivSGIX == NULL ) {
      dt.glGetFragmentLightivSGIX = missing_glGetFragmentLightivSGIX;
    }
    _getProcAddress( dt.glGetFragmentMaterialfvSGIX, glGetFragmentMaterialfvSGIX, "glGetFragmentMaterialfvSGIX" );
    if( dt.glGetFragmentMaterialfvSGIX == NULL ) {
      dt.glGetFragmentMaterialfvSGIX = missing_glGetFragmentMaterialfvSGIX;
    }
    _getProcAddress( dt.glGetFragmentMaterialivSGIX, glGetFragmentMaterialivSGIX, "glGetFragmentMaterialivSGIX" );
    if( dt.glGetFragmentMaterialivSGIX == NULL ) {
      dt.glGetFragmentMaterialivSGIX = missing_glGetFragmentMaterialivSGIX;
    }
    _getProcAddress( dt.glLightEnviSGIX, glLightEnviSGIX, "glLightEnviSGIX" );
    if( dt.glLightEnviSGIX == NULL ) {
      dt.glLightEnviSGIX = missing_glLightEnviSGIX;
    }

    // GL_SGIX_framezoom

    _getProcAddress( dt.glFrameZoomSGIX, glFrameZoomSGIX, "glFrameZoomSGIX" );
    if( dt.glFrameZoomSGIX == NULL ) {
      dt.glFrameZoomSGIX = missing_glFrameZoomSGIX;
    }

    // GL_SGIX_igloo_interface

    _getProcAddress( dt.glIglooInterfaceSGIX, glIglooInterfaceSGIX, "glIglooInterfaceSGIX" );
    if( dt.glIglooInterfaceSGIX == NULL ) {
      dt.glIglooInterfaceSGIX = missing_glIglooInterfaceSGIX;
    }

    // GL_SGIX_instruments

    _getProcAddress( dt.glGetInstrumentsSGIX, glGetInstrumentsSGIX, "glGetInstrumentsSGIX" );
    if( dt.glGetInstrumentsSGIX == NULL ) {
      dt.glGetInstrumentsSGIX = missing_glGetInstrumentsSGIX;
    }
    _getProcAddress( dt.glInstrumentsBufferSGIX, glInstrumentsBufferSGIX, "glInstrumentsBufferSGIX" );
    if( dt.glInstrumentsBufferSGIX == NULL ) {
      dt.glInstrumentsBufferSGIX = missing_glInstrumentsBufferSGIX;
    }
    _getProcAddress( dt.glPollInstrumentsSGIX, glPollInstrumentsSGIX, "glPollInstrumentsSGIX" );
    if( dt.glPollInstrumentsSGIX == NULL ) {
      dt.glPollInstrumentsSGIX = missing_glPollInstrumentsSGIX;
    }
    _getProcAddress( dt.glReadInstrumentsSGIX, glReadInstrumentsSGIX, "glReadInstrumentsSGIX" );
    if( dt.glReadInstrumentsSGIX == NULL ) {
      dt.glReadInstrumentsSGIX = missing_glReadInstrumentsSGIX;
    }
    _getProcAddress( dt.glStartInstrumentsSGIX, glStartInstrumentsSGIX, "glStartInstrumentsSGIX" );
    if( dt.glStartInstrumentsSGIX == NULL ) {
      dt.glStartInstrumentsSGIX = missing_glStartInstrumentsSGIX;
    }
    _getProcAddress( dt.glStopInstrumentsSGIX, glStopInstrumentsSGIX, "glStopInstrumentsSGIX" );
    if( dt.glStopInstrumentsSGIX == NULL ) {
      dt.glStopInstrumentsSGIX = missing_glStopInstrumentsSGIX;
    }

    // GL_SGIX_list_priority

    _getProcAddress( dt.glGetListParameterfvSGIX, glGetListParameterfvSGIX, "glGetListParameterfvSGIX" );
    if( dt.glGetListParameterfvSGIX == NULL ) {
      dt.glGetListParameterfvSGIX = missing_glGetListParameterfvSGIX;
    }
    _getProcAddress( dt.glGetListParameterivSGIX, glGetListParameterivSGIX, "glGetListParameterivSGIX" );
    if( dt.glGetListParameterivSGIX == NULL ) {
      dt.glGetListParameterivSGIX = missing_glGetListParameterivSGIX;
    }
    _getProcAddress( dt.glListParameterfSGIX, glListParameterfSGIX, "glListParameterfSGIX" );
    if( dt.glListParameterfSGIX == NULL ) {
      dt.glListParameterfSGIX = missing_glListParameterfSGIX;
    }
    _getProcAddress( dt.glListParameterfvSGIX, glListParameterfvSGIX, "glListParameterfvSGIX" );
    if( dt.glListParameterfvSGIX == NULL ) {
      dt.glListParameterfvSGIX = missing_glListParameterfvSGIX;
    }
    _getProcAddress( dt.glListParameteriSGIX, glListParameteriSGIX, "glListParameteriSGIX" );
    if( dt.glListParameteriSGIX == NULL ) {
      dt.glListParameteriSGIX = missing_glListParameteriSGIX;
    }
    _getProcAddress( dt.glListParameterivSGIX, glListParameterivSGIX, "glListParameterivSGIX" );
    if( dt.glListParameterivSGIX == NULL ) {
      dt.glListParameterivSGIX = missing_glListParameterivSGIX;
    }

    // GL_SGIX_pixel_texture

    _getProcAddress( dt.glPixelTexGenSGIX, glPixelTexGenSGIX, "glPixelTexGenSGIX" );
    if( dt.glPixelTexGenSGIX == NULL ) {
      dt.glPixelTexGenSGIX = missing_glPixelTexGenSGIX;
    }

    // GL_SGIX_polynomial_ffd

    _getProcAddress( dt.glDeformSGIX, glDeformSGIX, "glDeformSGIX" );
    if( dt.glDeformSGIX == NULL ) {
      dt.glDeformSGIX = missing_glDeformSGIX;
    }
    _getProcAddress( dt.glDeformationMap3dSGIX, glDeformationMap3dSGIX, "glDeformationMap3dSGIX" );
    if( dt.glDeformationMap3dSGIX == NULL ) {
      dt.glDeformationMap3dSGIX = missing_glDeformationMap3dSGIX;
    }
    _getProcAddress( dt.glDeformationMap3fSGIX, glDeformationMap3fSGIX, "glDeformationMap3fSGIX" );
    if( dt.glDeformationMap3fSGIX == NULL ) {
      dt.glDeformationMap3fSGIX = missing_glDeformationMap3fSGIX;
    }
    _getProcAddress( dt.glLoadIdentityDeformationMapSGIX, glLoadIdentityDeformationMapSGIX, "glLoadIdentityDeformationMapSGIX" );
    if( dt.glLoadIdentityDeformationMapSGIX == NULL ) {
      dt.glLoadIdentityDeformationMapSGIX = missing_glLoadIdentityDeformationMapSGIX;
    }

    // GL_SGIX_reference_plane

    _getProcAddress( dt.glReferencePlaneSGIX, glReferencePlaneSGIX, "glReferencePlaneSGIX" );
    if( dt.glReferencePlaneSGIX == NULL ) {
      dt.glReferencePlaneSGIX = missing_glReferencePlaneSGIX;
    }

    // GL_SGIX_sprite

    _getProcAddress( dt.glSpriteParameterfSGIX, glSpriteParameterfSGIX, "glSpriteParameterfSGIX" );
    if( dt.glSpriteParameterfSGIX == NULL ) {
      dt.glSpriteParameterfSGIX = missing_glSpriteParameterfSGIX;
    }
    _getProcAddress( dt.glSpriteParameterfvSGIX, glSpriteParameterfvSGIX, "glSpriteParameterfvSGIX" );
    if( dt.glSpriteParameterfvSGIX == NULL ) {
      dt.glSpriteParameterfvSGIX = missing_glSpriteParameterfvSGIX;
    }
    _getProcAddress( dt.glSpriteParameteriSGIX, glSpriteParameteriSGIX, "glSpriteParameteriSGIX" );
    if( dt.glSpriteParameteriSGIX == NULL ) {
      dt.glSpriteParameteriSGIX = missing_glSpriteParameteriSGIX;
    }
    _getProcAddress( dt.glSpriteParameterivSGIX, glSpriteParameterivSGIX, "glSpriteParameterivSGIX" );
    if( dt.glSpriteParameterivSGIX == NULL ) {
      dt.glSpriteParameterivSGIX = missing_glSpriteParameterivSGIX;
    }

    // GL_SGIX_tag_sample_buffer

    _getProcAddress( dt.glTagSampleBufferSGIX, glTagSampleBufferSGIX, "glTagSampleBufferSGIX" );
    if( dt.glTagSampleBufferSGIX == NULL ) {
      dt.glTagSampleBufferSGIX = missing_glTagSampleBufferSGIX;
    }

    // GL_SGI_color_table

    _getProcAddress( dt.glColorTableParameterfvSGI, glColorTableParameterfvSGI, "glColorTableParameterfvSGI" );
    if( dt.glColorTableParameterfvSGI == NULL ) {
      dt.glColorTableParameterfvSGI = missing_glColorTableParameterfvSGI;
    }
    _getProcAddress( dt.glColorTableParameterivSGI, glColorTableParameterivSGI, "glColorTableParameterivSGI" );
    if( dt.glColorTableParameterivSGI == NULL ) {
      dt.glColorTableParameterivSGI = missing_glColorTableParameterivSGI;
    }
    _getProcAddress( dt.glColorTableSGI, glColorTableSGI, "glColorTableSGI" );
    if( dt.glColorTableSGI == NULL ) {
      dt.glColorTableSGI = missing_glColorTableSGI;
    }
    _getProcAddress( dt.glCopyColorTableSGI, glCopyColorTableSGI, "glCopyColorTableSGI" );
    if( dt.glCopyColorTableSGI == NULL ) {
      dt.glCopyColorTableSGI = missing_glCopyColorTableSGI;
    }
    _getProcAddress( dt.glGetColorTableParameterfvSGI, glGetColorTableParameterfvSGI, "glGetColorTableParameterfvSGI" );
    if( dt.glGetColorTableParameterfvSGI == NULL ) {
      dt.glGetColorTableParameterfvSGI = missing_glGetColorTableParameterfvSGI;
    }
    _getProcAddress( dt.glGetColorTableParameterivSGI, glGetColorTableParameterivSGI, "glGetColorTableParameterivSGI" );
    if( dt.glGetColorTableParameterivSGI == NULL ) {
      dt.glGetColorTableParameterivSGI = missing_glGetColorTableParameterivSGI;
    }
    _getProcAddress( dt.glGetColorTableSGI, glGetColorTableSGI, "glGetColorTableSGI" );
    if( dt.glGetColorTableSGI == NULL ) {
      dt.glGetColorTableSGI = missing_glGetColorTableSGI;
    }

    // GL_SUNX_constant_data

    _getProcAddress( dt.glFinishTextureSUNX, glFinishTextureSUNX, "glFinishTextureSUNX" );
    if( dt.glFinishTextureSUNX == NULL ) {
      dt.glFinishTextureSUNX = missing_glFinishTextureSUNX;
    }

    // GL_SUN_global_alpha

    _getProcAddress( dt.glGlobalAlphaFactorbSUN, glGlobalAlphaFactorbSUN, "glGlobalAlphaFactorbSUN" );
    if( dt.glGlobalAlphaFactorbSUN == NULL ) {
      dt.glGlobalAlphaFactorbSUN = missing_glGlobalAlphaFactorbSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactordSUN, glGlobalAlphaFactordSUN, "glGlobalAlphaFactordSUN" );
    if( dt.glGlobalAlphaFactordSUN == NULL ) {
      dt.glGlobalAlphaFactordSUN = missing_glGlobalAlphaFactordSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactorfSUN, glGlobalAlphaFactorfSUN, "glGlobalAlphaFactorfSUN" );
    if( dt.glGlobalAlphaFactorfSUN == NULL ) {
      dt.glGlobalAlphaFactorfSUN = missing_glGlobalAlphaFactorfSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactoriSUN, glGlobalAlphaFactoriSUN, "glGlobalAlphaFactoriSUN" );
    if( dt.glGlobalAlphaFactoriSUN == NULL ) {
      dt.glGlobalAlphaFactoriSUN = missing_glGlobalAlphaFactoriSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactorsSUN, glGlobalAlphaFactorsSUN, "glGlobalAlphaFactorsSUN" );
    if( dt.glGlobalAlphaFactorsSUN == NULL ) {
      dt.glGlobalAlphaFactorsSUN = missing_glGlobalAlphaFactorsSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactorubSUN, glGlobalAlphaFactorubSUN, "glGlobalAlphaFactorubSUN" );
    if( dt.glGlobalAlphaFactorubSUN == NULL ) {
      dt.glGlobalAlphaFactorubSUN = missing_glGlobalAlphaFactorubSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactoruiSUN, glGlobalAlphaFactoruiSUN, "glGlobalAlphaFactoruiSUN" );
    if( dt.glGlobalAlphaFactoruiSUN == NULL ) {
      dt.glGlobalAlphaFactoruiSUN = missing_glGlobalAlphaFactoruiSUN;
    }
    _getProcAddress( dt.glGlobalAlphaFactorusSUN, glGlobalAlphaFactorusSUN, "glGlobalAlphaFactorusSUN" );
    if( dt.glGlobalAlphaFactorusSUN == NULL ) {
      dt.glGlobalAlphaFactorusSUN = missing_glGlobalAlphaFactorusSUN;
    }

    // GL_SUN_mesh_array

    _getProcAddress( dt.glDrawMeshArraysSUN, glDrawMeshArraysSUN, "glDrawMeshArraysSUN" );
    if( dt.glDrawMeshArraysSUN == NULL ) {
      dt.glDrawMeshArraysSUN = missing_glDrawMeshArraysSUN;
    }

    // GL_SUN_read_video_pixels

    _getProcAddress( dt.glReadVideoPixelsSUN, glReadVideoPixelsSUN, "glReadVideoPixelsSUN" );
    if( dt.glReadVideoPixelsSUN == NULL ) {
      dt.glReadVideoPixelsSUN = missing_glReadVideoPixelsSUN;
    }

    // GL_SUN_triangle_list

    _getProcAddress( dt.glReplacementCodePointerSUN, glReplacementCodePointerSUN, "glReplacementCodePointerSUN" );
    if( dt.glReplacementCodePointerSUN == NULL ) {
      dt.glReplacementCodePointerSUN = missing_glReplacementCodePointerSUN;
    }
    _getProcAddress( dt.glReplacementCodeubSUN, glReplacementCodeubSUN, "glReplacementCodeubSUN" );
    if( dt.glReplacementCodeubSUN == NULL ) {
      dt.glReplacementCodeubSUN = missing_glReplacementCodeubSUN;
    }
    _getProcAddress( dt.glReplacementCodeubvSUN, glReplacementCodeubvSUN, "glReplacementCodeubvSUN" );
    if( dt.glReplacementCodeubvSUN == NULL ) {
      dt.glReplacementCodeubvSUN = missing_glReplacementCodeubvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiSUN, glReplacementCodeuiSUN, "glReplacementCodeuiSUN" );
    if( dt.glReplacementCodeuiSUN == NULL ) {
      dt.glReplacementCodeuiSUN = missing_glReplacementCodeuiSUN;
    }
    _getProcAddress( dt.glReplacementCodeuivSUN, glReplacementCodeuivSUN, "glReplacementCodeuivSUN" );
    if( dt.glReplacementCodeuivSUN == NULL ) {
      dt.glReplacementCodeuivSUN = missing_glReplacementCodeuivSUN;
    }
    _getProcAddress( dt.glReplacementCodeusSUN, glReplacementCodeusSUN, "glReplacementCodeusSUN" );
    if( dt.glReplacementCodeusSUN == NULL ) {
      dt.glReplacementCodeusSUN = missing_glReplacementCodeusSUN;
    }
    _getProcAddress( dt.glReplacementCodeusvSUN, glReplacementCodeusvSUN, "glReplacementCodeusvSUN" );
    if( dt.glReplacementCodeusvSUN == NULL ) {
      dt.glReplacementCodeusvSUN = missing_glReplacementCodeusvSUN;
    }

    // GL_SUN_vertex

    _getProcAddress( dt.glColor3fVertex3fSUN, glColor3fVertex3fSUN, "glColor3fVertex3fSUN" );
    if( dt.glColor3fVertex3fSUN == NULL ) {
      dt.glColor3fVertex3fSUN = missing_glColor3fVertex3fSUN;
    }
    _getProcAddress( dt.glColor3fVertex3fvSUN, glColor3fVertex3fvSUN, "glColor3fVertex3fvSUN" );
    if( dt.glColor3fVertex3fvSUN == NULL ) {
      dt.glColor3fVertex3fvSUN = missing_glColor3fVertex3fvSUN;
    }
    _getProcAddress( dt.glColor4fNormal3fVertex3fSUN, glColor4fNormal3fVertex3fSUN, "glColor4fNormal3fVertex3fSUN" );
    if( dt.glColor4fNormal3fVertex3fSUN == NULL ) {
      dt.glColor4fNormal3fVertex3fSUN = missing_glColor4fNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glColor4fNormal3fVertex3fvSUN, glColor4fNormal3fVertex3fvSUN, "glColor4fNormal3fVertex3fvSUN" );
    if( dt.glColor4fNormal3fVertex3fvSUN == NULL ) {
      dt.glColor4fNormal3fVertex3fvSUN = missing_glColor4fNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glColor4ubVertex2fSUN, glColor4ubVertex2fSUN, "glColor4ubVertex2fSUN" );
    if( dt.glColor4ubVertex2fSUN == NULL ) {
      dt.glColor4ubVertex2fSUN = missing_glColor4ubVertex2fSUN;
    }
    _getProcAddress( dt.glColor4ubVertex2fvSUN, glColor4ubVertex2fvSUN, "glColor4ubVertex2fvSUN" );
    if( dt.glColor4ubVertex2fvSUN == NULL ) {
      dt.glColor4ubVertex2fvSUN = missing_glColor4ubVertex2fvSUN;
    }
    _getProcAddress( dt.glColor4ubVertex3fSUN, glColor4ubVertex3fSUN, "glColor4ubVertex3fSUN" );
    if( dt.glColor4ubVertex3fSUN == NULL ) {
      dt.glColor4ubVertex3fSUN = missing_glColor4ubVertex3fSUN;
    }
    _getProcAddress( dt.glColor4ubVertex3fvSUN, glColor4ubVertex3fvSUN, "glColor4ubVertex3fvSUN" );
    if( dt.glColor4ubVertex3fvSUN == NULL ) {
      dt.glColor4ubVertex3fvSUN = missing_glColor4ubVertex3fvSUN;
    }
    _getProcAddress( dt.glNormal3fVertex3fSUN, glNormal3fVertex3fSUN, "glNormal3fVertex3fSUN" );
    if( dt.glNormal3fVertex3fSUN == NULL ) {
      dt.glNormal3fVertex3fSUN = missing_glNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glNormal3fVertex3fvSUN, glNormal3fVertex3fvSUN, "glNormal3fVertex3fvSUN" );
    if( dt.glNormal3fVertex3fvSUN == NULL ) {
      dt.glNormal3fVertex3fvSUN = missing_glNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiColor3fVertex3fSUN, glReplacementCodeuiColor3fVertex3fSUN, "glReplacementCodeuiColor3fVertex3fSUN" );
    if( dt.glReplacementCodeuiColor3fVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiColor3fVertex3fSUN = missing_glReplacementCodeuiColor3fVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiColor3fVertex3fvSUN, glReplacementCodeuiColor3fVertex3fvSUN, "glReplacementCodeuiColor3fVertex3fvSUN" );
    if( dt.glReplacementCodeuiColor3fVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiColor3fVertex3fvSUN = missing_glReplacementCodeuiColor3fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiColor4fNormal3fVertex3fSUN, glReplacementCodeuiColor4fNormal3fVertex3fSUN, "glReplacementCodeuiColor4fNormal3fVertex3fSUN" );
    if( dt.glReplacementCodeuiColor4fNormal3fVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiColor4fNormal3fVertex3fSUN = missing_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiColor4fNormal3fVertex3fvSUN, glReplacementCodeuiColor4fNormal3fVertex3fvSUN, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN" );
    if( dt.glReplacementCodeuiColor4fNormal3fVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = missing_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiColor4ubVertex3fSUN, glReplacementCodeuiColor4ubVertex3fSUN, "glReplacementCodeuiColor4ubVertex3fSUN" );
    if( dt.glReplacementCodeuiColor4ubVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiColor4ubVertex3fSUN = missing_glReplacementCodeuiColor4ubVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiColor4ubVertex3fvSUN, glReplacementCodeuiColor4ubVertex3fvSUN, "glReplacementCodeuiColor4ubVertex3fvSUN" );
    if( dt.glReplacementCodeuiColor4ubVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiColor4ubVertex3fvSUN = missing_glReplacementCodeuiColor4ubVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiNormal3fVertex3fSUN, glReplacementCodeuiNormal3fVertex3fSUN, "glReplacementCodeuiNormal3fVertex3fSUN" );
    if( dt.glReplacementCodeuiNormal3fVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiNormal3fVertex3fSUN = missing_glReplacementCodeuiNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiNormal3fVertex3fvSUN, glReplacementCodeuiNormal3fVertex3fvSUN, "glReplacementCodeuiNormal3fVertex3fvSUN" );
    if( dt.glReplacementCodeuiNormal3fVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiNormal3fVertex3fvSUN = missing_glReplacementCodeuiNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN" );
    if( dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN" );
    if( dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN" );
    if( dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN" );
    if( dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiTexCoord2fVertex3fSUN, glReplacementCodeuiTexCoord2fVertex3fSUN, "glReplacementCodeuiTexCoord2fVertex3fSUN" );
    if( dt.glReplacementCodeuiTexCoord2fVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiTexCoord2fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiTexCoord2fVertex3fvSUN, glReplacementCodeuiTexCoord2fVertex3fvSUN, "glReplacementCodeuiTexCoord2fVertex3fvSUN" );
    if( dt.glReplacementCodeuiTexCoord2fVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiTexCoord2fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fVertex3fvSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiVertex3fSUN, glReplacementCodeuiVertex3fSUN, "glReplacementCodeuiVertex3fSUN" );
    if( dt.glReplacementCodeuiVertex3fSUN == NULL ) {
      dt.glReplacementCodeuiVertex3fSUN = missing_glReplacementCodeuiVertex3fSUN;
    }
    _getProcAddress( dt.glReplacementCodeuiVertex3fvSUN, glReplacementCodeuiVertex3fvSUN, "glReplacementCodeuiVertex3fvSUN" );
    if( dt.glReplacementCodeuiVertex3fvSUN == NULL ) {
      dt.glReplacementCodeuiVertex3fvSUN = missing_glReplacementCodeuiVertex3fvSUN;
    }
    _getProcAddress( dt.glTexCoord2fColor3fVertex3fSUN, glTexCoord2fColor3fVertex3fSUN, "glTexCoord2fColor3fVertex3fSUN" );
    if( dt.glTexCoord2fColor3fVertex3fSUN == NULL ) {
      dt.glTexCoord2fColor3fVertex3fSUN = missing_glTexCoord2fColor3fVertex3fSUN;
    }
    _getProcAddress( dt.glTexCoord2fColor3fVertex3fvSUN, glTexCoord2fColor3fVertex3fvSUN, "glTexCoord2fColor3fVertex3fvSUN" );
    if( dt.glTexCoord2fColor3fVertex3fvSUN == NULL ) {
      dt.glTexCoord2fColor3fVertex3fvSUN = missing_glTexCoord2fColor3fVertex3fvSUN;
    }
    _getProcAddress( dt.glTexCoord2fColor4fNormal3fVertex3fSUN, glTexCoord2fColor4fNormal3fVertex3fSUN, "glTexCoord2fColor4fNormal3fVertex3fSUN" );
    if( dt.glTexCoord2fColor4fNormal3fVertex3fSUN == NULL ) {
      dt.glTexCoord2fColor4fNormal3fVertex3fSUN = missing_glTexCoord2fColor4fNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glTexCoord2fColor4fNormal3fVertex3fvSUN, glTexCoord2fColor4fNormal3fVertex3fvSUN, "glTexCoord2fColor4fNormal3fVertex3fvSUN" );
    if( dt.glTexCoord2fColor4fNormal3fVertex3fvSUN == NULL ) {
      dt.glTexCoord2fColor4fNormal3fVertex3fvSUN = missing_glTexCoord2fColor4fNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glTexCoord2fColor4ubVertex3fSUN, glTexCoord2fColor4ubVertex3fSUN, "glTexCoord2fColor4ubVertex3fSUN" );
    if( dt.glTexCoord2fColor4ubVertex3fSUN == NULL ) {
      dt.glTexCoord2fColor4ubVertex3fSUN = missing_glTexCoord2fColor4ubVertex3fSUN;
    }
    _getProcAddress( dt.glTexCoord2fColor4ubVertex3fvSUN, glTexCoord2fColor4ubVertex3fvSUN, "glTexCoord2fColor4ubVertex3fvSUN" );
    if( dt.glTexCoord2fColor4ubVertex3fvSUN == NULL ) {
      dt.glTexCoord2fColor4ubVertex3fvSUN = missing_glTexCoord2fColor4ubVertex3fvSUN;
    }
    _getProcAddress( dt.glTexCoord2fNormal3fVertex3fSUN, glTexCoord2fNormal3fVertex3fSUN, "glTexCoord2fNormal3fVertex3fSUN" );
    if( dt.glTexCoord2fNormal3fVertex3fSUN == NULL ) {
      dt.glTexCoord2fNormal3fVertex3fSUN = missing_glTexCoord2fNormal3fVertex3fSUN;
    }
    _getProcAddress( dt.glTexCoord2fNormal3fVertex3fvSUN, glTexCoord2fNormal3fVertex3fvSUN, "glTexCoord2fNormal3fVertex3fvSUN" );
    if( dt.glTexCoord2fNormal3fVertex3fvSUN == NULL ) {
      dt.glTexCoord2fNormal3fVertex3fvSUN = missing_glTexCoord2fNormal3fVertex3fvSUN;
    }
    _getProcAddress( dt.glTexCoord2fVertex3fSUN, glTexCoord2fVertex3fSUN, "glTexCoord2fVertex3fSUN" );
    if( dt.glTexCoord2fVertex3fSUN == NULL ) {
      dt.glTexCoord2fVertex3fSUN = missing_glTexCoord2fVertex3fSUN;
    }
    _getProcAddress( dt.glTexCoord2fVertex3fvSUN, glTexCoord2fVertex3fvSUN, "glTexCoord2fVertex3fvSUN" );
    if( dt.glTexCoord2fVertex3fvSUN == NULL ) {
      dt.glTexCoord2fVertex3fvSUN = missing_glTexCoord2fVertex3fvSUN;
    }
    _getProcAddress( dt.glTexCoord4fColor4fNormal3fVertex4fSUN, glTexCoord4fColor4fNormal3fVertex4fSUN, "glTexCoord4fColor4fNormal3fVertex4fSUN" );
    if( dt.glTexCoord4fColor4fNormal3fVertex4fSUN == NULL ) {
      dt.glTexCoord4fColor4fNormal3fVertex4fSUN = missing_glTexCoord4fColor4fNormal3fVertex4fSUN;
    }
    _getProcAddress( dt.glTexCoord4fColor4fNormal3fVertex4fvSUN, glTexCoord4fColor4fNormal3fVertex4fvSUN, "glTexCoord4fColor4fNormal3fVertex4fvSUN" );
    if( dt.glTexCoord4fColor4fNormal3fVertex4fvSUN == NULL ) {
      dt.glTexCoord4fColor4fNormal3fVertex4fvSUN = missing_glTexCoord4fColor4fNormal3fVertex4fvSUN;
    }
    _getProcAddress( dt.glTexCoord4fVertex4fSUN, glTexCoord4fVertex4fSUN, "glTexCoord4fVertex4fSUN" );
    if( dt.glTexCoord4fVertex4fSUN == NULL ) {
      dt.glTexCoord4fVertex4fSUN = missing_glTexCoord4fVertex4fSUN;
    }
    _getProcAddress( dt.glTexCoord4fVertex4fvSUN, glTexCoord4fVertex4fvSUN, "glTexCoord4fVertex4fvSUN" );
    if( dt.glTexCoord4fVertex4fvSUN == NULL ) {
      dt.glTexCoord4fVertex4fvSUN = missing_glTexCoord4fVertex4fvSUN;
    }

    // GL_WIN_swap_hint

    _getProcAddress( dt.glAddSwapHintRectWIN, glAddSwapHintRectWIN, "glAddSwapHintRectWIN" );
    if( dt.glAddSwapHintRectWIN == NULL ) {
      dt.glAddSwapHintRectWIN = missing_glAddSwapHintRectWIN;
    }

  }

 void InitDispatchLoader(Dispatch::Global &dt) {

  #if REGAL_SYS_WGL
    // WGL_3DL_stereo_control

    _getProcAddress( dt.wglSetStereoEmitterState3DL, wglSetStereoEmitterState3DL, "wglSetStereoEmitterState3DL" );
    if( dt.wglSetStereoEmitterState3DL == NULL ) {
      dt.wglSetStereoEmitterState3DL = missing_wglSetStereoEmitterState3DL;
    }

    // WGL_AMD_gpu_association

    _getProcAddress( dt.wglBlitContextFramebufferAMD, wglBlitContextFramebufferAMD, "wglBlitContextFramebufferAMD" );
    if( dt.wglBlitContextFramebufferAMD == NULL ) {
      dt.wglBlitContextFramebufferAMD = missing_wglBlitContextFramebufferAMD;
    }
    _getProcAddress( dt.wglCreateAssociatedContextAMD, wglCreateAssociatedContextAMD, "wglCreateAssociatedContextAMD" );
    if( dt.wglCreateAssociatedContextAMD == NULL ) {
      dt.wglCreateAssociatedContextAMD = missing_wglCreateAssociatedContextAMD;
    }
    _getProcAddress( dt.wglCreateAssociatedContextAttribsAMD, wglCreateAssociatedContextAttribsAMD, "wglCreateAssociatedContextAttribsAMD" );
    if( dt.wglCreateAssociatedContextAttribsAMD == NULL ) {
      dt.wglCreateAssociatedContextAttribsAMD = missing_wglCreateAssociatedContextAttribsAMD;
    }
    _getProcAddress( dt.wglDeleteAssociatedContextAMD, wglDeleteAssociatedContextAMD, "wglDeleteAssociatedContextAMD" );
    if( dt.wglDeleteAssociatedContextAMD == NULL ) {
      dt.wglDeleteAssociatedContextAMD = missing_wglDeleteAssociatedContextAMD;
    }
    _getProcAddress( dt.wglGetContextGPUIDAMD, wglGetContextGPUIDAMD, "wglGetContextGPUIDAMD" );
    if( dt.wglGetContextGPUIDAMD == NULL ) {
      dt.wglGetContextGPUIDAMD = missing_wglGetContextGPUIDAMD;
    }
    _getProcAddress( dt.wglGetCurrentAssociatedContextAMD, wglGetCurrentAssociatedContextAMD, "wglGetCurrentAssociatedContextAMD" );
    if( dt.wglGetCurrentAssociatedContextAMD == NULL ) {
      dt.wglGetCurrentAssociatedContextAMD = missing_wglGetCurrentAssociatedContextAMD;
    }
    _getProcAddress( dt.wglGetGPUIDsAMD, wglGetGPUIDsAMD, "wglGetGPUIDsAMD" );
    if( dt.wglGetGPUIDsAMD == NULL ) {
      dt.wglGetGPUIDsAMD = missing_wglGetGPUIDsAMD;
    }
    _getProcAddress( dt.wglGetGPUInfoAMD, wglGetGPUInfoAMD, "wglGetGPUInfoAMD" );
    if( dt.wglGetGPUInfoAMD == NULL ) {
      dt.wglGetGPUInfoAMD = missing_wglGetGPUInfoAMD;
    }
    _getProcAddress( dt.wglMakeAssociatedContextCurrentAMD, wglMakeAssociatedContextCurrentAMD, "wglMakeAssociatedContextCurrentAMD" );
    if( dt.wglMakeAssociatedContextCurrentAMD == NULL ) {
      dt.wglMakeAssociatedContextCurrentAMD = missing_wglMakeAssociatedContextCurrentAMD;
    }

    // WGL_ARB_buffer_region

    _getProcAddress( dt.wglCreateBufferRegionARB, wglCreateBufferRegionARB, "wglCreateBufferRegionARB" );
    if( dt.wglCreateBufferRegionARB == NULL ) {
      dt.wglCreateBufferRegionARB = missing_wglCreateBufferRegionARB;
    }
    _getProcAddress( dt.wglDeleteBufferRegionARB, wglDeleteBufferRegionARB, "wglDeleteBufferRegionARB" );
    if( dt.wglDeleteBufferRegionARB == NULL ) {
      dt.wglDeleteBufferRegionARB = missing_wglDeleteBufferRegionARB;
    }
    _getProcAddress( dt.wglRestoreBufferRegionARB, wglRestoreBufferRegionARB, "wglRestoreBufferRegionARB" );
    if( dt.wglRestoreBufferRegionARB == NULL ) {
      dt.wglRestoreBufferRegionARB = missing_wglRestoreBufferRegionARB;
    }
    _getProcAddress( dt.wglSaveBufferRegionARB, wglSaveBufferRegionARB, "wglSaveBufferRegionARB" );
    if( dt.wglSaveBufferRegionARB == NULL ) {
      dt.wglSaveBufferRegionARB = missing_wglSaveBufferRegionARB;
    }

    // WGL_ARB_create_context

    _getProcAddress( dt.wglCreateContextAttribsARB, wglCreateContextAttribsARB, "wglCreateContextAttribsARB" );
    if( dt.wglCreateContextAttribsARB == NULL ) {
      dt.wglCreateContextAttribsARB = missing_wglCreateContextAttribsARB;
    }

    // WGL_ARB_extensions_string

    _getProcAddress( dt.wglGetExtensionsStringARB, wglGetExtensionsStringARB, "wglGetExtensionsStringARB" );
    if( dt.wglGetExtensionsStringARB == NULL ) {
      dt.wglGetExtensionsStringARB = missing_wglGetExtensionsStringARB;
    }

    // WGL_ARB_make_current_read

    _getProcAddress( dt.wglGetCurrentReadDCARB, wglGetCurrentReadDCARB, "wglGetCurrentReadDCARB" );
    if( dt.wglGetCurrentReadDCARB == NULL ) {
      dt.wglGetCurrentReadDCARB = missing_wglGetCurrentReadDCARB;
    }
    _getProcAddress( dt.wglMakeContextCurrentARB, wglMakeContextCurrentARB, "wglMakeContextCurrentARB" );
    if( dt.wglMakeContextCurrentARB == NULL ) {
      dt.wglMakeContextCurrentARB = missing_wglMakeContextCurrentARB;
    }

    // WGL_ARB_pbuffer

    _getProcAddress( dt.wglCreatePbufferARB, wglCreatePbufferARB, "wglCreatePbufferARB" );
    if( dt.wglCreatePbufferARB == NULL ) {
      dt.wglCreatePbufferARB = missing_wglCreatePbufferARB;
    }
    _getProcAddress( dt.wglDestroyPbufferARB, wglDestroyPbufferARB, "wglDestroyPbufferARB" );
    if( dt.wglDestroyPbufferARB == NULL ) {
      dt.wglDestroyPbufferARB = missing_wglDestroyPbufferARB;
    }
    _getProcAddress( dt.wglGetPbufferDCARB, wglGetPbufferDCARB, "wglGetPbufferDCARB" );
    if( dt.wglGetPbufferDCARB == NULL ) {
      dt.wglGetPbufferDCARB = missing_wglGetPbufferDCARB;
    }
    _getProcAddress( dt.wglQueryPbufferARB, wglQueryPbufferARB, "wglQueryPbufferARB" );
    if( dt.wglQueryPbufferARB == NULL ) {
      dt.wglQueryPbufferARB = missing_wglQueryPbufferARB;
    }
    _getProcAddress( dt.wglReleasePbufferDCARB, wglReleasePbufferDCARB, "wglReleasePbufferDCARB" );
    if( dt.wglReleasePbufferDCARB == NULL ) {
      dt.wglReleasePbufferDCARB = missing_wglReleasePbufferDCARB;
    }

    // WGL_ARB_pixel_format

    _getProcAddress( dt.wglChoosePixelFormatARB, wglChoosePixelFormatARB, "wglChoosePixelFormatARB" );
    if( dt.wglChoosePixelFormatARB == NULL ) {
      dt.wglChoosePixelFormatARB = missing_wglChoosePixelFormatARB;
    }
    _getProcAddress( dt.wglGetPixelFormatAttribfvARB, wglGetPixelFormatAttribfvARB, "wglGetPixelFormatAttribfvARB" );
    if( dt.wglGetPixelFormatAttribfvARB == NULL ) {
      dt.wglGetPixelFormatAttribfvARB = missing_wglGetPixelFormatAttribfvARB;
    }
    _getProcAddress( dt.wglGetPixelFormatAttribivARB, wglGetPixelFormatAttribivARB, "wglGetPixelFormatAttribivARB" );
    if( dt.wglGetPixelFormatAttribivARB == NULL ) {
      dt.wglGetPixelFormatAttribivARB = missing_wglGetPixelFormatAttribivARB;
    }

    // WGL_ARB_render_texture

    _getProcAddress( dt.wglBindTexImageARB, wglBindTexImageARB, "wglBindTexImageARB" );
    if( dt.wglBindTexImageARB == NULL ) {
      dt.wglBindTexImageARB = missing_wglBindTexImageARB;
    }
    _getProcAddress( dt.wglReleaseTexImageARB, wglReleaseTexImageARB, "wglReleaseTexImageARB" );
    if( dt.wglReleaseTexImageARB == NULL ) {
      dt.wglReleaseTexImageARB = missing_wglReleaseTexImageARB;
    }
    _getProcAddress( dt.wglSetPbufferAttribARB, wglSetPbufferAttribARB, "wglSetPbufferAttribARB" );
    if( dt.wglSetPbufferAttribARB == NULL ) {
      dt.wglSetPbufferAttribARB = missing_wglSetPbufferAttribARB;
    }

    // WGL_EXT_display_color_table

    _getProcAddress( dt.wglBindDisplayColorTableEXT, wglBindDisplayColorTableEXT, "wglBindDisplayColorTableEXT" );
    if( dt.wglBindDisplayColorTableEXT == NULL ) {
      dt.wglBindDisplayColorTableEXT = missing_wglBindDisplayColorTableEXT;
    }
    _getProcAddress( dt.wglCreateDisplayColorTableEXT, wglCreateDisplayColorTableEXT, "wglCreateDisplayColorTableEXT" );
    if( dt.wglCreateDisplayColorTableEXT == NULL ) {
      dt.wglCreateDisplayColorTableEXT = missing_wglCreateDisplayColorTableEXT;
    }
    _getProcAddress( dt.wglDestroyDisplayColorTableEXT, wglDestroyDisplayColorTableEXT, "wglDestroyDisplayColorTableEXT" );
    if( dt.wglDestroyDisplayColorTableEXT == NULL ) {
      dt.wglDestroyDisplayColorTableEXT = missing_wglDestroyDisplayColorTableEXT;
    }
    _getProcAddress( dt.wglLoadDisplayColorTableEXT, wglLoadDisplayColorTableEXT, "wglLoadDisplayColorTableEXT" );
    if( dt.wglLoadDisplayColorTableEXT == NULL ) {
      dt.wglLoadDisplayColorTableEXT = missing_wglLoadDisplayColorTableEXT;
    }

    // WGL_EXT_extensions_string

    _getProcAddress( dt.wglGetExtensionsStringEXT, wglGetExtensionsStringEXT, "wglGetExtensionsStringEXT" );
    if( dt.wglGetExtensionsStringEXT == NULL ) {
      dt.wglGetExtensionsStringEXT = missing_wglGetExtensionsStringEXT;
    }

    // WGL_EXT_make_current_read

    _getProcAddress( dt.wglGetCurrentReadDCEXT, wglGetCurrentReadDCEXT, "wglGetCurrentReadDCEXT" );
    if( dt.wglGetCurrentReadDCEXT == NULL ) {
      dt.wglGetCurrentReadDCEXT = missing_wglGetCurrentReadDCEXT;
    }
    _getProcAddress( dt.wglMakeContextCurrentEXT, wglMakeContextCurrentEXT, "wglMakeContextCurrentEXT" );
    if( dt.wglMakeContextCurrentEXT == NULL ) {
      dt.wglMakeContextCurrentEXT = missing_wglMakeContextCurrentEXT;
    }

    // WGL_EXT_pbuffer

    _getProcAddress( dt.wglCreatePbufferEXT, wglCreatePbufferEXT, "wglCreatePbufferEXT" );
    if( dt.wglCreatePbufferEXT == NULL ) {
      dt.wglCreatePbufferEXT = missing_wglCreatePbufferEXT;
    }
    _getProcAddress( dt.wglDestroyPbufferEXT, wglDestroyPbufferEXT, "wglDestroyPbufferEXT" );
    if( dt.wglDestroyPbufferEXT == NULL ) {
      dt.wglDestroyPbufferEXT = missing_wglDestroyPbufferEXT;
    }
    _getProcAddress( dt.wglGetPbufferDCEXT, wglGetPbufferDCEXT, "wglGetPbufferDCEXT" );
    if( dt.wglGetPbufferDCEXT == NULL ) {
      dt.wglGetPbufferDCEXT = missing_wglGetPbufferDCEXT;
    }
    _getProcAddress( dt.wglQueryPbufferEXT, wglQueryPbufferEXT, "wglQueryPbufferEXT" );
    if( dt.wglQueryPbufferEXT == NULL ) {
      dt.wglQueryPbufferEXT = missing_wglQueryPbufferEXT;
    }
    _getProcAddress( dt.wglReleasePbufferDCEXT, wglReleasePbufferDCEXT, "wglReleasePbufferDCEXT" );
    if( dt.wglReleasePbufferDCEXT == NULL ) {
      dt.wglReleasePbufferDCEXT = missing_wglReleasePbufferDCEXT;
    }

    // WGL_EXT_pixel_format

    _getProcAddress( dt.wglChoosePixelFormatEXT, wglChoosePixelFormatEXT, "wglChoosePixelFormatEXT" );
    if( dt.wglChoosePixelFormatEXT == NULL ) {
      dt.wglChoosePixelFormatEXT = missing_wglChoosePixelFormatEXT;
    }
    _getProcAddress( dt.wglGetPixelFormatAttribfvEXT, wglGetPixelFormatAttribfvEXT, "wglGetPixelFormatAttribfvEXT" );
    if( dt.wglGetPixelFormatAttribfvEXT == NULL ) {
      dt.wglGetPixelFormatAttribfvEXT = missing_wglGetPixelFormatAttribfvEXT;
    }
    _getProcAddress( dt.wglGetPixelFormatAttribivEXT, wglGetPixelFormatAttribivEXT, "wglGetPixelFormatAttribivEXT" );
    if( dt.wglGetPixelFormatAttribivEXT == NULL ) {
      dt.wglGetPixelFormatAttribivEXT = missing_wglGetPixelFormatAttribivEXT;
    }

    // WGL_EXT_swap_control

    _getProcAddress( dt.wglGetSwapIntervalEXT, wglGetSwapIntervalEXT, "wglGetSwapIntervalEXT" );
    if( dt.wglGetSwapIntervalEXT == NULL ) {
      dt.wglGetSwapIntervalEXT = missing_wglGetSwapIntervalEXT;
    }
    _getProcAddress( dt.wglSwapIntervalEXT, wglSwapIntervalEXT, "wglSwapIntervalEXT" );
    if( dt.wglSwapIntervalEXT == NULL ) {
      dt.wglSwapIntervalEXT = missing_wglSwapIntervalEXT;
    }

    // WGL_GDI

    _getProcAddress( dt.wglChoosePixelFormat, wglChoosePixelFormat, "wglChoosePixelFormat" );
    if( dt.wglChoosePixelFormat == NULL ) {
      dt.wglChoosePixelFormat = missing_wglChoosePixelFormat;
    }
    _getProcAddress( dt.wglDescribePixelFormat, wglDescribePixelFormat, "wglDescribePixelFormat" );
    if( dt.wglDescribePixelFormat == NULL ) {
      dt.wglDescribePixelFormat = missing_wglDescribePixelFormat;
    }
    _getProcAddress( dt.wglGetPixelFormat, wglGetPixelFormat, "wglGetPixelFormat" );
    if( dt.wglGetPixelFormat == NULL ) {
      dt.wglGetPixelFormat = missing_wglGetPixelFormat;
    }
    _getProcAddress( dt.wglSetPixelFormat, wglSetPixelFormat, "wglSetPixelFormat" );
    if( dt.wglSetPixelFormat == NULL ) {
      dt.wglSetPixelFormat = missing_wglSetPixelFormat;
    }
    _getProcAddress( dt.wglSwapBuffers, wglSwapBuffers, "wglSwapBuffers" );
    if( dt.wglSwapBuffers == NULL ) {
      dt.wglSwapBuffers = missing_wglSwapBuffers;
    }

    // WGL_I3D_digital_video_control

    _getProcAddress( dt.wglGetDigitalVideoParametersI3D, wglGetDigitalVideoParametersI3D, "wglGetDigitalVideoParametersI3D" );
    if( dt.wglGetDigitalVideoParametersI3D == NULL ) {
      dt.wglGetDigitalVideoParametersI3D = missing_wglGetDigitalVideoParametersI3D;
    }
    _getProcAddress( dt.wglSetDigitalVideoParametersI3D, wglSetDigitalVideoParametersI3D, "wglSetDigitalVideoParametersI3D" );
    if( dt.wglSetDigitalVideoParametersI3D == NULL ) {
      dt.wglSetDigitalVideoParametersI3D = missing_wglSetDigitalVideoParametersI3D;
    }

    // WGL_I3D_gamma

    _getProcAddress( dt.wglGetGammaTableI3D, wglGetGammaTableI3D, "wglGetGammaTableI3D" );
    if( dt.wglGetGammaTableI3D == NULL ) {
      dt.wglGetGammaTableI3D = missing_wglGetGammaTableI3D;
    }
    _getProcAddress( dt.wglGetGammaTableParametersI3D, wglGetGammaTableParametersI3D, "wglGetGammaTableParametersI3D" );
    if( dt.wglGetGammaTableParametersI3D == NULL ) {
      dt.wglGetGammaTableParametersI3D = missing_wglGetGammaTableParametersI3D;
    }
    _getProcAddress( dt.wglSetGammaTableI3D, wglSetGammaTableI3D, "wglSetGammaTableI3D" );
    if( dt.wglSetGammaTableI3D == NULL ) {
      dt.wglSetGammaTableI3D = missing_wglSetGammaTableI3D;
    }
    _getProcAddress( dt.wglSetGammaTableParametersI3D, wglSetGammaTableParametersI3D, "wglSetGammaTableParametersI3D" );
    if( dt.wglSetGammaTableParametersI3D == NULL ) {
      dt.wglSetGammaTableParametersI3D = missing_wglSetGammaTableParametersI3D;
    }

    // WGL_I3D_genlock

    _getProcAddress( dt.wglDisableGenlockI3D, wglDisableGenlockI3D, "wglDisableGenlockI3D" );
    if( dt.wglDisableGenlockI3D == NULL ) {
      dt.wglDisableGenlockI3D = missing_wglDisableGenlockI3D;
    }
    _getProcAddress( dt.wglEnableGenlockI3D, wglEnableGenlockI3D, "wglEnableGenlockI3D" );
    if( dt.wglEnableGenlockI3D == NULL ) {
      dt.wglEnableGenlockI3D = missing_wglEnableGenlockI3D;
    }
    _getProcAddress( dt.wglGenlockSampleRateI3D, wglGenlockSampleRateI3D, "wglGenlockSampleRateI3D" );
    if( dt.wglGenlockSampleRateI3D == NULL ) {
      dt.wglGenlockSampleRateI3D = missing_wglGenlockSampleRateI3D;
    }
    _getProcAddress( dt.wglGenlockSourceDelayI3D, wglGenlockSourceDelayI3D, "wglGenlockSourceDelayI3D" );
    if( dt.wglGenlockSourceDelayI3D == NULL ) {
      dt.wglGenlockSourceDelayI3D = missing_wglGenlockSourceDelayI3D;
    }
    _getProcAddress( dt.wglGenlockSourceEdgeI3D, wglGenlockSourceEdgeI3D, "wglGenlockSourceEdgeI3D" );
    if( dt.wglGenlockSourceEdgeI3D == NULL ) {
      dt.wglGenlockSourceEdgeI3D = missing_wglGenlockSourceEdgeI3D;
    }
    _getProcAddress( dt.wglGenlockSourceI3D, wglGenlockSourceI3D, "wglGenlockSourceI3D" );
    if( dt.wglGenlockSourceI3D == NULL ) {
      dt.wglGenlockSourceI3D = missing_wglGenlockSourceI3D;
    }
    _getProcAddress( dt.wglGetGenlockSampleRateI3D, wglGetGenlockSampleRateI3D, "wglGetGenlockSampleRateI3D" );
    if( dt.wglGetGenlockSampleRateI3D == NULL ) {
      dt.wglGetGenlockSampleRateI3D = missing_wglGetGenlockSampleRateI3D;
    }
    _getProcAddress( dt.wglGetGenlockSourceDelayI3D, wglGetGenlockSourceDelayI3D, "wglGetGenlockSourceDelayI3D" );
    if( dt.wglGetGenlockSourceDelayI3D == NULL ) {
      dt.wglGetGenlockSourceDelayI3D = missing_wglGetGenlockSourceDelayI3D;
    }
    _getProcAddress( dt.wglGetGenlockSourceEdgeI3D, wglGetGenlockSourceEdgeI3D, "wglGetGenlockSourceEdgeI3D" );
    if( dt.wglGetGenlockSourceEdgeI3D == NULL ) {
      dt.wglGetGenlockSourceEdgeI3D = missing_wglGetGenlockSourceEdgeI3D;
    }
    _getProcAddress( dt.wglGetGenlockSourceI3D, wglGetGenlockSourceI3D, "wglGetGenlockSourceI3D" );
    if( dt.wglGetGenlockSourceI3D == NULL ) {
      dt.wglGetGenlockSourceI3D = missing_wglGetGenlockSourceI3D;
    }
    _getProcAddress( dt.wglIsEnabledGenlockI3D, wglIsEnabledGenlockI3D, "wglIsEnabledGenlockI3D" );
    if( dt.wglIsEnabledGenlockI3D == NULL ) {
      dt.wglIsEnabledGenlockI3D = missing_wglIsEnabledGenlockI3D;
    }
    _getProcAddress( dt.wglQueryGenlockMaxSourceDelayI3D, wglQueryGenlockMaxSourceDelayI3D, "wglQueryGenlockMaxSourceDelayI3D" );
    if( dt.wglQueryGenlockMaxSourceDelayI3D == NULL ) {
      dt.wglQueryGenlockMaxSourceDelayI3D = missing_wglQueryGenlockMaxSourceDelayI3D;
    }

    // WGL_I3D_image_buffer

    _getProcAddress( dt.wglAssociateImageBufferEventsI3D, wglAssociateImageBufferEventsI3D, "wglAssociateImageBufferEventsI3D" );
    if( dt.wglAssociateImageBufferEventsI3D == NULL ) {
      dt.wglAssociateImageBufferEventsI3D = missing_wglAssociateImageBufferEventsI3D;
    }
    _getProcAddress( dt.wglCreateImageBufferI3D, wglCreateImageBufferI3D, "wglCreateImageBufferI3D" );
    if( dt.wglCreateImageBufferI3D == NULL ) {
      dt.wglCreateImageBufferI3D = missing_wglCreateImageBufferI3D;
    }
    _getProcAddress( dt.wglDestroyImageBufferI3D, wglDestroyImageBufferI3D, "wglDestroyImageBufferI3D" );
    if( dt.wglDestroyImageBufferI3D == NULL ) {
      dt.wglDestroyImageBufferI3D = missing_wglDestroyImageBufferI3D;
    }
    _getProcAddress( dt.wglReleaseImageBufferEventsI3D, wglReleaseImageBufferEventsI3D, "wglReleaseImageBufferEventsI3D" );
    if( dt.wglReleaseImageBufferEventsI3D == NULL ) {
      dt.wglReleaseImageBufferEventsI3D = missing_wglReleaseImageBufferEventsI3D;
    }

    // WGL_I3D_swap_frame_lock

    _getProcAddress( dt.wglDisableFrameLockI3D, wglDisableFrameLockI3D, "wglDisableFrameLockI3D" );
    if( dt.wglDisableFrameLockI3D == NULL ) {
      dt.wglDisableFrameLockI3D = missing_wglDisableFrameLockI3D;
    }
    _getProcAddress( dt.wglEnableFrameLockI3D, wglEnableFrameLockI3D, "wglEnableFrameLockI3D" );
    if( dt.wglEnableFrameLockI3D == NULL ) {
      dt.wglEnableFrameLockI3D = missing_wglEnableFrameLockI3D;
    }
    _getProcAddress( dt.wglIsEnabledFrameLockI3D, wglIsEnabledFrameLockI3D, "wglIsEnabledFrameLockI3D" );
    if( dt.wglIsEnabledFrameLockI3D == NULL ) {
      dt.wglIsEnabledFrameLockI3D = missing_wglIsEnabledFrameLockI3D;
    }
    _getProcAddress( dt.wglQueryFrameLockMasterI3D, wglQueryFrameLockMasterI3D, "wglQueryFrameLockMasterI3D" );
    if( dt.wglQueryFrameLockMasterI3D == NULL ) {
      dt.wglQueryFrameLockMasterI3D = missing_wglQueryFrameLockMasterI3D;
    }

    // WGL_I3D_swap_frame_usage

    _getProcAddress( dt.wglBeginFrameTrackingI3D, wglBeginFrameTrackingI3D, "wglBeginFrameTrackingI3D" );
    if( dt.wglBeginFrameTrackingI3D == NULL ) {
      dt.wglBeginFrameTrackingI3D = missing_wglBeginFrameTrackingI3D;
    }
    _getProcAddress( dt.wglEndFrameTrackingI3D, wglEndFrameTrackingI3D, "wglEndFrameTrackingI3D" );
    if( dt.wglEndFrameTrackingI3D == NULL ) {
      dt.wglEndFrameTrackingI3D = missing_wglEndFrameTrackingI3D;
    }
    _getProcAddress( dt.wglGetFrameUsageI3D, wglGetFrameUsageI3D, "wglGetFrameUsageI3D" );
    if( dt.wglGetFrameUsageI3D == NULL ) {
      dt.wglGetFrameUsageI3D = missing_wglGetFrameUsageI3D;
    }
    _getProcAddress( dt.wglQueryFrameTrackingI3D, wglQueryFrameTrackingI3D, "wglQueryFrameTrackingI3D" );
    if( dt.wglQueryFrameTrackingI3D == NULL ) {
      dt.wglQueryFrameTrackingI3D = missing_wglQueryFrameTrackingI3D;
    }

    // WGL_NV_DX_interop

    _getProcAddress( dt.wglDXCloseDeviceNV, wglDXCloseDeviceNV, "wglDXCloseDeviceNV" );
    if( dt.wglDXCloseDeviceNV == NULL ) {
      dt.wglDXCloseDeviceNV = missing_wglDXCloseDeviceNV;
    }
    _getProcAddress( dt.wglDXLockObjectsNV, wglDXLockObjectsNV, "wglDXLockObjectsNV" );
    if( dt.wglDXLockObjectsNV == NULL ) {
      dt.wglDXLockObjectsNV = missing_wglDXLockObjectsNV;
    }
    _getProcAddress( dt.wglDXObjectAccessNV, wglDXObjectAccessNV, "wglDXObjectAccessNV" );
    if( dt.wglDXObjectAccessNV == NULL ) {
      dt.wglDXObjectAccessNV = missing_wglDXObjectAccessNV;
    }
    _getProcAddress( dt.wglDXOpenDeviceNV, wglDXOpenDeviceNV, "wglDXOpenDeviceNV" );
    if( dt.wglDXOpenDeviceNV == NULL ) {
      dt.wglDXOpenDeviceNV = missing_wglDXOpenDeviceNV;
    }
    _getProcAddress( dt.wglDXRegisterObjectNV, wglDXRegisterObjectNV, "wglDXRegisterObjectNV" );
    if( dt.wglDXRegisterObjectNV == NULL ) {
      dt.wglDXRegisterObjectNV = missing_wglDXRegisterObjectNV;
    }
    _getProcAddress( dt.wglDXSetResourceShareHandleNV, wglDXSetResourceShareHandleNV, "wglDXSetResourceShareHandleNV" );
    if( dt.wglDXSetResourceShareHandleNV == NULL ) {
      dt.wglDXSetResourceShareHandleNV = missing_wglDXSetResourceShareHandleNV;
    }
    _getProcAddress( dt.wglDXUnlockObjectsNV, wglDXUnlockObjectsNV, "wglDXUnlockObjectsNV" );
    if( dt.wglDXUnlockObjectsNV == NULL ) {
      dt.wglDXUnlockObjectsNV = missing_wglDXUnlockObjectsNV;
    }
    _getProcAddress( dt.wglDXUnregisterObjectNV, wglDXUnregisterObjectNV, "wglDXUnregisterObjectNV" );
    if( dt.wglDXUnregisterObjectNV == NULL ) {
      dt.wglDXUnregisterObjectNV = missing_wglDXUnregisterObjectNV;
    }

    // WGL_NV_copy_image

    _getProcAddress( dt.wglCopyImageSubDataNV, wglCopyImageSubDataNV, "wglCopyImageSubDataNV" );
    if( dt.wglCopyImageSubDataNV == NULL ) {
      dt.wglCopyImageSubDataNV = missing_wglCopyImageSubDataNV;
    }

    // WGL_NV_gpu_affinity

    _getProcAddress( dt.wglCreateAffinityDCNV, wglCreateAffinityDCNV, "wglCreateAffinityDCNV" );
    if( dt.wglCreateAffinityDCNV == NULL ) {
      dt.wglCreateAffinityDCNV = missing_wglCreateAffinityDCNV;
    }
    _getProcAddress( dt.wglDeleteDCNV, wglDeleteDCNV, "wglDeleteDCNV" );
    if( dt.wglDeleteDCNV == NULL ) {
      dt.wglDeleteDCNV = missing_wglDeleteDCNV;
    }
    _getProcAddress( dt.wglEnumGpuDevicesNV, wglEnumGpuDevicesNV, "wglEnumGpuDevicesNV" );
    if( dt.wglEnumGpuDevicesNV == NULL ) {
      dt.wglEnumGpuDevicesNV = missing_wglEnumGpuDevicesNV;
    }
    _getProcAddress( dt.wglEnumGpusFromAffinityDCNV, wglEnumGpusFromAffinityDCNV, "wglEnumGpusFromAffinityDCNV" );
    if( dt.wglEnumGpusFromAffinityDCNV == NULL ) {
      dt.wglEnumGpusFromAffinityDCNV = missing_wglEnumGpusFromAffinityDCNV;
    }
    _getProcAddress( dt.wglEnumGpusNV, wglEnumGpusNV, "wglEnumGpusNV" );
    if( dt.wglEnumGpusNV == NULL ) {
      dt.wglEnumGpusNV = missing_wglEnumGpusNV;
    }

    // WGL_NV_present_video

    _getProcAddress( dt.wglBindVideoDeviceNV, wglBindVideoDeviceNV, "wglBindVideoDeviceNV" );
    if( dt.wglBindVideoDeviceNV == NULL ) {
      dt.wglBindVideoDeviceNV = missing_wglBindVideoDeviceNV;
    }
    _getProcAddress( dt.wglEnumerateVideoDevicesNV, wglEnumerateVideoDevicesNV, "wglEnumerateVideoDevicesNV" );
    if( dt.wglEnumerateVideoDevicesNV == NULL ) {
      dt.wglEnumerateVideoDevicesNV = missing_wglEnumerateVideoDevicesNV;
    }
    _getProcAddress( dt.wglQueryCurrentContextNV, wglQueryCurrentContextNV, "wglQueryCurrentContextNV" );
    if( dt.wglQueryCurrentContextNV == NULL ) {
      dt.wglQueryCurrentContextNV = missing_wglQueryCurrentContextNV;
    }

    // WGL_NV_swap_group

    _getProcAddress( dt.wglBindSwapBarrierNV, wglBindSwapBarrierNV, "wglBindSwapBarrierNV" );
    if( dt.wglBindSwapBarrierNV == NULL ) {
      dt.wglBindSwapBarrierNV = missing_wglBindSwapBarrierNV;
    }
    _getProcAddress( dt.wglJoinSwapGroupNV, wglJoinSwapGroupNV, "wglJoinSwapGroupNV" );
    if( dt.wglJoinSwapGroupNV == NULL ) {
      dt.wglJoinSwapGroupNV = missing_wglJoinSwapGroupNV;
    }
    _getProcAddress( dt.wglQueryFrameCountNV, wglQueryFrameCountNV, "wglQueryFrameCountNV" );
    if( dt.wglQueryFrameCountNV == NULL ) {
      dt.wglQueryFrameCountNV = missing_wglQueryFrameCountNV;
    }
    _getProcAddress( dt.wglQueryMaxSwapGroupsNV, wglQueryMaxSwapGroupsNV, "wglQueryMaxSwapGroupsNV" );
    if( dt.wglQueryMaxSwapGroupsNV == NULL ) {
      dt.wglQueryMaxSwapGroupsNV = missing_wglQueryMaxSwapGroupsNV;
    }
    _getProcAddress( dt.wglQuerySwapGroupNV, wglQuerySwapGroupNV, "wglQuerySwapGroupNV" );
    if( dt.wglQuerySwapGroupNV == NULL ) {
      dt.wglQuerySwapGroupNV = missing_wglQuerySwapGroupNV;
    }
    _getProcAddress( dt.wglResetFrameCountNV, wglResetFrameCountNV, "wglResetFrameCountNV" );
    if( dt.wglResetFrameCountNV == NULL ) {
      dt.wglResetFrameCountNV = missing_wglResetFrameCountNV;
    }

    // WGL_NV_vertex_array_range

    _getProcAddress( dt.wglAllocateMemoryNV, wglAllocateMemoryNV, "wglAllocateMemoryNV" );
    if( dt.wglAllocateMemoryNV == NULL ) {
      dt.wglAllocateMemoryNV = missing_wglAllocateMemoryNV;
    }
    _getProcAddress( dt.wglFreeMemoryNV, wglFreeMemoryNV, "wglFreeMemoryNV" );
    if( dt.wglFreeMemoryNV == NULL ) {
      dt.wglFreeMemoryNV = missing_wglFreeMemoryNV;
    }

    // WGL_NV_video_capture

    _getProcAddress( dt.wglBindVideoCaptureDeviceNV, wglBindVideoCaptureDeviceNV, "wglBindVideoCaptureDeviceNV" );
    if( dt.wglBindVideoCaptureDeviceNV == NULL ) {
      dt.wglBindVideoCaptureDeviceNV = missing_wglBindVideoCaptureDeviceNV;
    }
    _getProcAddress( dt.wglEnumerateVideoCaptureDevicesNV, wglEnumerateVideoCaptureDevicesNV, "wglEnumerateVideoCaptureDevicesNV" );
    if( dt.wglEnumerateVideoCaptureDevicesNV == NULL ) {
      dt.wglEnumerateVideoCaptureDevicesNV = missing_wglEnumerateVideoCaptureDevicesNV;
    }
    _getProcAddress( dt.wglLockVideoCaptureDeviceNV, wglLockVideoCaptureDeviceNV, "wglLockVideoCaptureDeviceNV" );
    if( dt.wglLockVideoCaptureDeviceNV == NULL ) {
      dt.wglLockVideoCaptureDeviceNV = missing_wglLockVideoCaptureDeviceNV;
    }
    _getProcAddress( dt.wglQueryVideoCaptureDeviceNV, wglQueryVideoCaptureDeviceNV, "wglQueryVideoCaptureDeviceNV" );
    if( dt.wglQueryVideoCaptureDeviceNV == NULL ) {
      dt.wglQueryVideoCaptureDeviceNV = missing_wglQueryVideoCaptureDeviceNV;
    }
    _getProcAddress( dt.wglReleaseVideoCaptureDeviceNV, wglReleaseVideoCaptureDeviceNV, "wglReleaseVideoCaptureDeviceNV" );
    if( dt.wglReleaseVideoCaptureDeviceNV == NULL ) {
      dt.wglReleaseVideoCaptureDeviceNV = missing_wglReleaseVideoCaptureDeviceNV;
    }

    // WGL_NV_video_output

    _getProcAddress( dt.wglBindVideoImageNV, wglBindVideoImageNV, "wglBindVideoImageNV" );
    if( dt.wglBindVideoImageNV == NULL ) {
      dt.wglBindVideoImageNV = missing_wglBindVideoImageNV;
    }
    _getProcAddress( dt.wglGetVideoDeviceNV, wglGetVideoDeviceNV, "wglGetVideoDeviceNV" );
    if( dt.wglGetVideoDeviceNV == NULL ) {
      dt.wglGetVideoDeviceNV = missing_wglGetVideoDeviceNV;
    }
    _getProcAddress( dt.wglGetVideoInfoNV, wglGetVideoInfoNV, "wglGetVideoInfoNV" );
    if( dt.wglGetVideoInfoNV == NULL ) {
      dt.wglGetVideoInfoNV = missing_wglGetVideoInfoNV;
    }
    _getProcAddress( dt.wglReleaseVideoDeviceNV, wglReleaseVideoDeviceNV, "wglReleaseVideoDeviceNV" );
    if( dt.wglReleaseVideoDeviceNV == NULL ) {
      dt.wglReleaseVideoDeviceNV = missing_wglReleaseVideoDeviceNV;
    }
    _getProcAddress( dt.wglReleaseVideoImageNV, wglReleaseVideoImageNV, "wglReleaseVideoImageNV" );
    if( dt.wglReleaseVideoImageNV == NULL ) {
      dt.wglReleaseVideoImageNV = missing_wglReleaseVideoImageNV;
    }
    _getProcAddress( dt.wglSendPbufferToVideoNV, wglSendPbufferToVideoNV, "wglSendPbufferToVideoNV" );
    if( dt.wglSendPbufferToVideoNV == NULL ) {
      dt.wglSendPbufferToVideoNV = missing_wglSendPbufferToVideoNV;
    }

    // WGL_OML_sync_control

    _getProcAddress( dt.wglGetMscRateOML, wglGetMscRateOML, "wglGetMscRateOML" );
    if( dt.wglGetMscRateOML == NULL ) {
      dt.wglGetMscRateOML = missing_wglGetMscRateOML;
    }
    _getProcAddress( dt.wglGetSyncValuesOML, wglGetSyncValuesOML, "wglGetSyncValuesOML" );
    if( dt.wglGetSyncValuesOML == NULL ) {
      dt.wglGetSyncValuesOML = missing_wglGetSyncValuesOML;
    }
    _getProcAddress( dt.wglSwapBuffersMscOML, wglSwapBuffersMscOML, "wglSwapBuffersMscOML" );
    if( dt.wglSwapBuffersMscOML == NULL ) {
      dt.wglSwapBuffersMscOML = missing_wglSwapBuffersMscOML;
    }
    _getProcAddress( dt.wglSwapLayerBuffersMscOML, wglSwapLayerBuffersMscOML, "wglSwapLayerBuffersMscOML" );
    if( dt.wglSwapLayerBuffersMscOML == NULL ) {
      dt.wglSwapLayerBuffersMscOML = missing_wglSwapLayerBuffersMscOML;
    }
    _getProcAddress( dt.wglWaitForMscOML, wglWaitForMscOML, "wglWaitForMscOML" );
    if( dt.wglWaitForMscOML == NULL ) {
      dt.wglWaitForMscOML = missing_wglWaitForMscOML;
    }
    _getProcAddress( dt.wglWaitForSbcOML, wglWaitForSbcOML, "wglWaitForSbcOML" );
    if( dt.wglWaitForSbcOML == NULL ) {
      dt.wglWaitForSbcOML = missing_wglWaitForSbcOML;
    }

    // WGL_core

    _getProcAddress( dt.wglCopyContext, wglCopyContext, "wglCopyContext" );
    if( dt.wglCopyContext == NULL ) {
      dt.wglCopyContext = missing_wglCopyContext;
    }
    _getProcAddress( dt.wglCreateContext, wglCreateContext, "wglCreateContext" );
    if( dt.wglCreateContext == NULL ) {
      dt.wglCreateContext = missing_wglCreateContext;
    }
    _getProcAddress( dt.wglCreateLayerContext, wglCreateLayerContext, "wglCreateLayerContext" );
    if( dt.wglCreateLayerContext == NULL ) {
      dt.wglCreateLayerContext = missing_wglCreateLayerContext;
    }
    _getProcAddress( dt.wglDeleteContext, wglDeleteContext, "wglDeleteContext" );
    if( dt.wglDeleteContext == NULL ) {
      dt.wglDeleteContext = missing_wglDeleteContext;
    }
    _getProcAddress( dt.wglDescribeLayerPlane, wglDescribeLayerPlane, "wglDescribeLayerPlane" );
    if( dt.wglDescribeLayerPlane == NULL ) {
      dt.wglDescribeLayerPlane = missing_wglDescribeLayerPlane;
    }
    _getProcAddress( dt.wglGetCurrentContext, wglGetCurrentContext, "wglGetCurrentContext" );
    if( dt.wglGetCurrentContext == NULL ) {
      dt.wglGetCurrentContext = missing_wglGetCurrentContext;
    }
    _getProcAddress( dt.wglGetCurrentDC, wglGetCurrentDC, "wglGetCurrentDC" );
    if( dt.wglGetCurrentDC == NULL ) {
      dt.wglGetCurrentDC = missing_wglGetCurrentDC;
    }
    _getProcAddress( dt.wglGetDefaultProcAddress, wglGetDefaultProcAddress, "wglGetDefaultProcAddress" );
    if( dt.wglGetDefaultProcAddress == NULL ) {
      dt.wglGetDefaultProcAddress = missing_wglGetDefaultProcAddress;
    }
    _getProcAddress( dt.wglGetLayerPaletteEntries, wglGetLayerPaletteEntries, "wglGetLayerPaletteEntries" );
    if( dt.wglGetLayerPaletteEntries == NULL ) {
      dt.wglGetLayerPaletteEntries = missing_wglGetLayerPaletteEntries;
    }
    _getProcAddress( dt.wglGetProcAddress, wglGetProcAddress, "wglGetProcAddress" );
    if( dt.wglGetProcAddress == NULL ) {
      dt.wglGetProcAddress = missing_wglGetProcAddress;
    }
    _getProcAddress( dt.wglMakeCurrent, wglMakeCurrent, "wglMakeCurrent" );
    if( dt.wglMakeCurrent == NULL ) {
      dt.wglMakeCurrent = missing_wglMakeCurrent;
    }
    _getProcAddress( dt.wglRealizeLayerPalette, wglRealizeLayerPalette, "wglRealizeLayerPalette" );
    if( dt.wglRealizeLayerPalette == NULL ) {
      dt.wglRealizeLayerPalette = missing_wglRealizeLayerPalette;
    }
    _getProcAddress( dt.wglSetLayerPaletteEntries, wglSetLayerPaletteEntries, "wglSetLayerPaletteEntries" );
    if( dt.wglSetLayerPaletteEntries == NULL ) {
      dt.wglSetLayerPaletteEntries = missing_wglSetLayerPaletteEntries;
    }
    _getProcAddress( dt.wglShareLists, wglShareLists, "wglShareLists" );
    if( dt.wglShareLists == NULL ) {
      dt.wglShareLists = missing_wglShareLists;
    }
    _getProcAddress( dt.wglSwapLayerBuffers, wglSwapLayerBuffers, "wglSwapLayerBuffers" );
    if( dt.wglSwapLayerBuffers == NULL ) {
      dt.wglSwapLayerBuffers = missing_wglSwapLayerBuffers;
    }
    _getProcAddress( dt.wglSwapMultipleBuffers, wglSwapMultipleBuffers, "wglSwapMultipleBuffers" );
    if( dt.wglSwapMultipleBuffers == NULL ) {
      dt.wglSwapMultipleBuffers = missing_wglSwapMultipleBuffers;
    }
    _getProcAddress( dt.wglUseFontBitmapsA, wglUseFontBitmapsA, "wglUseFontBitmapsA" );
    if( dt.wglUseFontBitmapsA == NULL ) {
      dt.wglUseFontBitmapsA = missing_wglUseFontBitmapsA;
    }
    _getProcAddress( dt.wglUseFontBitmapsW, wglUseFontBitmapsW, "wglUseFontBitmapsW" );
    if( dt.wglUseFontBitmapsW == NULL ) {
      dt.wglUseFontBitmapsW = missing_wglUseFontBitmapsW;
    }
    _getProcAddress( dt.wglUseFontOutlinesA, wglUseFontOutlinesA, "wglUseFontOutlinesA" );
    if( dt.wglUseFontOutlinesA == NULL ) {
      dt.wglUseFontOutlinesA = missing_wglUseFontOutlinesA;
    }
    _getProcAddress( dt.wglUseFontOutlinesW, wglUseFontOutlinesW, "wglUseFontOutlinesW" );
    if( dt.wglUseFontOutlinesW == NULL ) {
      dt.wglUseFontOutlinesW = missing_wglUseFontOutlinesW;
    }
  #endif // REGAL_SYS_WGL

  #if REGAL_SYS_GLX

    // GLX_VERSION_1_0

    _getProcAddress( dt.glXChooseVisual, glXChooseVisual, "glXChooseVisual" );
    if( dt.glXChooseVisual == NULL ) {
      dt.glXChooseVisual = missing_glXChooseVisual;
    }
    _getProcAddress( dt.glXCopyContext, glXCopyContext, "glXCopyContext" );
    if( dt.glXCopyContext == NULL ) {
      dt.glXCopyContext = missing_glXCopyContext;
    }
    _getProcAddress( dt.glXCreateContext, glXCreateContext, "glXCreateContext" );
    if( dt.glXCreateContext == NULL ) {
      dt.glXCreateContext = missing_glXCreateContext;
    }
    _getProcAddress( dt.glXCreateGLXPixmap, glXCreateGLXPixmap, "glXCreateGLXPixmap" );
    if( dt.glXCreateGLXPixmap == NULL ) {
      dt.glXCreateGLXPixmap = missing_glXCreateGLXPixmap;
    }
    _getProcAddress( dt.glXDestroyContext, glXDestroyContext, "glXDestroyContext" );
    if( dt.glXDestroyContext == NULL ) {
      dt.glXDestroyContext = missing_glXDestroyContext;
    }
    _getProcAddress( dt.glXDestroyGLXPixmap, glXDestroyGLXPixmap, "glXDestroyGLXPixmap" );
    if( dt.glXDestroyGLXPixmap == NULL ) {
      dt.glXDestroyGLXPixmap = missing_glXDestroyGLXPixmap;
    }
    _getProcAddress( dt.glXGetConfig, glXGetConfig, "glXGetConfig" );
    if( dt.glXGetConfig == NULL ) {
      dt.glXGetConfig = missing_glXGetConfig;
    }
    _getProcAddress( dt.glXGetCurrentContext, glXGetCurrentContext, "glXGetCurrentContext" );
    if( dt.glXGetCurrentContext == NULL ) {
      dt.glXGetCurrentContext = missing_glXGetCurrentContext;
    }
    _getProcAddress( dt.glXGetCurrentDrawable, glXGetCurrentDrawable, "glXGetCurrentDrawable" );
    if( dt.glXGetCurrentDrawable == NULL ) {
      dt.glXGetCurrentDrawable = missing_glXGetCurrentDrawable;
    }
    _getProcAddress( dt.glXIsDirect, glXIsDirect, "glXIsDirect" );
    if( dt.glXIsDirect == NULL ) {
      dt.glXIsDirect = missing_glXIsDirect;
    }
    _getProcAddress( dt.glXMakeCurrent, glXMakeCurrent, "glXMakeCurrent" );
    if( dt.glXMakeCurrent == NULL ) {
      dt.glXMakeCurrent = missing_glXMakeCurrent;
    }
    _getProcAddress( dt.glXQueryExtension, glXQueryExtension, "glXQueryExtension" );
    if( dt.glXQueryExtension == NULL ) {
      dt.glXQueryExtension = missing_glXQueryExtension;
    }
    _getProcAddress( dt.glXQueryVersion, glXQueryVersion, "glXQueryVersion" );
    if( dt.glXQueryVersion == NULL ) {
      dt.glXQueryVersion = missing_glXQueryVersion;
    }
    _getProcAddress( dt.glXSwapBuffers, glXSwapBuffers, "glXSwapBuffers" );
    if( dt.glXSwapBuffers == NULL ) {
      dt.glXSwapBuffers = missing_glXSwapBuffers;
    }
    _getProcAddress( dt.glXUseXFont, glXUseXFont, "glXUseXFont" );
    if( dt.glXUseXFont == NULL ) {
      dt.glXUseXFont = missing_glXUseXFont;
    }
    _getProcAddress( dt.glXWaitGL, glXWaitGL, "glXWaitGL" );
    if( dt.glXWaitGL == NULL ) {
      dt.glXWaitGL = missing_glXWaitGL;
    }
    _getProcAddress( dt.glXWaitX, glXWaitX, "glXWaitX" );
    if( dt.glXWaitX == NULL ) {
      dt.glXWaitX = missing_glXWaitX;
    }

    // GLX_VERSION_1_1

    _getProcAddress( dt.glXGetClientString, glXGetClientString, "glXGetClientString" );
    if( dt.glXGetClientString == NULL ) {
      dt.glXGetClientString = missing_glXGetClientString;
    }
    _getProcAddress( dt.glXQueryExtensionsString, glXQueryExtensionsString, "glXQueryExtensionsString" );
    if( dt.glXQueryExtensionsString == NULL ) {
      dt.glXQueryExtensionsString = missing_glXQueryExtensionsString;
    }
    _getProcAddress( dt.glXQueryServerString, glXQueryServerString, "glXQueryServerString" );
    if( dt.glXQueryServerString == NULL ) {
      dt.glXQueryServerString = missing_glXQueryServerString;
    }

    // GLX_VERSION_1_2

    _getProcAddress( dt.glXGetCurrentDisplay, glXGetCurrentDisplay, "glXGetCurrentDisplay" );
    if( dt.glXGetCurrentDisplay == NULL ) {
      dt.glXGetCurrentDisplay = missing_glXGetCurrentDisplay;
    }

    // GLX_VERSION_1_3

    _getProcAddress( dt.glXChooseFBConfig, glXChooseFBConfig, "glXChooseFBConfig" );
    if( dt.glXChooseFBConfig == NULL ) {
      dt.glXChooseFBConfig = missing_glXChooseFBConfig;
    }
    _getProcAddress( dt.glXCreateNewContext, glXCreateNewContext, "glXCreateNewContext" );
    if( dt.glXCreateNewContext == NULL ) {
      dt.glXCreateNewContext = missing_glXCreateNewContext;
    }
    _getProcAddress( dt.glXCreatePbuffer, glXCreatePbuffer, "glXCreatePbuffer" );
    if( dt.glXCreatePbuffer == NULL ) {
      dt.glXCreatePbuffer = missing_glXCreatePbuffer;
    }
    _getProcAddress( dt.glXCreatePixmap, glXCreatePixmap, "glXCreatePixmap" );
    if( dt.glXCreatePixmap == NULL ) {
      dt.glXCreatePixmap = missing_glXCreatePixmap;
    }
    _getProcAddress( dt.glXCreateWindow, glXCreateWindow, "glXCreateWindow" );
    if( dt.glXCreateWindow == NULL ) {
      dt.glXCreateWindow = missing_glXCreateWindow;
    }
    _getProcAddress( dt.glXDestroyPbuffer, glXDestroyPbuffer, "glXDestroyPbuffer" );
    if( dt.glXDestroyPbuffer == NULL ) {
      dt.glXDestroyPbuffer = missing_glXDestroyPbuffer;
    }
    _getProcAddress( dt.glXDestroyPixmap, glXDestroyPixmap, "glXDestroyPixmap" );
    if( dt.glXDestroyPixmap == NULL ) {
      dt.glXDestroyPixmap = missing_glXDestroyPixmap;
    }
    _getProcAddress( dt.glXDestroyWindow, glXDestroyWindow, "glXDestroyWindow" );
    if( dt.glXDestroyWindow == NULL ) {
      dt.glXDestroyWindow = missing_glXDestroyWindow;
    }
    _getProcAddress( dt.glXGetCurrentReadDrawable, glXGetCurrentReadDrawable, "glXGetCurrentReadDrawable" );
    if( dt.glXGetCurrentReadDrawable == NULL ) {
      dt.glXGetCurrentReadDrawable = missing_glXGetCurrentReadDrawable;
    }
    _getProcAddress( dt.glXGetFBConfigAttrib, glXGetFBConfigAttrib, "glXGetFBConfigAttrib" );
    if( dt.glXGetFBConfigAttrib == NULL ) {
      dt.glXGetFBConfigAttrib = missing_glXGetFBConfigAttrib;
    }
    _getProcAddress( dt.glXGetFBConfigs, glXGetFBConfigs, "glXGetFBConfigs" );
    if( dt.glXGetFBConfigs == NULL ) {
      dt.glXGetFBConfigs = missing_glXGetFBConfigs;
    }
    _getProcAddress( dt.glXGetSelectedEvent, glXGetSelectedEvent, "glXGetSelectedEvent" );
    if( dt.glXGetSelectedEvent == NULL ) {
      dt.glXGetSelectedEvent = missing_glXGetSelectedEvent;
    }
    _getProcAddress( dt.glXGetVisualFromFBConfig, glXGetVisualFromFBConfig, "glXGetVisualFromFBConfig" );
    if( dt.glXGetVisualFromFBConfig == NULL ) {
      dt.glXGetVisualFromFBConfig = missing_glXGetVisualFromFBConfig;
    }
    _getProcAddress( dt.glXMakeContextCurrent, glXMakeContextCurrent, "glXMakeContextCurrent" );
    if( dt.glXMakeContextCurrent == NULL ) {
      dt.glXMakeContextCurrent = missing_glXMakeContextCurrent;
    }
    _getProcAddress( dt.glXQueryContext, glXQueryContext, "glXQueryContext" );
    if( dt.glXQueryContext == NULL ) {
      dt.glXQueryContext = missing_glXQueryContext;
    }
    _getProcAddress( dt.glXQueryDrawable, glXQueryDrawable, "glXQueryDrawable" );
    if( dt.glXQueryDrawable == NULL ) {
      dt.glXQueryDrawable = missing_glXQueryDrawable;
    }
    _getProcAddress( dt.glXSelectEvent, glXSelectEvent, "glXSelectEvent" );
    if( dt.glXSelectEvent == NULL ) {
      dt.glXSelectEvent = missing_glXSelectEvent;
    }

    // GLX_VERSION_1_4

    _getProcAddress( dt.glXGetProcAddress, glXGetProcAddress, "glXGetProcAddress" );
    if( dt.glXGetProcAddress == NULL ) {
      dt.glXGetProcAddress = missing_glXGetProcAddress;
    }

    // GLX_AMD_gpu_association

    _getProcAddress( dt.glXBlitContextFramebufferAMD, glXBlitContextFramebufferAMD, "glXBlitContextFramebufferAMD" );
    if( dt.glXBlitContextFramebufferAMD == NULL ) {
      dt.glXBlitContextFramebufferAMD = missing_glXBlitContextFramebufferAMD;
    }
    _getProcAddress( dt.glXCreateAssociatedContextAMD, glXCreateAssociatedContextAMD, "glXCreateAssociatedContextAMD" );
    if( dt.glXCreateAssociatedContextAMD == NULL ) {
      dt.glXCreateAssociatedContextAMD = missing_glXCreateAssociatedContextAMD;
    }
    _getProcAddress( dt.glXCreateAssociatedContextAttribsAMD, glXCreateAssociatedContextAttribsAMD, "glXCreateAssociatedContextAttribsAMD" );
    if( dt.glXCreateAssociatedContextAttribsAMD == NULL ) {
      dt.glXCreateAssociatedContextAttribsAMD = missing_glXCreateAssociatedContextAttribsAMD;
    }
    _getProcAddress( dt.glXDeleteAssociatedContextAMD, glXDeleteAssociatedContextAMD, "glXDeleteAssociatedContextAMD" );
    if( dt.glXDeleteAssociatedContextAMD == NULL ) {
      dt.glXDeleteAssociatedContextAMD = missing_glXDeleteAssociatedContextAMD;
    }
    _getProcAddress( dt.glXGetContextGPUIDAMD, glXGetContextGPUIDAMD, "glXGetContextGPUIDAMD" );
    if( dt.glXGetContextGPUIDAMD == NULL ) {
      dt.glXGetContextGPUIDAMD = missing_glXGetContextGPUIDAMD;
    }
    _getProcAddress( dt.glXGetCurrentAssociatedContextAMD, glXGetCurrentAssociatedContextAMD, "glXGetCurrentAssociatedContextAMD" );
    if( dt.glXGetCurrentAssociatedContextAMD == NULL ) {
      dt.glXGetCurrentAssociatedContextAMD = missing_glXGetCurrentAssociatedContextAMD;
    }
    _getProcAddress( dt.glXGetGPUIDsAMD, glXGetGPUIDsAMD, "glXGetGPUIDsAMD" );
    if( dt.glXGetGPUIDsAMD == NULL ) {
      dt.glXGetGPUIDsAMD = missing_glXGetGPUIDsAMD;
    }
    _getProcAddress( dt.glXGetGPUInfoAMD, glXGetGPUInfoAMD, "glXGetGPUInfoAMD" );
    if( dt.glXGetGPUInfoAMD == NULL ) {
      dt.glXGetGPUInfoAMD = missing_glXGetGPUInfoAMD;
    }
    _getProcAddress( dt.glXMakeAssociatedContextCurrentAMD, glXMakeAssociatedContextCurrentAMD, "glXMakeAssociatedContextCurrentAMD" );
    if( dt.glXMakeAssociatedContextCurrentAMD == NULL ) {
      dt.glXMakeAssociatedContextCurrentAMD = missing_glXMakeAssociatedContextCurrentAMD;
    }

    // GLX_ARB_create_context

    _getProcAddress( dt.glXCreateContextAttribsARB, glXCreateContextAttribsARB, "glXCreateContextAttribsARB" );
    if( dt.glXCreateContextAttribsARB == NULL ) {
      dt.glXCreateContextAttribsARB = missing_glXCreateContextAttribsARB;
    }

    // GLX_ARB_get_proc_address

    _getProcAddress( dt.glXGetProcAddressARB, glXGetProcAddressARB, "glXGetProcAddressARB" );
    if( dt.glXGetProcAddressARB == NULL ) {
      dt.glXGetProcAddressARB = missing_glXGetProcAddressARB;
    }

    // GLX_ATI_render_texture

    _getProcAddress( dt.glXBindTexImageATI, glXBindTexImageATI, "glXBindTexImageATI" );
    if( dt.glXBindTexImageATI == NULL ) {
      dt.glXBindTexImageATI = missing_glXBindTexImageATI;
    }
    _getProcAddress( dt.glXDrawableAttribATI, glXDrawableAttribATI, "glXDrawableAttribATI" );
    if( dt.glXDrawableAttribATI == NULL ) {
      dt.glXDrawableAttribATI = missing_glXDrawableAttribATI;
    }
    _getProcAddress( dt.glXReleaseTexImageATI, glXReleaseTexImageATI, "glXReleaseTexImageATI" );
    if( dt.glXReleaseTexImageATI == NULL ) {
      dt.glXReleaseTexImageATI = missing_glXReleaseTexImageATI;
    }

    // GLX_EXT_import_context

    _getProcAddress( dt.glXFreeContextEXT, glXFreeContextEXT, "glXFreeContextEXT" );
    if( dt.glXFreeContextEXT == NULL ) {
      dt.glXFreeContextEXT = missing_glXFreeContextEXT;
    }
    _getProcAddress( dt.glXGetContextIDEXT, glXGetContextIDEXT, "glXGetContextIDEXT" );
    if( dt.glXGetContextIDEXT == NULL ) {
      dt.glXGetContextIDEXT = missing_glXGetContextIDEXT;
    }
    _getProcAddress( dt.glXImportContextEXT, glXImportContextEXT, "glXImportContextEXT" );
    if( dt.glXImportContextEXT == NULL ) {
      dt.glXImportContextEXT = missing_glXImportContextEXT;
    }
    _getProcAddress( dt.glXQueryContextInfoEXT, glXQueryContextInfoEXT, "glXQueryContextInfoEXT" );
    if( dt.glXQueryContextInfoEXT == NULL ) {
      dt.glXQueryContextInfoEXT = missing_glXQueryContextInfoEXT;
    }

    // GLX_EXT_swap_control

    _getProcAddress( dt.glXSwapIntervalEXT, glXSwapIntervalEXT, "glXSwapIntervalEXT" );
    if( dt.glXSwapIntervalEXT == NULL ) {
      dt.glXSwapIntervalEXT = missing_glXSwapIntervalEXT;
    }

    // GLX_EXT_texture_from_pixmap

    _getProcAddress( dt.glXBindTexImageEXT, glXBindTexImageEXT, "glXBindTexImageEXT" );
    if( dt.glXBindTexImageEXT == NULL ) {
      dt.glXBindTexImageEXT = missing_glXBindTexImageEXT;
    }
    _getProcAddress( dt.glXReleaseTexImageEXT, glXReleaseTexImageEXT, "glXReleaseTexImageEXT" );
    if( dt.glXReleaseTexImageEXT == NULL ) {
      dt.glXReleaseTexImageEXT = missing_glXReleaseTexImageEXT;
    }

    // GLX_MESA_agp_offset

    _getProcAddress( dt.glXGetAGPOffsetMESA, glXGetAGPOffsetMESA, "glXGetAGPOffsetMESA" );
    if( dt.glXGetAGPOffsetMESA == NULL ) {
      dt.glXGetAGPOffsetMESA = missing_glXGetAGPOffsetMESA;
    }

    // GLX_MESA_copy_sub_buffer

    _getProcAddress( dt.glXCopySubBufferMESA, glXCopySubBufferMESA, "glXCopySubBufferMESA" );
    if( dt.glXCopySubBufferMESA == NULL ) {
      dt.glXCopySubBufferMESA = missing_glXCopySubBufferMESA;
    }

    // GLX_MESA_pixmap_colormap

    _getProcAddress( dt.glXCreateGLXPixmapMESA, glXCreateGLXPixmapMESA, "glXCreateGLXPixmapMESA" );
    if( dt.glXCreateGLXPixmapMESA == NULL ) {
      dt.glXCreateGLXPixmapMESA = missing_glXCreateGLXPixmapMESA;
    }

    // GLX_MESA_release_buffers

    _getProcAddress( dt.glXReleaseBuffersMESA, glXReleaseBuffersMESA, "glXReleaseBuffersMESA" );
    if( dt.glXReleaseBuffersMESA == NULL ) {
      dt.glXReleaseBuffersMESA = missing_glXReleaseBuffersMESA;
    }

    // GLX_MESA_set_3dfx_mode

    _getProcAddress( dt.glXSet3DfxModeMESA, glXSet3DfxModeMESA, "glXSet3DfxModeMESA" );
    if( dt.glXSet3DfxModeMESA == NULL ) {
      dt.glXSet3DfxModeMESA = missing_glXSet3DfxModeMESA;
    }

    // GLX_MESA_swap_control

    _getProcAddress( dt.glXGetSwapIntervalMESA, glXGetSwapIntervalMESA, "glXGetSwapIntervalMESA" );
    if( dt.glXGetSwapIntervalMESA == NULL ) {
      dt.glXGetSwapIntervalMESA = missing_glXGetSwapIntervalMESA;
    }
    _getProcAddress( dt.glXSwapIntervalMESA, glXSwapIntervalMESA, "glXSwapIntervalMESA" );
    if( dt.glXSwapIntervalMESA == NULL ) {
      dt.glXSwapIntervalMESA = missing_glXSwapIntervalMESA;
    }

    // GLX_NV_copy_image

    _getProcAddress( dt.glXCopyImageSubDataNV, glXCopyImageSubDataNV, "glXCopyImageSubDataNV" );
    if( dt.glXCopyImageSubDataNV == NULL ) {
      dt.glXCopyImageSubDataNV = missing_glXCopyImageSubDataNV;
    }

    // GLX_NV_present_video

    _getProcAddress( dt.glXBindVideoDeviceNV, glXBindVideoDeviceNV, "glXBindVideoDeviceNV" );
    if( dt.glXBindVideoDeviceNV == NULL ) {
      dt.glXBindVideoDeviceNV = missing_glXBindVideoDeviceNV;
    }
    _getProcAddress( dt.glXEnumerateVideoDevicesNV, glXEnumerateVideoDevicesNV, "glXEnumerateVideoDevicesNV" );
    if( dt.glXEnumerateVideoDevicesNV == NULL ) {
      dt.glXEnumerateVideoDevicesNV = missing_glXEnumerateVideoDevicesNV;
    }

    // GLX_NV_swap_group

    _getProcAddress( dt.glXBindSwapBarrierNV, glXBindSwapBarrierNV, "glXBindSwapBarrierNV" );
    if( dt.glXBindSwapBarrierNV == NULL ) {
      dt.glXBindSwapBarrierNV = missing_glXBindSwapBarrierNV;
    }
    _getProcAddress( dt.glXJoinSwapGroupNV, glXJoinSwapGroupNV, "glXJoinSwapGroupNV" );
    if( dt.glXJoinSwapGroupNV == NULL ) {
      dt.glXJoinSwapGroupNV = missing_glXJoinSwapGroupNV;
    }
    _getProcAddress( dt.glXQueryFrameCountNV, glXQueryFrameCountNV, "glXQueryFrameCountNV" );
    if( dt.glXQueryFrameCountNV == NULL ) {
      dt.glXQueryFrameCountNV = missing_glXQueryFrameCountNV;
    }
    _getProcAddress( dt.glXQueryMaxSwapGroupsNV, glXQueryMaxSwapGroupsNV, "glXQueryMaxSwapGroupsNV" );
    if( dt.glXQueryMaxSwapGroupsNV == NULL ) {
      dt.glXQueryMaxSwapGroupsNV = missing_glXQueryMaxSwapGroupsNV;
    }
    _getProcAddress( dt.glXQuerySwapGroupNV, glXQuerySwapGroupNV, "glXQuerySwapGroupNV" );
    if( dt.glXQuerySwapGroupNV == NULL ) {
      dt.glXQuerySwapGroupNV = missing_glXQuerySwapGroupNV;
    }
    _getProcAddress( dt.glXResetFrameCountNV, glXResetFrameCountNV, "glXResetFrameCountNV" );
    if( dt.glXResetFrameCountNV == NULL ) {
      dt.glXResetFrameCountNV = missing_glXResetFrameCountNV;
    }

    // GLX_NV_vertex_array_range

    _getProcAddress( dt.glXAllocateMemoryNV, glXAllocateMemoryNV, "glXAllocateMemoryNV" );
    if( dt.glXAllocateMemoryNV == NULL ) {
      dt.glXAllocateMemoryNV = missing_glXAllocateMemoryNV;
    }
    _getProcAddress( dt.glXFreeMemoryNV, glXFreeMemoryNV, "glXFreeMemoryNV" );
    if( dt.glXFreeMemoryNV == NULL ) {
      dt.glXFreeMemoryNV = missing_glXFreeMemoryNV;
    }

    // GLX_NV_video_capture

    _getProcAddress( dt.glXBindVideoCaptureDeviceNV, glXBindVideoCaptureDeviceNV, "glXBindVideoCaptureDeviceNV" );
    if( dt.glXBindVideoCaptureDeviceNV == NULL ) {
      dt.glXBindVideoCaptureDeviceNV = missing_glXBindVideoCaptureDeviceNV;
    }
    _getProcAddress( dt.glXEnumerateVideoCaptureDevicesNV, glXEnumerateVideoCaptureDevicesNV, "glXEnumerateVideoCaptureDevicesNV" );
    if( dt.glXEnumerateVideoCaptureDevicesNV == NULL ) {
      dt.glXEnumerateVideoCaptureDevicesNV = missing_glXEnumerateVideoCaptureDevicesNV;
    }
    _getProcAddress( dt.glXLockVideoCaptureDeviceNV, glXLockVideoCaptureDeviceNV, "glXLockVideoCaptureDeviceNV" );
    if( dt.glXLockVideoCaptureDeviceNV == NULL ) {
      dt.glXLockVideoCaptureDeviceNV = missing_glXLockVideoCaptureDeviceNV;
    }
    _getProcAddress( dt.glXQueryVideoCaptureDeviceNV, glXQueryVideoCaptureDeviceNV, "glXQueryVideoCaptureDeviceNV" );
    if( dt.glXQueryVideoCaptureDeviceNV == NULL ) {
      dt.glXQueryVideoCaptureDeviceNV = missing_glXQueryVideoCaptureDeviceNV;
    }
    _getProcAddress( dt.glXReleaseVideoCaptureDeviceNV, glXReleaseVideoCaptureDeviceNV, "glXReleaseVideoCaptureDeviceNV" );
    if( dt.glXReleaseVideoCaptureDeviceNV == NULL ) {
      dt.glXReleaseVideoCaptureDeviceNV = missing_glXReleaseVideoCaptureDeviceNV;
    }

    // GLX_NV_video_output

    _getProcAddress( dt.glXBindVideoImageNV, glXBindVideoImageNV, "glXBindVideoImageNV" );
    if( dt.glXBindVideoImageNV == NULL ) {
      dt.glXBindVideoImageNV = missing_glXBindVideoImageNV;
    }
    _getProcAddress( dt.glXGetVideoDeviceNV, glXGetVideoDeviceNV, "glXGetVideoDeviceNV" );
    if( dt.glXGetVideoDeviceNV == NULL ) {
      dt.glXGetVideoDeviceNV = missing_glXGetVideoDeviceNV;
    }
    _getProcAddress( dt.glXGetVideoInfoNV, glXGetVideoInfoNV, "glXGetVideoInfoNV" );
    if( dt.glXGetVideoInfoNV == NULL ) {
      dt.glXGetVideoInfoNV = missing_glXGetVideoInfoNV;
    }
    _getProcAddress( dt.glXReleaseVideoDeviceNV, glXReleaseVideoDeviceNV, "glXReleaseVideoDeviceNV" );
    if( dt.glXReleaseVideoDeviceNV == NULL ) {
      dt.glXReleaseVideoDeviceNV = missing_glXReleaseVideoDeviceNV;
    }
    _getProcAddress( dt.glXReleaseVideoImageNV, glXReleaseVideoImageNV, "glXReleaseVideoImageNV" );
    if( dt.glXReleaseVideoImageNV == NULL ) {
      dt.glXReleaseVideoImageNV = missing_glXReleaseVideoImageNV;
    }
    _getProcAddress( dt.glXSendPbufferToVideoNV, glXSendPbufferToVideoNV, "glXSendPbufferToVideoNV" );
    if( dt.glXSendPbufferToVideoNV == NULL ) {
      dt.glXSendPbufferToVideoNV = missing_glXSendPbufferToVideoNV;
    }

    // GLX_OML_sync_control

    _getProcAddress( dt.glXGetMscRateOML, glXGetMscRateOML, "glXGetMscRateOML" );
    if( dt.glXGetMscRateOML == NULL ) {
      dt.glXGetMscRateOML = missing_glXGetMscRateOML;
    }
    _getProcAddress( dt.glXGetSyncValuesOML, glXGetSyncValuesOML, "glXGetSyncValuesOML" );
    if( dt.glXGetSyncValuesOML == NULL ) {
      dt.glXGetSyncValuesOML = missing_glXGetSyncValuesOML;
    }
    _getProcAddress( dt.glXSwapBuffersMscOML, glXSwapBuffersMscOML, "glXSwapBuffersMscOML" );
    if( dt.glXSwapBuffersMscOML == NULL ) {
      dt.glXSwapBuffersMscOML = missing_glXSwapBuffersMscOML;
    }
    _getProcAddress( dt.glXWaitForMscOML, glXWaitForMscOML, "glXWaitForMscOML" );
    if( dt.glXWaitForMscOML == NULL ) {
      dt.glXWaitForMscOML = missing_glXWaitForMscOML;
    }
    _getProcAddress( dt.glXWaitForSbcOML, glXWaitForSbcOML, "glXWaitForSbcOML" );
    if( dt.glXWaitForSbcOML == NULL ) {
      dt.glXWaitForSbcOML = missing_glXWaitForSbcOML;
    }

    // GLX_SGIX_fbconfig

    _getProcAddress( dt.glXChooseFBConfigSGIX, glXChooseFBConfigSGIX, "glXChooseFBConfigSGIX" );
    if( dt.glXChooseFBConfigSGIX == NULL ) {
      dt.glXChooseFBConfigSGIX = missing_glXChooseFBConfigSGIX;
    }
    _getProcAddress( dt.glXCreateContextWithConfigSGIX, glXCreateContextWithConfigSGIX, "glXCreateContextWithConfigSGIX" );
    if( dt.glXCreateContextWithConfigSGIX == NULL ) {
      dt.glXCreateContextWithConfigSGIX = missing_glXCreateContextWithConfigSGIX;
    }
    _getProcAddress( dt.glXCreateGLXPixmapWithConfigSGIX, glXCreateGLXPixmapWithConfigSGIX, "glXCreateGLXPixmapWithConfigSGIX" );
    if( dt.glXCreateGLXPixmapWithConfigSGIX == NULL ) {
      dt.glXCreateGLXPixmapWithConfigSGIX = missing_glXCreateGLXPixmapWithConfigSGIX;
    }
    _getProcAddress( dt.glXGetFBConfigAttribSGIX, glXGetFBConfigAttribSGIX, "glXGetFBConfigAttribSGIX" );
    if( dt.glXGetFBConfigAttribSGIX == NULL ) {
      dt.glXGetFBConfigAttribSGIX = missing_glXGetFBConfigAttribSGIX;
    }
    _getProcAddress( dt.glXGetFBConfigFromVisualSGIX, glXGetFBConfigFromVisualSGIX, "glXGetFBConfigFromVisualSGIX" );
    if( dt.glXGetFBConfigFromVisualSGIX == NULL ) {
      dt.glXGetFBConfigFromVisualSGIX = missing_glXGetFBConfigFromVisualSGIX;
    }
    _getProcAddress( dt.glXGetVisualFromFBConfigSGIX, glXGetVisualFromFBConfigSGIX, "glXGetVisualFromFBConfigSGIX" );
    if( dt.glXGetVisualFromFBConfigSGIX == NULL ) {
      dt.glXGetVisualFromFBConfigSGIX = missing_glXGetVisualFromFBConfigSGIX;
    }

    // GLX_SGIX_pbuffer

    _getProcAddress( dt.glXCreateGLXPbufferSGIX, glXCreateGLXPbufferSGIX, "glXCreateGLXPbufferSGIX" );
    if( dt.glXCreateGLXPbufferSGIX == NULL ) {
      dt.glXCreateGLXPbufferSGIX = missing_glXCreateGLXPbufferSGIX;
    }
    _getProcAddress( dt.glXDestroyGLXPbufferSGIX, glXDestroyGLXPbufferSGIX, "glXDestroyGLXPbufferSGIX" );
    if( dt.glXDestroyGLXPbufferSGIX == NULL ) {
      dt.glXDestroyGLXPbufferSGIX = missing_glXDestroyGLXPbufferSGIX;
    }
    _getProcAddress( dt.glXGetSelectedEventSGIX, glXGetSelectedEventSGIX, "glXGetSelectedEventSGIX" );
    if( dt.glXGetSelectedEventSGIX == NULL ) {
      dt.glXGetSelectedEventSGIX = missing_glXGetSelectedEventSGIX;
    }
    _getProcAddress( dt.glXQueryGLXPbufferSGIX, glXQueryGLXPbufferSGIX, "glXQueryGLXPbufferSGIX" );
    if( dt.glXQueryGLXPbufferSGIX == NULL ) {
      dt.glXQueryGLXPbufferSGIX = missing_glXQueryGLXPbufferSGIX;
    }
    _getProcAddress( dt.glXSelectEventSGIX, glXSelectEventSGIX, "glXSelectEventSGIX" );
    if( dt.glXSelectEventSGIX == NULL ) {
      dt.glXSelectEventSGIX = missing_glXSelectEventSGIX;
    }

    // GLX_SGIX_swap_barrier

    _getProcAddress( dt.glXBindSwapBarrierSGIX, glXBindSwapBarrierSGIX, "glXBindSwapBarrierSGIX" );
    if( dt.glXBindSwapBarrierSGIX == NULL ) {
      dt.glXBindSwapBarrierSGIX = missing_glXBindSwapBarrierSGIX;
    }
    _getProcAddress( dt.glXQueryMaxSwapBarriersSGIX, glXQueryMaxSwapBarriersSGIX, "glXQueryMaxSwapBarriersSGIX" );
    if( dt.glXQueryMaxSwapBarriersSGIX == NULL ) {
      dt.glXQueryMaxSwapBarriersSGIX = missing_glXQueryMaxSwapBarriersSGIX;
    }

    // GLX_SGIX_swap_group

    _getProcAddress( dt.glXJoinSwapGroupSGIX, glXJoinSwapGroupSGIX, "glXJoinSwapGroupSGIX" );
    if( dt.glXJoinSwapGroupSGIX == NULL ) {
      dt.glXJoinSwapGroupSGIX = missing_glXJoinSwapGroupSGIX;
    }

    // GLX_SGIX_video_resize

    _getProcAddress( dt.glXBindChannelToWindowSGIX, glXBindChannelToWindowSGIX, "glXBindChannelToWindowSGIX" );
    if( dt.glXBindChannelToWindowSGIX == NULL ) {
      dt.glXBindChannelToWindowSGIX = missing_glXBindChannelToWindowSGIX;
    }
    _getProcAddress( dt.glXChannelRectSGIX, glXChannelRectSGIX, "glXChannelRectSGIX" );
    if( dt.glXChannelRectSGIX == NULL ) {
      dt.glXChannelRectSGIX = missing_glXChannelRectSGIX;
    }
    _getProcAddress( dt.glXChannelRectSyncSGIX, glXChannelRectSyncSGIX, "glXChannelRectSyncSGIX" );
    if( dt.glXChannelRectSyncSGIX == NULL ) {
      dt.glXChannelRectSyncSGIX = missing_glXChannelRectSyncSGIX;
    }
    _getProcAddress( dt.glXQueryChannelDeltasSGIX, glXQueryChannelDeltasSGIX, "glXQueryChannelDeltasSGIX" );
    if( dt.glXQueryChannelDeltasSGIX == NULL ) {
      dt.glXQueryChannelDeltasSGIX = missing_glXQueryChannelDeltasSGIX;
    }
    _getProcAddress( dt.glXQueryChannelRectSGIX, glXQueryChannelRectSGIX, "glXQueryChannelRectSGIX" );
    if( dt.glXQueryChannelRectSGIX == NULL ) {
      dt.glXQueryChannelRectSGIX = missing_glXQueryChannelRectSGIX;
    }

    // GLX_SGI_cushion

    _getProcAddress( dt.glXCushionSGI, glXCushionSGI, "glXCushionSGI" );
    if( dt.glXCushionSGI == NULL ) {
      dt.glXCushionSGI = missing_glXCushionSGI;
    }

    // GLX_SGI_make_current_read

    _getProcAddress( dt.glXGetCurrentReadDrawableSGI, glXGetCurrentReadDrawableSGI, "glXGetCurrentReadDrawableSGI" );
    if( dt.glXGetCurrentReadDrawableSGI == NULL ) {
      dt.glXGetCurrentReadDrawableSGI = missing_glXGetCurrentReadDrawableSGI;
    }
    _getProcAddress( dt.glXMakeCurrentReadSGI, glXMakeCurrentReadSGI, "glXMakeCurrentReadSGI" );
    if( dt.glXMakeCurrentReadSGI == NULL ) {
      dt.glXMakeCurrentReadSGI = missing_glXMakeCurrentReadSGI;
    }

    // GLX_SGI_swap_control

    _getProcAddress( dt.glXSwapIntervalSGI, glXSwapIntervalSGI, "glXSwapIntervalSGI" );
    if( dt.glXSwapIntervalSGI == NULL ) {
      dt.glXSwapIntervalSGI = missing_glXSwapIntervalSGI;
    }

    // GLX_SGI_video_sync

    _getProcAddress( dt.glXGetVideoSyncSGI, glXGetVideoSyncSGI, "glXGetVideoSyncSGI" );
    if( dt.glXGetVideoSyncSGI == NULL ) {
      dt.glXGetVideoSyncSGI = missing_glXGetVideoSyncSGI;
    }
    _getProcAddress( dt.glXWaitVideoSyncSGI, glXWaitVideoSyncSGI, "glXWaitVideoSyncSGI" );
    if( dt.glXWaitVideoSyncSGI == NULL ) {
      dt.glXWaitVideoSyncSGI = missing_glXWaitVideoSyncSGI;
    }

    // GLX_SUN_get_transparent_index

    _getProcAddress( dt.glXGetTransparentIndexSUN, glXGetTransparentIndexSUN, "glXGetTransparentIndexSUN" );
    if( dt.glXGetTransparentIndexSUN == NULL ) {
      dt.glXGetTransparentIndexSUN = missing_glXGetTransparentIndexSUN;
    }

    // GLX_SUN_video_resize

    _getProcAddress( dt.glXGetVideoResizeSUN, glXGetVideoResizeSUN, "glXGetVideoResizeSUN" );
    if( dt.glXGetVideoResizeSUN == NULL ) {
      dt.glXGetVideoResizeSUN = missing_glXGetVideoResizeSUN;
    }
    _getProcAddress( dt.glXVideoResizeSUN, glXVideoResizeSUN, "glXVideoResizeSUN" );
    if( dt.glXVideoResizeSUN == NULL ) {
      dt.glXVideoResizeSUN = missing_glXVideoResizeSUN;
    }
  #endif // REGAL_SYS_GLX

  #if REGAL_SYS_OSX

    // CGL_VERSION_1_0

    _getProcAddress( dt.CGLChoosePixelFormat, CGLChoosePixelFormat, "CGLChoosePixelFormat" );
    if( dt.CGLChoosePixelFormat == NULL ) {
      dt.CGLChoosePixelFormat = missing_CGLChoosePixelFormat;
    }
    _getProcAddress( dt.CGLClearDrawable, CGLClearDrawable, "CGLClearDrawable" );
    if( dt.CGLClearDrawable == NULL ) {
      dt.CGLClearDrawable = missing_CGLClearDrawable;
    }
    _getProcAddress( dt.CGLCopyContext, CGLCopyContext, "CGLCopyContext" );
    if( dt.CGLCopyContext == NULL ) {
      dt.CGLCopyContext = missing_CGLCopyContext;
    }
    _getProcAddress( dt.CGLCreateContext, CGLCreateContext, "CGLCreateContext" );
    if( dt.CGLCreateContext == NULL ) {
      dt.CGLCreateContext = missing_CGLCreateContext;
    }
    _getProcAddress( dt.CGLDescribePixelFormat, CGLDescribePixelFormat, "CGLDescribePixelFormat" );
    if( dt.CGLDescribePixelFormat == NULL ) {
      dt.CGLDescribePixelFormat = missing_CGLDescribePixelFormat;
    }
    _getProcAddress( dt.CGLDescribeRenderer, CGLDescribeRenderer, "CGLDescribeRenderer" );
    if( dt.CGLDescribeRenderer == NULL ) {
      dt.CGLDescribeRenderer = missing_CGLDescribeRenderer;
    }
    _getProcAddress( dt.CGLDestroyContext, CGLDestroyContext, "CGLDestroyContext" );
    if( dt.CGLDestroyContext == NULL ) {
      dt.CGLDestroyContext = missing_CGLDestroyContext;
    }
    _getProcAddress( dt.CGLDestroyPixelFormat, CGLDestroyPixelFormat, "CGLDestroyPixelFormat" );
    if( dt.CGLDestroyPixelFormat == NULL ) {
      dt.CGLDestroyPixelFormat = missing_CGLDestroyPixelFormat;
    }
    _getProcAddress( dt.CGLDestroyRendererInfo, CGLDestroyRendererInfo, "CGLDestroyRendererInfo" );
    if( dt.CGLDestroyRendererInfo == NULL ) {
      dt.CGLDestroyRendererInfo = missing_CGLDestroyRendererInfo;
    }
    _getProcAddress( dt.CGLDisable, CGLDisable, "CGLDisable" );
    if( dt.CGLDisable == NULL ) {
      dt.CGLDisable = missing_CGLDisable;
    }
    _getProcAddress( dt.CGLEnable, CGLEnable, "CGLEnable" );
    if( dt.CGLEnable == NULL ) {
      dt.CGLEnable = missing_CGLEnable;
    }
    _getProcAddress( dt.CGLErrorString, CGLErrorString, "CGLErrorString" );
    if( dt.CGLErrorString == NULL ) {
      dt.CGLErrorString = missing_CGLErrorString;
    }
    _getProcAddress( dt.CGLFlushDrawable, CGLFlushDrawable, "CGLFlushDrawable" );
    if( dt.CGLFlushDrawable == NULL ) {
      dt.CGLFlushDrawable = missing_CGLFlushDrawable;
    }
    _getProcAddress( dt.CGLGetOffScreen, CGLGetOffScreen, "CGLGetOffScreen" );
    if( dt.CGLGetOffScreen == NULL ) {
      dt.CGLGetOffScreen = missing_CGLGetOffScreen;
    }
    _getProcAddress( dt.CGLGetOption, CGLGetOption, "CGLGetOption" );
    if( dt.CGLGetOption == NULL ) {
      dt.CGLGetOption = missing_CGLGetOption;
    }
    _getProcAddress( dt.CGLGetParameter, CGLGetParameter, "CGLGetParameter" );
    if( dt.CGLGetParameter == NULL ) {
      dt.CGLGetParameter = missing_CGLGetParameter;
    }
    _getProcAddress( dt.CGLGetVersion, CGLGetVersion, "CGLGetVersion" );
    if( dt.CGLGetVersion == NULL ) {
      dt.CGLGetVersion = missing_CGLGetVersion;
    }
    _getProcAddress( dt.CGLGetVirtualScreen, CGLGetVirtualScreen, "CGLGetVirtualScreen" );
    if( dt.CGLGetVirtualScreen == NULL ) {
      dt.CGLGetVirtualScreen = missing_CGLGetVirtualScreen;
    }
    _getProcAddress( dt.CGLIsEnabled, CGLIsEnabled, "CGLIsEnabled" );
    if( dt.CGLIsEnabled == NULL ) {
      dt.CGLIsEnabled = missing_CGLIsEnabled;
    }
    _getProcAddress( dt.CGLQueryRendererInfo, CGLQueryRendererInfo, "CGLQueryRendererInfo" );
    if( dt.CGLQueryRendererInfo == NULL ) {
      dt.CGLQueryRendererInfo = missing_CGLQueryRendererInfo;
    }
    _getProcAddress( dt.CGLSetFullScreen, CGLSetFullScreen, "CGLSetFullScreen" );
    if( dt.CGLSetFullScreen == NULL ) {
      dt.CGLSetFullScreen = missing_CGLSetFullScreen;
    }
    _getProcAddress( dt.CGLSetOffScreen, CGLSetOffScreen, "CGLSetOffScreen" );
    if( dt.CGLSetOffScreen == NULL ) {
      dt.CGLSetOffScreen = missing_CGLSetOffScreen;
    }
    _getProcAddress( dt.CGLSetOption, CGLSetOption, "CGLSetOption" );
    if( dt.CGLSetOption == NULL ) {
      dt.CGLSetOption = missing_CGLSetOption;
    }
    _getProcAddress( dt.CGLSetParameter, CGLSetParameter, "CGLSetParameter" );
    if( dt.CGLSetParameter == NULL ) {
      dt.CGLSetParameter = missing_CGLSetParameter;
    }
    _getProcAddress( dt.CGLSetVirtualScreen, CGLSetVirtualScreen, "CGLSetVirtualScreen" );
    if( dt.CGLSetVirtualScreen == NULL ) {
      dt.CGLSetVirtualScreen = missing_CGLSetVirtualScreen;
    }

    // CGL_VERSION_1_1

    _getProcAddress( dt.CGLCreatePBuffer, CGLCreatePBuffer, "CGLCreatePBuffer" );
    if( dt.CGLCreatePBuffer == NULL ) {
      dt.CGLCreatePBuffer = missing_CGLCreatePBuffer;
    }
    _getProcAddress( dt.CGLDescribePBuffer, CGLDescribePBuffer, "CGLDescribePBuffer" );
    if( dt.CGLDescribePBuffer == NULL ) {
      dt.CGLDescribePBuffer = missing_CGLDescribePBuffer;
    }
    _getProcAddress( dt.CGLDestroyPBuffer, CGLDestroyPBuffer, "CGLDestroyPBuffer" );
    if( dt.CGLDestroyPBuffer == NULL ) {
      dt.CGLDestroyPBuffer = missing_CGLDestroyPBuffer;
    }
    _getProcAddress( dt.CGLGetPBuffer, CGLGetPBuffer, "CGLGetPBuffer" );
    if( dt.CGLGetPBuffer == NULL ) {
      dt.CGLGetPBuffer = missing_CGLGetPBuffer;
    }
    _getProcAddress( dt.CGLSetPBuffer, CGLSetPBuffer, "CGLSetPBuffer" );
    if( dt.CGLSetPBuffer == NULL ) {
      dt.CGLSetPBuffer = missing_CGLSetPBuffer;
    }
    _getProcAddress( dt.CGLTexImagePBuffer, CGLTexImagePBuffer, "CGLTexImagePBuffer" );
    if( dt.CGLTexImagePBuffer == NULL ) {
      dt.CGLTexImagePBuffer = missing_CGLTexImagePBuffer;
    }

    // CGL_VERSION_1_2

    _getProcAddress( dt.CGLGetContextRetainCount, CGLGetContextRetainCount, "CGLGetContextRetainCount" );
    if( dt.CGLGetContextRetainCount == NULL ) {
      dt.CGLGetContextRetainCount = missing_CGLGetContextRetainCount;
    }
    _getProcAddress( dt.CGLGetGlobalOption, CGLGetGlobalOption, "CGLGetGlobalOption" );
    if( dt.CGLGetGlobalOption == NULL ) {
      dt.CGLGetGlobalOption = missing_CGLGetGlobalOption;
    }
    _getProcAddress( dt.CGLGetPBufferRetainCount, CGLGetPBufferRetainCount, "CGLGetPBufferRetainCount" );
    if( dt.CGLGetPBufferRetainCount == NULL ) {
      dt.CGLGetPBufferRetainCount = missing_CGLGetPBufferRetainCount;
    }
    _getProcAddress( dt.CGLGetPixelFormat, CGLGetPixelFormat, "CGLGetPixelFormat" );
    if( dt.CGLGetPixelFormat == NULL ) {
      dt.CGLGetPixelFormat = missing_CGLGetPixelFormat;
    }
    _getProcAddress( dt.CGLGetPixelFormatRetainCount, CGLGetPixelFormatRetainCount, "CGLGetPixelFormatRetainCount" );
    if( dt.CGLGetPixelFormatRetainCount == NULL ) {
      dt.CGLGetPixelFormatRetainCount = missing_CGLGetPixelFormatRetainCount;
    }
    _getProcAddress( dt.CGLLockContext, CGLLockContext, "CGLLockContext" );
    if( dt.CGLLockContext == NULL ) {
      dt.CGLLockContext = missing_CGLLockContext;
    }
    _getProcAddress( dt.CGLReleaseContext, CGLReleaseContext, "CGLReleaseContext" );
    if( dt.CGLReleaseContext == NULL ) {
      dt.CGLReleaseContext = missing_CGLReleaseContext;
    }
    _getProcAddress( dt.CGLReleasePBuffer, CGLReleasePBuffer, "CGLReleasePBuffer" );
    if( dt.CGLReleasePBuffer == NULL ) {
      dt.CGLReleasePBuffer = missing_CGLReleasePBuffer;
    }
    _getProcAddress( dt.CGLReleasePixelFormat, CGLReleasePixelFormat, "CGLReleasePixelFormat" );
    if( dt.CGLReleasePixelFormat == NULL ) {
      dt.CGLReleasePixelFormat = missing_CGLReleasePixelFormat;
    }
    _getProcAddress( dt.CGLRetainContext, CGLRetainContext, "CGLRetainContext" );
    if( dt.CGLRetainContext == NULL ) {
      dt.CGLRetainContext = missing_CGLRetainContext;
    }
    _getProcAddress( dt.CGLRetainPBuffer, CGLRetainPBuffer, "CGLRetainPBuffer" );
    if( dt.CGLRetainPBuffer == NULL ) {
      dt.CGLRetainPBuffer = missing_CGLRetainPBuffer;
    }
    _getProcAddress( dt.CGLRetainPixelFormat, CGLRetainPixelFormat, "CGLRetainPixelFormat" );
    if( dt.CGLRetainPixelFormat == NULL ) {
      dt.CGLRetainPixelFormat = missing_CGLRetainPixelFormat;
    }
    _getProcAddress( dt.CGLSetGlobalOption, CGLSetGlobalOption, "CGLSetGlobalOption" );
    if( dt.CGLSetGlobalOption == NULL ) {
      dt.CGLSetGlobalOption = missing_CGLSetGlobalOption;
    }
    _getProcAddress( dt.CGLUnlockContext, CGLUnlockContext, "CGLUnlockContext" );
    if( dt.CGLUnlockContext == NULL ) {
      dt.CGLUnlockContext = missing_CGLUnlockContext;
    }

    // CGL_VERSION_1_3

    _getProcAddress( dt.CGLGetCurrentContext, CGLGetCurrentContext, "CGLGetCurrentContext" );
    if( dt.CGLGetCurrentContext == NULL ) {
      dt.CGLGetCurrentContext = missing_CGLGetCurrentContext;
    }
    _getProcAddress( dt.CGLGetShareGroup, CGLGetShareGroup, "CGLGetShareGroup" );
    if( dt.CGLGetShareGroup == NULL ) {
      dt.CGLGetShareGroup = missing_CGLGetShareGroup;
    }
    _getProcAddress( dt.CGLGetSurface, CGLGetSurface, "CGLGetSurface" );
    if( dt.CGLGetSurface == NULL ) {
      dt.CGLGetSurface = missing_CGLGetSurface;
    }
    _getProcAddress( dt.CGLSetCurrentContext, CGLSetCurrentContext, "CGLSetCurrentContext" );
    if( dt.CGLSetCurrentContext == NULL ) {
      dt.CGLSetCurrentContext = missing_CGLSetCurrentContext;
    }
    _getProcAddress( dt.CGLSetSurface, CGLSetSurface, "CGLSetSurface" );
    if( dt.CGLSetSurface == NULL ) {
      dt.CGLSetSurface = missing_CGLSetSurface;
    }
    _getProcAddress( dt.CGLTexImageIOSurface2D, CGLTexImageIOSurface2D, "CGLTexImageIOSurface2D" );
    if( dt.CGLTexImageIOSurface2D == NULL ) {
      dt.CGLTexImageIOSurface2D = missing_CGLTexImageIOSurface2D;
    }
    _getProcAddress( dt.CGLUpdateContext, CGLUpdateContext, "CGLUpdateContext" );
    if( dt.CGLUpdateContext == NULL ) {
      dt.CGLUpdateContext = missing_CGLUpdateContext;
    }
  #endif // REGAL_SYS_OSX

  #if REGAL_SYS_EGL

    // EGL_ANGLE_query_surface_pointer

    _getProcAddress( dt.eglQuerySurfacePointerANGLE, eglQuerySurfacePointerANGLE, "eglQuerySurfacePointerANGLE" );
    if( dt.eglQuerySurfacePointerANGLE == NULL ) {
      dt.eglQuerySurfacePointerANGLE = missing_eglQuerySurfacePointerANGLE;
    }

    // EGL_KHR_fence_sync

    _getProcAddress( dt.eglClientWaitSyncKHR, eglClientWaitSyncKHR, "eglClientWaitSyncKHR" );
    if( dt.eglClientWaitSyncKHR == NULL ) {
      dt.eglClientWaitSyncKHR = missing_eglClientWaitSyncKHR;
    }
    _getProcAddress( dt.eglCreateSyncKHR, eglCreateSyncKHR, "eglCreateSyncKHR" );
    if( dt.eglCreateSyncKHR == NULL ) {
      dt.eglCreateSyncKHR = missing_eglCreateSyncKHR;
    }
    _getProcAddress( dt.eglDestroySyncKHR, eglDestroySyncKHR, "eglDestroySyncKHR" );
    if( dt.eglDestroySyncKHR == NULL ) {
      dt.eglDestroySyncKHR = missing_eglDestroySyncKHR;
    }
    _getProcAddress( dt.eglGetSyncAttribKHR, eglGetSyncAttribKHR, "eglGetSyncAttribKHR" );
    if( dt.eglGetSyncAttribKHR == NULL ) {
      dt.eglGetSyncAttribKHR = missing_eglGetSyncAttribKHR;
    }

    // EGL_KHR_image_base

    _getProcAddress( dt.eglCreateImageKHR, eglCreateImageKHR, "eglCreateImageKHR" );
    if( dt.eglCreateImageKHR == NULL ) {
      dt.eglCreateImageKHR = missing_eglCreateImageKHR;
    }
    _getProcAddress( dt.eglDestroyImageKHR, eglDestroyImageKHR, "eglDestroyImageKHR" );
    if( dt.eglDestroyImageKHR == NULL ) {
      dt.eglDestroyImageKHR = missing_eglDestroyImageKHR;
    }

    // EGL_KHR_lock_surface

    _getProcAddress( dt.eglLockSurfaceKHR, eglLockSurfaceKHR, "eglLockSurfaceKHR" );
    if( dt.eglLockSurfaceKHR == NULL ) {
      dt.eglLockSurfaceKHR = missing_eglLockSurfaceKHR;
    }
    _getProcAddress( dt.eglUnlockSurfaceKHR, eglUnlockSurfaceKHR, "eglUnlockSurfaceKHR" );
    if( dt.eglUnlockSurfaceKHR == NULL ) {
      dt.eglUnlockSurfaceKHR = missing_eglUnlockSurfaceKHR;
    }

    // EGL_KHR_stream_consumer_gltexture

    _getProcAddress( dt.eglStreamConsumerAcquireKHR, eglStreamConsumerAcquireKHR, "eglStreamConsumerAcquireKHR" );
    if( dt.eglStreamConsumerAcquireKHR == NULL ) {
      dt.eglStreamConsumerAcquireKHR = missing_eglStreamConsumerAcquireKHR;
    }
    _getProcAddress( dt.eglStreamConsumerGLTextureExternalKHR, eglStreamConsumerGLTextureExternalKHR, "eglStreamConsumerGLTextureExternalKHR" );
    if( dt.eglStreamConsumerGLTextureExternalKHR == NULL ) {
      dt.eglStreamConsumerGLTextureExternalKHR = missing_eglStreamConsumerGLTextureExternalKHR;
    }
    _getProcAddress( dt.eglStreamConsumerReleaseKHR, eglStreamConsumerReleaseKHR, "eglStreamConsumerReleaseKHR" );
    if( dt.eglStreamConsumerReleaseKHR == NULL ) {
      dt.eglStreamConsumerReleaseKHR = missing_eglStreamConsumerReleaseKHR;
    }

    // EGL_KHR_stream_cross_process_fd

    _getProcAddress( dt.eglCreateStreamFromFileDescriptorKHR, eglCreateStreamFromFileDescriptorKHR, "eglCreateStreamFromFileDescriptorKHR" );
    if( dt.eglCreateStreamFromFileDescriptorKHR == NULL ) {
      dt.eglCreateStreamFromFileDescriptorKHR = missing_eglCreateStreamFromFileDescriptorKHR;
    }
    _getProcAddress( dt.eglGetStreamFileDescriptorKHR, eglGetStreamFileDescriptorKHR, "eglGetStreamFileDescriptorKHR" );
    if( dt.eglGetStreamFileDescriptorKHR == NULL ) {
      dt.eglGetStreamFileDescriptorKHR = missing_eglGetStreamFileDescriptorKHR;
    }

    // EGL_KHR_stream_producer_eglsurface

    _getProcAddress( dt.eglCreateStreamProducerSurfaceKHR, eglCreateStreamProducerSurfaceKHR, "eglCreateStreamProducerSurfaceKHR" );
    if( dt.eglCreateStreamProducerSurfaceKHR == NULL ) {
      dt.eglCreateStreamProducerSurfaceKHR = missing_eglCreateStreamProducerSurfaceKHR;
    }

    // EGL_KHR_wait_sync

    _getProcAddress( dt.eglWaitSyncKHR, eglWaitSyncKHR, "eglWaitSyncKHR" );
    if( dt.eglWaitSyncKHR == NULL ) {
      dt.eglWaitSyncKHR = missing_eglWaitSyncKHR;
    }

    // EGL_MESA_drm_image

    _getProcAddress( dt.eglCreateDRMImageMESA, eglCreateDRMImageMESA, "eglCreateDRMImageMESA" );
    if( dt.eglCreateDRMImageMESA == NULL ) {
      dt.eglCreateDRMImageMESA = missing_eglCreateDRMImageMESA;
    }
    _getProcAddress( dt.eglExportDRMImageMESA, eglExportDRMImageMESA, "eglExportDRMImageMESA" );
    if( dt.eglExportDRMImageMESA == NULL ) {
      dt.eglExportDRMImageMESA = missing_eglExportDRMImageMESA;
    }

    // EGL_NV_coverage_sample

    _getProcAddress( dt.eglCoverageMaskNV, eglCoverageMaskNV, "eglCoverageMaskNV" );
    if( dt.eglCoverageMaskNV == NULL ) {
      dt.eglCoverageMaskNV = missing_eglCoverageMaskNV;
    }
    _getProcAddress( dt.eglCoverageOperationNV, eglCoverageOperationNV, "eglCoverageOperationNV" );
    if( dt.eglCoverageOperationNV == NULL ) {
      dt.eglCoverageOperationNV = missing_eglCoverageOperationNV;
    }

    // EGL_NV_post_sub_buffer

    _getProcAddress( dt.eglPostSubBufferNV, eglPostSubBufferNV, "eglPostSubBufferNV" );
    if( dt.eglPostSubBufferNV == NULL ) {
      dt.eglPostSubBufferNV = missing_eglPostSubBufferNV;
    }

    // EGL_NV_sync

    _getProcAddress( dt.eglClientWaitSyncNV, eglClientWaitSyncNV, "eglClientWaitSyncNV" );
    if( dt.eglClientWaitSyncNV == NULL ) {
      dt.eglClientWaitSyncNV = missing_eglClientWaitSyncNV;
    }
    _getProcAddress( dt.eglCreateFenceSyncNV, eglCreateFenceSyncNV, "eglCreateFenceSyncNV" );
    if( dt.eglCreateFenceSyncNV == NULL ) {
      dt.eglCreateFenceSyncNV = missing_eglCreateFenceSyncNV;
    }
    _getProcAddress( dt.eglDestroySyncNV, eglDestroySyncNV, "eglDestroySyncNV" );
    if( dt.eglDestroySyncNV == NULL ) {
      dt.eglDestroySyncNV = missing_eglDestroySyncNV;
    }
    _getProcAddress( dt.eglFenceNV, eglFenceNV, "eglFenceNV" );
    if( dt.eglFenceNV == NULL ) {
      dt.eglFenceNV = missing_eglFenceNV;
    }
    _getProcAddress( dt.eglGetSyncAttribNV, eglGetSyncAttribNV, "eglGetSyncAttribNV" );
    if( dt.eglGetSyncAttribNV == NULL ) {
      dt.eglGetSyncAttribNV = missing_eglGetSyncAttribNV;
    }
    _getProcAddress( dt.eglSignalSyncNV, eglSignalSyncNV, "eglSignalSyncNV" );
    if( dt.eglSignalSyncNV == NULL ) {
      dt.eglSignalSyncNV = missing_eglSignalSyncNV;
    }

    // EGL_NV_system_time

    _getProcAddress( dt.eglGetSystemTimeFrequencyNV, eglGetSystemTimeFrequencyNV, "eglGetSystemTimeFrequencyNV" );
    if( dt.eglGetSystemTimeFrequencyNV == NULL ) {
      dt.eglGetSystemTimeFrequencyNV = missing_eglGetSystemTimeFrequencyNV;
    }
    _getProcAddress( dt.eglGetSystemTimeNV, eglGetSystemTimeNV, "eglGetSystemTimeNV" );
    if( dt.eglGetSystemTimeNV == NULL ) {
      dt.eglGetSystemTimeNV = missing_eglGetSystemTimeNV;
    }

    // EGL_VERSION_1_0

    _getProcAddress( dt.eglChooseConfig, eglChooseConfig, "eglChooseConfig" );
    if( dt.eglChooseConfig == NULL ) {
      dt.eglChooseConfig = missing_eglChooseConfig;
    }
    _getProcAddress( dt.eglCopyBuffers, eglCopyBuffers, "eglCopyBuffers" );
    if( dt.eglCopyBuffers == NULL ) {
      dt.eglCopyBuffers = missing_eglCopyBuffers;
    }
    _getProcAddress( dt.eglCreateContext, eglCreateContext, "eglCreateContext" );
    if( dt.eglCreateContext == NULL ) {
      dt.eglCreateContext = missing_eglCreateContext;
    }
    _getProcAddress( dt.eglCreatePbufferSurface, eglCreatePbufferSurface, "eglCreatePbufferSurface" );
    if( dt.eglCreatePbufferSurface == NULL ) {
      dt.eglCreatePbufferSurface = missing_eglCreatePbufferSurface;
    }
    _getProcAddress( dt.eglCreatePixmapSurface, eglCreatePixmapSurface, "eglCreatePixmapSurface" );
    if( dt.eglCreatePixmapSurface == NULL ) {
      dt.eglCreatePixmapSurface = missing_eglCreatePixmapSurface;
    }
    _getProcAddress( dt.eglCreateWindowSurface, eglCreateWindowSurface, "eglCreateWindowSurface" );
    if( dt.eglCreateWindowSurface == NULL ) {
      dt.eglCreateWindowSurface = missing_eglCreateWindowSurface;
    }
    _getProcAddress( dt.eglDestroyContext, eglDestroyContext, "eglDestroyContext" );
    if( dt.eglDestroyContext == NULL ) {
      dt.eglDestroyContext = missing_eglDestroyContext;
    }
    _getProcAddress( dt.eglDestroySurface, eglDestroySurface, "eglDestroySurface" );
    if( dt.eglDestroySurface == NULL ) {
      dt.eglDestroySurface = missing_eglDestroySurface;
    }
    _getProcAddress( dt.eglGetConfigAttrib, eglGetConfigAttrib, "eglGetConfigAttrib" );
    if( dt.eglGetConfigAttrib == NULL ) {
      dt.eglGetConfigAttrib = missing_eglGetConfigAttrib;
    }
    _getProcAddress( dt.eglGetConfigs, eglGetConfigs, "eglGetConfigs" );
    if( dt.eglGetConfigs == NULL ) {
      dt.eglGetConfigs = missing_eglGetConfigs;
    }
    _getProcAddress( dt.eglGetCurrentContext, eglGetCurrentContext, "eglGetCurrentContext" );
    if( dt.eglGetCurrentContext == NULL ) {
      dt.eglGetCurrentContext = missing_eglGetCurrentContext;
    }
    _getProcAddress( dt.eglGetCurrentDisplay, eglGetCurrentDisplay, "eglGetCurrentDisplay" );
    if( dt.eglGetCurrentDisplay == NULL ) {
      dt.eglGetCurrentDisplay = missing_eglGetCurrentDisplay;
    }
    _getProcAddress( dt.eglGetCurrentSurface, eglGetCurrentSurface, "eglGetCurrentSurface" );
    if( dt.eglGetCurrentSurface == NULL ) {
      dt.eglGetCurrentSurface = missing_eglGetCurrentSurface;
    }
    _getProcAddress( dt.eglGetDisplay, eglGetDisplay, "eglGetDisplay" );
    if( dt.eglGetDisplay == NULL ) {
      dt.eglGetDisplay = missing_eglGetDisplay;
    }
    _getProcAddress( dt.eglGetError, eglGetError, "eglGetError" );
    if( dt.eglGetError == NULL ) {
      dt.eglGetError = missing_eglGetError;
    }
    _getProcAddress( dt.eglGetProcAddress, eglGetProcAddress, "eglGetProcAddress" );
    if( dt.eglGetProcAddress == NULL ) {
      dt.eglGetProcAddress = missing_eglGetProcAddress;
    }
    _getProcAddress( dt.eglInitialize, eglInitialize, "eglInitialize" );
    if( dt.eglInitialize == NULL ) {
      dt.eglInitialize = missing_eglInitialize;
    }
    _getProcAddress( dt.eglMakeCurrent, eglMakeCurrent, "eglMakeCurrent" );
    if( dt.eglMakeCurrent == NULL ) {
      dt.eglMakeCurrent = missing_eglMakeCurrent;
    }
    _getProcAddress( dt.eglQueryContext, eglQueryContext, "eglQueryContext" );
    if( dt.eglQueryContext == NULL ) {
      dt.eglQueryContext = missing_eglQueryContext;
    }
    _getProcAddress( dt.eglQueryString, eglQueryString, "eglQueryString" );
    if( dt.eglQueryString == NULL ) {
      dt.eglQueryString = missing_eglQueryString;
    }
    _getProcAddress( dt.eglQuerySurface, eglQuerySurface, "eglQuerySurface" );
    if( dt.eglQuerySurface == NULL ) {
      dt.eglQuerySurface = missing_eglQuerySurface;
    }
    _getProcAddress( dt.eglSwapBuffers, eglSwapBuffers, "eglSwapBuffers" );
    if( dt.eglSwapBuffers == NULL ) {
      dt.eglSwapBuffers = missing_eglSwapBuffers;
    }
    _getProcAddress( dt.eglTerminate, eglTerminate, "eglTerminate" );
    if( dt.eglTerminate == NULL ) {
      dt.eglTerminate = missing_eglTerminate;
    }
    _getProcAddress( dt.eglWaitGL, eglWaitGL, "eglWaitGL" );
    if( dt.eglWaitGL == NULL ) {
      dt.eglWaitGL = missing_eglWaitGL;
    }
    _getProcAddress( dt.eglWaitNative, eglWaitNative, "eglWaitNative" );
    if( dt.eglWaitNative == NULL ) {
      dt.eglWaitNative = missing_eglWaitNative;
    }

    // EGL_VERSION_1_1

    _getProcAddress( dt.eglBindTexImage, eglBindTexImage, "eglBindTexImage" );
    if( dt.eglBindTexImage == NULL ) {
      dt.eglBindTexImage = missing_eglBindTexImage;
    }
    _getProcAddress( dt.eglReleaseTexImage, eglReleaseTexImage, "eglReleaseTexImage" );
    if( dt.eglReleaseTexImage == NULL ) {
      dt.eglReleaseTexImage = missing_eglReleaseTexImage;
    }

    // EGL_VERSION_1_2

    _getProcAddress( dt.eglBindAPI, eglBindAPI, "eglBindAPI" );
    if( dt.eglBindAPI == NULL ) {
      dt.eglBindAPI = missing_eglBindAPI;
    }
    _getProcAddress( dt.eglCreatePbufferFromClientBuffer, eglCreatePbufferFromClientBuffer, "eglCreatePbufferFromClientBuffer" );
    if( dt.eglCreatePbufferFromClientBuffer == NULL ) {
      dt.eglCreatePbufferFromClientBuffer = missing_eglCreatePbufferFromClientBuffer;
    }
    _getProcAddress( dt.eglQueryAPI, eglQueryAPI, "eglQueryAPI" );
    if( dt.eglQueryAPI == NULL ) {
      dt.eglQueryAPI = missing_eglQueryAPI;
    }
    _getProcAddress( dt.eglReleaseThread, eglReleaseThread, "eglReleaseThread" );
    if( dt.eglReleaseThread == NULL ) {
      dt.eglReleaseThread = missing_eglReleaseThread;
    }
    _getProcAddress( dt.eglSurfaceAttrib, eglSurfaceAttrib, "eglSurfaceAttrib" );
    if( dt.eglSurfaceAttrib == NULL ) {
      dt.eglSurfaceAttrib = missing_eglSurfaceAttrib;
    }
    _getProcAddress( dt.eglSwapInterval, eglSwapInterval, "eglSwapInterval" );
    if( dt.eglSwapInterval == NULL ) {
      dt.eglSwapInterval = missing_eglSwapInterval;
    }
    _getProcAddress( dt.eglWaitClient, eglWaitClient, "eglWaitClient" );
    if( dt.eglWaitClient == NULL ) {
      dt.eglWaitClient = missing_eglWaitClient;
    }
  #endif // REGAL_SYS_EGL

}

REGAL_NAMESPACE_END

#endif
