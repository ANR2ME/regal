/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalEmuProcsFilter.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

static void REGAL_CALL emuProcInterceptFilter_glAccum(GLenum op, GLfloat value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glActiveTextureARB(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindProgramARB(GLenum target, GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBindTexture(GLenum target, GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBlendEquationEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glCallList(GLuint list)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLenum REGAL_CALL emuProcInterceptFilter_glCheckFramebufferStatusEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLenum  ret = 0;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glClientActiveTexture(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glClientActiveTextureARB(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glCompileShaderARB(GLhandleARB shaderObj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLhandleARB REGAL_CALL emuProcInterceptFilter_glCreateProgramObjectARB(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLhandleARB  ret = 0;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDeleteLists(GLuint list, GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDisableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawBuffer(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawBuffers(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEdgeFlag(GLboolean flag)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEnableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEndList(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord1d(GLdouble u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord1dv(const GLdouble *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord1f(GLfloat u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord1fv(const GLfloat *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord2d(GLdouble u, GLdouble v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord2dv(const GLdouble *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord2f(GLfloat u, GLfloat v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalCoord2fv(const GLfloat *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalPoint1(GLint i)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glEvalPoint2(GLint i, GLint j)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLuint REGAL_CALL emuProcInterceptFilter_glGenLists(GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLuint  ret = 0;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glGenProgramsARB(GLsizei n, GLuint *programs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGenSamplers(GLsizei count, GLuint *samplers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGenerateMipmap(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGenerateMipmapEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetBooleanv(GLenum pname, GLboolean *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetDoublev(GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetFloatv(GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetInteger64v(GLenum pname, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetIntegerv(GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLint REGAL_CALL emuProcInterceptFilter_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLint  ret = 0;
  return ret;
}

static GLboolean REGAL_CALL emuProcInterceptFilter_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLboolean  ret = GL_FALSE;
  return ret;
}

static GLboolean REGAL_CALL emuProcInterceptFilter_glIsFramebufferEXT(GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLboolean  ret = GL_FALSE;
  return ret;
}

static GLboolean REGAL_CALL emuProcInterceptFilter_glIsRenderbufferEXT(GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLboolean  ret = GL_FALSE;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glLineStipple(GLint factor, GLushort pattern)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glLineWidth(GLfloat width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLvoid *REGAL_CALL emuProcInterceptFilter_glMapBuffer(GLenum target, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLvoid * ret = NULL;
  return ret;
}

static GLvoid *REGAL_CALL emuProcInterceptFilter_glMapBufferARB(GLenum target, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLvoid * ret = NULL;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glNewList(GLuint list, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPixelStoref(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPixelStorei(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPixelTransferf(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPixelTransferi(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPolygonMode(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPopGroupMarkerEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2d(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2f(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2i(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2s(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos2sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3i(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRasterPos4sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glReadBuffer(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLint REGAL_CALL emuProcInterceptFilter_glRenderMode(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLint  ret = 0;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glShadeModel(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glUniform1iARB(GLint location, GLint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static GLboolean REGAL_CALL emuProcInterceptFilter_glUnmapBuffer(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLboolean  ret = GL_FALSE;
  return ret;
}

static GLboolean REGAL_CALL emuProcInterceptFilter_glUnmapBufferARB(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  GLboolean  ret = GL_FALSE;
  return ret;
}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2d(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2dv(const GLdouble *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2f(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2fv(const GLfloat *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2i(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2iv(const GLint *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2s(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos2sv(const GLshort *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3dv(const GLdouble *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3fv(const GLfloat *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3i(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3iv(const GLint *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

static void REGAL_CALL emuProcInterceptFilter_glWindowPos3sv(const GLshort *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

}

void EmuProcsInterceptFilter( Dispatch::GL & dt ) {
  dt.glAccum                                  = emuProcInterceptFilter_glAccum;
  dt.glActiveTextureARB                       = emuProcInterceptFilter_glActiveTextureARB;
  dt.glAttachObjectARB                        = emuProcInterceptFilter_glAttachObjectARB;
  dt.glBindAttribLocationARB                  = emuProcInterceptFilter_glBindAttribLocationARB;
  dt.glBindFramebuffer                        = emuProcInterceptFilter_glBindFramebuffer;
  dt.glBindFramebufferEXT                     = emuProcInterceptFilter_glBindFramebufferEXT;
  dt.glBindFramebufferOES                     = emuProcInterceptFilter_glBindFramebufferOES;
  dt.glBindProgramARB                         = emuProcInterceptFilter_glBindProgramARB;
  dt.glBindRenderbufferEXT                    = emuProcInterceptFilter_glBindRenderbufferEXT;
  dt.glBindTexture                            = emuProcInterceptFilter_glBindTexture;
  dt.glBitmap                                 = emuProcInterceptFilter_glBitmap;
  dt.glBlendColorEXT                          = emuProcInterceptFilter_glBlendColorEXT;
  dt.glBlendEquationEXT                       = emuProcInterceptFilter_glBlendEquationEXT;
  dt.glBlitFramebuffer                        = emuProcInterceptFilter_glBlitFramebuffer;
  dt.glBlitFramebufferANGLE                   = emuProcInterceptFilter_glBlitFramebufferANGLE;
  dt.glBlitFramebufferEXT                     = emuProcInterceptFilter_glBlitFramebufferEXT;
  dt.glBufferDataARB                          = emuProcInterceptFilter_glBufferDataARB;
  dt.glCallList                               = emuProcInterceptFilter_glCallList;
  dt.glCheckFramebufferStatusEXT              = emuProcInterceptFilter_glCheckFramebufferStatusEXT;
  dt.glClearAccum                             = emuProcInterceptFilter_glClearAccum;
  dt.glClientActiveTexture                    = emuProcInterceptFilter_glClientActiveTexture;
  dt.glClientActiveTextureARB                 = emuProcInterceptFilter_glClientActiveTextureARB;
  dt.glColorMaskIndexedEXT                    = emuProcInterceptFilter_glColorMaskIndexedEXT;
  dt.glCompileShaderARB                       = emuProcInterceptFilter_glCompileShaderARB;
  dt.glCopyPixels                             = emuProcInterceptFilter_glCopyPixels;
  dt.glCreateProgramObjectARB                 = emuProcInterceptFilter_glCreateProgramObjectARB;
  dt.glDeleteFramebuffersEXT                  = emuProcInterceptFilter_glDeleteFramebuffersEXT;
  dt.glDeleteLists                            = emuProcInterceptFilter_glDeleteLists;
  dt.glDeleteRenderbuffersEXT                 = emuProcInterceptFilter_glDeleteRenderbuffersEXT;
  dt.glDisableIndexedEXT                      = emuProcInterceptFilter_glDisableIndexedEXT;
  dt.glDrawBuffer                             = emuProcInterceptFilter_glDrawBuffer;
  dt.glDrawBuffers                            = emuProcInterceptFilter_glDrawBuffers;
  dt.glDrawBuffersARB                         = emuProcInterceptFilter_glDrawBuffersARB;
  dt.glDrawBuffersATI                         = emuProcInterceptFilter_glDrawBuffersATI;
  dt.glDrawPixels                             = emuProcInterceptFilter_glDrawPixels;
  dt.glDrawRangeElements                      = emuProcInterceptFilter_glDrawRangeElements;
  dt.glDrawRangeElementsBaseVertex            = emuProcInterceptFilter_glDrawRangeElementsBaseVertex;
  dt.glEdgeFlag                               = emuProcInterceptFilter_glEdgeFlag;
  dt.glEnableIndexedEXT                       = emuProcInterceptFilter_glEnableIndexedEXT;
  dt.glEndList                                = emuProcInterceptFilter_glEndList;
  dt.glEvalCoord1d                            = emuProcInterceptFilter_glEvalCoord1d;
  dt.glEvalCoord1dv                           = emuProcInterceptFilter_glEvalCoord1dv;
  dt.glEvalCoord1f                            = emuProcInterceptFilter_glEvalCoord1f;
  dt.glEvalCoord1fv                           = emuProcInterceptFilter_glEvalCoord1fv;
  dt.glEvalCoord2d                            = emuProcInterceptFilter_glEvalCoord2d;
  dt.glEvalCoord2dv                           = emuProcInterceptFilter_glEvalCoord2dv;
  dt.glEvalCoord2f                            = emuProcInterceptFilter_glEvalCoord2f;
  dt.glEvalCoord2fv                           = emuProcInterceptFilter_glEvalCoord2fv;
  dt.glEvalMesh1                              = emuProcInterceptFilter_glEvalMesh1;
  dt.glEvalMesh2                              = emuProcInterceptFilter_glEvalMesh2;
  dt.glEvalPoint1                             = emuProcInterceptFilter_glEvalPoint1;
  dt.glEvalPoint2                             = emuProcInterceptFilter_glEvalPoint2;
  dt.glFramebufferRenderbuffer                = emuProcInterceptFilter_glFramebufferRenderbuffer;
  dt.glFramebufferRenderbufferEXT             = emuProcInterceptFilter_glFramebufferRenderbufferEXT;
  dt.glFramebufferTexture1D                   = emuProcInterceptFilter_glFramebufferTexture1D;
  dt.glFramebufferTexture1DEXT                = emuProcInterceptFilter_glFramebufferTexture1DEXT;
  dt.glFramebufferTexture2D                   = emuProcInterceptFilter_glFramebufferTexture2D;
  dt.glFramebufferTexture2DEXT                = emuProcInterceptFilter_glFramebufferTexture2DEXT;
  dt.glFramebufferTexture3D                   = emuProcInterceptFilter_glFramebufferTexture3D;
  dt.glFramebufferTexture3DEXT                = emuProcInterceptFilter_glFramebufferTexture3DEXT;
  dt.glGenFramebuffersEXT                     = emuProcInterceptFilter_glGenFramebuffersEXT;
  dt.glGenLists                               = emuProcInterceptFilter_glGenLists;
  dt.glGenProgramsARB                         = emuProcInterceptFilter_glGenProgramsARB;
  dt.glGenRenderbuffersEXT                    = emuProcInterceptFilter_glGenRenderbuffersEXT;
  dt.glGenSamplers                            = emuProcInterceptFilter_glGenSamplers;
  dt.glGenerateMipmap                         = emuProcInterceptFilter_glGenerateMipmap;
  dt.glGenerateMipmapEXT                      = emuProcInterceptFilter_glGenerateMipmapEXT;
  dt.glGetBooleanIndexedvEXT                  = emuProcInterceptFilter_glGetBooleanIndexedvEXT;
  dt.glGetBooleanv                            = emuProcInterceptFilter_glGetBooleanv;
  dt.glGetDoublev                             = emuProcInterceptFilter_glGetDoublev;
  dt.glGetFloatv                              = emuProcInterceptFilter_glGetFloatv;
  dt.glGetFramebufferAttachmentParameteriv    = emuProcInterceptFilter_glGetFramebufferAttachmentParameteriv;
  dt.glGetFramebufferAttachmentParameterivEXT = emuProcInterceptFilter_glGetFramebufferAttachmentParameterivEXT;
  dt.glGetInfoLogARB                          = emuProcInterceptFilter_glGetInfoLogARB;
  dt.glGetInteger64v                          = emuProcInterceptFilter_glGetInteger64v;
  dt.glGetIntegerIndexedvEXT                  = emuProcInterceptFilter_glGetIntegerIndexedvEXT;
  dt.glGetIntegerv                            = emuProcInterceptFilter_glGetIntegerv;
  dt.glGetObjectParameterivARB                = emuProcInterceptFilter_glGetObjectParameterivARB;
  dt.glGetProgramivARB                        = emuProcInterceptFilter_glGetProgramivARB;
  dt.glGetRenderbufferParameterivEXT          = emuProcInterceptFilter_glGetRenderbufferParameterivEXT;
  dt.glGetTexImage                            = emuProcInterceptFilter_glGetTexImage;
  dt.glGetTexLevelParameterfv                 = emuProcInterceptFilter_glGetTexLevelParameterfv;
  dt.glGetTexLevelParameteriv                 = emuProcInterceptFilter_glGetTexLevelParameteriv;
  dt.glGetTexParameteriv                      = emuProcInterceptFilter_glGetTexParameteriv;
  dt.glGetUniformLocationARB                  = emuProcInterceptFilter_glGetUniformLocationARB;
  dt.glIsEnabledIndexedEXT                    = emuProcInterceptFilter_glIsEnabledIndexedEXT;
  dt.glIsFramebufferEXT                       = emuProcInterceptFilter_glIsFramebufferEXT;
  dt.glIsRenderbufferEXT                      = emuProcInterceptFilter_glIsRenderbufferEXT;
  dt.glLineStipple                            = emuProcInterceptFilter_glLineStipple;
  dt.glLineWidth                              = emuProcInterceptFilter_glLineWidth;
  dt.glMap1d                                  = emuProcInterceptFilter_glMap1d;
  dt.glMap1f                                  = emuProcInterceptFilter_glMap1f;
  dt.glMap2d                                  = emuProcInterceptFilter_glMap2d;
  dt.glMap2f                                  = emuProcInterceptFilter_glMap2f;
  dt.glMapBuffer                              = emuProcInterceptFilter_glMapBuffer;
  dt.glMapBufferARB                           = emuProcInterceptFilter_glMapBufferARB;
  dt.glMapGrid1d                              = emuProcInterceptFilter_glMapGrid1d;
  dt.glMapGrid1f                              = emuProcInterceptFilter_glMapGrid1f;
  dt.glMapGrid2d                              = emuProcInterceptFilter_glMapGrid2d;
  dt.glMapGrid2f                              = emuProcInterceptFilter_glMapGrid2f;
  dt.glNewList                                = emuProcInterceptFilter_glNewList;
  dt.glPixelStoref                            = emuProcInterceptFilter_glPixelStoref;
  dt.glPixelStorei                            = emuProcInterceptFilter_glPixelStorei;
  dt.glPixelTransferf                         = emuProcInterceptFilter_glPixelTransferf;
  dt.glPixelTransferi                         = emuProcInterceptFilter_glPixelTransferi;
  dt.glPixelZoom                              = emuProcInterceptFilter_glPixelZoom;
  dt.glPolygonMode                            = emuProcInterceptFilter_glPolygonMode;
  dt.glPopGroupMarkerEXT                      = emuProcInterceptFilter_glPopGroupMarkerEXT;
  dt.glProgramStringARB                       = emuProcInterceptFilter_glProgramStringARB;
  dt.glPushGroupMarkerEXT                     = emuProcInterceptFilter_glPushGroupMarkerEXT;
  dt.glRasterPos2d                            = emuProcInterceptFilter_glRasterPos2d;
  dt.glRasterPos2dv                           = emuProcInterceptFilter_glRasterPos2dv;
  dt.glRasterPos2f                            = emuProcInterceptFilter_glRasterPos2f;
  dt.glRasterPos2fv                           = emuProcInterceptFilter_glRasterPos2fv;
  dt.glRasterPos2i                            = emuProcInterceptFilter_glRasterPos2i;
  dt.glRasterPos2iv                           = emuProcInterceptFilter_glRasterPos2iv;
  dt.glRasterPos2s                            = emuProcInterceptFilter_glRasterPos2s;
  dt.glRasterPos2sv                           = emuProcInterceptFilter_glRasterPos2sv;
  dt.glRasterPos3d                            = emuProcInterceptFilter_glRasterPos3d;
  dt.glRasterPos3dv                           = emuProcInterceptFilter_glRasterPos3dv;
  dt.glRasterPos3f                            = emuProcInterceptFilter_glRasterPos3f;
  dt.glRasterPos3fv                           = emuProcInterceptFilter_glRasterPos3fv;
  dt.glRasterPos3i                            = emuProcInterceptFilter_glRasterPos3i;
  dt.glRasterPos3iv                           = emuProcInterceptFilter_glRasterPos3iv;
  dt.glRasterPos3s                            = emuProcInterceptFilter_glRasterPos3s;
  dt.glRasterPos3sv                           = emuProcInterceptFilter_glRasterPos3sv;
  dt.glRasterPos4d                            = emuProcInterceptFilter_glRasterPos4d;
  dt.glRasterPos4dv                           = emuProcInterceptFilter_glRasterPos4dv;
  dt.glRasterPos4f                            = emuProcInterceptFilter_glRasterPos4f;
  dt.glRasterPos4fv                           = emuProcInterceptFilter_glRasterPos4fv;
  dt.glRasterPos4i                            = emuProcInterceptFilter_glRasterPos4i;
  dt.glRasterPos4iv                           = emuProcInterceptFilter_glRasterPos4iv;
  dt.glRasterPos4s                            = emuProcInterceptFilter_glRasterPos4s;
  dt.glRasterPos4sv                           = emuProcInterceptFilter_glRasterPos4sv;
  dt.glReadBuffer                             = emuProcInterceptFilter_glReadBuffer;
  dt.glRectd                                  = emuProcInterceptFilter_glRectd;
  dt.glRectf                                  = emuProcInterceptFilter_glRectf;
  dt.glRecti                                  = emuProcInterceptFilter_glRecti;
  dt.glRects                                  = emuProcInterceptFilter_glRects;
  dt.glRenderMode                             = emuProcInterceptFilter_glRenderMode;
  dt.glRenderbufferStorageEXT                 = emuProcInterceptFilter_glRenderbufferStorageEXT;
  dt.glShadeModel                             = emuProcInterceptFilter_glShadeModel;
  dt.glTexImage1D                             = emuProcInterceptFilter_glTexImage1D;
  dt.glTexImage2D                             = emuProcInterceptFilter_glTexImage2D;
  dt.glTexImage3D                             = emuProcInterceptFilter_glTexImage3D;
  dt.glTexParameterf                          = emuProcInterceptFilter_glTexParameterf;
  dt.glTexParameterfv                         = emuProcInterceptFilter_glTexParameterfv;
  dt.glTexParameteri                          = emuProcInterceptFilter_glTexParameteri;
  dt.glTexParameteriv                         = emuProcInterceptFilter_glTexParameteriv;
  dt.glUniform1iARB                           = emuProcInterceptFilter_glUniform1iARB;
  dt.glUnmapBuffer                            = emuProcInterceptFilter_glUnmapBuffer;
  dt.glUnmapBufferARB                         = emuProcInterceptFilter_glUnmapBufferARB;
  dt.glWindowPos2d                            = emuProcInterceptFilter_glWindowPos2d;
  dt.glWindowPos2dv                           = emuProcInterceptFilter_glWindowPos2dv;
  dt.glWindowPos2f                            = emuProcInterceptFilter_glWindowPos2f;
  dt.glWindowPos2fv                           = emuProcInterceptFilter_glWindowPos2fv;
  dt.glWindowPos2i                            = emuProcInterceptFilter_glWindowPos2i;
  dt.glWindowPos2iv                           = emuProcInterceptFilter_glWindowPos2iv;
  dt.glWindowPos2s                            = emuProcInterceptFilter_glWindowPos2s;
  dt.glWindowPos2sv                           = emuProcInterceptFilter_glWindowPos2sv;
  dt.glWindowPos3d                            = emuProcInterceptFilter_glWindowPos3d;
  dt.glWindowPos3dv                           = emuProcInterceptFilter_glWindowPos3dv;
  dt.glWindowPos3f                            = emuProcInterceptFilter_glWindowPos3f;
  dt.glWindowPos3fv                           = emuProcInterceptFilter_glWindowPos3fv;
  dt.glWindowPos3i                            = emuProcInterceptFilter_glWindowPos3i;
  dt.glWindowPos3iv                           = emuProcInterceptFilter_glWindowPos3iv;
  dt.glWindowPos3s                            = emuProcInterceptFilter_glWindowPos3s;
  dt.glWindowPos3sv                           = emuProcInterceptFilter_glWindowPos3sv;
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
