#!/usr/bin/python -B

from string import Template, upper, replace

from ApiUtil import outputCode
from ApiUtil import typeIsVoid

from ApiCodeGen import *

from RegalDispatchShared import dispatchSourceTemplate
from RegalContextInfo import cond

##############################################################################################

def apiRegalFunctionTypedefs(apis, args):
  code = ''
  for api in apis:

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    categoryPrev = None

    for function in api.functions:

      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev if block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new if block.
      if category and not (category == categoryPrev):
        code += '    // %s\n\n' % category

      
      code += '%s\n' % funcProtoCode(function, version, 'REGAL_CALL', True, prefix="R", prefixDecl="Layer *_layer")
      code += 'typedef RegalProc<R%sPROC> REGAL%sPROC;\n' % ( name.upper(), name.upper() )

      categoryPrev = category

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'


  # Close pending if block.
  if categoryPrev:
    code += '\n'

  return code

def apiRegalFunctionDefines(apis, args):
  code = ''
  for api in apis:

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    categoryPrev = None

    for function in api.functions:

      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      callParams = paramsNameCode(function.parameters)
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev if block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new if block.
      if category and not (category == categoryPrev):
        code += '    // %s\n\n' % category

      cpa = "dt"
      cpb = "dt.%s.layer" % name
      if len(callParams):
        cpa += ", %s" % callParams
        cpb += ", %s" % callParams
      code += '#define R%s( %s ) dt.%s.proc( %s )\n' % ( name, cpa, name, cpb )

      categoryPrev = category

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'


  # Close pending if block.
  if categoryPrev:
    code += '\n'

  return code

def apiDispatchTableDefineCode(apis, args, apiNames, structName):

  code = ''
  code += '  struct %s {\n' % structName

  for api in apis:

    if not api.name in apiNames:
      continue

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    categoryPrev = None

    for function in api.functions:

      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev if block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new if block.
      if category and not (category == categoryPrev):
        code += '    // %s\n\n' % category

      code += '    REGAL%sPROC %s;\n' % (name.upper(), name)
      code += '    Layer * %s_layer;\n' % name
      code += '\n'

      categoryPrev = category

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'


  # Close pending if block.
  if categoryPrev:
    code += '\n'

  code += '  };\n'
  return code

dispatchHeaderTemplate = Template( '''${AUTOGENERATED}
${LICENSE}

#ifndef __${HEADER_NAME}_H__
#define __${HEADER_NAME}_H__

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include <vector>
#include <GL/Regal.h>

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

struct Layer {

  Layer( RegalContext * context ) : ctx( context ) {}
  RegalContext * GetContext() { return ctx; }
  virtual std::string GetName() = 0;
  virtual bool Initialize( const std::string & instanceInfo ) = 0;
  virtual void ResetInterception() = 0;
  private:
  RegalContext *ctx;

};

template <typename T>
struct RegalProc {
  RegalProc() : proc(NULL), layer(NULL) {}
  RegalProc( T p, Layer * l ) : proc(p), layer(l) {}
  T proc;
  Layer *layer;
};

template <typename T> RegalProc<T> MakeRegalProc( T p, Layer *l ) { return RegalProc<T>( p, l ); }

${API_REGAL_PROC_TYPEDEFS}

${API_REGAL_PROC_DEFINES}

namespace Dispatch
{
${API_GLOBAL_DISPATCH_TABLE_DEFINE}

${API_DISPATCH_TABLE_DEFINE}
}
extern Dispatch::Global dispatchGlobal;

REGAL_NAMESPACE_END

#endif // __${HEADER_NAME}_H__
''')

def generateDispatchHeader(apis, args):

  substitute = {}

  typedefs = apiRegalFunctionTypedefs( apis, args )
  defines  = apiRegalFunctionDefines( apis, args )

  substitute['LICENSE']         = args.license
  substitute['AUTOGENERATED']   = args.generated
  substitute['COPYRIGHT']       = args.copyright

  substitute['HEADER_NAME'] = 'REGAL_DISPATCH'
  substitute['API_REGAL_PROC_TYPEDEFS'] = typedefs
  substitute['API_REGAL_PROC_DEFINES'] = defines
  substitute['API_GLOBAL_DISPATCH_TABLE_DEFINE'] = apiDispatchTableDefineCode(apis,args,['wgl','glx','cgl','egl'],'Global')
  substitute['API_DISPATCH_TABLE_DEFINE']        = apiDispatchTableDefineCode(apis,args,['gl'],'GL')

  outputCode( '%s/RegalDispatch.h' % args.srcdir, dispatchHeaderTemplate.substitute(substitute))
