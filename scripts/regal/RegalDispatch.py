#!/usr/bin/python -B

from string import Template, upper, replace

from ApiUtil import outputCode
from ApiUtil import typeIsVoid

from ApiCodeGen import *

from RegalDispatchShared import dispatchSourceTemplate
from RegalContextInfo import cond

##############################################################################################

def apiRegalFunctionTypedefs(apis, args):
  code = ''
  for api in apis:

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    categoryPrev = None

    for function in api.functions:

      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev if block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new if block.
      if category and not (category == categoryPrev):
        code += '    // %s\n\n' % category

      
      code += '%s\n' % funcProtoCode(function, version, 'REGAL_CALL', True, prefix="R", prefixDecl="Layer *_layer")
      code += 'typedef RegalProc<R%sPROC> REGAL%sPROC;\n' % ( name.upper(), name.upper() )

      categoryPrev = category

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'


  # Close pending if block.
  if categoryPrev:
    code += '\n'

  return code

def apiRegalFunctionDefines(apis, args):
  code = ''
  for api in apis:

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    categoryPrev = None

    for function in api.functions:

      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      p = [ '_%s' % p.name for p in function.parameters ]
      callParams = ', '.join( p )
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev if block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new if block.
      if category and not (category == categoryPrev):
        code += '    // %s\n\n' % category

      cpa = "dt"
      cpb = "dt.%s.layer" % name
      if len(callParams):
        cpa += ", %s" % callParams
        cpb += ", %s" % callParams
      code += '#define R%s( %s ) dt.%s.proc( %s )\n' % ( name, cpa, name, cpb )

      categoryPrev = category

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'


  # Close pending if block.
  if categoryPrev:
    code += '\n'

  return code

def apiDispatchTableDefineCode(apis, args, structName):

  code = ''
  code += '  struct %s {\n' % structName

  for api in apis:

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    categoryPrev = None

    for function in api.functions:

      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev if block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new if block.
      if category and not (category == categoryPrev):
        code += '    // %s\n\n' % category

      code += '    REGAL%sPROC %s;\n' % (name.upper(), name)
      code += '\n'

      categoryPrev = category

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'


  # Close pending if block.
  if categoryPrev:
    code += '\n'

  code += '  };\n'
  return code

dispatchHeaderTemplate = Template( '''${AUTOGENERATED}
${LICENSE}

#ifndef __${HEADER_NAME}_H__
#define __${HEADER_NAME}_H__

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include <vector>
#include <GL/Regal.h>
#include "RegalDispatch.h"

${DISPATCH_INCLUDES}

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

${API_REGAL_PROC_TYPEDEFS}

${API_REGAL_PROC_DEFINES}

namespace Dispatch
{
${API_DISPATCH_TABLE_DEFINE}
}

${EXTERN_DECLS}

REGAL_NAMESPACE_END

#endif // __${HEADER_NAME}_H__
''')

def generateDispatchHeader(apis, args):

  substitute = {}

  allapis = apis

  apis = [ api for api in allapis if api.name == "gl" ]

  typedefs = apiRegalFunctionTypedefs( apis, args )
  defines  = apiRegalFunctionDefines( apis, args )

  substitute['LICENSE']         = args.license
  substitute['AUTOGENERATED']   = args.generated
  substitute['COPYRIGHT']       = args.copyright

  substitute['HEADER_NAME'] = 'REGAL_DISPATCH_GL'
  substitute['DISPATCH_INCLUDES'] = ''
  substitute['API_REGAL_PROC_TYPEDEFS'] = typedefs
  substitute['API_REGAL_PROC_DEFINES'] = defines
  substitute['API_DISPATCH_TABLE_DEFINE']        = apiDispatchTableDefineCode(apis,args,'GL')
  substitute['EXTERN_DECLS'] = ''

  outputCode( '%s/RegalDispatchGL.h' % args.srcdir, dispatchHeaderTemplate.substitute(substitute))

  substitute = {}

  apis = [ api for api in allapis if api.name != "gl" ]

  typedefs = apiRegalFunctionTypedefs( apis, args )
  defines  = apiRegalFunctionDefines( apis, args )

  inc = '''
#if REGAL_SYS_OSX
#include <GL/RegalCGL.h>
#endif
#if REGAL_SYS_EGL
#include <GL/RegalEGL.h>
#endif
#if REGAL_SYS_GLX
#include <GL/RegalGLX.h>
#endif
#if REGAL_SYS_WGL
#include <GL/RegalWGL.h>
#endif
  '''

  substitute['LICENSE']         = args.license
  substitute['AUTOGENERATED']   = args.generated
  substitute['COPYRIGHT']       = args.copyright

  substitute['HEADER_NAME'] = 'REGAL_DISPATCH_GLOBAL'
  substitute['DISPATCH_INCLUDES'] = inc
  substitute['API_REGAL_PROC_TYPEDEFS'] = typedefs
  substitute['API_REGAL_PROC_DEFINES'] = defines
  substitute['API_DISPATCH_TABLE_DEFINE'] = apiDispatchTableDefineCode(apis,args,'Global')
  substitute['EXTERN_DECLS'] = "extern Dispatch::Global dispatchGlobal;"

  outputCode( '%s/RegalDispatchGlobal.h' % args.srcdir, dispatchHeaderTemplate.substitute(substitute))
