#!/usr/bin/python -B

#
# Dispatch for generating C code, similar to
# application or driver logging.
#

from string import Template, upper, replace
from copy   import deepcopy

from ApiCodeGen   import *
from ApiUtil      import outputCode
from ApiUtil      import typeIsVoid
from ApiType      import typeStrip
from ApiRegal     import logParameter
from ApiRegal     import cCodeParameter
from ApiRegal     import helperMap

from RegalContextInfo import cond

# Code generation for dispatch table init.

def apiDispatchCodeInitCode(apis, args, dispatchName):

  code = ''
  return code

# Template for RegalDispatchCode.cpp

dispatchCodeTemplate = Template('''${AUTOGENERATED}
${LICENSE}

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_CODE

REGAL_GLOBAL_BEGIN

#include <string>

#include "RegalLog.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalContext.h"

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

#include "RegalPrint.h"

${API_FUNC_DEFINE}

void InitDispatchCode(Dispatch::GL &tbl)
{
${API_GLOBAL_DISPATCH_INIT}
}

REGAL_NAMESPACE_END

#endif
''')

# Code generation for generating C code from GL API calls

def generateDispatchCode(apis, args):

  code = ''

  funcInit   = apiDispatchCodeInitCode( apis, args, 'code' )

  # Output

  substitute = {}
  substitute['LICENSE']         = args.license
  substitute['AUTOGENERATED']   = args.generated
  substitute['COPYRIGHT']       = args.copyright
  substitute['API_FUNC_DEFINE'] = code
  substitute['API_GLOBAL_DISPATCH_INIT'] = funcInit

  outputCode( '%s/RegalDispatchCode.cpp' % args.srcdir, dispatchCodeTemplate.substitute(substitute))
