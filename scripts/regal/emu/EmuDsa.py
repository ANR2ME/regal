#!/usr/bin/python -B

dsaFormulae = {
    'options' : {
      'originate' : [
        'glActiveTexture',
        'glActiveTextureARB',
        'glBegin',
        'glBindBuffer',
        'glBindBufferARB',
        'glBindFramebuffer',
        'glBindFramebufferEXT',
        'glBindMultiTextureEXT',
        'glBindProgramARB',
        'glBindRenderbuffer',
        'glBindRenderbufferEXT',
        'glBindTexture',
        'glBindTextureEXT',
        'glBindVertexArray',
        'glBufferData',
        'glBufferSubData',
        'glCheckFramebufferStatus',
        'glCheckNamedFramebufferStatusEXT',
        'glClientActiveTexture',
        'glClientActiveTextureARB',
        'glClientAttribDefaultEXT',
        'glColorPointer',
        'glCompressedMultiTexImage1DEXT',
        'glCompressedMultiTexImage2DEXT',
        'glCompressedMultiTexImage3DEXT',
        'glCompressedMultiTexSubImage1DEXT',
        'glCompressedMultiTexSubImage2DEXT',
        'glCompressedMultiTexSubImage3DEXT',
        'glCompressedTexImage1D',
        'glCompressedTexImage2D',
        'glCompressedTexImage3D',
        'glCompressedTexSubImage1D',
        'glCompressedTexSubImage2D',
        'glCompressedTexSubImage3D',
        'glCompressedTextureImage1DEXT',
        'glCompressedTextureImage2DEXT',
        'glCompressedTextureImage3DEXT',
        'glCompressedTextureSubImage1DEXT',
        'glCompressedTextureSubImage2DEXT',
        'glCompressedTextureSubImage3DEXT',
        'glCopyBufferSubData',
        'glCopyMultiTexImage1DEXT',
        'glCopyMultiTexImage2DEXT',
        'glCopyMultiTexSubImage1DEXT',
        'glCopyMultiTexSubImage2DEXT',
        'glCopyMultiTexSubImage3DEXT',
        'glCopyTexImage1D',
        'glCopyTexImage2D',
        'glCopyTexSubImage1D',
        'glCopyTexSubImage2D',
        'glCopyTexSubImage3D',
        'glCopyTextureImage1DEXT',
        'glCopyTextureImage2DEXT',
        'glCopyTextureSubImage1DEXT',
        'glCopyTextureSubImage2DEXT',
        'glCopyTextureSubImage3DEXT',
        'glDeleteBuffers',
        'glDeleteBuffersARB',
        'glDeleteFramebuffers',
        'glDeleteFramebuffersEXT',
        'glDeleteFramebuffersOES',
        'glDeleteProgram',
        'glDeleteProgramsARB',
        'glDeleteProgramsNV',
        'glDeleteRenderbuffers',
        'glDeleteRenderbuffersEXT',
        'glDeleteRenderbuffersOES',
        'glDeleteTextures',
        'glDeleteTexturesEXT',
        'glDeleteVertexArrays',
        'glDeleteVertexArraysAPPLE',
        'glDeleteVertexArraysOES',
        'glDisable',
        'glDisableClientState',
        'glDisableClientStateIndexedEXT',
        'glDisableClientStateiEXT',
        'glDisableIndexedEXT',
        'glDisableVertexArrayAttribEXT',
        'glDisableVertexArrayEXT',
        'glDisableVertexAttribArray',
        'glDrawArrays',
        'glDrawArraysEXT',
        'glDrawArraysIndirect',
        'glDrawArraysInstanced',
        'glDrawArraysInstancedARB',
        'glDrawArraysInstancedEXT',
        'glDrawBuffer',
        'glDrawBuffers',
        'glDrawElementArrayAPPLE',
        'glDrawElementArrayATI',
        'glDrawElements',
        'glDrawElementsBaseVertex',
        'glDrawElementsIndirect',
        'glDrawElementsInstanced',
        'glDrawElementsInstancedARB',
        'glDrawElementsInstancedBaseVertex',
        'glDrawElementsInstancedEXT',
        'glEdgeFlagPointer',
        'glEnable',
        'glEnableClientState',
        'glEnableClientStateIndexedEXT',
        'glEnableClientStateiEXT',
        'glEnableIndexedEXT',
        'glEnableVertexArrayAttribEXT',
        'glEnableVertexArrayEXT',
        'glEnableVertexAttribArray',
        'glFlushMappedBufferRange',
        'glFlushMappedBufferRangeEXT',
        'glFlushMappedNamedBufferRangeEXT',
        'glFogCoordPointer',
        'glFramebufferDrawBufferEXT',
        'glFramebufferDrawBuffersEXT',
        'glFramebufferReadBufferEXT',
        'glFramebufferRenderbuffer',
        'glFramebufferRenderbufferEXT',
        'glFramebufferTexture',
        'glFramebufferTexture1D',
        'glFramebufferTexture1DEXT',
        'glFramebufferTexture2D',
        'glFramebufferTexture2DEXT',
        'glFramebufferTexture3D',
        'glFramebufferTexture3DEXT',
        'glFramebufferTextureARB',
        'glFramebufferTextureEXT',
        'glFramebufferTextureFace',
        'glFramebufferTextureFaceARB',
        'glFramebufferTextureFaceEXT',
        'glFramebufferTextureLayer',
        'glFramebufferTextureLayerARB',
        'glFramebufferTextureLayerEXT',
        'glFrustum',
        'glGenerateMipmap',
        'glGenerateMipmapEXT',
        'glGenerateMultiTexMipmapEXT',
        'glGenerateTextureMipmapEXT',
        'glGetBooleanv',
        'glGetBufferParameteriv',
        'glGetBufferPointerv',
        'glGetBufferSubData',
        'glGetCompressedMultiTexImageEXT',
        'glGetCompressedTexImage',
        'glGetCompressedTextureImageEXT',
        'glGetDoubleIndexedvEXT',
        'glGetDoublei_v',
        'glGetDoublei_vEXT',
        'glGetDoublev',
        'glGetFloatIndexedvEXT',
        'glGetFloati_v',
        'glGetFloati_vEXT',
        'glGetFloatv',
        'glGetFramebufferAttachmentParameteriv',
        'glGetFramebufferParameterivEXT',
        'glGetIntegerv',
        'glGetMultiTexEnvfvEXT',
        'glGetMultiTexEnvivEXT',
        'glGetMultiTexGendvEXT',
        'glGetMultiTexGenfvEXT',
        'glGetMultiTexGenivEXT',
        'glGetMultiTexImageEXT',
        'glGetMultiTexLevelParameterfvEXT',
        'glGetMultiTexLevelParameterivEXT',
        'glGetMultiTexParameterIivEXT',
        'glGetMultiTexParameterIuivEXT',
        'glGetMultiTexParameterfvEXT',
        'glGetMultiTexParameterivEXT',
        'glGetNamedBufferParameterivEXT',
        'glGetNamedBufferPointervEXT',
        'glGetNamedBufferSubDataEXT',
        'glGetNamedFramebufferAttachmentParameterivEXT',
        'glGetNamedProgramLocalParameterIivEXT',
        'glGetNamedProgramLocalParameterIuivEXT',
        'glGetNamedProgramLocalParameterdvEXT',
        'glGetNamedProgramLocalParameterfvEXT',
        'glGetNamedProgramStringEXT',
        'glGetNamedProgramivEXT',
        'glGetNamedRenderbufferParameterivEXT',
        'glGetPointerIndexedvEXT',
        'glGetProgramEnvParameterIivNV',
        'glGetProgramEnvParameterIuivNV',
        'glGetProgramEnvParameterdvARB',
        'glGetProgramEnvParameterfvARB',
        'glGetProgramLocalParameterIivNV',
        'glGetProgramLocalParameterIuivNV',
        'glGetProgramLocalParameterdvARB',
        'glGetProgramLocalParameterfvARB',
        'glGetProgramStringARB',
        'glGetProgramivARB',
        'glGetRenderbufferParameteriv',
        'glGetRenderbufferParameterivEXT',
        'glGetTexEnvfv',
        'glGetTexEnviv',
        'glGetTexGendv',
        'glGetTexGenfv',
        'glGetTexGeniv',
        'glGetTexImage',
        'glGetTexLevelParameterfv',
        'glGetTexLevelParameteriv',
        'glGetTexParameterIiv',
        'glGetTexParameterIuiv',
        'glGetTexParameterfv',
        'glGetTexParameteriv',
        'glGetTextureImageEXT',
        'glGetTextureLevelParameterfvEXT',
        'glGetTextureLevelParameterivEXT',
        'glGetTextureParameterIivEXT',
        'glGetTextureParameterIuivEXT',
        'glGetTextureParameterfvEXT',
        'glGetTextureParameterivEXT',
        'glIndexPointer',
        'glIsEnabled',
        'glIsEnabledIndexedEXT',
        'glLoadIdentity',
        'glLoadMatrixd',
        'glLoadMatrixf',
        'glLoadTransposeMatrixd',
        'glLoadTransposeMatrixf',
        'glMapBuffer',
        'glMapBufferARB',
        'glMapBufferRange',
        'glMapBufferRangeEXT',
        'glMapNamedBufferEXT',
        'glMapNamedBufferRangeEXT',
        'glMatrixFrustumEXT',
        'glMatrixLoadIdentityEXT',
        'glMatrixLoadTransposedEXT',
        'glMatrixLoadTransposefEXT',
        'glMatrixLoaddEXT',
        'glMatrixLoadfEXT',
        'glMatrixMode',
        'glMatrixMultTransposedEXT',
        'glMatrixMultTransposefEXT',
        'glMatrixMultdEXT',
        'glMatrixMultfEXT',
        'glMatrixOrthoEXT',
        'glMatrixPopEXT',
        'glMatrixPushEXT',
        'glMatrixRotatedEXT',
        'glMatrixRotatefEXT',
        'glMatrixScaledEXT',
        'glMatrixScalefEXT',
        'glMatrixTranslatedEXT',
        'glMatrixTranslatefEXT',
        'glMultMatrixd',
        'glMultMatrixf',
        'glMultTransposeMatrixd',
        'glMultTransposeMatrixf',
        'glMultiDrawArrays',
        'glMultiDrawArraysEXT',
        'glMultiDrawArraysIndirect',
        'glMultiDrawArraysIndirectAMD',
        'glMultiDrawElementArrayAPPLE',
        'glMultiDrawElements',
        'glMultiDrawElementsBaseVertex',
        'glMultiDrawElementsEXT',
        'glMultiDrawElementsIndirect',
        'glMultiDrawElementsIndirectAMD',
        'glMultiTexBufferEXT',
        'glMultiTexCoordPointerEXT',
        'glMultiTexEnvfEXT',
        'glMultiTexEnvfvEXT',
        'glMultiTexEnviEXT',
        'glMultiTexEnvivEXT',
        'glMultiTexGendEXT',
        'glMultiTexGendvEXT',
        'glMultiTexGenfEXT',
        'glMultiTexGenfvEXT',
        'glMultiTexGeniEXT',
        'glMultiTexGenivEXT',
        'glMultiTexImage1DEXT',
        'glMultiTexImage2DEXT',
        'glMultiTexImage3DEXT',
        'glMultiTexParameterIivEXT',
        'glMultiTexParameterIuivEXT',
        'glMultiTexParameterfEXT',
        'glMultiTexParameterfvEXT',
        'glMultiTexParameteriEXT',
        'glMultiTexParameterivEXT',
        'glMultiTexRenderbufferEXT',
        'glMultiTexSubImage1DEXT',
        'glMultiTexSubImage2DEXT',
        'glMultiTexSubImage3DEXT',
        'glNamedBufferDataEXT',
        'glNamedBufferSubDataEXT',
        'glNamedCopyBufferSubDataEXT',
        'glNamedFramebufferRenderbufferEXT',
        'glNamedFramebufferTexture1DEXT',
        'glNamedFramebufferTexture2DEXT',
        'glNamedFramebufferTexture3DEXT',
        'glNamedFramebufferTextureEXT',
        'glNamedFramebufferTextureFaceEXT',
        'glNamedFramebufferTextureLayerEXT',
        'glNamedProgramLocalParameter4dEXT',
        'glNamedProgramLocalParameter4dvEXT',
        'glNamedProgramLocalParameter4fEXT',
        'glNamedProgramLocalParameter4fvEXT',
        'glNamedProgramLocalParameterI4iEXT',
        'glNamedProgramLocalParameterI4ivEXT',
        'glNamedProgramLocalParameterI4uiEXT',
        'glNamedProgramLocalParameterI4uivEXT',
        'glNamedProgramLocalParameters4fvEXT',
        'glNamedProgramLocalParametersI4ivEXT',
        'glNamedProgramLocalParametersI4uivEXT',
        'glNamedProgramStringEXT',
        'glNamedRenderbufferStorageEXT',
        'glNamedRenderbufferStorageMultisampleCoverageEXT',
        'glNamedRenderbufferStorageMultisampleEXT',
        'glNormalPointer',
        'glOrtho',
        'glPixelStoref',
        'glPixelStorei',
        'glPopMatrix',
        'glProgramEnvParameter4dARB',
        'glProgramEnvParameter4dvARB',
        'glProgramEnvParameter4fARB',
        'glProgramEnvParameter4fvARB',
        'glProgramEnvParameterI4iNV',
        'glProgramEnvParameterI4ivNV',
        'glProgramEnvParameterI4uiNV',
        'glProgramEnvParameterI4uivNV',
        'glProgramEnvParametersI4ivNV',
        'glProgramEnvParametersI4uivNV',
        'glProgramLocalParameter4dARB',
        'glProgramLocalParameter4dvARB',
        'glProgramLocalParameter4fARB',
        'glProgramLocalParameter4fvARB',
        'glProgramLocalParameterI4iNV',
        'glProgramLocalParameterI4ivNV',
        'glProgramLocalParameterI4uiNV',
        'glProgramLocalParameterI4uivNV',
        'glProgramLocalParameters4fvEXT',
        'glProgramLocalParametersI4ivNV',
        'glProgramLocalParametersI4uivNV',
        'glProgramStringARB',
        'glPushClientAttrib',
        'glPushClientAttribDefaultEXT',
        'glPushMatrix',
        'glReadBuffer',
        'glRenderbufferStorage',
        'glRenderbufferStorageEXT',
        'glRenderbufferStorageMultisample',
        'glRenderbufferStorageMultisampleCoverageNV',
        'glRenderbufferStorageMultisampleEXT',
        'glRotated',
        'glRotatef',
        'glScaled',
        'glScalef',
        'glSecondaryColorPointer',
        'glTexBuffer',
        'glTexCoordPointer',
        'glTexEnvf',
        'glTexEnvfv',
        'glTexEnvi',
        'glTexEnviv',
        'glTexGend',
        'glTexGendv',
        'glTexGenf',
        'glTexGenfv',
        'glTexGeni',
        'glTexGeniv',
        'glTexImage1D',
        'glTexImage2D',
        'glTexImage3D',
        'glTexParameterIiv',
        'glTexParameterIuiv',
        'glTexParameterf',
        'glTexParameterfv',
        'glTexParameteri',
        'glTexParameteriv',
        'glTexRenderbufferNV',
        'glTexStorage1D',
        'glTexStorage2D',
        'glTexStorage3D',
        'glTexSubImage1D',
        'glTexSubImage2D',
        'glTexSubImage3D',
        'glTextureBufferEXT',
        'glTranslated',
        'glTranslatef',
        'glUniform1d',
        'glUniform1dv',
        'glUniform1f',
        'glUniform1fv',
        'glUniform1i',
        'glUniform1iv',
        'glUniform1ui',
        'glUniform1uiv',
        'glUniform2d',
        'glUniform2dv',
        'glUniform2f',
        'glUniform2fv',
        'glUniform2i',
        'glUniform2iv',
        'glUniform2ui',
        'glUniform2uiv',
        'glUniform3d',
        'glUniform3dv',
        'glUniform3f',
        'glUniform3fv',
        'glUniform3i',
        'glUniform3iv',
        'glUniform3ui',
        'glUniform3uiv',
        'glUniform4d',
        'glUniform4dv',
        'glUniform4f',
        'glUniform4fv',
        'glUniform4i',
        'glUniform4iv',
        'glUniform4ui',
        'glUniform4uiv',
        'glUniformMatrix2dv',
        'glUniformMatrix2fv',
        'glUniformMatrix2x3dv',
        'glUniformMatrix2x3fv',
        'glUniformMatrix2x4dv',
        'glUniformMatrix2x4fv',
        'glUniformMatrix3dv',
        'glUniformMatrix3fv',
        'glUniformMatrix3x2dv',
        'glUniformMatrix3x2fv',
        'glUniformMatrix3x4dv',
        'glUniformMatrix3x4fv',
        'glUniformMatrix4dv',
        'glUniformMatrix4fv',
        'glUniformMatrix4x2dv',
        'glUniformMatrix4x2fv',
        'glUniformMatrix4x3dv',
        'glUniformMatrix4x3fv',
        'glUnmapBuffer',
        'glUnmapBufferARB',
        'glUnmapNamedBufferEXT',
        'glUseProgram',
        'glVertexArrayColorOffsetEXT',
        'glVertexArrayEdgeFlagOffsetEXT',
        'glVertexArrayFogCoordOffsetEXT',
        'glVertexArrayIndexOffsetEXT',
        'glVertexArrayMultiTexCoordOffsetEXT',
        'glVertexArrayNormalOffsetEXT',
        'glVertexArraySecondaryColorOffsetEXT',
        'glVertexArrayTexCoordOffsetEXT',
        'glVertexArrayVertexAttribIOffsetEXT',
        'glVertexArrayVertexAttribOffsetEXT',
        'glVertexArrayVertexOffsetEXT',
        'glVertexAttribIPointer',
        'glVertexAttribPointer',
        'glVertexPointer',
      ],
    },
    'SelectorGetCommands' : {
        'entries' : [ 'glGet(Boolean|Integer|Float|Double)v' ],
        'prefix' : [ '_context->dsa->RestoreGet( _context, ${arg0} );' ],
    },
    'DsaGetCommands1' : {
        'entries' : [ 'glGet(Float|Double)(Indexed|i_)v(EXT|)' ],
        'impl' : [
            'if ( ! _context->dsa->GetIndexedv( _context, ${arg0}, ${arg1}, ${arg2} ) ) {',
            '  orig.glGet${m1}${m2}v${m3}( _context, ${arg0}, ${arg1}, ${arg2});',
            '}',
        ],
    },
    'DsaGetCommands2' : {
        'entries' : [ 'glGetPointerIndexedvEXT' ],
        'impl' : [
            '// if ( ! _context->dsa->GetIndexedv( _context, ${arg0}, ${arg1}, ${arg2} ) ) {',
            '//     orig.glGetPointerIndexedvEXT( _context, ${arg0}, ${arg1}, ${arg2});',
            '// }',
        ],
    },
    'DsaGetCommands3' : {
        'entries' : [ 'glGetFramebufferParameterivEXT' ],
        'impl' : [
            '_context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, ${arg0} );',
            'orig.glGetIntegerv( _context, ${arg1plus});',
        ],
    },
    'SelectorIsEnabled' : {
        'entries' : [ 'glIsEnabled' ],
        'prefix' : [ '_context->dsa->RestoreIsEnabled( _context, ${arg0} );']
    },
    'DsaIsEnabled' : {
        'entries' : [ 'glIsEnabled(Indexed|i)EXT' ],
        'impl' : [
            'GLboolean ret;',
            'ret = _context->dsa->IsEnabledIndexed( _context, ${arg0}, ${arg1} );',
            'return ret;',
            ],
    },
    'SelectorMatrixCommands' : {
        'entries' : [
            'gl(Load|Mult)(Transpose|)Matrix(f|d)',
            'glLoadIdentity',
            'gl(Rotate|Scale|Translate)(f|d)',
            'gl(Push|Pop)Matrix',
        ],
        'prefix' : [ '_context->dsa->RestoreMatrixMode( _context );' ],
    },
    'MatrixMode' : {
        'entries' : [ 'glMatrixMode' ],
        'impl' : [
            'if (!_context->dsa->ShadowMatrixMode(${arg0})) {',
            '  orig.glMatrixMode( _context, ${arg0});',
            '}',
        ],
    },
    'MatrixLoadMultStack' : {
        'entries' : [
            'glMatrix(Load|Mult)(Transpose|)(f|d)EXT',
        ],
        'impl' : [
            '_context->dsa->DsaMatrixMode( _context, ${arg0} );',
            'orig.gl${m1}${m2}Matrix${m3}( _context, ${arg1plus});',
        ],
    },
    'MatrixPushPopStack' : {
        'entries' : [
            'glMatrix(Push|Pop)EXT',
        ],
        'impl' : [
            '_context->dsa->DsaMatrixMode( _context, ${arg0} );',
            'orig.gl${m1}Matrix( _context );',
        ],
    },
    'MatrixTransform' : {
        'entries' : [
            'glMatrix(Ortho|Frustum)()EXT',
            'glMatrix(Rotate|Scale|Translate)(f|d)EXT',
        ],
        'impl' : [
            '_context->dsa->DsaMatrixMode( _context, ${arg0} );',
            'orig.gl${m1}${m2}( _context, ${arg1plus});',
        ],
    },

    'MatrixIdent' : {
        'entries' : [
            'glMatrixLoadIdentityEXT',
        ],
        'impl' : [
            '_context->dsa->DsaMatrixMode( _context, ${arg0} );',
            'orig.glLoadIdentity( _context );',
        ],
    },

    'ClientActiveTexture' : {
        'entries' : [ 'glClientActiveTexture(ARB|)' ],
        'impl' : [
            'if (!_context->dsa->ShadowClientActiveTexture( ${arg0} )) {',
            '  orig.glClientActiveTexture( _context, ${arg0} );',
            '}',
        ],
    },
    'ClientActiveCommands' : {
        'entries' : [
            'gl(Enable|Disable)ClientState',
            'glTexCoordPointer',
        ],
        'prefix' : [
          '_context->dsa->RestoreClientActiveTexture( _context );',
          '_context->dsa->RestoreBuffer( _context );',
        ],
    },
    'ClientIndexed' : {
        'entries' : [ 'gl(Enable|Disable)ClientState(Indexed|i)EXT' ],
        'impl' : [
            '_context->dsa->DsaClientActiveTexture( _context, ${arg1} + GL_TEXTURE0 );',
            'orig.gl${m1}ClientState( _context, ${arg0} );',
        ],
    },
    'ClientTexCoords' : {
        'entries' : [ 'glMultiTexCoordPointerEXT' ],
        'impl' : [
            '_context->dsa->DsaClientActiveTexture( _context, ${arg0} );',
            'orig.glTexCoordPointer( _context, ${arg1plus} );',
        ],
    },
    'EnableIndexed' : {
        'entries' : [ 'gl(Enable|Disable)IndexedEXT'],
        'impl' : [
            '_context->dsa->DsaActiveTexture( _context, ${arg1} + GL_TEXTURE0 );',
            'orig.gl${m1}( _context, ${arg0} );',
        ],
    },
    'ActiveTexture' : {
        'entries' : [ 'glActiveTexture(ARB|)' ],
        'impl' : [
            'if( false == _context->dsa->ShadowActiveTexture( ${arg0} ) ) {',
            '    orig.glActiveTexture( _context, ${arg0} );',
            '}',
        ],
    },
    'TexCommands' : {
        'entries' : [
            'gl(Get|)Tex(Env|Parameter)(i|iv|f|fv)',
            'gl(Get|)TexParameter(Iiv|Iuiv)'
            'gl(Copy|Compressed|Get|)Tex(Sub|)Image(1|2|3)D',
            'glTex(Buffer|Renderbuffer)(NV|)',
            'glGenerateMipmap(ARB|EXT|)',
        ],
        'prefix' : [
            '_context->dsa->RestoreTexture( _context );',
            '_context->dsa->RestoreActiveTexture( _context );',
        ],
    },
    'TexCommands2' : {
        'entries' : [ 'glTexGen(i|iv|f|fv)', ],
        'prefix' : [ '_context->dsa->RestoreActiveTexture( _context );', ],
    },
    'TexCommands3' : {
        'entries' : [ 'gl(Enable|Disable)', ], # check that it's a texture target!
        'prefix' : [ '_context->dsa->RestoreActiveTexture( _context );', ],
    },
    'MultiActiveTexCommands' : {
        'entries' : [
            'gl(Get|)MultiTex(Env|Gen|Parameter|LevelParameter)(i|iv|f|fv|d|dv)EXT',
            'gl(Get|)MultiTex(Parameter|LevelParameter)(Iiv|Iuiv)EXT',
            'gl(Copy|Compressed|)MultiTex(Image|SubImage)(1D|2D|3D)EXT',
            'gl(Get|GetCompressed)MultiTex(Image|SubImage)()EXT',
            'gl()MultiTex(Buffer|Renderbuffer)()EXT',
            'gl(Generate)MultiTex(Mipmap)()EXT',
        ],
        'subst' : {
            'nondsa' : {
                '.*Renderbuffer.*' : 'glTexRenderbufferNV',
                'glGenerate.*' : 'glGenerateMipmap',
                'default' : 'gl${m1}Tex${m2}${m3}',
            },
        },
        'impl' : [
            '_context->dsa->DsaActiveTexture( _context, ${arg0} );',
            'orig.${nondsa}( _context, ${arg1plus} );',
        ],
    },
    'BindTexture' : {
        'entries' : [ 'glBindTexture(EXT|)' ],
        'impl' : [
            'if (!_context->dsa->ShadowTexture( ${arg0}, ${arg1} )) {',
            '    orig.glBindTexture( _context, ${arg0}, ${arg1} );',
            '}',
        ],
    },
    'BindMultiTexture' : {
        'entries' : [ 'glBindMultiTextureEXT' ],
        'impl' : [
            '_context->dsa->DsaActiveTexture( _context, ${arg0} );',
            '_context->dsa->ShadowDsaTexture( ${arg1plus} );',
            'orig.glBindTexture( _context, ${arg1plus} );',
        ],
    },
    'BoundTextureCommands' : {
        'entries' : [
            'gl()Texture(Parameter)(i|iv|f|fv|Iiv|Iuiv)EXT',
            'gl(Get)Texture(Parameter|LevelParameter)(i|iv|f|fv|Iiv|Iuiv)EXT',
            'gl(Get|GetCompressed)Texture(Image)()EXT',
            'gl(Copy|Compressed|)Texture(Image|SubImage)(1D|2D|3D)EXT',
            'gl()Texture(Buffer|Renderbuffer)()EXT',
            'gl(Generate)Texture(Mipmap)()EXT',
            'gl()Texture(Storage)(1D|2D|3D)EXT',
        ],
        'subst' : {
            'nondsa' : {
                '.*Renderbuffer.*' : 'glTexRenderbufferNV',
                'glGenerate.*' : 'glGenerateMipmap',
                'default' : 'gl${m1}Tex${m2}${m3}',
            },
        },
        'impl' : [
            '_context->dsa->DsaTexture( _context, ${arg1}, ${arg0} );',
            'orig.${nondsa}( _context, ${arg1plus} );',
        ],
    },

    'UseProgram' : {
        'entries' : [ 'glUseProgram' ],
        'impl' : [
            'if( false == _context->dsa->ShadowGlslProgram( ${arg0} ) ) {',
            '  orig.glUseProgram( _context, ${arg0});',
            '}',
        ],
    },
    'SelectorProgramCommands' : {
        'entries' : [
            'glUniform(1|2|3|4)(i|f|ui|d)(v|)',
            'glUniformMatrix(2|3|4)(x2|x3|x4|)(fv|dv)',
        ],
        'prefix' : [ '_context->dsa->RestoreGlslProgram( _context );' ],
    },
    'DsaProgramCommands' : {
        'entries' : [
            'glProgramUniform()(1|2|3|4)()(i|iv|f|fv|d|dv|ui|uiv)EXT',
            'glProgramUniform(Matrix)(2|3|4)(x2|x3|x4|)(fv|dv)EXT',
        ],
        'impl' : [
            '_context->dsa->DsaGlslProgram( _context, ${arg0});',
            'orig.glUniform${m1}${m2}${m3}${m4}( _context, ${arg1plus} );',
        ],
    },

    'BindAsmProgram' : {
        'entries' : [ 'glBindProgramARB' ],
        'impl' : [
            'if (!_context->dsa->ShadowAsmProgram( ${arg0}, ${arg1} ) ) {',
            '    orig.glBindProgramARB( _context, ${arg0}, ${arg1} );',
            '}',
        ],
    },
    'AsmProgram' : {
        'entries' : [
            'gl(Get|)Program(Env|Local)Parameter(.*)(ARB|NV)',
            'gl(Get|)Program(String)(EXT)',
        ],
        'prefix' : [ '_context->dsa->RestoreAsmProgram( _context, ${arg0} );' ],
    },
    'DsaAsmProgram' : {
        'entries' : [
            'gl(Get|)NamedProgram(Env|Local)Parameter(.*)(EXT)',
            'gl(Get|)NamedProgram(String|iv)()(EXT)',
        ],
        'subst' : {
            'nondsa' : {
                '.*Parameter4[df]v?EXT' : 'gl${m1}Program${m2}Parameter${m3}ARB',
                '.*Parameter[df]vEXT' : 'gl${m1}Program${m2}Parameter${m3}ARB',
                '.*Parameter(s|)I[4uiv]+EXT' : 'gl${m1}Program${m2}Parameter${m3}NV',
                '.*Program(String|iv).*' : 'gl${m1}Program${m2}ARB',
                'default' : 'gl${m1}Program${m2}Parameter${m3}EXT',
            },
        },
        'impl' : [
            '_context->dsa->DsaAsmProgram( _context, ${arg1}, ${arg0});',
            'orig.${nondsa}( _context, ${arg1plus} );',
        ],
    },

    'BindFramebuffer' : {
        'entries' : [ 'glBindFramebuffer(EXT|)' ],
        'impl' : [
            'if (!_context->dsa->ShadowFramebuffer( ${arg0}, ${arg1} ) ) {',
            '    orig.glBindFramebuffer( _context, ${arg0}, ${arg1} );',
            '}',
        ],
    },
    'SelectorFramebufferCommands' : {
        'entries' : [
            'glFramebufferTexture(1D|2D|3D|Layer|Face|)(ARB|EXT|)',
            'glFramebufferRenderbuffer(ARB|EXT|)',
            'glDrawBuffer(s|)(ARB|EXT|NV|)'
            'glGet(FramebufferAttachment)Parameteriv(ARB|EXT|)',
        ],
        'prefix' : [ '_context->dsa->RestoreFramebuffer( _context );' ],
    },
    'SelectorFramebufferCommands2' : {
        'entries' : [
            'gl()Named(FramebufferTexture)(1D|2D|3D|Layer|Face|)EXT',
            'gl()Named(FramebufferRenderbuffer)()EXT',
            'gl(Get)Named(FramebufferAttachment)(Parameteriv)EXT',
        ],
        'subst' : {
            'nondsa' : {
                '.*CoverageEXT' : 'gl${m1}${m2}${m3}NV',
                '.*MultisampleEXT' : 'gl${m1}${m2}${m3}EXT',
                '.*FaceEXT' : 'gl${m1}${m2}${m3}ARB',
                'default' : 'gl${m1}${m2}${m3}',
            },
        },
        'impl' : [
            '_context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, ${arg0});',
            'orig.${nondsa}( _context, GL_FRAMEBUFFER, ${arg1plus} );',
        ],
    },
    'SelectorFramebufferCommands3' : {
        'entries' : [ 'glFramebuffer(DrawBuffer|ReadBuffer)(s|)EXT' ],
        'impl' : [
            '_context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, ${arg0});',
            'orig.gl${m1}${m2}( _context, ${arg1plus} );',
        ],
    },
    'SelectorFramebufferCommands4' : {
        'entries' : [ 'glCheckNamedFramebufferStatusEXT' ],
        'impl' : [
            '_context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, ${arg0});',
            'return orig.glCheckFramebufferStatus( _context, ${arg1plus} );',
        ],
    },

    'BindRenderbuffer' : {
        'entries' : [ 'glBindRenderbuffer(EXT|)' ],
        'impl' : [
            'if (!_context->dsa->ShadowRenderbuffer( ${arg0}, ${arg1} ) ) {',
            '    orig.glBindRenderbuffer( _context, ${arg0}, ${arg1} );',
            '}',
        ],
    },
    'SelectorRenderbufferCommands' : {
        'entries' : [
            'glRenderbufferStorage(Multisample|MultisampleCoverage|)(ARB|EXT|NV|)',
            'glGetRenderbufferParameteriv(ARB|EXT|)',
        ],
        'prefix' : [ '_context->dsa->RestoreRenderbuffer( _context );' ],
    },
    'SelectorRenderbufferCommands2' : {
        'entries' : [
            'gl()Named(RenderbufferStorage)(Multisample|MultisampleCoverage|)EXT',
            'gl(Get)Named(Renderbuffer)(Parameteriv)EXT',
        ],
        'subst' : {
            'nondsa' : {
                '.*CoverageEXT' : 'gl${m1}${m2}${m3}NV',
                '.*MultisampleEXT' : 'gl${m1}${m2}${m3}',
                'default' : 'gl${m1}${m2}${m3}',
            },
        },
        'impl' : [
            '_context->dsa->DsaRenderbuffer( _context, GL_RENDERBUFFER, ${arg0});',
            'orig.${nondsa}( _context, GL_RENDERBUFFER, ${arg1plus} );',
        ],
    },

    'ClientAttribDefault' : {
        'entries' : ['glClientAttribDefaultEXT'],
        'impl' : [ '_context->dsa->ClientAttribDefault( _context, ${arg0} );' ],
    },
    'PushClientAttribDefault' : {
        'entries' : ['glPushClientAttribDefaultEXT'],
        'impl' : [
            'orig.glPushClientAttrib( _context, ${arg0});',
            '_context->dsa->ClientAttribDefault(_context, ${arg0});',
        ],
    },
    'BindVertexArray' : {
        'entries' : [ 'glBindVertexArray' ],
        'impl' : [
            'if (!_context->dsa->ShadowVao( ${arg0} )) {',
            '    orig.glBindVertexArray( _context, ${arg0} );',
            '}',
        ],
    },
    # TODO - GL_ARB_base_instance ?
    'RestoreEverything' : {
        'entries' : [ 'glBegin', 'gl(Multi|)Draw(Arrays|Element|Elements)(Instanced|Indirect|BaseVertex|InstancedBaseVertex|Array|)(ARB|EXT|AMD|ATI|APPLE|)' ],
        'prefix' : [  '_context->dsa->Restore( _context );' ],
    },
    'BindBuffer' : {
        'entries' : [ 'glBindBuffer(ARB|)' ],
        'impl' : [
            'if (!_context->dsa->ShadowBuffer( ${arg0}, ${arg1} ) ) {',
            '    orig.glBindBuffer( _context, ${arg0}, ${arg1});',
            '}',
        ],
    },
    'SelectorBufferCommands' : {
        'entries' : [
            'gl(Get|Copy|)Buffer(Sub|)Data',
            'gl(FlushMapped|Map|Unmap)Buffer(Range|)(ARB|EXT|)',
            'glGetBuffer(Parameteriv|Pointerv)',
            'gl(Vertex|Normal|Color|SecondaryColor)Pointer',
        ],
        'prefix' : [ '_context->dsa->RestoreBuffer( _context );' ],
    },
    'DsaBufferCommands' : {
        'entries' : [
            'gl(Get|)Named(Copy|)Buffer(Data|SubData)EXT',
            'gl(FlushMapped)Named()Buffer(Range)EXT',
            'gl(Get)Named()Buffer(Parameteriv|Pointerv)EXT',
        ],
        'impl' : [
            '_context->dsa->DsaBuffer( _context, ${arg0});',
            'orig.gl${m1}${m2}Buffer${m3}( _context, GL_ARRAY_BUFFER, ${arg1plus} );',
        ],
    },
    'DsaBufferCommands2' : {
        'entries' : [ 'gl(Map)NamedBuffer(Range|)EXT' ],
        'impl' : [
            '_context->dsa->DsaBuffer( _context, ${arg0});',
            'return orig.gl${m1}Buffer${m2}( _context, GL_ARRAY_BUFFER, ${arg1plus} );',
        ],
    },
    'DsaBufferCommands3' : {
        'entries' : [ 'glUnmapNamedBufferEXT' ],
        'impl' : [
            '_context->dsa->DsaBuffer( _context, ${arg0});',
            'return orig.glUnmapBuffer( _context, GL_ARRAY_BUFFER );',
        ],
    },
    'DsaVertexArrayOffsetCommands3' : {
        'entries' : [ 'glVertexArray(EdgeFlag)OffsetEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );'
            '_context->dsa->DsaBuffer( _context, ${arg1} );',
            'orig.gl${m1}Pointer( _context, ${arg2}, reinterpret_cast<const GLvoid *>(${arg3}) );',
        ],
    },
    'DsaVertexArrayPointerOffsets4' : {
        'entries' : [ 'glVertexArray(Index|Normal|FogCoord)OffsetEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );'
            '_context->dsa->DsaBuffer( _context, ${arg1} );',
            'orig.gl${m1}Pointer( _context, ${arg2}, ${arg3}, reinterpret_cast<const GLvoid *>(${arg4}) );',
        ],
    },
    'DsaVertexArrayOffsetCommands5' : {
        'entries' : [ 'glVertexArray(Vertex|Color|TexCoord|SecondaryColor)OffsetEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );'
            '_context->dsa->DsaBuffer( _context, ${arg1} );',
            'orig.gl${m1}Pointer( _context, ${arg2}, ${arg3}, ${arg4}, reinterpret_cast<const GLvoid *>(${arg5}) );',
        ],
    },
    'DsaVertexArrayOffsetCommands6' : {
        'entries' : [ 'glVertexArray(VertexAttribI)OffsetEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );'
            '_context->dsa->DsaBuffer( _context, ${arg1} );',
            'orig.gl${m1}Pointer( _context, ${arg2}, ${arg3}, ${arg4}, ${arg5}, reinterpret_cast<const GLvoid *>(${arg6}) );',
        ],
    },
    'DsaVertexArrayOffsetCommands6EXT' : {
        'entries' : [ 'glVertexArray(MultiTexCoord)OffsetEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );'
            '_context->dsa->DsaBuffer( _context, ${arg1} );',
            'orig.gl${m1}PointerEXT( _context, ${arg2}, ${arg3}, ${arg4}, ${arg5}, reinterpret_cast<const GLvoid *>(${arg6}) );',
        ],
    },
    'DsaVertexArrayOffsetCommands7' : {
        'entries' : [ 'glVertexArray(VertexAttrib)OffsetEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );'
            '_context->dsa->DsaBuffer( _context, ${arg1} );',
            'orig.gl${m1}Pointer( _context, ${arg2}, ${arg3}, ${arg4}, ${arg5}, ${arg6}, reinterpret_cast<const GLvoid *>(${arg7}) );',
        ],
    },
    'Delete' : {
        'entries' : [
          'glDelete(Buffers)(ARB|)',
          'glDelete(Framebuffers)(EXT|OES|)',
          'glDelete(Renderbuffers)(EXT|OES|)',
          'glDelete(Program)',
          'glDelete(Programs)(ARB|NV)',
          'glDelete(Textures)(EXT|)',
          'glDelete(VertexArrays)(APPLE|OES|)',
        ],
        'subst' : {
            'method' : {
                '.*Program$'                 : 'GlslProgram',
                '.*Programs(ARB|NV)'         : 'AsmPrograms',
                '.*VertexArrays(APPLE|OES|)' : 'Vaos',
                'default'                    : '${m1}',
            },
        },
        'prefix' : [ '_context->dsa->Delete${method}( _context, ${arg0plus} );', ],
    },
    'VertexArrayEnable' : {
        'entries' : [ 'gl(Enable|Disable)VertexArrayEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );',
            'if ( ${arg1} >= GL_TEXTURE0 && ${arg1} <= GL_TEXTURE31) {',
            '  _context->dsa->DsaClientActiveTexture( _context, ${arg1} );',
            '  orig.gl${m1}ClientState( _context, GL_TEXTURE_COORD_ARRAY );',
            '} else {',
            '  orig.gl${m1}ClientState( _context, ${arg1} );',
            '}'
        ],
    },
    'VertexArrayAttribEnable' : {
        'entries' : [ 'gl(Enable|Disable)VertexArrayAttribEXT' ],
        'impl' : [
            '_context->dsa->DsaVao( _context, ${arg0} );',
            'orig.gl${m1}VertexAttribArray( _context, ${arg1} );'
        ],
    },
}

